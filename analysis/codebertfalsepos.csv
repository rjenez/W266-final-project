,percent,label,plagiarized,lines,filename0,filename1,source0,source1
1,99,99,0,122,A2016/Z4/Z4/student9972,A2016/Z4/Z4/student9538,"#include <stdio.h> #include<stdlib.h> #define eps 0.0001 int dalitrebaizbacit ( double x , double y , double x1 , double y1 , double x2 , double y2 ) { if ( y > y2 || y < y1 || x < x1 || x > x2 ) return 1 ; else return 0 ; } double napravibroj ( double cijelidio , double ostatak , int predznak ) { double broj = ( cijelidio + ostatak ) * predznak ; return broj ; } int losformat ( char znak ) { if ( ! ( ( znak >= 48 && znak <= 87 ) || znak == '-' || znak == '.' ) ) return 1 ; else return 0 ; } char * obuhvat ( char * tekst , double x1 , double y1 , double x2 , double y2 ) { char * s = tekst ; char * poc ; double x , y , o , ostatak ; int imadec , predznak , cijelidio ; while ( * s != '\0' ) { if ( * s == '(' && s != tekst && * ( s - 1 ) != ',' ) return 0 ; if ( * s = '(' ) { poc = s ; s ++ ; } if ( * s == '.' || * s == ',' ) return 0 ; x = 0 ; ostatak = 0 ; cijelidio = 0 ; o = 0.1 ; imadec = 0 ; predznak = 1 ; while ( * s != ',' ) { if ( losformat ( * s ) == 1 ) return 0 ; if ( * s == '-' ) { if ( * ( s - 1 ) == ',' ) return 0 ; s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( * s == ',' ) break ; if ( imadec == 0 ) { cijelidio = cijelidio * 10 + ( * s - 48 ) ; } if ( imadec == 1 ) { ostatak = ostatak + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } x = napravibroj ( cijelidio , ostatak , predznak ) ; s ++ ; if ( * s == '.' || * s == ')' ) return 0 ; y = 0 ; o = 0.1 ; cijelidio = 0 ; ostatak = 0 ; imadec = 0 ; predznak = 1 ; while ( * s != ')' ) { if ( losformat ( * s ) == 1 ) return 0 ; if ( * s == '-' ) { s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( imadec == 0 ) { cijelidio = cijelidio * 10 + ( * s - 48 ) ; } if ( imadec == 1 ) { ostatak = ostatak + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } y = napravibroj ( cijelidio , ostatak , predznak ) ; char * a = poc ; int izb = 0 ; int vr = dalitrebaizbacit ( x , y , x1 , y1 , x2 , y2 ) ; int zadnjarijec = 0 , jedinarijeczaizbacit = 0 ; if ( vr == 1 ) { izb = 1 ; if ( poc == tekst && * ( s + 1 ) == '\0' ) { jedinarijeczaizbacit = 1 ; } if ( * ( s + 1 ) == '\0' ) { zadnjarijec = 1 ; } if ( jedinarijeczaizbacit == 1 ) { * tekst = '\0' ; return tekst ; } else if ( zadnjarijec == 1 ) { * ( poc - 1 ) = '\0' ; return tekst ; } else { char * hod = s + 2 ; while ( * hod != '\0' ) { * poc = * hod ; poc ++ ; hod ++ ; } * poc = '\0' ; } } if ( izb == 1 ) { s = a ; } else if ( * ( s + 1 ) == '\0' ) s ++ ; else s += 2 ; if ( * s != '(' ) return 0 ; } if ( s != tekst ) s -- ; if ( * s != ')' ) return 0 ; return tekst ; } int main ( ) { char s [ ] = ""(0,-3.1),(-15.09,4),(2.,2),(-1.1,217)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s"" , rez , s ) ; return 0 ; }","#include <stdio.h> #include<stdlib.h> #define eps 0.0001 int dalitrebaizbacit ( double x , double y , double x1 , double y1 , double x2 , double y2 ) { if ( y > y2 || y < y1 || x < x1 || x > x2 ) return 1 ; else return 0 ; } double napravibroj ( double cijelidio , double ostatak , int predznak ) { double broj = ( cijelidio + ostatak ) * predznak ; return broj ; } int losformat ( char znak ) { if ( ! ( ( znak >= 48 && znak <= 87 ) || znak == '-' || znak == '.' ) ) return 1 ; else return 0 ; } char * obuhvat ( char * tekst , double x1 , double y1 , double x2 , double y2 ) { char * s = tekst ; char * poc ; double x , y , o , ostatak ; int imadec , predznak , cijelidio ; while ( * s != '\0' ) { if ( * s == '(' && s != tekst && * ( s - 1 ) != ',' ) return 0 ; if ( * s = '(' ) { poc = s ; s ++ ; } if ( * s == '.' || * s == ',' ) return 0 ; x = 0 ; ostatak = 0 ; cijelidio = 0 ; o = 0.1 ; imadec = 0 ; predznak = 1 ; while ( * s != ',' ) { if ( losformat ( * s ) == 1 ) return 0 ; if ( * s == '-' ) { if ( * ( s - 1 ) == ',' ) return 0 ; s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( * s == ',' ) break ; if ( imadec == 0 ) { cijelidio = cijelidio * 10 + ( * s - 48 ) ; } if ( imadec == 1 ) { ostatak = ostatak + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } x = napravibroj ( cijelidio , ostatak , predznak ) ; s ++ ; if ( * s == '.' || * s == ')' ) return 0 ; y = 0 ; o = 0.1 ; cijelidio = 0 ; ostatak = 0 ; imadec = 0 ; predznak = 1 ; while ( * s != ')' ) { if ( losformat ( * s ) == 1 ) return 0 ; if ( * s == '-' ) { s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( imadec == 0 ) { cijelidio = cijelidio * 10 + ( * s - 48 ) ; } if ( imadec == 1 ) { ostatak = ostatak + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } y = napravibroj ( cijelidio , ostatak , predznak ) ; char * a = poc ; int izb = 0 ; int vr = dalitrebaizbacit ( x , y , x1 , y1 , x2 , y2 ) ; int zadnjarijec = 0 , jedinarijeczaizbacit = 0 ; if ( vr == 1 ) { izb = 1 ; if ( poc == tekst && * ( s + 1 ) == '\0' ) { jedinarijeczaizbacit = 1 ; } if ( * ( s + 1 ) == '\0' ) { zadnjarijec = 1 ; } if ( jedinarijeczaizbacit == 1 ) { * tekst = '\0' ; return tekst ; } else if ( zadnjarijec == 1 ) { * ( poc - 1 ) = '\0' ; return tekst ; } else { char * hod = s + 2 ; while ( * hod != '\0' ) { * poc = * hod ; poc ++ ; hod ++ ; } * poc = '\0' ; } } if ( izb == 1 ) { s = a ; } else if ( * ( s + 1 ) == '\0' ) s ++ ; else s += 2 ; if ( * s != '(' ) return 0 ; } if ( s != tekst ) s -- ; if ( * s != ')' ) return 0 ; return tekst ; } int main ( ) { char s [ ] = ""(0,-3.1),(-15.09,4),(2.,2),(-1.1,217)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s"" , rez , s ) ; return 0 ; }"
2,95,95,0,68,A2016/Z2/Z2/student6617,A2016/Z2/Z2/student4824,"#include <stdio.h> #include <math.h> #define broj_el 500 #define pi 3.1415926 int main ( ) { int t , n ; double niz_stepeni [ broj_el ] , niz_minute [ broj_el ] , niz_sekunde [ broj_el ] , x [ broj_el ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n > 500 || n < 0 ) ; for ( t = 0 ; t < n ; t ++ ) { printf ( """" , t + 1 ) ; scanf ( ""%lf"" , & niz_stepeni [ t ] ) ; } for ( t = 0 ; t < n ; t ++ ) { niz_stepeni [ t ] = niz_stepeni [ t ] * ( 180 / pi ) ; if ( niz_stepeni [ t ] > 360 ) { niz_stepeni [ t ] = ( niz_stepeni [ t ] - ( ( int ) ( niz_stepeni [ t ] / 360 ) * 360 ) ) ; } niz_minute [ t ] = ( niz_stepeni [ t ] * 60 ) - ( int ) niz_stepeni [ t ] * 60 ; niz_sekunde [ t ] = ( niz_minute [ t ] * 60 - ( int ) niz_minute [ t ] * 60 ) ; niz_sekunde [ t ] = ( floor ( niz_sekunde [ t ] + 0.5 ) ) ; if ( ( niz_sekunde [ t ] > 30 && niz_sekunde [ t ] <= 59.49 ) || ( niz_sekunde [ t ] < - 30 && niz_sekunde [ t ] >= - 59.49 ) ) { x [ t ] = 0 ; } else { x [ t ] = 1 ; } if ( niz_sekunde [ t ] > 59.5 ) { niz_minute [ t ] = niz_minute [ t ] + 1 ; niz_sekunde [ t ] = 0 ; } else if ( niz_sekunde [ t ] < - 59.5 ) { niz_minute [ t ] = niz_minute [ t ] - 1 ; niz_sekunde [ t ] = 0 ; } if ( niz_minute [ t ] > 59.5 ) { niz_stepeni [ t ] = niz_stepeni [ t ] + 1 ; niz_minute [ t ] = 0 ; } else if ( niz_minute [ t ] < - 59.5 ) { niz_stepeni [ t ] = niz_stepeni [ t ] - 1 ; niz_minute [ t ] = 0 ; } } printf ( ""uglovi su:\n"" ) ; for ( t = 0 ; t < n ; t ++ ) { if ( x [ t ] == 1 ) { niz_minute [ t ] = fabs ( niz_minute [ t ] ) ; niz_sekunde [ t ] = fabs ( niz_sekunde [ t ] ) ; printf ( ""%d stepeni "" , ( int ) niz_stepeni [ t ] ) ; printf ( ""%d minuta "" , ( int ) niz_minute [ t ] ) ; printf ( ""%d sekundi"" , ( int ) niz_sekunde [ t ] ) ; printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 #define bmax 500 int main ( ) { int a , b ; double nstepeni [ bmax ] , nminuta [ bmax ] , nsekundi [ bmax ] , c [ bmax ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & b ) ; } while ( b < 0 || b > 500 ) ; for ( a = 0 ; a < b ; a ++ ) { printf ( """" , a + 1 ) ; scanf ( ""%lf"" , & nstepeni [ a ] ) ; } for ( a = 0 ; a < b ; a ++ ) { nstepeni [ a ] = nstepeni [ a ] * ( 180 / pi ) ; if ( nstepeni [ a ] > 360 ) { nstepeni [ a ] = ( nstepeni [ a ] - ( ( int ) ( nstepeni [ a ] / 360 ) * 360 ) ) ; } nminuta [ a ] = ( ( nstepeni [ a ] * 60 ) - ( int ) nstepeni [ a ] * 60 ) ; nsekundi [ a ] = ( nminuta [ a ] * 60 ) - ( int ) nminuta [ a ] * 60 ; nsekundi [ a ] = ( floor ( nsekundi [ a ] + 0.5 ) ) ; if ( ( nsekundi [ a ] > 30 && nsekundi [ a ] <= 59.49 ) || ( nsekundi [ a ] < - 30 && nsekundi [ a ] >= - 59.49 ) ) { c [ a ] = 0 ; } else { c [ a ] = 1 ; } if ( nsekundi [ a ] > 59.5 ) { nminuta [ a ] = nminuta [ a ] + 1 ; nsekundi [ a ] = 0 ; } else if ( nsekundi [ a ] < - 59.5 ) { nminuta [ a ] = nminuta [ a ] - 1 ; nsekundi [ a ] = 0 ; } if ( nminuta [ a ] > 59.5 ) { nstepeni [ a ] = nstepeni [ a ] + 1 ; nminuta [ a ] = 0 ; } else if ( nminuta [ a ] < - 59.5 ) { nstepeni [ a ] = nstepeni [ a ] - 1 ; nminuta [ a ] = 0 ; } } printf ( ""uglovi su:\n"" ) ; for ( a = 0 ; a < b ; a ++ ) { if ( c [ a ] == 1 ) { nminuta [ a ] = fabs ( nminuta [ a ] ) ; nsekundi [ a ] = fabs ( nsekundi [ a ] ) ; printf ( ""%d stepeni %d minuta %d sekundi"" , ( int ) nstepeni [ a ] , ( int ) nminuta [ a ] , ( int ) nsekundi [ a ] ) ; printf ( ""\n"" ) ; } } return 0 ; }"
18,86,86,0,150,A2016/Z1/Z1/student8774,A2016/Z1/Z1/student4628,"#include <stdio.h> int main ( ) { double z1 , z2 , z3 , p1 , p2 , p3 , pp1 , pp2 , pp3 , dp1 , dp2 , dp3 , u1 , u2 , u3 , ub1 , ub2 , ub3 , o1 , o2 , o3 ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & pp1 ) ; if ( pp1 < 0 || pp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dp1 ) ; if ( dp1 < 0 || dp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 < 0 || p1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & u1 ) ; if ( u1 < 0 || u1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & pp2 ) ; if ( pp2 < 0 || pp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dp2 ) ; if ( dp2 < 0 || dp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 < 0 || p2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & u2 ) ; if ( u2 < 0 || u2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & pp3 ) ; if ( pp3 < 0 || pp3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dp3 ) ; if ( dp3 < 0 || dp3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p3 ) ; if ( p3 < 0 || p3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & u3 ) ; if ( u3 < 0 || u3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } ub1 = p1 + pp1 + dp1 + z1 + u1 ; if ( ub1 >= 55 && ub1 < 65 ) { o1 = 6 ; } else if ( ub1 >= 65 && ub1 < 75 ) { o1 = 7 ; } else if ( ub1 >= 75 && ub1 < 85 ) { o1 = 8 ; } else if ( ub1 >= 85 && ub1 < 92 ) { o1 = 9 ; } else if ( ub1 >= 92 && ub1 <= 100 ) { o1 = 10 ; } ub2 = p2 + pp2 + dp2 + z2 + u2 ; if ( ub2 >= 55 && ub2 < 65 ) { o2 = 6 ; } else if ( ub2 >= 65 && ub2 < 75 ) { o2 = 7 ; } else if ( ub2 >= 75 && ub2 < 85 ) { o2 = 8 ; } else if ( ub2 >= 85 && ub2 < 92 ) { o2 = 9 ; } else if ( ub2 >= 92 && ub2 <= 100 ) { o2 = 10 ; } ub3 = p3 + pp3 + dp3 + z3 + u3 ; if ( ub3 >= 55 && ub3 < 65 ) { o3 = 6 ; } else if ( ub3 >= 65 && ub3 < 75 ) { o3 = 7 ; } else if ( ub3 >= 75 && ub3 < 85 ) { o3 = 8 ; } else if ( ub3 >= 85 && ub3 < 92 ) { o3 = 9 ; } else if ( ub3 >= 92 && ub3 <= 100 ) { o3 = 10 ; } if ( ub1 >= 55 && ub2 >= 55 && ub3 >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( o1 == o2 && o1 == o3 && o2 == o3 ) { printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; } else if ( o1 != o2 && o1 != o3 && o2 != o3 ) { printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } else if ( ( o1 == o2 && o1 != o3 && o2 != o3 ) || ( o1 == o3 && o1 != o2 && o3 != o2 ) || ( o2 == o3 && o2 != o1 && o3 != o1 ) ) { printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } } else if ( ( ub1 < 55 && ub2 >= 55 && ub3 >= 55 ) || ( ub1 >= 55 && ub2 < 55 && ub3 >= 55 ) || ( ub1 >= 55 && ub2 >= 55 && ub3 < 55 ) ) { printf ( ""dva studenta su polozila."" ) ; } else if ( ( ub1 >= 55 && ub2 < 55 && ub3 < 55 ) || ( ub1 < 55 && ub2 >= 55 && ub3 < 55 ) || ( ub1 < 55 && ub2 < 55 && ub3 >= 55 ) ) { printf ( ""jedan student je polozio."" ) ; } else if ( ub1 < 55 && ub2 < 55 && ub3 < 55 ) { printf ( ""nijedan student nije polozio."" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { double a1 , b1 , c1 , d1 , e1 , a2 , b2 , c2 , d2 , e2 , a3 , b3 , c3 , d3 , e3 , s1 , s2 , s3 , oc1 , oc2 , oc3 ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a1 ) ; if ( a1 < 0 || a1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c1 ) ; if ( c1 < 0 || c1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d1 ) ; if ( d1 < 0 || d1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e1 ) ; if ( e1 < 0 || e1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a2 ) ; if ( a2 < 0 || a2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c2 ) ; if ( c2 < 0 || c2 > 10 ) { printf ( ""neispravan broj brodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d2 ) ; if ( d2 < 0 || d2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e2 ) ; if ( e2 < 0 || e2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a3 ) ; if ( a3 < 0 || a3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c3 ) ; if ( c3 < 0 || c3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d3 ) ; if ( d3 < 0 || d3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e3 ) ; if ( e3 < 0 || e3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } s1 = a1 + b1 + c1 + d1 + e1 ; s2 = a2 + b2 + c2 + d2 + e2 ; s3 = a3 + b3 + c3 + d3 + e3 ; if ( s1 < 55 ) oc1 = 5 ; else if ( s1 >= 55 && s1 < 65 ) oc1 = 6 ; else if ( s1 >= 65 && s1 < 75 ) oc1 = 7 ; else if ( s1 >= 75 && s1 < 85 ) oc1 = 8 ; else if ( s1 >= 85 && s1 < 92 ) oc1 = 9 ; else if ( s1 >= 92 && s1 <= 100 ) oc1 = 10 ; if ( s2 < 55 ) oc2 = 5 ; if ( s2 >= 55 && s2 < 65 ) oc2 = 6 ; else if ( s2 >= 65 && s2 < 75 ) oc2 = 7 ; else if ( s2 >= 75 && s2 < 85 ) oc2 = 8 ; else if ( s2 >= 85 && s2 < 92 ) oc2 = 9 ; else if ( s2 >= 92 && s2 >= 100 ) oc2 = 10 ; if ( s3 < 55 ) oc3 = 5 ; else if ( s3 >= 55 && s3 < 65 ) oc3 = 6 ; else if ( s3 >= 65 && s3 < 75 ) oc3 = 7 ; else if ( s3 >= 75 && s3 < 85 ) oc3 = 8 ; else if ( s3 >= 85 && s3 < 92 ) oc3 = 9 ; else if ( s3 >= 92 && s3 <= 100 ) oc3 = 10 ; if ( s1 >= 55 && s2 >= 55 && s3 >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ( oc1 == oc2 ) && ( oc2 == oc3 ) ) { printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; } else if ( ( oc1 == oc2 ) || ( oc2 == oc3 ) && ( oc1 == oc3 ) ) { printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } else { printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } } else if ( ( s1 >= 55 && s2 < 55 && s3 < 55 ) || ( s1 < 55 && s2 >= 55 && s3 < 55 ) || ( s1 < 55 && s2 < 55 && s3 >= 55 ) ) { printf ( ""jedan student je polozio."" ) ; } else if ( ( s1 >= 55 && s2 >= 55 && s3 < 55 ) || ( s1 < 55 && s2 >= 55 && s3 >= 55 ) || ( s1 >= 55 && s2 < 55 && s3 >= 55 ) ) { printf ( ""dva studenta su polozila."" ) ; } else { printf ( ""nijedan student nije polozio."" ) ; } return 0 ; }"
25,54,54,0,26,A2016/Z1/Z4/student5611,A2016/Z1/Z4/student2967,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } } } } } for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= ( n - 1 ) * 4 ; j ++ ) { if ( n == j + i - ( n - 2 ) || n == j - i - ( n - 2 ) || ( ( i + j ) % 2 == 0 && n == ( i + j ) / 2 - ( n - 2 ) ) || j == i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } } } } } } if ( n == 1 ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""*"" ) ; } } } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= ( n - 1 ) * 4 ; j ++ ) { if ( i == j || n == i + j - ( n - 2 ) || n == j - i - ( n - 2 ) || ( n == ( i + j ) / 2 - ( n - 2 ) && ( i + j ) % 2 == 0 ) ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }"
37,96,96,0,25,A2016/Z1/Z4/student2900,A2016/Z1/Z4/student4036,"#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; else break ; } while ( 1 ) ; if ( n == 1 ) printf ( ""**"" ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j ) printf ( ""*"" ) ; else if ( j == 2 * ( n - 1 ) - i ) printf ( ""*"" ) ; else if ( j == 2 * ( n - 1 ) + i ) printf ( ""*"" ) ; else if ( j == 4 * ( n - 1 ) - i ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; else break ; } while ( 1 ) ; if ( n == 1 ) printf ( ""**"" ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j ) printf ( ""*"" ) ; else if ( j == 2 * ( n - 1 ) - i ) printf ( ""*"" ) ; else if ( j == 2 * ( n - 1 ) + i ) printf ( ""*"" ) ; else if ( j == 4 * ( n - 1 ) - i ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
41,98,98,0,39,A2016/Z2/Z1/student4903,A2016/Z2/Z1/student5713,"#include <stdio.h> #include<math.h> int n , rezervna , cifre = 0 , ostatak2 , ostatak1 , a , maxo , pamti , preskok = 0 , remember_me , isti = 0 , koliko ; int main ( ) { printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n = - n ; rezervna = n ; while ( n != 0 ) { n = n / 10 ; if ( remember_me == n ) isti = 1 ; remember_me = n ; cifre ++ ; } if ( cifre == 1 ) { printf ( ""%d"" , 0 ) ; return 0 ; } if ( isti == 1 ) { printf ( ""0"" ) ; return 0 ; } n = rezervna ; maxo = cifre ; ostatak2 = n / pow ( 10 , cifre - 1 ) ; while ( cifre > 1 ) { ostatak1 = n / pow ( 10 , cifre - 2 ) ; ostatak1 = ostatak1 % 10 ; a = ostatak1 - ostatak2 ; if ( preskok == 1 && pamti == 0 && a == 0 ) { cifre -- ; ostatak2 = ostatak1 ; pamti = a ; continue ; } if ( cifre == maxo && a == 0 ) { preskok = 1 ; cifre -- ; ostatak2 = ostatak1 ; pamti = a ; continue ; } if ( a < 0 ) a = - a ; koliko = printf ( ""%d"" , a ) ; pamti = a ; cifre -- ; ostatak2 = ostatak1 ; } if ( koliko == 0 ) printf ( ""0"" ) ; return 0 ; }","#include <stdio.h> #include<math.h> int n , rezervna , cifre = 0 , ostatak2 , ostatak1 , a , maxo , pamti , preskok = 0 , remember_me , isti = 0 , koliko ; int main ( ) { printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n = - n ; rezervna = n ; while ( n != 0 ) { n = n / 10 ; if ( remember_me == n ) isti = 1 ; remember_me = n ; cifre ++ ; } if ( cifre == 1 ) { printf ( ""%d"" , 0 ) ; return 0 ; } if ( isti == 1 ) { printf ( ""0"" ) ; return 0 ; } n = rezervna ; maxo = cifre ; ostatak2 = n / pow ( 10 , cifre - 1 ) ; while ( cifre > 1 ) { ostatak1 = n / pow ( 10 , cifre - 2 ) ; ostatak1 = ostatak1 % 10 ; a = ostatak1 - ostatak2 ; if ( preskok == 1 && pamti == 0 && a == 0 ) { cifre -- ; ostatak2 = ostatak1 ; pamti = a ; continue ; } if ( cifre == maxo && a == 0 ) { preskok = 1 ; cifre -- ; ostatak2 = ostatak1 ; pamti = a ; continue ; } if ( a < 0 ) a = - a ; koliko = printf ( ""%d"" , a ) ; pamti = a ; cifre -- ; ostatak2 = ostatak1 ; } if ( koliko == 0 ) printf ( ""0"" ) ; return 0 ; }"
78,63,63,0,74,A2016/Z3/Z2/student3978,A2016/Z3/Z2/student8187,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int suma ( int a ) { int s = 0 ; while ( a > 0 ) { s = s + a % 10 ; a = a / 10 ; } return s ; } void ubaci ( int niz [ ] , int velicina ) { int sklj ; int * s , * b ; int i = 2 * velicina ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { b = niz + i * 2 ; s = niz + i ; * b = * s ; } for ( i = 0 ; i < velicina * 2 ; i = i + 2 ) { b = niz + i ; s = b + 1 ; sklj = abs ( * b ) ; * s = suma ( sklj ) ; } } int izbaci ( int niz [ ] , int velicina ) { int fibonacijev [ 1000 ] = { 0 } ; int max , b = 2 , i , j , sklj , v2 ; max = niz [ 0 ] ; for ( i = 0 ; i < velicina ; i ++ ) { if ( max < niz [ i ] ) max = niz [ i ] ; } fibonacijev [ 0 ] = 1 ; fibonacijev [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { fibonacijev [ i ] = fibonacijev [ i - 1 ] + fibonacijev [ i - 2 ] ; if ( fibonacijev [ i ] > max ) break ; else ( b ++ ) ; } v2 = velicina ; for ( i = 0 ; i < v2 ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { if ( niz [ i ] == fibonacijev [ j ] ) { for ( sklj = i ; sklj < v2 - 1 ; sklj ++ ) niz [ sklj ] = niz [ sklj + 1 ] ; v2 -- ; i -- ; break ; } } } return v2 ; } int main ( ) { int niz [ 20 ] , i , velicina = 10 , izbac ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; velicina = velicina * 2 ; izbac = izbaci ( niz , velicina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izbac - 1 ; i ++ ) printf ( ""%d, "" , niz [ i ] ) ; printf ( ""%d."" , niz [ i ] ) ; return 0 ; }"
87,76,76,0,22,A2016/Z1/Z4/student4896,A2016/Z1/Z4/student9676,"#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * n - 4 ; j ++ ) { if ( j == i || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) { putchar ( '*' ) ; } else { putchar ( ' ' ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( j == i || j == 2 * n - 2 - i || j == 4 * n - 4 - i || j == 2 * n - 2 + i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
100,68,68,0,80,A2016/Z3/Z2/student3732,A2016/Z3/Z2/student9385,"#include <stdio.h> #include<stdlib.h> #include <math.h> #define broje_elemenata 10 void ubaci ( int * niz , int duzina_niza ) { int i , broj , broj2 = 0 , cifra ; for ( i = duzina_niza - 1 ; i >= 0 ; i -- ) { niz [ 2 * i ] = niz [ i ] ; } for ( i = 0 ; i < 2 * duzina_niza ; i += 2 ) { broj = abs ( niz [ i ] ) ; if ( broj < 10 ) { broj2 = broj ; } else { do { cifra = broj % 10 ; broj2 = broj2 + cifra ; broj = broj / 10 ; } while ( broj != 0 ) ; } niz [ i + 1 ] = broj2 ; broj2 = 0 ; } } int izbaci ( int * niz , int duzina_niza ) { int prvi , drugi , treci ; int i , j , k ; for ( k = 0 ; k < duzina_niza ; k ++ ) { prvi = 0 ; drugi = 1 ; for ( i = 1 ; i < 10000 ; i ++ ) { if ( i == 1 ) { treci = 1 ; } else { treci = prvi + drugi ; prvi = drugi ; drugi = treci ; } if ( niz [ k ] == treci ) { for ( j = k ; j < duzina_niza - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } duzina_niza -- ; k -- ; break ; } } } return duzina_niza ; } int main ( ) { int niz [ 2 * broje_elemenata ] , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , broje_elemenata ) ; int funkcija ; funkcija = izbaci ( niz , 2 * broje_elemenata ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < funkcija ; i ++ ) { if ( i == funkcija - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include<math.h> #include<stdlib.h> void ubaci ( int * niz , int duplo ) { int m , rastavi_cifru = 0 , zbir_cifara = 0 , elem ; for ( m = duplo - 1 ; m >= 0 ; m -- ) { niz [ 2 * m ] = niz [ m ] ; } for ( m = 0 ; m < 2 * duplo ; m += 2 ) { elem = abs ( niz [ m ] ) ; if ( elem < 10 ) { zbir_cifara = elem ; } else { do { rastavi_cifru = elem % 10 ; zbir_cifara = zbir_cifara + rastavi_cifru ; elem = elem / 10 ; } while ( elem != 0 ) ; } niz [ m + 1 ] = zbir_cifara ; zbir_cifara = 0 ; } } int izbaci ( int * niz , int duplo ) { int i , j , prvi_broj = 1 , drugi_broj = 1 , zbir_brojeva = 0 ; for ( i = 0 ; i < duplo ; i ++ ) { prvi_broj = 1 ; drugi_broj = 1 ; for ( j = i ; j < 1000 ; j ++ ) { if ( j == 1 ) { zbir_brojeva = 1 ; } else { zbir_brojeva = prvi_broj + drugi_broj ; prvi_broj = drugi_broj ; drugi_broj = zbir_brojeva ; } if ( niz [ i ] == zbir_brojeva ) { for ( zbir_brojeva = i ; zbir_brojeva < duplo - 1 ; zbir_brojeva ++ ) { niz [ zbir_brojeva ] = niz [ zbir_brojeva + 1 ] ; } duplo -- ; i -- ; break ; } } } return duplo ; } int main ( ) { int niz [ 100 ] , i , mojniz , duzina_niza = 0 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 20 ; i ++ ) { duzina_niza ++ ; scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , duzina_niza ) ; mojniz = ( niz , duzina_niza ) ; printf ( ""modificiran niz glasi: "" ) ; for ( i = 0 ; i < mojniz ; i ++ ) { if ( i == mojniz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d"" , niz [ i ] ) ; } } return 0 ; }"
114,87,87,0,57,A2016/Z2/Z2/student9972,A2016/Z2/Z2/student2406,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; int i , j , n ; double stepeni , minute , sekunde ; double ugao ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { ugao = fabs ( ( niz [ i ] * 180 ) / pi ) ; minute = ( ugao - ( int ) ugao ) * 60 ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; if ( sekunde == 60 ) { sekunde = 0 , minute ++ ; } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { ugao = ( niz [ i ] * 180 ) / pi ; minute = fabs ( ( ugao - ( int ) ugao ) * 60 ) ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; stepeni = ( int ) ugao ; minute = ( int ) minute ; sekunde = round ( sekunde ) ; if ( stepeni >= 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni ++ ; } } if ( stepeni < 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , stepeni , minute , sekunde ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] , stepeni , minute , sekunde ; double u ; int j , i , x ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < x ; i ++ ) { u = fabs ( ( niz [ i ] * 180 ) / pi ) ; minute = ( u - ( int ) u ) * 60 ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( sekunde > 30 ) { for ( j = i ; j < x - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } x -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < x ; i ++ ) { u = ( niz [ i ] * 180 ) / pi ; minute = fabs ( ( u - ( int ) u ) * 60 ) ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; stepeni = ( int ) u ; minute = ( int ) minute ; sekunde = round ( sekunde ) ; if ( stepeni > 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni ++ ; } } if ( stepeni < 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , stepeni , minute , sekunde ) ; } return 0 ; }"
120,99,99,0,69,A2016/Z3/Z3/student8774,A2016/Z3/Z3/student8753,"#include <stdio.h> int main ( ) { int i , j , k , l ; int m , n , isti ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ k ] [ l ] = niz [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ l ] [ k ] = niz [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , k , l ; int m , n , isti ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ k ] [ l ] = niz [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ l ] [ k ] = niz [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
130,72,72,0,18,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student2406,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int a , c = 0 , cifra1 , cifra2 , b = 1 , razlika ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & a ) ; a = abs ( a ) ; if ( a < 10 ) { printf ( ""0"" ) ; return 0 ; } do { cifra1 = a % 10 ; a = a / 10 ; cifra2 = a % 10 ; razlika = abs ( cifra1 - cifra2 ) ; c = c + b * razlika ; b = b * 10 ; } while ( a > 9 ) ; printf ( ""%d"" , c ) ; return 0 ; }"
134,98,98,0,86,A2016/Z4/Z3/student8774,A2016/Z4/Z3/student8753,"#include <stdio.h> int provjera ( char * p , char * q ) { int jesu = 1 ; while ( * q != '\0' ) { if ( * q ++ != * p ++ ) { jesu = 0 ; break ; } if ( * q == '\0' && ( * p != ' ' && * p != '\0' ) ) { jesu = 0 ; break ; } } return jesu ; } void zamjena ( char * rec , char * rijec ) { while ( * rijec != '\0' ) { * rec ++ = * rijec ++ ; } rec ++ ; } int dict ( char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , jesu = 1 ; char * s , * s1 ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { s = rijeci [ i ] ; s1 = zamjene [ i ] ; while ( * s != '\0' || * s1 != '\0' ) { if ( * s ++ != * s1 ) jesu = 0 ; } if ( jesu == 0 ) break ; } return jesu ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * s , * t , * k , * h ; int i , brojac ; if ( dict ( rijeci , zamjene , broj_rijeci ) ) return tekst ; while ( * p != '\0' ) { if ( p == tekst || * ( p - 1 ) == ' ' ) { while ( * p == ' ' ) p ++ ; t = p ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { brojac = 0 ; p = t ; s = rijeci [ i ] ; if ( provjera ( p , s ) ) { k = t ; while ( * p != '\0' && * p != ' ' ) p ++ ; while ( * p != '\0' ) { * k ++ = * p ++ ; } * k = '\0' ; p = t ; s = zamjene [ i ] ; while ( * s != '\0' ) { brojac ++ ; s ++ ; } h = k + brojac ; p -- ; while ( k != p ) { * h -- = * k -- ; } s = zamjene [ i ] ; zamjena ( t , s ) ; } } } p ++ ; } return tekst ; } int main ( ) { char tekst [ 100 ] = ""beli sneg je pokrio beli breg"" ; char * rijeci [ 2 ] = { ""beli"" , ""sneg"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }","#include <stdio.h> int provjera ( char * p , char * q ) { int jesu = 1 ; while ( * q != '\0' ) { if ( * q ++ != * p ++ ) { jesu = 0 ; break ; } if ( * q == '\0' && ( * p != ' ' && * p != '\0' ) ) { jesu = 0 ; break ; } } return jesu ; } void zamjena ( char * rec , char * rijec ) { while ( * rijec != '\0' ) { * rec ++ = * rijec ++ ; } rec ++ ; } int dict ( char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , jesu = 1 ; char * s , * s1 ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { s = rijeci [ i ] ; s1 = zamjene [ i ] ; while ( * s != '\0' || * s1 != '\0' ) { if ( * s ++ != * s1 ) jesu = 0 ; } if ( jesu == 0 ) break ; } return jesu ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * s , * t , * k , * h ; int i , brojac ; if ( dict ( rijeci , zamjene , broj_rijeci ) ) return tekst ; while ( * p != '\0' ) { if ( p == tekst || * ( p - 1 ) == ' ' ) { while ( * p == ' ' ) p ++ ; t = p ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { brojac = 0 ; p = t ; s = rijeci [ i ] ; if ( provjera ( p , s ) ) { k = t ; while ( * p != '\0' && * p != ' ' ) p ++ ; while ( * p != '\0' ) { * k ++ = * p ++ ; } * k = '\0' ; p = t ; s = zamjene [ i ] ; while ( * s != '\0' ) { brojac ++ ; s ++ ; } h = k + brojac ; p -- ; while ( k != p ) { * h -- = * k -- ; } s = zamjene [ i ] ; zamjena ( t , s ) ; } } } p ++ ; } return tekst ; } int main ( ) { char tekst [ 100 ] = ""beli sneg je pokrio beli breg"" ; char * rijeci [ 2 ] = { ""beli"" , ""sneg"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }"
137,99,99,0,81,A2016/Z2/Z3/student9569,A2016/Z2/Z3/student3515,"#include <stdio.h> #define a 20 int main ( ) { int k , m , n , l , j , i ; char matrix [ a ] [ a ] = { { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } } ; int vrste [ 21 ] , kolone [ 21 ] ; s1 : printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%i"" , & l ) ; if ( l > 10 || l <= 0 ) { printf ( ""pogresan unos\n"" ) ; goto s1 ; } for ( i = 0 ; i < l ; i ++ ) { s2 : printf ( ""unesite %i. tacku: "" , i + 1 ) ; scanf ( ""%i"" , & m ) ; scanf ( ""%i"" , & n ) ; if ( m < 0 || n < 0 || m > 19 || n > 19 ) { printf ( ""pogresan unos\n"" ) ; goto s2 ; } else { vrste [ i ] = n ; kolone [ i ] = m ; } } for ( k = 0 ; k < l ; k ++ ) { for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( vrste [ k ] == i && kolone [ k ] == j ) { matrix [ i ] [ j ] = '*' ; } } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , matrix [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #define a 20 int main ( ) { int k , m , n , l , j , i ; char matrix [ a ] [ a ] = { { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } , { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , ' ' } } ; int vrste [ 21 ] , kolone [ 21 ] ; s1 : printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%i"" , & l ) ; if ( l > 10 || l <= 0 ) { printf ( ""pogresan unos\n"" ) ; goto s1 ; } for ( i = 0 ; i < l ; i ++ ) { s2 : printf ( ""unesite %i. tacku: "" , i + 1 ) ; scanf ( ""%i"" , & m ) ; scanf ( ""%i"" , & n ) ; if ( m < 0 || n < 0 || m > 19 || n > 19 ) { printf ( ""pogresan unos\n"" ) ; goto s2 ; } else { vrste [ i ] = n ; kolone [ i ] = m ; } } for ( k = 0 ; k < l ; k ++ ) { for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( vrste [ k ] == i && kolone [ k ] == j ) { matrix [ i ] [ j ] = '*' ; } } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , matrix [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
140,88,88,0,69,A2016/Z3/Z3/student3329,A2016/Z3/Z3/student2513,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] ; int m , n , i , j , k , m , n , checker ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { checker = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { checker = 0 ; break ; } } if ( checker ) { for ( m = k ; m < m - 1 ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { mat [ m ] [ n ] = mat [ m + 1 ] [ n ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { checker = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) { checker = 0 ; break ; } } if ( checker ) { for ( n = k ; n < n - 1 ; n ++ ) { for ( m = 0 ; m < m ; m ++ ) { mat [ m ] [ n ] = mat [ m ] [ n + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , k , l , m , m , n , istinitost = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m > 200 || n > 200 || m <= 0 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || n > 200 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { istinitost = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { istinitost = 0 ; break ; } } if ( istinitost == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( m = 0 ; m < n ; m ++ ) { mat [ l ] [ m ] = mat [ l + 1 ] [ m ] ; } } j -- ; m -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { istinitost = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { istinitost = 0 ; break ; } } if ( istinitost == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( m = 0 ; m < m ; m ++ ) { mat [ m ] [ l ] = mat [ m ] [ l + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , mat [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
145,75,75,0,24,A2016/Z2/Z4/student2704,A2016/Z2/Z4/student4973,"#include <stdio.h> int main ( ) { int m , n , a , b ; double matrica [ 100 ] [ 100 ] ; int tep = 1 , cirk = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 || m > 100 ) || ( n <= 0 || n > 100 ) ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( a = 0 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { scanf ( ""%lf"" , & matrica [ a ] [ b ] ) ; } } for ( a = 0 ; a < m - 1 ; a ++ ) { for ( b = 0 ; b < n - 1 ; b ++ ) { if ( matrica [ a ] [ b ] != matrica [ a + 1 ] [ b + 1 ] ) { tep = 0 ; } } } for ( a = 0 ; a < m - 1 ; a ++ ) { if ( matrica [ a ] [ n - 1 ] != matrica [ a + 1 ] [ 0 ] ) cirk = 0 ; } if ( cirk && tep ) { printf ( ""matrica je cirkularna"" ) ; } else if ( tep ) { printf ( ""matrica je teplicova"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j ; double mat [ 100 ] [ 100 ] ; int cirkularna = 0 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } int teplicova = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) teplicova = 0 ; } } if ( teplicova == 1 ) { cirkularna = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) cirkularna = 0 ; } } } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
148,99,99,0,43,A2016/Z2/Z3/student2111,A2016/Z2/Z3/student7165,"#include <stdio.h> int main ( ) { int broj_tacaka ; int i , j ; int k = 0 ; int matrica [ 20 ] [ 20 ] = { 5 } ; int unos [ 10 ] [ 2 ] ; int n = 0 ; for ( ; ; ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; if ( broj_tacaka <= 10 && broj_tacaka > 0 ) break ; if ( broj_tacaka > 10 || broj_tacaka <= 0 ) ; { printf ( ""pogresan unos\n"" ) ; } } for ( i = 0 ; i < broj_tacaka ; i ++ ) { for ( j = 0 ; j < 1 ; j ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & unos [ j ] [ i ] , & unos [ j ] [ i + 1 ] ) ; if ( unos [ j ] [ i ] > 19 || unos [ j ] [ i + 1 ] > 19 || unos [ j ] [ i ] < 0 || unos [ j ] [ i + 1 ] < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { matrica [ unos [ j ] [ i ] ] [ unos [ j ] [ i + 1 ] ] = 2 ; } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( matrica [ j ] [ i ] == 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int broj_tacaka ; int i , j ; int k = 0 ; int matrica [ 20 ] [ 20 ] = { 5 } ; int unos [ 10 ] [ 2 ] ; int n = 0 ; for ( ; ; ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; if ( broj_tacaka <= 10 && broj_tacaka > 0 ) break ; if ( broj_tacaka > 10 || broj_tacaka <= 0 ) ; { printf ( ""pogresan unos\n"" ) ; } } for ( i = 0 ; i < broj_tacaka ; i ++ ) { for ( j = 0 ; j < 1 ; j ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & unos [ j ] [ i ] , & unos [ j ] [ i + 1 ] ) ; if ( unos [ j ] [ i ] > 19 || unos [ j ] [ i + 1 ] > 19 || unos [ j ] [ i ] < 0 || unos [ j ] [ i + 1 ] < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { matrica [ unos [ j ] [ i ] ] [ unos [ j ] [ i + 1 ] ] = 2 ; } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( matrica [ j ] [ i ] == 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
152,86,86,0,81,A2016/Z3/Z3/student3301,A2016/Z3/Z3/student5830,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] ; int j , m , n , i , k = 0 , a , b , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( a = j + 1 ; a < n ; a ++ ) { for ( b = 0 ; b < m ; b ++ ) { temp = mat [ b ] [ a - 1 ] ; mat [ b ] [ a - 1 ] = mat [ b ] [ a ] ; mat [ b ] [ a ] = temp ; } } n -- ; j -- ; } } } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( a = j + 1 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { temp = mat [ a - 1 ] [ b ] ; mat [ a - 1 ] [ b ] = mat [ a ] [ b ] ; mat [ a ] [ b ] = temp ; } } m -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
159,67,67,0,19,A2016/Z1/Z4/student8580,A2016/Z1/Z4/student6656,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( 4 * n - 3 ) ; j ++ ) { if ( i == j || 2 * n - 2 + i == j || 2 * n - 2 - i == j || 4 * n - 4 - i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
184,95,95,0,16,A2016/Z1/Z2/student1772,A2016/Z1/Z2/student6913,"#include <stdio.h> #include <math.h> #define d 0.01 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( fabs ( a1 - a2 ) < d && fabs ( b1 - b2 ) < d ) ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < d ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = x * a1 + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define d 0.01 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( fabs ( a1 - a2 ) < d && fabs ( b1 - b2 ) < d ) ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < d ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = x * a1 + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
185,99,99,0,35,A2016/Z2/Z3/student6534,A2016/Z2/Z3/student4438,"#include <stdio.h> int main ( ) { int brojt , k , z , x , y ; int mat [ 20 ] [ 20 ] ; for ( k = 0 ; k < 20 ; k ++ ) for ( z = 0 ; z < 20 ; z ++ ) mat [ k ] [ z ] = 0 ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brojt ) ; while ( brojt <= 0 || brojt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brojt ) ; } for ( k = 0 ; k < brojt ; k ++ ) { printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & x , & y ) ; if ( x >= 0 && x < 20 && y >= 0 && y < 20 ) mat [ y ] [ x ] = 1 ; else { printf ( ""pogresan unos\n"" ) ; k -- ; } } for ( k = 0 ; k < 20 ; k ++ ) { for ( z = 0 ; z < 20 ; z ++ ) if ( mat [ k ] [ z ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int brojt , k , z , x , y ; int mat [ 20 ] [ 20 ] ; for ( k = 0 ; k < 20 ; k ++ ) for ( z = 0 ; z < 20 ; z ++ ) mat [ k ] [ z ] = 0 ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brojt ) ; while ( brojt <= 0 || brojt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brojt ) ; } for ( k = 0 ; k < brojt ; k ++ ) { printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & x , & y ) ; if ( x >= 0 && x < 20 && y >= 0 && y < 20 ) mat [ y ] [ x ] = 1 ; else { printf ( ""pogresan unos\n"" ) ; k -- ; } } for ( k = 0 ; k < 20 ; k ++ ) { for ( z = 0 ; z < 20 ; z ++ ) if ( mat [ k ] [ z ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; printf ( ""\n"" ) ; } return 0 ; }"
187,99,99,0,41,A2016/Z3/Z1/student6882,A2016/Z3/Z1/student8035,"#include <stdio.h> #include <math.h> int jeprost ( int n ) { int i ; if ( n == 2 || n == 3 ) return 1 ; for ( i = 2 ; i <= sqrt ( n ) ; ++ i ) if ( n % i == 0 ) return 0 ; return 1 ; } int daj_prost ( ) { static int prost = 2 ; while ( 1 ) { if ( jeprost ( prost ) ) return prost ++ ; ++ prost ; } } int main ( ) { int a , b , zbir = 0 , i ; while ( 1 ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( b <= 0 ) printf ( ""b nije prirodan broj.\n"" ) ; else break ; } for ( i = daj_prost ( ) ; i < b ; i = daj_prost ( ) ) { if ( i > a && i < b ) zbir += i ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , zbir ) ; return 0 ; }","#include <stdio.h> #include <math.h> int jeprost ( int n ) { int i ; if ( n == 2 || n == 3 ) return 1 ; for ( i = 2 ; i <= sqrt ( n ) ; ++ i ) { if ( n % i == 0 ) return 0 ; } return 1 ; } int daj_prost ( ) { static int prost = 2 ; while ( 1 ) { if ( jeprost ( prost ) ) return prost ++ ; ++ prost ; } } int main ( ) { int a , b , zbir = 0 , i ; while ( 1 ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b. \n"" ) ; else if ( b <= 0 ) printf ( ""b nije prirodan broj. \n"" ) ; else break ; } for ( i = daj_prost ( ) ; i < b ; i = daj_prost ( ) ) { if ( i > a && i < b ) zbir += i ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , zbir ) ; return 0 ; }"
192,35,35,0,47,A2016/Z5/Z1/student9897,A2016/Z5/Z1/student8776,"#include <stdio.h> #include <string.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek_svih_studenata ( int niz [ ] , int vel ) { float prosjek_svih = 0.0 ; int i ; float suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 || vel == 0 ) return 5.0 ; suma += niz [ i ] ; prosjek_svih = suma / vel ; } return prosjek_svih ; } int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return - 1 ; if ( strcmp ( s1 , s2 ) > 0 ) return 1 ; while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } int redoslijed ( struct student prvi , struct student drugi ) { float prosjek1 = prosjek_svih_studenata ( prvi . ocjene , prvi . br_ocjena ) ; float prosjek2 = prosjek_svih_studenata ( drugi . ocjene , drugi . br_ocjena ) ; if ( prosjek1 > prosjek2 ) return 1 ; else if ( prosjek1 < prosjek2 ) return 0 ; if ( uporedi ( prvi . prezime , drugi . prezime ) == - 1 ) return 1 ; else if ( uporedi ( prvi . prezime , drugi . prezime ) == 1 ) return 0 ; if ( uporedi ( prvi . ime , drugi . ime ) == - 1 ) return 1 ; else if ( uporedi ( prvi . ime , drugi . ime ) == 1 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , float prosjekk ) { int i , j , index1 , index2 , index3 , indexmin = 0 ; double temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek_svih_studenata ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { temp_prosjek = prosjek_svih_studenata ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - prosjek_svih_studenata ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = temp_prosjek ; indexmin = i ; } } if ( vel == 0 ) return 0 ; if ( vel == 1 ) goto jedan ; if ( vel > 1 ) goto dva ; jedan : index1 = indexmin ; printf ( ""\n%s %s"" , niz [ index1 ] . prezime , niz [ index1 ] . ime ) ; return vel ; dva : index1 = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( redoslijed ( niz [ i ] , niz [ index1 ] ) ) index1 = i ; } index2 = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == index1 ) continue ; if ( redoslijed ( niz [ i ] , niz [ index2 ] ) ) index2 = i ; } printf ( ""\n%s %s"" , niz [ index1 ] . prezime , niz [ index1 ] . ime ) ; printf ( ""\n%s %s"" , niz [ index2 ] . prezime , niz [ index2 ] . ime ) ; if ( vel > 2 ) { index3 = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == index1 || i == index2 ) continue ; if ( redoslijed ( niz [ i ] , niz [ index3 ] ) ) index3 = i ; } printf ( ""\n%s %s"" , niz [ index3 ] . prezime , niz [ index3 ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ ] = { { ""ajla"" , ""smajic"" , { 7 , 9 , 10 , 10 } , 4 } , { ""sajra"" , ""gujic"" , { 6 , 8 , 9 } , 3 } , { ""imad"" , ""fazlinovic"" , { 7 , 9 , 5 , 8 } , 4 } } ; int i ; int vel = genijalci ( studenti , 4 , 7.7 ) ; printf ( ""vel:%dstudenti:"" , vel ) ; for ( i = 0 ; i < vel ; i ++ ) ; printf ( ""%s %s"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return 1 ; if ( * s1 > * s2 ) return 2 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 2 ; if ( * s2 != '\0' ) return 1 ; return 0 ; } float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { float prosjekprvog = prosjek ( pr . ocjene , pr . br_ocjena ) ; float prosjekdrugog = prosjek ( dr . ocjene , dr . br_ocjena ) ; int sta_je_vratila_f = uporedi ( pr . prezime , dr . prezime ) ; if ( prosjekprvog > prosjekdrugog ) return 1 ; if ( prosjekprvog < prosjekdrugog ) return 0 ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; sta_je_vratila_f = uporedi ( pr . ime , dr . ime ) ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }"
193,90,90,0,75,A2016/Z3/Z3/student6999,A2016/Z3/Z3/student4155,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , m , n , brojac = 0 , k = 0 , x , y , privremena ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( x = j + 1 ; x < m ; x ++ ) { for ( y = 0 ; y < n ; y ++ ) { privremena = mat [ x - 1 ] [ y ] ; mat [ x - 1 ] [ y ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = privremena ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( x = j + 1 ; x < n ; x ++ ) { for ( y = 0 ; y < m ; y ++ ) { privremena = mat [ y ] [ x - 1 ] ; mat [ y ] [ x - 1 ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = privremena ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
196,98,98,0,70,A2016/Z3/Z2/student9463,A2016/Z3/Z2/student4389,"#include <stdio.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int i , j , copy [ 10 ] , copy2 [ 20 ] = { 0 } , sum_num , temp ; for ( i = 0 ; i < vel ; i ++ ) { copy [ i ] = niz [ i ] ; copy2 [ i ] = copy [ i ] ; } j = 2 ; for ( i = 1 ; i < vel ; i ++ ) { copy2 [ j ] = copy [ i ] ; j += 2 ; } for ( i = 0 ; i < vel * 2 ; i += 2 ) { sum_num = 0 ; temp = copy2 [ i ] ; while ( abs ( temp ) != 0 ) { sum_num += temp % 10 ; temp /= 10 ; } copy2 [ i + 1 ] = abs ( sum_num ) ; } for ( i = 0 ; i < vel * 2 ; i ++ ) { * ( niz + i ) = copy2 [ i ] ; } } int izbaci ( int * niz , int vel ) { int i , j , n1 , n2 , check = 0 ; for ( i = 0 ; i < vel ; ) { n1 = 1 ; n2 = 1 ; do { if ( check == 1 ) i -- ; check = 0 ; if ( i < 0 ) i ++ ; if ( niz [ i ] == n1 || niz [ i ] == n2 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; vel -- ; } n1 = n1 + n2 ; n2 = n1 + n2 ; if ( i < 0 ) { i ++ ; check = 1 ; } } while ( n1 <= niz [ i ] ) ; i ++ ; if ( i == vel && check == 1 ) i -- ; } return vel ; } int main ( ) { int niz [ 20 ] = { 0 } , i , vel = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; vel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i != vel - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int i , j , copy [ 10 ] , copy2 [ 20 ] = { 0 } , sum_num , temp ; for ( i = 0 ; i < vel ; i ++ ) { copy [ i ] = niz [ i ] ; copy2 [ i ] = copy [ i ] ; } j = 2 ; for ( i = 1 ; i < vel ; i ++ ) { copy2 [ j ] = copy [ i ] ; j += 2 ; } for ( i = 0 ; i < vel * 2 ; i += 2 ) { sum_num = 0 ; temp = copy2 [ i ] ; while ( abs ( temp ) != 0 ) { sum_num += temp % 10 ; temp /= 10 ; } copy2 [ i + 1 ] = abs ( sum_num ) ; } for ( i = 0 ; i < vel * 2 ; i ++ ) { * ( niz + i ) = copy2 [ i ] ; } } int izbaci ( int * niz , int vel ) { int i , j , n1 , n2 , check = 0 ; for ( i = 0 ; i < vel ; ) { n1 = 1 ; n2 = 1 ; do { if ( check == 1 ) i -- ; check = 0 ; if ( i < 0 ) i ++ ; if ( niz [ i ] == n1 || niz [ i ] == n2 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; vel -- ; } n1 = n1 + n2 ; n2 = n1 + n2 ; if ( i < 0 ) { i ++ ; check = 1 ; } } while ( n1 <= niz [ i ] ) ; i ++ ; if ( i == vel && check == 1 ) i -- ; } return vel ; } int main ( ) { int niz [ 20 ] = { 0 } , i , vel = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; vel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i != vel - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }"
200,98,98,0,74,A2016/Z3/Z2/student5744,A2016/Z3/Z2/student2675,"#include <stdio.h> #include <stdlib.h> void ubaci ( int * p , int n ) { int i ; int temp , suma ; for ( i = n - 1 ; i > 0 ; i -- ) { p [ 2 * i ] = p [ i ] ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { suma = 0 ; if ( p [ i ] >= 0 ) temp = ( p [ i ] ) ; else temp = - p [ i ] ; while ( temp > 0 ) { suma += temp % 10 ; temp /= 10 ; } p [ i + 1 ] = suma ; } } int izbaci ( int * p , int n ) { int i , j , k ; int fib [ 87 ] ; fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { j = 1 ; while ( p [ i ] >= fib [ j ] ) { if ( p [ i ] == fib [ j ] ) { for ( k = i ; k < n - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } i -- ; n -- ; break ; } fib [ j + 1 ] = fib [ j ] + fib [ j - 1 ] ; j ++ ; } } return n ; } int main ( ) { int i , l ; int niz [ 20 ] = { 0 } ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; l = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < l ; i ++ ) { printf ( ""%d"" , niz [ i ] ) ; if ( i == l - 1 ) { printf ( ""."" ) ; } else { printf ( "", "" ) ; } } return 0 ; }","#include <stdio.h> #include <stdlib.h> void ubaci ( int * p , int n ) { int i ; int temp , suma ; for ( i = n - 1 ; i > 0 ; i -- ) { p [ 2 * i ] = p [ i ] ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { suma = 0 ; if ( p [ i ] >= 0 ) temp = ( p [ i ] ) ; else temp = - p [ i ] ; while ( temp > 0 ) { suma += temp % 10 ; temp /= 10 ; } p [ i + 1 ] = suma ; } } int izbaci ( int * p , int n ) { int i , j , k ; int fib [ 87 ] ; fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( i = 0 ; i < n ; i ++ ) { j = 1 ; while ( p [ i ] >= fib [ j ] ) { if ( p [ i ] == fib [ j ] ) { for ( k = i ; k < n - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } i -- ; n -- ; break ; } fib [ j + 1 ] = fib [ j ] + fib [ j - 1 ] ; j ++ ; } } return n ; } int main ( ) { int i , l ; int niz [ 20 ] = { 0 } ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; l = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < l ; i ++ ) { printf ( ""%d"" , niz [ i ] ) ; if ( i == l - 1 ) { printf ( ""."" ) ; } else { printf ( "", "" ) ; } } return 0 ; }"
201,96,96,0,44,A2016/Z2/Z4/student9569,A2016/Z2/Z4/student4389,"#include <stdio.h> int main ( ) { double s [ 100 ] [ 100 ] ; int i , j , m , n , tepl = 1 , cirk = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & s [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( s [ 0 ] [ j ] != s [ i ] [ ( i + j ) % n ] ) { cirk = 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( j + 1 < n ) { if ( s [ i ] [ j ] != s [ i + 1 ] [ j + 1 ] ) { tepl = 0 ; } } } } if ( cirk == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( cirk == 0 && tepl == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double a [ 100 ] [ 100 ] ; int i , j , m , n , teplicova = 1 , cirkularna = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( a [ 0 ] [ j ] != a [ i ] [ ( i + j ) % n ] ) { cirkularna = 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j + 1 < n ) { if ( a [ i ] [ j ] != a [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } } } } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( cirkularna == 0 && teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
211,88,88,0,72,A2016/Z3/Z3/student8561,A2016/Z3/Z3/student5805,"#include <stdio.h> int main ( ) { int matrica [ 100 ] [ 100 ] , m , n , i , j , k , l , p , c , r , s ; p = 0 ; s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { if ( p == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { c = 0 ; while ( c < n ) { if ( matrica [ i ] [ c ] == matrica [ k ] [ c ] ) p = 1 ; else { p = 0 ; break ; } c ++ ; } if ( p == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { r = 0 ; while ( r < m ) { if ( matrica [ r ] [ i ] == matrica [ r ] [ k ] ) s = 1 ; else { s = 0 ; break ; } r ++ ; } if ( s == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) matrica [ l ] [ j ] == matrica [ l ] [ j + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , matrica [ 100 ] [ 100 ] , i , j , k , h , kolona , red , ind = 0 , ind1 = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( ind == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { kolona = 0 ; while ( kolona < n ) { if ( matrica [ i ] [ kolona ] == matrica [ k ] [ kolona ] ) ind = 1 ; else { ind = 0 ; break ; } kolona ++ ; } if ( ind == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( h = 0 ; h < n ; h ++ ) { matrica [ j ] [ h ] = matrica [ j + 1 ] [ h ] ; } } m -- ; k -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( ind1 == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { red = 0 ; while ( red < m ) { if ( matrica [ red ] [ i ] == matrica [ red ] [ k ] ) ind1 = 1 ; else { ind1 = 0 ; break ; } red ++ ; } if ( ind1 == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( h = 0 ; h < m ; h ++ ) { matrica [ h ] [ j ] = matrica [ h ] [ j + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
214,21,21,0,14,A2016/Z4/Z2/student2351,A2016/Z4/Z2/student1616,"#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }","#include <stdio.h> void sortiraj ( int * niz , int * sort , int * index ) { int i , j ; int temp ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && index [ i ] > index [ j ] ) { temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } } } } void pretvori ( char * s , char * sifrarnik ) { char * p = s , * kljuc = sifrarnik ; int br ; while ( * p != '\0' ) { br = 0 ; kljuc = sifrarnik ; while ( * kljuc != '\0' ) { if ( * p == * kljuc ++ ) { * p = 126 - br ; break ; } br ++ ; } p ++ ; } } char * kodiraj ( char * s , char * sifrarnik ) { char * p = s , * pok = sifrarnik ; int i ; int niz [ 127 ] ; int sort [ 127 ] ; int index [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; index [ i ] = - 1 ; } else { niz [ i ] = 0 ; index [ i ] = i ; } } while ( * p != '\0' ) { niz [ * p + 0 ] ++ ; p ++ ; } for ( i = 0 ; i < 127 ; i ++ ) sort [ i ] = niz [ i ] ; sortiraj ( niz , sort , index ) ; for ( i = 0 ; i < 127 ; i ++ ) { if ( index [ i ] != - 1 ) { * pok = index [ i ] ; pok ++ ; } } pretvori ( s , sifrarnik ) ; return s ; } char * dekodiraj ( char * s , char * sifrarnik ) { char * p = s ; while ( * p != '\0' ) { * p = sifrarnik [ 126 - * p ] ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""u ovom testu cemo testirati samo kodiranje"" ; char sifrarnik [ 100 ] = """" ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; printf ( ""%s\n"" , sifrarnik ) ; return 0 ; }"
230,92,92,0,16,A2016/Z1/Z2/student9931,A2016/Z1/Z2/student2508,"#include <stdio.h> #include <math.h> # define e 0.0001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( fabs ( a1 - a2 ) < e ) && ( fabs ( b1 - b2 ) > e ) ) { printf ( ""paralelne su"" ) ; return 0 ; } if ( ( fabs ( a1 - a2 ) < e ) && ( fabs ( b1 - b2 ) < e ) ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { double a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%lf,%lf,%lf,%lf"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; return 0 ; } if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
250,18,18,0,15,A2016/Z4/Z2/student5624,A2016/Z4/Z2/student6029,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void izmjeni ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pomocni_sifrarnik = sifrarnik ; int brojac ; while ( * pomocni_string != '\0' ) { brojac = 0 ; pomocni_sifrarnik = sifrarnik ; while ( * pomocni_sifrarnik != '\0' ) { if ( * pomocni_string == * pomocni_sifrarnik ++ ) { * pomocni_string = 126 - brojac ; break ; } brojac ++ ; } pomocni_string ++ ; } } void sortiraj ( int * niz , int * niz_sort , int * indeks , char * pokazivac , char * string ) { int i , j ; int temp ; char * sifrarnik = pokazivac ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j ++ ) { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && indeks [ i ] > indeks [ j ] ) { temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } } } for ( i = 0 ; i < 127 ; i ++ ) { if ( indeks [ i ] != - 1 ) { * pokazivac = indeks [ i ] ; pokazivac ++ ; } } izmjeni ( string , sifrarnik ) ; } char * kodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pokazivac = sifrarnik ; int i ; int niz [ 127 ] ; int niz_sort [ 127 ] ; int indeks [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; indeks [ i ] = - 1 ; } else { niz [ i ] = 0 ; indeks [ i ] = i ; } } while ( * pomocni_string != '\0' ) { niz [ * pomocni_string + 0 ] ++ ; pomocni_string ++ ; } for ( i = 0 ; i < 127 ; i ++ ) { niz_sort [ i ] = niz [ i ] ; } sortiraj ( niz , niz_sort , indeks , pokazivac , string ) ; return string ; } char * dekodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string ; while ( * pomocni_string != '\0' ) { * pomocni_string = sifrarnik [ 126 - * pomocni_string ] ; pomocni_string ++ ; } return string ; } int main ( ) { printf ( ""zadaca 4, zadatak 2"" ) ; return 0 ; }","#include <stdio.h> void sortiraj1 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] < s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } void sortiraj2 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] > s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } char * kodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = { ' ' } , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , j = 0 , br = 0 , vel = 0 , da = 0 , pret = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj1 ( slova , brojevi , vel ) ; for ( i = 0 ; i < vel ; i ++ ) { * t = slova [ i ] ; t ++ ; } for ( i = 32 ; i < 127 ; i ++ ) { pret = 1 ; for ( j = 0 ; j < vel ; j ++ ) if ( i == slova [ j ] ) pret = 0 ; if ( pret ) { * t = i ; t ++ ; * t = '\0' ; } } s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = 126 - i ; break ; } s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = """" , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , br = 0 , vel = 0 , da = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj2 ( slova , brojevi , vel ) ; s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = * ( t + i ) ; break ; } s ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] = ""llmlnlnmonm"" , tablica [ 200 ] = """" ; printf ( ""%s\n%s"" , kodiraj ( tekst , tablica ) , tablica ) ; printf ( ""\n%s"" , dekodiraj ( tekst , tablica ) ) ; return 0 ; }"
260,97,97,0,27,A2016/Z2/Z3/student8580,A2016/Z2/Z3/student4852,"#include <stdio.h> int main ( ) { int x [ 10 ] , y [ 10 ] , i , j , u , t , b ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & b ) ; if ( b > 10 || b <= 0 ) { printf ( ""pogresan unos\n"" ) ; } } while ( b > 10 || b <= 0 ) ; for ( u = 0 ; u < b ; u ++ ) { printf ( ""unesite %d. tacku: "" , u + 1 ) ; scanf ( ""%d %d"" , & x [ u ] , & y [ u ] ) ; if ( x [ u ] < 0 || x [ u ] > 19 || y [ u ] < 0 || y [ u ] > 19 ) { printf ( ""pogresan unos\n"" ) ; u -- ; } } for ( i = 0 ; i <= 19 ; i ++ ) { for ( j = 0 ; j <= 19 ; j ++ ) { for ( t = 0 ; t < b ; t ++ ) { if ( i == y [ t ] && j == x [ t ] ) { printf ( ""*"" ) ; break ; } } if ( t == b ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int x [ 10 ] , y [ 10 ] , i , j , u , t , b ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & b ) ; if ( b > 10 || b <= 0 ) { printf ( ""pogresan unos\n"" ) ; } } while ( b > 10 || b <= 0 ) ; for ( u = 0 ; u < b ; u ++ ) { printf ( ""unesite %d. tacku: "" , u + 1 ) ; scanf ( ""%d %d"" , & x [ u ] , & y [ u ] ) ; if ( x [ u ] < 0 || x [ u ] > 19 || y [ u ] < 0 || y [ u ] > 19 ) { printf ( ""pogresan unos\n"" ) ; u -- ; } } for ( i = 0 ; i <= 19 ; i ++ ) { for ( j = 0 ; j <= 19 ; j ++ ) { for ( t = 0 ; t < b ; t ++ ) { if ( i == y [ t ] && j == x [ t ] ) { printf ( ""*"" ) ; break ; } } if ( t == b ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
262,99,99,0,52,A2016/Z2/Z2/student4639,A2016/Z2/Z2/student4416,"#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int n , st [ 500 ] , min [ 500 ] , sek [ 500 ] , j , i ; double x , niz [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; printf ( ""uglovi su: "" ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( ""%lf"" , & niz [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { x = niz [ i ] * 180 / pi ; st [ i ] = ( int ) x ; min [ i ] = ( int ) fabs ( 60 * ( x - st [ i ] ) ) ; sek [ i ] = ( int ) ( ( 60 * ( fabs ( 60 * ( x - st [ i ] ) ) - min [ i ] ) ) + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { if ( st [ i ] > 0 ) st [ i ] ++ ; else st [ i ] -- ; min [ i ] = 0 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; sek [ j ] = sek [ j + 1 ] ; } n -- ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { x = niz [ i ] * 180 / pi ; st [ i ] = ( int ) x ; min [ i ] = ( int ) fabs ( 60 * ( x - st [ i ] ) ) ; sek [ i ] = ( int ) ( ( 60 * ( fabs ( 60 * ( x - st [ i ] ) ) - min [ i ] ) ) + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { if ( st [ i ] > 0 ) st [ i ] ++ ; else st [ i ] -- ; min [ i ] = 0 ; } printf ( ""\n%d stepeni %d minuta %d sekundi"" , st [ i ] , min [ i ] , sek [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int n , st [ 500 ] , min [ 500 ] , sek [ 500 ] , j , i ; double x , niz [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; printf ( ""uglovi su: "" ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( ""%lf"" , & niz [ i ] ) ; for ( i = 0 ; i < n ; i ++ ) { x = niz [ i ] * 180 / pi ; st [ i ] = ( int ) x ; min [ i ] = ( int ) fabs ( 60 * ( x - st [ i ] ) ) ; sek [ i ] = ( int ) ( ( 60 * ( fabs ( 60 * ( x - st [ i ] ) ) - min [ i ] ) ) + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { if ( st [ i ] > 0 ) st [ i ] ++ ; else st [ i ] -- ; min [ i ] = 0 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; sek [ j ] = sek [ j + 1 ] ; } n -- ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { x = niz [ i ] * 180 / pi ; st [ i ] = ( int ) x ; min [ i ] = ( int ) fabs ( 60 * ( x - st [ i ] ) ) ; sek [ i ] = ( int ) ( ( 60 * ( fabs ( 60 * ( x - st [ i ] ) ) - min [ i ] ) ) + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { if ( st [ i ] > 0 ) st [ i ] ++ ; else st [ i ] -- ; min [ i ] = 0 ; } printf ( ""\n%d stepeni %d minuta %d sekundi"" , st [ i ] , min [ i ] , sek [ i ] ) ; } return 0 ; }"
265,70,70,0,32,A2016/Z3/Z2/student4108,A2016/Z3/Z2/student6877,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define br_el 10 #define br_el2 20 int ubaci ( int * niz , int velicina ) { int cifra , i , br , br2 = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { br = * ( niz + i - 1 ) ; while ( br != 0 ) { cifra = br % 10 ; br2 += cifra ; br /= 10 ; } br2 = abs ( br2 ) ; * ( niz + i ) = br2 ; br2 = 0 ; } } } int main ( ) { int niz [ 10 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < ( n - 1 ) ) { printf ( ""%d"" , niz [ i ] ) ; } else { printf ( ""%d"" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define velniz1 10 #define velniz2 20 void ubaci ( int * niz , int vel1 ) { int i , suma = 0 , zadcifra , broj ; for ( i = vel1 - 1 ; i >= 0 ; i -- ) * ( niz + 2 * i ) = * ( niz + i ) ; for ( i = 0 ; i < vel1 * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { zadcifra = broj % 10 ; suma = suma + zadcifra ; broj = broj / 10 ; } suma = abs ( suma ) ; * ( niz + i ) = suma ; suma = 0 ; } } } int izbaci ( int * niz , int vel2 ) { int i , j , k , prvi , drugi , temp ; for ( i = 0 ; i < vel2 ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 0 ; j < 1000 ; j ++ ) { temp = prvi + drugi ; prvi = drugi ; drugi = temp ; if ( * ( niz + i ) == temp ) { for ( k = i ; k < vel2 - 1 ; k ++ ) { * ( niz + k ) = * ( niz + k + 1 ) ; } vel2 -- ; i -- ; break ; } } } return vel2 ; } int main ( ) { int niz [ 20 ] , i , brclanova ; printf ( ""\nunesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , velniz1 ) ; brclanova = izbaci ( niz , velniz2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < brclanova ; i ++ ) { if ( i < ( brclanova - 1 ) ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d. "" , niz [ i ] ) ; } return 0 ; }"
272,95,95,0,68,A2016/Z2/Z2/student4934,A2016/Z2/Z2/student3610,"#include <stdio.h> #include <math.h> #define pi 3.1415926 #define b 500 int main ( ) { int j , a ; double nstup [ b ] , nmin [ b ] , nsek [ b ] , x [ b ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & a ) ; } while ( a > 500 || a < 0 ) ; for ( j = 0 ; j < a ; j ++ ) { printf ( """" , j + 1 ) ; scanf ( ""%lf"" , & nstup [ j ] ) ; } for ( j = 0 ; j < a ; j ++ ) { nstup [ j ] = nstup [ j ] * ( 180 / pi ) ; if ( nstup [ j ] > 360 ) { nstup [ j ] = ( nstup [ j ] - ( ( int ) ( nstup [ j ] / 360 ) * 360 ) ) ; } nmin [ j ] = ( ( nstup [ j ] * 60 ) - ( int ) nstup [ j ] * 60 ) ; nsek [ j ] = ( nmin [ j ] * 60 ) - ( int ) nmin [ j ] * 60 ; nsek [ j ] = ( floor ( nsek [ j ] + 0.5 ) ) ; if ( ( nsek [ j ] > 30 && nsek [ j ] <= 59.49 ) || ( nsek [ j ] < - 30 && nsek [ j ] >= - 59.49 ) ) { x [ j ] = 0 ; } else { x [ j ] = 1 ; } if ( nsek [ j ] > 59.5 ) { nmin [ j ] = nmin [ j ] + 1 ; nsek [ j ] = 0 ; } else if ( nsek [ j ] < - 59.5 ) { nmin [ j ] = nmin [ j ] - 1 ; nsek [ j ] = 0 ; } if ( nmin [ j ] > 59.5 ) { nstup [ j ] = nstup [ j ] + 1 ; nmin [ j ] = 0 ; } else if ( nmin [ j ] < - 59.5 ) { nstup [ j ] = nstup [ j ] - 1 ; nmin [ j ] = 0 ; } } printf ( ""uglovi su:\n"" ) ; for ( j = 0 ; j < a ; j ++ ) { if ( x [ j ] == 1 ) { nmin [ j ] = fabs ( nmin [ j ] ) ; nsek [ j ] = fabs ( nsek [ j ] ) ; printf ( ""%d stepeni "" , ( int ) nstup [ j ] ) ; printf ( ""%d minuta "" , ( int ) nmin [ j ] ) ; printf ( ""%d sekundi "" , ( int ) nsek [ j ] ) ; printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 #define bmax 500 int main ( ) { int a , b ; double nstepeni [ bmax ] , nminuta [ bmax ] , nsekundi [ bmax ] , c [ bmax ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & b ) ; } while ( b < 0 || b > 500 ) ; for ( a = 0 ; a < b ; a ++ ) { printf ( """" , a + 1 ) ; scanf ( ""%lf"" , & nstepeni [ a ] ) ; } for ( a = 0 ; a < b ; a ++ ) { nstepeni [ a ] = nstepeni [ a ] * ( 180 / pi ) ; if ( nstepeni [ a ] > 360 ) { nstepeni [ a ] = ( nstepeni [ a ] - ( ( int ) ( nstepeni [ a ] / 360 ) * 360 ) ) ; } nminuta [ a ] = ( ( nstepeni [ a ] * 60 ) - ( int ) nstepeni [ a ] * 60 ) ; nsekundi [ a ] = ( nminuta [ a ] * 60 ) - ( int ) nminuta [ a ] * 60 ; nsekundi [ a ] = ( floor ( nsekundi [ a ] + 0.5 ) ) ; if ( ( nsekundi [ a ] > 30 && nsekundi [ a ] <= 59.49 ) || ( nsekundi [ a ] < - 30 && nsekundi [ a ] >= - 59.49 ) ) { c [ a ] = 0 ; } else { c [ a ] = 1 ; } if ( nsekundi [ a ] > 59.5 ) { nminuta [ a ] = nminuta [ a ] + 1 ; nsekundi [ a ] = 0 ; } else if ( nsekundi [ a ] < - 59.5 ) { nminuta [ a ] = nminuta [ a ] - 1 ; nsekundi [ a ] = 0 ; } if ( nminuta [ a ] > 59.5 ) { nstepeni [ a ] = nstepeni [ a ] + 1 ; nminuta [ a ] = 0 ; } else if ( nminuta [ a ] < - 59.5 ) { nstepeni [ a ] = nstepeni [ a ] - 1 ; nminuta [ a ] = 0 ; } } printf ( ""uglovi su:\n"" ) ; for ( a = 0 ; a < b ; a ++ ) { if ( c [ a ] == 1 ) { nminuta [ a ] = fabs ( nminuta [ a ] ) ; nsekundi [ a ] = fabs ( nsekundi [ a ] ) ; printf ( ""%d stepeni %d minuta %d sekundi"" , ( int ) nstepeni [ a ] , ( int ) nminuta [ a ] , ( int ) nsekundi [ a ] ) ; printf ( ""\n"" ) ; } } return 0 ; }"
286,99,99,0,30,A2016/Z2/Z2/student2463,A2016/Z2/Z2/student5222,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int n , i , j , ugao ; float polje [ 500 ] ; int step = 0 , min = 0 , sec = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & polje [ i ] ) ; } printf ( ""uglovi su: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( polje [ i ] >= 0 ) ugao = ( ( polje [ i ] * 180 * 3600 / pi ) + 0.5 ) ; else ugao = ( ( polje [ i ] * 648000 / pi ) - 0.5 ) ; step = ugao / 3600 ; if ( ugao < 0 ) ugao = ugao * - 1 ; sec = ugao % 60 ; ugao = ugao / 60 ; min = ugao % 60 ; if ( sec <= 30 ) { printf ( ""\n%d stepeni"" , step ) ; printf ( "" %d minuta"" , min ) ; printf ( "" %d sekundi"" , sec ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int n , i , j , ugao ; float polje [ 500 ] ; int step = 0 , min = 0 , sec = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & polje [ i ] ) ; } printf ( ""uglovi su: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( polje [ i ] >= 0 ) ugao = ( ( polje [ i ] * 180 * 3600 / pi ) + 0.5 ) ; else ugao = ( ( polje [ i ] * 648000 / pi ) - 0.5 ) ; step = ugao / 3600 ; if ( ugao < 0 ) ugao = ugao * - 1 ; sec = ugao % 60 ; ugao = ugao / 60 ; min = ugao % 60 ; if ( sec <= 30 ) { printf ( ""\n%d stepeni"" , step ) ; printf ( "" %d minuta"" , min ) ; printf ( "" %d sekundi"" , sec ) ; } } return 0 ; }"
291,99,99,0,67,A2016/Z2/Z2/student1278,A2016/Z2/Z2/student8598,"#include <stdio.h> #include <stdlib.h> #define pi 3.1415925 #include <math.h> #define g 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , n , sec , st , min ; double niz [ 500 ] = { 0 } , sekunda , m , b = 0.5 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] *= 180. / pi ; } for ( i = 0 ; i < n ; i ++ ) { m = ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ; sekunda = fabs ( 60 * m ) ; sekunda += b ; sec = sekunda ; if ( sec == 60 ) { sec = 0 ; } if ( sec > 30 ) { for ( j = i ; j < n ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { st = niz [ i ] ; min = abs ( ( 60 * ( niz [ i ] - ( int ) niz [ i ] ) ) ) ; if ( niz [ i ] >= 0 ) { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) + b ) ) ; } else { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) - b ) ) ; } if ( fabs ( sekunda - 60 ) < g ) { min ++ ; sekunda = 0 ; } if ( niz [ i ] >= 0 ) { if ( min >= 60 ) { st ++ ; min = 0 ; } } else { if ( min >= 60 ) { st -- ; min = 0 ; } } sec = sekunda ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , st , min , sec ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define g 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , n , sekundaf , stepen , minuta ; double niz [ 500 ] = { 0 } , sekunda , m , b = 0.5 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] *= 180. / pi ; } for ( i = 0 ; i < n ; i ++ ) { m = ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ; sekunda = fabs ( 60 * m ) ; sekunda += b ; sekundaf = sekunda ; if ( sekundaf == 60 ) { sekundaf = 0 ; } if ( sekundaf > 30 ) { for ( j = i ; j < n ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { stepen = niz [ i ] ; minuta = abs ( ( 60 * ( niz [ i ] - ( int ) niz [ i ] ) ) ) ; if ( niz [ i ] >= 0 ) { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) + b ) ) ; } else { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) - b ) ) ; } if ( fabs ( sekunda - 60 ) < g ) { minuta ++ ; sekunda = 0 ; } if ( niz [ i ] >= 0 ) { if ( minuta >= 60 ) { stepen ++ ; minuta = 0 ; } } else { if ( minuta >= 60 ) { stepen -- ; minuta = 0 ; } } sekundaf = sekunda ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepen , minuta , sekundaf ) ; } return 0 ; }"
293,88,88,0,65,A2016/Z3/Z3/student5624,A2016/Z3/Z3/student6227,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , i , j , k , l , m , n , pret , pret1 , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) matrica [ l ] [ p ] = matrica [ l + 1 ] [ p ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { pret1 = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( matrica [ j ] [ i ] != matrica [ j ] [ k ] ) pret1 = 0 ; } if ( pret1 == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) matrica [ p ] [ l ] = matrica [ p ] [ l + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , a , b , c , d , e , i , j , k , f ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 || a > 200 || b <= 0 || b > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( a <= 0 || a > 200 || b <= 0 || b > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < a - 1 ; i ++ ) { for ( j = i + 1 ; j < a ; j ++ ) { c = 0 ; if ( mat [ i ] [ 0 ] == mat [ j ] [ 0 ] ) { c = 1 ; for ( d = 1 ; d < b ; d ++ ) { if ( mat [ i ] [ d ] != mat [ j ] [ d ] ) c = 0 ; } } if ( c == 1 ) { for ( k = j ; k < a - 1 ; k ++ ) { for ( e = 0 ; e < b ; e ++ ) { mat [ k ] [ e ] = mat [ k + 1 ] [ e ] ; } } a -- ; j -- ; } } } for ( i = 0 ; i < b - 1 ; i ++ ) { for ( j = ( i + 1 ) ; j < b ; j ++ ) { c = 0 ; if ( mat [ 0 ] [ i ] == mat [ 0 ] [ j ] ) { c = 1 ; for ( d = 1 ; d < a ; d ++ ) { if ( mat [ d ] [ i ] != mat [ d ] [ j ] ) c = 0 ; } if ( c == 1 ) { for ( k = j ; k < b - 1 ; k ++ ) { for ( f = 0 ; f < a ; f ++ ) { mat [ f ] [ k ] = mat [ f ] [ k + 1 ] ; } } b -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
299,99,99,0,40,A2016/Z3/Z1/student8532,A2016/Z3/Z1/student3186,"#include <stdio.h> int daj_prost ( ) { static int rbroj = 2 ; int i , brojac = 0 , broj ; for ( i = 1 ; i <= rbroj ; i ++ ) { if ( rbroj % i == 0 ) brojac ++ ; } broj = rbroj ; rbroj ++ ; if ( brojac != 2 ) return daj_prost ( ) ; else return broj ; } int main ( ) { int a , b ; int suma = 0 , prost = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; } while ( a >= b || a < 1 ) ; while ( prost < b ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) suma += prost ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int rbroj = 2 ; int i , brojac = 0 , broj ; for ( i = 1 ; i <= rbroj ; i ++ ) { if ( rbroj % i == 0 ) brojac ++ ; } broj = rbroj ; rbroj ++ ; if ( brojac != 2 ) return daj_prost ( ) ; else return broj ; } int main ( ) { int a , b ; int suma = 0 , prost = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; } while ( a >= b || a < 1 ) ; while ( prost < b ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) suma += prost ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
300,95,95,0,15,A2016/Z1/Z2/student4850,A2016/Z1/Z2/student7258,"#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su "" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se "" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
308,98,98,0,84,A2016/Z3/Z2/student6824,A2016/Z3/Z2/student5899,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define vel 10 #define velicina 20 void ubaci ( int * niz , int vel ) { int i , broj , broj1 , nbroj = 0 , j ; for ( j = vel - 1 ; j >= 0 ; j -- ) { niz [ 2 * j ] = niz [ j ] ; } for ( i = 0 ; i < 2 * vel ; i += 2 ) { broj = abs ( niz [ i ] ) ; if ( broj < 10 ) { nbroj = broj ; } else { do { broj1 = broj % 10 ; nbroj = nbroj + broj1 ; broj = broj / 10 ; } while ( broj != 0 ) ; } niz [ i + 1 ] = nbroj ; nbroj = 0 ; } } int izbaci ( int * niz , int vel ) { int i , j , a = 1 , b = 1 , c , s ; for ( i = 0 ; i < vel ; i ++ ) { a = 1 ; b = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) { c = 1 ; } else { c = a + b ; a = b ; b = c ; } if ( niz [ i ] == c ) { for ( s = i ; s < vel - 1 ; s ++ ) { niz [ s ] = niz [ s + 1 ] ; } vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int niz [ 2 * vel ] , s , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; s = izbaci ( niz , velicina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < s ; i ++ ) { if ( i == s - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define vel 10 #define velicina 20 void ubaci ( int * niz , int vel ) { int i , broj , broj1 , nbroj = 0 , j ; for ( j = vel - 1 ; j >= 0 ; j -- ) { niz [ 2 * j ] = niz [ j ] ; } for ( i = 0 ; i < 2 * vel ; i += 2 ) { broj = abs ( niz [ i ] ) ; if ( broj < 10 ) { nbroj = broj ; } else { do { broj1 = broj % 10 ; nbroj = nbroj + broj1 ; broj = broj / 10 ; } while ( broj != 0 ) ; } niz [ i + 1 ] = nbroj ; nbroj = 0 ; } } int izbaci ( int * niz , int vel ) { int i , j , a = 1 , b = 1 , c , s ; for ( i = 0 ; i < vel ; i ++ ) { a = 1 ; b = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) { c = 1 ; } else { c = a + b ; a = b ; b = c ; } if ( niz [ i ] == c ) { for ( s = i ; s < vel - 1 ; s ++ ) { niz [ s ] = niz [ s + 1 ] ; } vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int niz [ 2 * vel ] , s , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; s = izbaci ( niz , velicina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < s ; i ++ ) { if ( i == s - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
331,93,93,0,65,A2016/Z3/Z3/student7485,A2016/Z3/Z3/student4682,"#include <stdio.h> int main ( ) { int i , j , mat [ 200 ] [ 200 ] , m , n , isti_red , ista_kolona , l = 0 , g = 0 , k = 0 , z = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti_red = 1 ; for ( l = 0 ; l < n ; l ++ ) if ( mat [ i ] [ l ] != mat [ j ] [ l ] ) isti_red = 0 ; if ( isti_red == 1 ) { g = 0 ; for ( l = j ; l < m ; l ++ ) { for ( g = 0 ; g < n ; g ++ ) mat [ l ] [ g ] = mat [ l + 1 ] [ g ] ; } m -- ; i -- ; break ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { ista_kolona = 1 ; for ( k = 0 ; k < m ; k ++ ) if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) ista_kolona = 0 ; if ( ista_kolona == 1 ) { for ( k = i ; k < n ; k ++ ) { for ( z = 0 ; z < m ; z ++ ) mat [ z ] [ k ] = mat [ z ] [ k + 1 ] ; } n -- ; j -- ; break ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , m , n , mat [ 200 ] [ 200 ] , isti_r , iste_k , k = 0 , l = 0 , a = 0 , b = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m <= 0 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || n > 200 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti_r = 1 ; for ( k = 0 ; k < n ; k ++ ) if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) isti_r = 0 ; if ( isti_r == 1 ) { l = 0 ; for ( k = j ; k < m ; k ++ ) { for ( l = 0 ; l < n ; l ++ ) mat [ k ] [ l ] = mat [ k + 1 ] [ l ] ; } m -- ; i -- ; break ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { iste_k = 1 ; for ( a = 0 ; a < m ; a ++ ) if ( mat [ a ] [ i ] != mat [ a ] [ j ] ) iste_k = 0 ; if ( iste_k == 1 ) { for ( a = i ; a < n ; a ++ ) { for ( b = 0 ; b < m ; b ++ ) mat [ b ] [ a ] = mat [ b ] [ a + 1 ] ; } n -- ; j -- ; break ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
347,21,21,0,14,A2016/Z4/Z2/student2351,A2016/Z4/Z2/student8631,"#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }","#include <stdio.h> void sortiraj ( int * niz , int * sort , int * index ) { int i , j ; int temp ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j ++ ) { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && index [ i ] > index [ j ] ) { temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } } } } void pretvori ( char * s , char * sifrarnik ) { char * p = s , * kljuc = sifrarnik ; int br ; while ( * p != '\0' ) { br = 0 ; kljuc = sifrarnik ; while ( * kljuc != '\0' ) { if ( * p == * kljuc ++ ) { * p = 126 - br ; break ; } br ++ ; } p ++ ; } } char * kodiraj ( char * s , char * sifrarnik ) { char * p = s , * pok = sifrarnik ; int i ; int niz [ 127 ] ; int sort [ 127 ] ; int index [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; index [ i ] = - 1 ; } else { niz [ i ] = 0 ; index [ i ] = i ; } } while ( * p != '\0' ) { niz [ * p + 0 ] ++ ; p ++ ; } for ( i = 0 ; i < 127 ; i ++ ) sort [ i ] = niz [ i ] ; sortiraj ( niz , sort , index ) ; for ( i = 0 ; i < 127 ; i ++ ) { if ( index [ i ] != - 1 ) { * pok = index [ i ] ; pok ++ ; } } pretvori ( s , sifrarnik ) ; return s ; } char * dekodiraj ( char * s , char * sifrarnik ) { char * p = s ; while ( * p != '\0' ) { * p = sifrarnik [ 126 - * p ] ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""u ovom testu cemo testirati samo kodiranje"" ; char sifrarnik [ 100 ] = """" ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; printf ( ""%s\n"" , sifrarnik ) ; return 0 ; }"
350,97,97,0,24,A2016/Z2/Z1/student6720,A2016/Z2/Z1/student4628,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , br1 , br2 , m = 0 , d_jedinica = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; do { if ( n < 0 ) n = abs ( n ) ; if ( n < 10 ) break ; br1 = n % 10 ; n = n / 10 ; br2 = n % 10 ; m = m + abs ( br1 - br2 ) * d_jedinica ; d_jedinica *= 10 ; } while ( n >= 10 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int n , br1 , br2 , m = 0 , d_jedinica = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; do { if ( n < 0 ) n = abs ( n ) ; if ( n < 10 ) break ; br1 = n % 10 ; n = n / 10 ; br2 = n % 10 ; m = m + abs ( br1 - br2 ) * d_jedinica ; d_jedinica *= 10 ; } while ( n >= 10 ) ; printf ( ""%d"" , m ) ; return 0 ; }"
356,99,99,0,85,A2016/Z4/Z4/student2463,A2016/Z4/Z4/student5222,"#include <stdio.h> char * obuhvat ( char * s , double xprim , double yprim , double xsec , double ysec ) { char * p = s , * pi , * ci , * pt , * kt ; int znakx , znaky ; double k , x1 , x2 , y1 , y2 , x , y ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; if ( * p == '(' ) { pt = p ; p ++ ; znakx = 1 ; x = 0 ; if ( * p == '-' ) { p ++ ; znakx = - 1 ; } else if ( * p < '0' || * p > '9' ) return 0 ; while ( * p >= '0' && * p <= '9' ) { x = x * 10 + * p - '0' ; p ++ ; } if ( * p == '.' ) { x2 = 0 ; p ++ ; k = 10 ; while ( * p >= '0' && * p <= '9' ) { x2 = x2 + ( * p - '0' ) / k ; p ++ ; k *= 10 ; } x = x + x2 ; } else if ( * p != ',' ) return 0 ; if ( * p == ',' ) { p ++ ; znaky = 1 ; y = 0 ; if ( * p == '-' ) { p ++ ; znaky = - 1 ; } else if ( * p < '0' || * p > '9' ) return 0 ; while ( * p >= '0' && * p <= '9' ) { y = y * 10 + * p - '0' ; p ++ ; } kt = p + 1 ; if ( * p == '.' ) { y2 = 0 ; p ++ ; k = 10 ; while ( * p >= '0' && * p <= '9' ) { y2 = y2 + ( * p - '0' ) / k ; p ++ ; k *= 10 ; } y = y + y2 ; kt = p + 1 ; } else if ( * p != ')' ) return 0 ; } y = y * znaky ; x = x * znakx ; if ( x < xprim || x > xsec || y < yprim || y > ysec ) { if ( * kt == ',' ) kt ++ ; pi = pt , ci = kt ; while ( * ci != - '\0' ) { * pi ++ = * ci ++ ; } * pi = '\0' ; p = pt - 1 ; } } p ++ ; } p = s ; while ( * p != '\0' ) p ++ ; if ( p != s && * ( p - 1 ) == ',' ) * ( p - 1 ) = '\0' ; return s ; } int main ( ) { char s [ 100 ] = ""(0,-3.1),(-15.09,4),(2.,2),(-1.1,217)"" ; obuhvat ( s , 0 , 0 , 0 , 0 ) ; printf ( ""%s"" , s ) ; return 0 ; }","#include <stdio.h> char * obuhvat ( char * s , double xprim , double yprim , double xsec , double ysec ) { char * p = s , * pi , * ci , * pt , * kt ; int znakx , znaky ; double k , x1 , x2 , y1 , y2 , x , y ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; if ( * p == '(' ) { pt = p ; p ++ ; znakx = 1 ; x = 0 ; if ( * p == '-' ) { p ++ ; znakx = - 1 ; } else if ( * p < '0' || * p > '9' ) return 0 ; while ( * p >= '0' && * p <= '9' ) { x = x * 10 + * p - '0' ; p ++ ; } if ( * p == '.' ) { x2 = 0 ; p ++ ; k = 10 ; while ( * p >= '0' && * p <= '9' ) { x2 = x2 + ( * p - '0' ) / k ; p ++ ; k *= 10 ; } x = x + x2 ; } else if ( * p != ',' ) return 0 ; if ( * p == ',' ) { p ++ ; znaky = 1 ; y = 0 ; if ( * p == '-' ) { p ++ ; znaky = - 1 ; } else if ( * p < '0' || * p > '9' ) return 0 ; while ( * p >= '0' && * p <= '9' ) { y = y * 10 + * p - '0' ; p ++ ; } kt = p + 1 ; if ( * p == '.' ) { y2 = 0 ; p ++ ; k = 10 ; while ( * p >= '0' && * p <= '9' ) { y2 = y2 + ( * p - '0' ) / k ; p ++ ; k *= 10 ; } y = y + y2 ; kt = p + 1 ; } else if ( * p != ')' ) return 0 ; } y = y * znaky ; x = x * znakx ; if ( x < xprim || x > xsec || y < yprim || y > ysec ) { if ( * kt == ',' ) kt ++ ; pi = pt , ci = kt ; while ( * ci != - '\0' ) { * pi ++ = * ci ++ ; } * pi = '\0' ; p = pt - 1 ; } } p ++ ; } p = s ; while ( * p != '\0' ) p ++ ; if ( p != s && * ( p - 1 ) == ',' ) * ( p - 1 ) = '\0' ; return s ; } int main ( ) { char s [ 100 ] = ""(0,-3.1),(-15.09,4),(2.,2),(-1.1,217)"" ; obuhvat ( s , 0 , 0 , 0 , 0 ) ; printf ( ""%s"" , s ) ; return 0 ; }"
362,98,98,0,54,A2016/Z2/Z4/student4903,A2016/Z2/Z4/student5713,"#include <stdio.h> #include <math.h> #define epsilon 0.0001 int m , n , i , j , teplicova = 0 , cirkularna = 0 , kraj = 0 , k , l ; double niz [ 100 ] [ 100 ] ; int main ( ) { do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & niz [ i ] [ j ] ) ; } } if ( m == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } if ( n == 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } if ( fabs ( niz [ 0 ] [ n - 1 ] - niz [ 1 ] [ 0 ] ) < epsilon ) { for ( k = 0 ; k < m - 1 ; k ++ ) { for ( l = 0 ; l < n - 1 ; l ++ ) { if ( fabs ( niz [ k ] [ n - 1 ] - niz [ k + 1 ] [ 0 ] ) < epsilon ) { if ( fabs ( niz [ k ] [ l ] - niz [ k + 1 ] [ l + 1 ] ) < epsilon ) cirkularna = 1 ; else { cirkularna = 0 ; break ; kraj = 1 ; } } else { cirkularna = 0 ; kraj = 1 ; } } if ( kraj == 1 ) break ; } } else cirkularna = 0 ; if ( cirkularna == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( fabs ( niz [ i - 1 ] [ j - 1 ] - niz [ i ] [ j ] ) < epsilon ) teplicova = 1 ; else { teplicova = 0 ; break ; } } if ( teplicova == 0 ) break ; } if ( teplicova == 1 && cirkularna != 1 ) printf ( ""matrica je teplicova"" ) ; if ( teplicova != 1 && cirkularna != 1 ) printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0001 int m , n , i , j , teplicova = 0 , cirkularna = 0 , kraj = 0 , k , l ; double niz [ 100 ] [ 100 ] ; int main ( ) { do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & niz [ i ] [ j ] ) ; } } if ( m == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } if ( n == 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } if ( fabs ( niz [ 0 ] [ n - 1 ] - niz [ 1 ] [ 0 ] ) < epsilon ) { for ( k = 0 ; k < m - 1 ; k ++ ) { for ( l = 0 ; l < n - 1 ; l ++ ) { if ( fabs ( niz [ k ] [ n - 1 ] - niz [ k + 1 ] [ 0 ] ) < epsilon ) { if ( fabs ( niz [ k ] [ l ] - niz [ k + 1 ] [ l + 1 ] ) < epsilon ) cirkularna = 1 ; else { cirkularna = 0 ; break ; kraj = 1 ; } } else { cirkularna = 0 ; kraj = 1 ; } } if ( kraj == 1 ) break ; } } else cirkularna = 0 ; if ( cirkularna == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( fabs ( niz [ i - 1 ] [ j - 1 ] - niz [ i ] [ j ] ) < epsilon ) teplicova = 1 ; else { teplicova = 0 ; break ; } } if ( teplicova == 0 ) break ; } if ( teplicova == 1 && cirkularna != 1 ) printf ( ""matrica je teplicova"" ) ; if ( teplicova != 1 && cirkularna != 1 ) printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
370,52,52,0,44,A2016/Z3/Z2/student5533,A2016/Z3/Z2/student3557,"#include <stdio.h> void ubaci ( int * niz , int vel ) { int niz1 [ 30 ] , i , j = 0 , suma = 0 , broj ; for ( i = 0 ; i < vel ; i ++ ) { niz1 [ j ] = niz [ i ] ; j ++ ; broj = niz [ i ] ; suma = 0 ; while ( broj != 0 ) { suma += broj % 10 ; broj /= 10 ; } if ( suma < 0 ) suma *= - 1 ; niz1 [ j ] = suma ; j ++ ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { niz [ i ] = niz1 [ i ] ; } } int izbaci ( int * niz , int vel ) { int fib [ 300 ] , i , j , k ; fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( i = 2 ; i < 300 ; i ++ ) { fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; } for ( i = 0 ; i < vel ; i ++ ) for ( j = 0 ; j < 300 ; j ++ ) if ( fib [ j ] == niz [ i ] ) { for ( k = i ; k < vel - 1 ; k ++ ) niz [ k ] = niz [ k + 1 ] ; vel -- ; i -- ; break ; } return vel ; } int main ( ) { int i , niz [ 30 ] , vel = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , vel ) ; vel = vel * 2 ; vel = izbaci ( niz , vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i <= vel - 2 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> void ubaci ( int * niz , int n ) { int i = 0 , a , cifra , suma = 0 , niz2 [ 100 ] ; niz2 [ 0 ] = niz [ 0 ] ; int j = 2 ; for ( i = 1 ; i < n ; i ++ ) { niz2 [ j ] = niz [ i ] ; j += 2 ; } j = 1 ; for ( i = 0 ; i < n ; i ++ ) { a = niz [ i ] ; suma = 0 ; if ( a < 0 ) a *= - 1 ; while ( a != 0 ) { cifra = a % 10 ; suma += cifra ; a /= 10 ; } niz2 [ j ] = suma ; j += 2 ; } for ( i = 0 ; i < 2 * n ; i ++ ) niz [ i ] = niz2 [ i ] ; } int izbaci ( int * niz , int n ) { int fib [ 1000 ] , i = 0 , j = 0 , k = 0 ; fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ] ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 100 ; j ++ ) { if ( niz [ i ] == fib [ j ] ) { for ( k = i ; k < n - 1 ; k ++ ) { niz [ k ] = niz [ k + 1 ] ; } n -- ; i -- ; break ; } } } return n ; } int main ( ) { int i = 0 , niz [ 1000 ] , n = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n += n ; n = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi:"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( "" %d"" , niz [ i ] ) ; if ( i < n - 1 ) printf ( "","" ) ; if ( i == n - 1 ) printf ( ""."" ) ; } return 0 ; }"
376,99,99,0,130,A2016/Z3/Z3/student1833,A2016/Z3/Z3/student9897,"#include <stdio.h> int br_redova = 1 , br_kolona = 5 ; int mat [ 200 ] [ 200 ] ; void ispisi ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int br_redova ) { int i , j ; for ( i = 0 ; i < br_redova ; i ++ ) { for ( j = 0 ; j < br_kolona ; j ++ ) { if ( mat [ i ] [ j ] < - 1000 ) { printf ( ""%d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < - 100 ) { printf ( "" %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < - 10 ) { printf ( ""  %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 0 ) { printf ( ""   %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 10 ) { printf ( ""    %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 100 ) { printf ( ""   %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 1000 ) { printf ( ""  %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 10000 ) { printf ( "" %d"" , mat [ i ] [ j ] ) ; } } printf ( ""\n"" ) ; } } int jesuliisti ( int * niz1 , int * niz2 ) { int i ; for ( i = 0 ; i < br_kolona ; i ++ ) { if ( niz1 [ i ] != niz2 [ i ] ) { return 0 ; } } return 1 ; } void izbacired ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int broj ) { int i , j , k ; for ( i = 0 ; i < br_redova ; i ++ ) { if ( i == broj ) { for ( k = i ; k < br_redova ; k ++ ) { for ( j = 0 ; j < br_kolona ; j ++ ) { mat [ k ] [ j ] = mat [ k + 1 ] [ j ] ; } } return ; } } } int jesuliiste ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int prva , int druga ) { int j ; for ( j = 0 ; j < br_redova ; j ++ ) { if ( mat [ j ] [ prva ] != mat [ j ] [ druga ] ) return 0 ; } return 1 ; } int izbaciredove ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int br_redova ) { int i , j , k ; for ( i = 0 ; i < br_redova ; i ++ ) { for ( j = i + 1 ; j < br_redova ; j ++ ) { if ( jesuliisti ( mat [ i ] , mat [ j ] ) ) { izbacired ( mat , j ) ; br_redova -- ; if ( jesuliisti ( mat [ i ] , mat [ j ] ) && br_redova > 1 ) { j -- ; } } } } return br_redova ; } void izbacikolonu ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int broj ) { int i , j ; for ( i = broj ; i < br_kolona ; i ++ ) { for ( j = 0 ; j < br_redova ; j ++ ) { mat [ j ] [ i ] = mat [ j ] [ i + 1 ] ; } } } void izbacikolone ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int br_redova ) { int i , j , k ; for ( i = 0 ; i < br_kolona ; i ++ ) { for ( j = i + 1 ; j < br_kolona ; j ++ ) { if ( jesuliiste ( mat , i , j ) ) { izbacikolonu ( mat , j ) ; br_kolona -- ; if ( jesuliiste ( mat , i , j ) ) { j -- ; } } } } } int main ( ) { int m , n , i , j ; while ( 1 ) { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 0 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } else if ( n < 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } else break ; } printf ( ""unesite elemente matrice: "" ) ; br_redova = m ; br_kolona = n ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; br_redova = izbaciredove ( mat , br_redova ) ; izbacikolone ( mat , br_redova ) ; ispisi ( mat , br_redova ) ; return 0 ; }","#include <stdio.h> int br_redova = 1 , br_kolona = 5 ; int mat [ 200 ] [ 200 ] ; void ispisi ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int br_redova ) { int i , j ; for ( i = 0 ; i < br_redova ; i ++ ) { for ( j = 0 ; j < br_kolona ; j ++ ) { if ( mat [ i ] [ j ] < - 1000 ) { printf ( ""%d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < - 100 ) { printf ( "" %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < - 10 ) { printf ( ""  %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 0 ) { printf ( ""   %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 10 ) { printf ( ""    %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 100 ) { printf ( ""   %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 1000 ) { printf ( ""  %d"" , mat [ i ] [ j ] ) ; } else if ( mat [ i ] [ j ] < 10000 ) { printf ( "" %d"" , mat [ i ] [ j ] ) ; } } printf ( ""\n"" ) ; } } int jesuliisti ( int * niz1 , int * niz2 ) { int i ; for ( i = 0 ; i < br_kolona ; i ++ ) { if ( niz1 [ i ] != niz2 [ i ] ) { return 0 ; } } return 1 ; } void izbacired ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int broj ) { int i , j , k ; for ( i = 0 ; i < br_redova ; i ++ ) { if ( i == broj ) { for ( k = i ; k < br_redova ; k ++ ) { for ( j = 0 ; j < br_kolona ; j ++ ) { mat [ k ] [ j ] = mat [ k + 1 ] [ j ] ; } } return ; } } } int jesuliiste ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int prva , int druga ) { int j ; for ( j = 0 ; j < br_redova ; j ++ ) { if ( mat [ j ] [ prva ] != mat [ j ] [ druga ] ) return 0 ; } return 1 ; } int izbaciredove ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int br_redova ) { int i , j , k ; for ( i = 0 ; i < br_redova ; i ++ ) { for ( j = i + 1 ; j < br_redova ; j ++ ) { if ( jesuliisti ( mat [ i ] , mat [ j ] ) ) { izbacired ( mat , j ) ; br_redova -- ; if ( jesuliisti ( mat [ i ] , mat [ j ] ) && br_redova > 1 ) { j -- ; } } } } return br_redova ; } void izbacikolonu ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int broj ) { int i , j ; for ( i = broj ; i < br_kolona ; i ++ ) { for ( j = 0 ; j < br_redova ; j ++ ) { mat [ j ] [ i ] = mat [ j ] [ i + 1 ] ; } } } void izbacikolone ( int mat [ ] [ sizeof ( mat [ 0 ] ) / sizeof ( * mat [ 0 ] ) ] , int br_redova ) { int i , j , k ; for ( i = 0 ; i < br_kolona ; i ++ ) { for ( j = i + 1 ; j < br_kolona ; j ++ ) { if ( jesuliiste ( mat , i , j ) ) { izbacikolonu ( mat , j ) ; br_kolona -- ; if ( jesuliiste ( mat , i , j ) ) { j -- ; } } } } } int main ( ) { int m , n , i , j ; while ( 1 ) { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 0 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } else if ( n < 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } else break ; } printf ( ""unesite elemente matrice: "" ) ; br_redova = m ; br_kolona = n ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; br_redova = izbaciredove ( mat , br_redova ) ; izbacikolone ( mat , br_redova ) ; ispisi ( mat , br_redova ) ; return 0 ; }"
389,91,91,0,63,A2016/Z3/Z3/student2142,A2016/Z3/Z3/student9388,"#include <stdio.h> int main ( ) { int m , n , matrica [ 200 ] [ 200 ] , i , j , k , e , f , jeste , m , n ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } m = m ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { jeste = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = j ; e < m - 1 ; e ++ ) { for ( f = 0 ; f < n ; f ++ ) { matrica [ e ] [ f ] = matrica [ e + 1 ] [ f ] ; } } j -- ; m -- ; } } } n = n ; for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { jeste = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ j ] != matrica [ k ] [ i ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = i ; e < n - 1 ; e ++ ) { for ( f = 0 ; f < m ; f ++ ) { matrica [ f ] [ e ] = matrica [ f ] [ e + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , l , r , p ; printf ( ""unesite brojeve m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; printf ( ""unesite brojeve m i n: "" ) ; continue ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { p = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { p = 0 ; break ; } } if ( p == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( r = 0 ; r < n ; r ++ ) { mat [ l ] [ r ] = mat [ l + 1 ] [ r ] ; } } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { p = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { p = 0 ; break ; } } if ( p == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( r = 0 ; r < m ; r ++ ) { mat [ r ] [ l ] = mat [ r ] [ l + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
390,84,84,0,124,A2016/Z4/Z3/student4473,A2016/Z4/Z3/student3315,"#include <stdio.h> int uporedi ( char * prva , char * druga , int duzina ) { char * p = prva , * d = druga ; int brojac = 0 ; while ( * d != '\0' ) { if ( * p != * d ) return 0 ; p ++ ; d ++ ; brojac ++ ; } if ( * d == '\0' && brojac != duzina ) return 0 ; return 1 ; } char * prepisi ( char * tekst , char * prva , char * druga , int duzina , int brojac ) { int i ; char * d = druga , * kraj = tekst , * p = prva ; if ( brojac == 0 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = prva ; while ( pok != kraj - duzina ) { * pok = * ( pok + duzina ) ; pok ++ ; } * pok = '\0' ; return tekst ; } if ( brojac != duzina ) { if ( brojac == 1 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = prva + 1 ; while ( pok != kraj - duzina + 1 ) { * pok = * ( pok + duzina - 1 ) ; pok ++ ; } * pok = '\0' ; * prva = * druga ; return tekst ; } while ( * kraj != '\0' ) kraj ++ ; if ( brojac > duzina ) { while ( kraj != p ) { * ( kraj + brojac - duzina ) = * kraj ; kraj -- ; } } if ( brojac < duzina ) { char * oduzima = p + duzina - brojac - 1 ; while ( oduzima != kraj - ( duzina - brojac ) ) { * oduzima = * ( oduzima + duzina - brojac ) ; oduzima ++ ; } * oduzima = '\0' ; } } for ( i = 0 ; i < brojac ; i ++ ) * ( p + i ) = * ( d + i ) ; return tekst ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , j = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , zamjena_velicina [ 50 ] = { 0 } ; char * p , * pok [ 100 ] , * p_rijec [ 100 ] , * p_zamjena [ 100 ] ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_zamjena [ i ] = zamjene [ i ] ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { char * z = p_zamjena [ i ] ; while ( * z != '\0' ) { zamjena_velicina [ i ] ++ ; z ++ ; } } for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_rijec [ i ] = rijeci [ i ] ; } p = tekst ; pok [ j ] = p ; i = 0 ; while ( * p != '\0' ) { if ( * p == ' ' ) { brojac_rijeci ++ ; do { p ++ ; } while ( * p == ' ' ) ; i ++ ; j ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } int k , z ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , p_rijec [ j ] , brojac_slova [ i ] ) ) { tekst = prepisi ( tekst , pok [ i ] , p_zamjena [ j ] , brojac_slova [ i ] , zamjena_velicina [ j ] ) ; int z ; if ( zamjena_velicina [ j ] > brojac_slova [ i ] ) { for ( k = 0 ; k < zamjena_velicina [ j ] - brojac_slova [ i ] ; k ++ ) { for ( z = i ; z < brojac_rijeci ; z ++ ) pok [ z + 1 ] ++ ; } } if ( zamjena_velicina [ j ] < brojac_slova [ i ] ) { for ( k = 0 ; k < - zamjena_velicina [ j ] + brojac_slova [ i ] ; k ++ ) { for ( z = i ; z < brojac_rijeci ; z ++ ) pok [ z + 1 ] -- ; } } } } } return tekst ; } int main ( ) { char * rijeci [ 3 ] = { ""proba"" , ""ovo"" , ""je"" } ; char * zamjene [ 3 ] = { ""a"" , ""a"" , ""a"" } ; char tekst [ 100 ] = ""ovo je proba"" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 3 ) ) ; return 0 ; }","#include <stdio.h> int uporedi ( char * rijec1 , char * rijec2 , int duzina ) { char * m = rijec1 , * n = rijec2 ; int brojac = 0 ; while ( * n != '\0' ) { if ( * m != * n ) return 0 ; m ++ ; n ++ ; brojac ++ ; } if ( * n == '\0' && brojac != duzina ) return 0 ; return 1 ; } char * prepisi ( char * tekst , char * rijec1 , char * rijec2 , int duzina , int brojac ) { int i ; char * n = rijec2 , * kraj = tekst , * m = rijec1 ; if ( brojac == 0 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = rijec1 ; while ( pok != kraj - duzina ) { * pok = * ( pok + duzina ) ; pok ++ ; } * pok = '\0' ; return tekst ; } if ( brojac != duzina ) { if ( brojac == 1 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = rijec1 + 1 ; while ( pok != kraj - duzina + 1 ) { * pok = * ( pok + duzina - 1 ) ; pok ++ ; } * rijec1 = * rijec2 ; return tekst ; } while ( * kraj != '\0' ) kraj ++ ; if ( brojac > duzina ) { while ( kraj != m ) { * ( kraj + brojac - duzina ) = * kraj ; kraj -- ; } } if ( brojac < duzina ) { char * oduzima = m + duzina - brojac - 1 ; while ( oduzima != kraj - ( duzina - brojac ) ) { * oduzima = * ( oduzima + duzina - brojac ) ; oduzima ++ ; } } } for ( i = 0 ; i < brojac ; i ++ ) * ( m + i ) = * ( n + i ) ; return tekst ; } char * p , * pok [ 100 ] , * p_rijec [ 100 ] , * p_zamjena [ 100 ] ; char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , j = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , zamjena_velicina [ 50 ] = { 0 } ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_zamjena [ i ] = zamjene [ i ] ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { char * z = p_zamjena [ i ] ; while ( * z != '\0' ) { zamjena_velicina [ i ] ++ ; z ++ ; } } for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_rijec [ i ] = rijeci [ i ] ; } p = tekst ; pok [ j ] = p ; i = 0 ; while ( * p != '\0' ) { if ( * p == ' ' ) { brojac_rijeci ++ ; do { p ++ ; } while ( * p == ' ' ) ; i ++ ; j ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } int a , b ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , p_rijec [ j ] , brojac_slova [ i ] ) ) { tekst = prepisi ( tekst , pok [ i ] , p_zamjena [ j ] , brojac_slova [ i ] , zamjena_velicina [ j ] ) ; if ( zamjena_velicina [ j ] > brojac_slova [ i ] ) { for ( a = 0 ; a < zamjena_velicina [ j ] - brojac_slova [ i ] ; a ++ ) { for ( b = i ; b < brojac_rijeci ; b ++ ) pok [ b + 1 ] ++ ; } } if ( zamjena_velicina [ j ] < brojac_slova [ i ] ) { for ( a = 0 ; a < - zamjena_velicina [ j ] + brojac_slova [ i ] ; a ++ ) { for ( b = i ; b < brojac_rijeci ; b ++ ) pok [ b + 1 ] -- ; } } } } } return tekst ; } int main ( ) { char tekst [ 100 ] = ""ispisi dati tekst"" ; char * rijeci [ 3 ] = { ""proba"" , ""ovo"" , ""je"" } ; char * zamjene [ 3 ] = { ""a"" , ""a"" , ""a"" } ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 3 ) ) ; return 0 ; }"
392,99,99,0,116,A2016/Z1/Z1/student2160,A2016/Z1/Z1/student8189,"#include <stdio.h> #include <math.h> int main ( ) { double t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , x1 , x2 , x3 , x4 , x5 , t , b , m ; int ocjenat , ocjenab , ocjenam ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & t5 ) ; if ( t5 < 0 || t5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & b5 ) ; if ( b5 < 0 || b5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } t = t1 + t2 + t3 + t4 + t5 ; b = b1 + b2 + b3 + b4 + b5 ; m = x1 + x2 + x3 + x4 + x5 ; if ( t < 55 && b < 55 && m < 55 ) printf ( ""nijedan student nije polozio.\n"" ) ; else if ( ( t >= 55 && b < 55 && m < 55 ) || ( t < 55 && b >= 55 && m < 55 ) || ( t < 55 && b < 55 && m >= 55 ) ) printf ( ""jedan student je polozio.\n"" ) ; else if ( ( t >= 55 && b >= 55 && m < 55 ) || ( t < 55 && b >= 55 && m >= 55 ) || ( t >= 55 && b < 55 && m >= 55 ) ) printf ( ""dva studenta su polozila.\n"" ) ; if ( t < 55 ) ocjenat = 5 ; else if ( t >= 55 && t < 65 ) ocjenat = 6 ; else if ( t >= 65 && t < 75 ) ocjenat = 7 ; else if ( t >= 75 && t < 85 ) ocjenat = 8 ; else if ( t >= 85 && t < 95 ) ocjenat = 9 ; else if ( t >= 95 && t <= 100 ) ocjenat = 10 ; if ( b < 55 ) ocjenab = 5 ; else if ( b >= 55 && b < 65 ) ocjenab = 6 ; else if ( b >= 65 && b < 75 ) ocjenab = 7 ; else if ( b >= 75 && b < 85 ) ocjenab = 8 ; else if ( b >= 85 && b < 95 ) ocjenab = 9 ; else if ( b >= 95 && b <= 100 ) ocjenab = 10 ; if ( m < 55 ) ocjenam = 5 ; else if ( m >= 55 && m < 65 ) ocjenam = 6 ; else if ( m >= 65 && m < 75 ) ocjenam = 7 ; else if ( m >= 75 && m < 85 ) ocjenam = 8 ; else if ( m >= 85 && m < 95 ) ocjenam = 9 ; else if ( m >= 95 && m <= 100 ) ocjenam = 10 ; if ( t >= 55 && b >= 55 && m >= 55 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ( ocjenat == ocjenab ) && ( ocjenab == ocjenam ) && ( ocjenat == ocjenam ) ) { printf ( ""sva tri studenta imaju istu ocjenu."" ) ; } else if ( ( ocjenat != ocjenam ) && ( ocjenab != ocjenam ) && ( ocjenat != ocjenab ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } else if ( ( ( ocjenat == ocjenab ) && ( ocjenab != ocjenam ) ) || ( ( ocjenat == ocjenam ) && ( ocjenat != ocjenab ) ) || ( ( ocjenab == ocjenam ) && ( ocjenam != ocjenat ) ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { double t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , x1 , x2 , x3 , x4 , x5 , t , b , m ; int ocjenat , ocjenab , ocjenam ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & t5 ) ; if ( t5 < 0 || t5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & b5 ) ; if ( b5 < 0 || b5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } t = t1 + t2 + t3 + t4 + t5 ; b = b1 + b2 + b3 + b4 + b5 ; m = x1 + x2 + x3 + x4 + x5 ; if ( t < 55 && b < 55 && m < 55 ) printf ( ""nijedan student nije polozio.\n"" ) ; else if ( ( t >= 55 && b < 55 && m < 55 ) || ( t < 55 && b >= 55 && m < 55 ) || ( t < 55 && b < 55 && m >= 55 ) ) printf ( ""jedan student je polozio.\n"" ) ; else if ( ( t >= 55 && b >= 55 && m < 55 ) || ( t < 55 && b >= 55 && m >= 55 ) || ( t >= 55 && b < 55 && m >= 55 ) ) printf ( ""dva studenta su polozila.\n"" ) ; if ( t < 55 ) ocjenat = 5 ; else if ( t >= 55 && t < 65 ) ocjenat = 6 ; else if ( t >= 65 && t < 75 ) ocjenat = 7 ; else if ( t >= 75 && t < 85 ) ocjenat = 8 ; else if ( t >= 85 && t < 95 ) ocjenat = 9 ; else if ( t >= 95 && t <= 100 ) ocjenat = 10 ; if ( b < 55 ) ocjenab = 5 ; else if ( b >= 55 && b < 65 ) ocjenab = 6 ; else if ( b >= 65 && b < 75 ) ocjenab = 7 ; else if ( b >= 75 && b < 85 ) ocjenab = 8 ; else if ( b >= 85 && b < 95 ) ocjenab = 9 ; else if ( b >= 95 && b <= 100 ) ocjenab = 10 ; if ( m < 55 ) ocjenam = 5 ; else if ( m >= 55 && m < 65 ) ocjenam = 6 ; else if ( m >= 65 && m < 75 ) ocjenam = 7 ; else if ( m >= 75 && m < 85 ) ocjenam = 8 ; else if ( m >= 85 && m < 95 ) ocjenam = 9 ; else if ( m >= 95 && m <= 100 ) ocjenam = 10 ; if ( t >= 55 && b >= 55 && m >= 55 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ( ocjenat == ocjenab ) && ( ocjenab == ocjenam ) && ( ocjenat == ocjenam ) ) { printf ( ""sva tri studenta imaju istu ocjenu."" ) ; } else if ( ( ocjenat != ocjenam ) && ( ocjenab != ocjenam ) && ( ocjenat != ocjenab ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } else if ( ( ( ocjenat == ocjenab ) && ( ocjenab != ocjenam ) ) || ( ( ocjenat == ocjenam ) && ( ocjenat != ocjenab ) ) || ( ( ocjenab == ocjenam ) && ( ocjenam != ocjenat ) ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } } return 0 ; }"
398,97,97,0,23,A2016/Z1/Z4/student5529,A2016/Z1/Z4/student6571,"#include <stdio.h> int main ( ) { int n , i , j , m , polovica ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; m = 4 * n ; polovica = n * 2 ; if ( n == 1 ) printf ( ""**"" ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= m - 1 ; j ++ ) { if ( j == i || j == polovica - i || j == polovica + i - 2 || j == m - i - 2 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j , m , polovica ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; m = 4 * n ; polovica = n * 2 ; if ( n == 1 ) printf ( ""**"" ) ; for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= m - 1 ; j ++ ) { if ( j == i || j == polovica - i || j == polovica + i - 2 || j == m - i - 2 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
406,89,89,0,68,A2016/Z1/Z3/student2160,A2016/Z1/Z3/student1029,"#include <stdio.h> int main ( ) { int brc = 0 , brb = 0 , brs = 0 , brv = 0 , brp = 0 , br = 0 ; float y ; char x ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & x ) ; if ( x == 'k' || x == 'k' ) break ; else if ( x == 'c' || x == 'c' ) { br ++ ; brc ++ ; } else if ( x == 'b' || x == 'b' ) { br ++ ; brb ++ ; } else if ( x == 's' || x == 's' ) { br ++ ; brs ++ ; } else if ( x == 'v' || x == 'v' ) { br ++ ; brv ++ ; } else if ( x == 'p' || x == 'p' ) { br ++ ; brp ++ ; } else if ( x != 'c' && x != 'c' && x != 'b' && x != 'b' && x != 's' && x != 's' && x != 'v' && x != 'v' && x != 'p' && x != 'p' && x != 'k' && x != 'k' ) { printf ( ""neispravan unos\n"" ) ; } } while ( x != 'k' ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , br ) ; if ( br != 0 ) { if ( brc >= brs && brc >= brv && brc >= brp && brc >= brb ) { y = ( float ) brc * 100 / br ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , y ) ; } else if ( brb >= brc && brb >= brs && brb >= brv && brb >= brp ) { y = ( float ) brb * 100 / br ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , y ) ; } else if ( brs >= brc && brs >= brv && brs >= brb && brs >= brp ) { y = ( float ) brs * 100 / br ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , y ) ; } else if ( brv >= brc && brv >= brb && brv >= brs && brv >= brp ) { y = ( float ) brv * 100 / br ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , y ) ; } else if ( brp >= brc && brp >= brb && br >= brs && brp >= brv ) { y = ( float ) brp * 100 / br ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , y ) ; } } else printf ( ""najpopularnija boja je crna (0.00%)."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { char n ; float procenat ; int brojac = 0 , brc = 0 , brb = 0 , brs = 0 , brv = 0 , brp = 0 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & n ) ; if ( n == 'k' || n == 'k' ) break ; else if ( n == 'c' || n == 'c' ) { brojac ++ ; brc ++ ; } else if ( n == 'b' || n == 'b' ) { brojac ++ ; brb ++ ; } else if ( n == 's' || n == 's' ) { brojac ++ ; brs ++ ; } else if ( n == 'v' || n == 'v' ) { brojac ++ ; brv ++ ; } else if ( n == 'p' || n == 'p' ) { brojac ++ ; brp ++ ; } else if ( n != 'k' && n != 'k' && n != 'c' && n != 'c' && n != 'b' && n != 'b' && n != 's' && n != 's' && n != 'v' && n != 'v' && n != 'p' && n != 'p' ) { printf ( ""neispravan unos\n"" ) ; } } while ( n != 'k' && n != 'k' ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , brojac ) ; if ( brojac != 0 ) { if ( brc >= brb && brc >= brs && brc >= brv && brc >= brp ) { procenat = ( float ) brc * 100 / brojac ; printf ( ""najpopularnija boja je crna (%.2f%)."" , procenat ) ; } else if ( brb >= brc && brb >= brs && brb >= brv && brb >= brp ) { procenat = ( float ) brb * 100 / brojac ; printf ( ""najpopularnija boja je bijela (%.2f%)."" , procenat ) ; } else if ( brs >= brc && brs >= brb && brs >= brv && brs >= brp ) { procenat = ( float ) brs * 100 / brojac ; printf ( ""najpopularnija boja je siva (%.2f%)."" , procenat ) ; } else if ( brv >= brc && brv >= brs && brv >= brb && brv >= brp ) { procenat = ( float ) brv * 100 / brojac ; printf ( ""najpopularnija boja je crvena (%.2f%)."" , procenat ) ; } else if ( brp >= brc && brp >= brs && brp >= brv && brp >= brv ) { procenat = ( float ) brp * 100 / brojac ; printf ( ""najpopularnija boja je plava (%.2f%)."" , procenat ) ; } } else printf ( ""najpopularnija boja je crna (0.00%)."" ) ; return 0 ; }"
420,80,80,0,34,A2016/Z2/Z3/student8187,A2016/Z2/Z3/student4420,"#include <stdio.h> int main ( ) { int x , y , b , i , j , c ; char mat [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & b ) ; while ( b < 1 || b > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & b ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( c = 1 ; c <= b ; c ++ ) { printf ( ""unesite %d. tacku: "" , c ) ; scanf ( ""%d %d"" , & x , & y ) ; while ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , c ) ; scanf ( ""%d %d"" , & x , & y ) ; } mat [ x ] [ y ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ j ] [ i ] == '*' ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bkt , i , j , ktacke ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; while ( bkt < 1 || bkt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( ktacke = 0 ; ktacke < bkt ; ktacke ++ ) { printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( i < 0 || j < 0 || i > 19 || j > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } niz [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
428,66,66,0,18,A2016/Z1/Z4/student6613,A2016/Z1/Z4/student4640,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } } if ( n == 1 ) printf ( ""***"" ) ; else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * n - 4 ; j ++ ) { if ( i == j || ( i + j ) == ( 2 * n - 2 ) || ( j - i ) == ( 2 * n - 2 ) || ( i + j ) == ( 4 * n - 4 ) ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%i"" , & n ) ; if ( n <= 0 || n > 50 ) { while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%i"" , & n ) ; } } if ( n == 1 ) printf ( ""***"" ) ; else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * n - 4 ; j ++ ) { if ( ( i == j ) || ( j - i ) == ( 2 * n - 2 ) || ( i + j ) == ( 4 * n - 4 ) || ( i + j ) == ( 2 * n - 2 ) ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }"
432,19,19,0,14,A2016/Z4/Z2/student2351,A2016/Z4/Z2/student5624,"#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void izmjeni ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pomocni_sifrarnik = sifrarnik ; int brojac ; while ( * pomocni_string != '\0' ) { brojac = 0 ; pomocni_sifrarnik = sifrarnik ; while ( * pomocni_sifrarnik != '\0' ) { if ( * pomocni_string == * pomocni_sifrarnik ++ ) { * pomocni_string = 126 - brojac ; break ; } brojac ++ ; } pomocni_string ++ ; } } void sortiraj ( int * niz , int * niz_sort , int * indeks , char * pokazivac , char * string ) { int i , j ; int temp ; char * sifrarnik = pokazivac ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j ++ ) { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && indeks [ i ] > indeks [ j ] ) { temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } } } for ( i = 0 ; i < 127 ; i ++ ) { if ( indeks [ i ] != - 1 ) { * pokazivac = indeks [ i ] ; pokazivac ++ ; } } izmjeni ( string , sifrarnik ) ; } char * kodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pokazivac = sifrarnik ; int i ; int niz [ 127 ] ; int niz_sort [ 127 ] ; int indeks [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; indeks [ i ] = - 1 ; } else { niz [ i ] = 0 ; indeks [ i ] = i ; } } while ( * pomocni_string != '\0' ) { niz [ * pomocni_string + 0 ] ++ ; pomocni_string ++ ; } for ( i = 0 ; i < 127 ; i ++ ) { niz_sort [ i ] = niz [ i ] ; } sortiraj ( niz , niz_sort , indeks , pokazivac , string ) ; return string ; } char * dekodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string ; while ( * pomocni_string != '\0' ) { * pomocni_string = sifrarnik [ 126 - * pomocni_string ] ; pomocni_string ++ ; } return string ; } int main ( ) { printf ( ""zadaca 4, zadatak 2"" ) ; return 0 ; }"
442,69,69,0,18,A2016/Z1/Z4/student9676,A2016/Z1/Z4/student3671,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( j == i || j == 2 * n - 2 - i || j == 4 * n - 4 - i || j == 2 * n - 2 + i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }"
445,90,90,0,89,A2016/Z3/Z3/student7293,A2016/Z3/Z3/student2086,"#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , br = 0 , k = 0 , l , temp , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { br = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) ; { br ++ ; } if ( br == n ) { for ( l = j + 1 ; l < m ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) { temp = mat [ l - 1 ] [ p ] ; mat [ l - 1 ] [ p ] = mat [ l ] [ p ] ; mat [ l ] [ p ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { br = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { br ++ ; } if ( br == m ) { for ( l = j + 1 ; l < n ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) { temp = mat [ p ] [ l - 1 ] ; mat [ p ] [ l - 1 ] = mat [ p ] [ l ] ; mat [ p ] [ l ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) ; { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , n , m , m , n , x , y , p = 0 , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( n = 0 ; n < m ; n ++ ) { for ( m = 0 ; m < n ; m ++ ) { scanf ( ""%d"" , & mat [ n ] [ m ] ) ; } } for ( n = 0 ; n < m ; n ++ ) { for ( m = n + 1 ; m < m ; m ++ ) { brojac = 0 ; for ( p = 0 ; p < n ; p ++ ) { if ( mat [ n ] [ p ] == mat [ m ] [ p ] ) { brojac ++ ; } if ( brojac == n ) { for ( y = m + 1 ; y < m ; y ++ ) { for ( x = 0 ; x < n ; x ++ ) { temp = mat [ y - 1 ] [ x ] ; mat [ y - 1 ] [ x ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = temp ; } } m -- ; m -- ; } } } } for ( n = 0 ; n < n ; n ++ ) { for ( m = n + 1 ; m < n ; m ++ ) { brojac = 0 ; for ( p = 0 ; p < m ; p ++ ) { if ( mat [ p ] [ n ] == mat [ p ] [ m ] ) { brojac ++ ; } if ( brojac == m ) { for ( y = m + 1 ; y < n ; y ++ ) { for ( x = 0 ; x < m ; x ++ ) { temp = mat [ x ] [ y - 1 ] ; mat [ x ] [ y - 1 ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = temp ; } } n -- ; m -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( n = 0 ; n < m ; n ++ ) { for ( m = 0 ; m < n ; m ++ ) { printf ( ""%5d"" , mat [ n ] [ m ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
451,93,93,0,61,A2016/Z3/Z3/student9931,A2016/Z3/Z3/student3329,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , p , z , l , w ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { w = 1 ; for ( p = 0 ; p < n ; p ++ ) { if ( mat [ i ] [ p ] != mat [ j ] [ p ] ) { w = 0 ; break ; } } if ( w ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( l = 0 ; l < n ; l ++ ) { mat [ z ] [ l ] = mat [ z + 1 ] [ l ] ; } } j -- ; m -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { w = 1 ; for ( p = 0 ; p < m ; p ++ ) { if ( mat [ p ] [ j ] != mat [ p ] [ i ] ) { w = 0 ; break ; } } if ( w ) { for ( z = i ; z < n - 1 ; z ++ ) { for ( l = 0 ; l < m ; l ++ ) { mat [ l ] [ z ] = mat [ l ] [ z + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] ; int m , n , i , j , k , m , n , checker ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { checker = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { checker = 0 ; break ; } } if ( checker ) { for ( m = k ; m < m - 1 ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { mat [ m ] [ n ] = mat [ m + 1 ] [ n ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { checker = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) { checker = 0 ; break ; } } if ( checker ) { for ( n = k ; n < n - 1 ; n ++ ) { for ( m = 0 ; m < m ; m ++ ) { mat [ m ] [ n ] = mat [ m ] [ n + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
457,98,98,0,30,A2016/Z2/Z4/student8560,A2016/Z2/Z4/student1202,"#include <stdio.h> #define dimenzija 100 int main ( ) { double matrica [ dimenzija ] [ dimenzija ] ; int m , n , i , j ; int teplicova , cirkularna ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } teplicova = 1 , cirkularna = 1 ; for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( matrica [ i ] [ 0 ] != matrica [ i - 1 ] [ n - 1 ] || matrica [ i ] [ j ] != matrica [ i - 1 ] [ j - 1 ] ) { cirkularna = 0 ; } if ( matrica [ i ] [ j ] != matrica [ i - 1 ] [ j - 1 ] ) { teplicova = 0 ; } } } if ( n == 1 && m == 100 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #define dimenzija 100 int main ( ) { double matrica [ dimenzija ] [ dimenzija ] ; int m , n , i , j ; int teplicova , cirkularna ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } teplicova = 1 , cirkularna = 1 ; for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( matrica [ i ] [ 0 ] != matrica [ i - 1 ] [ n - 1 ] || matrica [ i ] [ j ] != matrica [ i - 1 ] [ j - 1 ] ) { cirkularna = 0 ; } if ( matrica [ i ] [ j ] != matrica [ i - 1 ] [ j - 1 ] ) { teplicova = 0 ; } } } if ( n == 1 && m == 100 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
459,98,98,0,84,A2016/Z1/Z3/student2351,A2016/Z1/Z3/student1477,"#include <stdio.h> int main ( ) { char autom ; int max = 0 ; float procenat ; int brojac_ukupno_auta = 0 ; int brojac_crnih = 0 , brojac_bijelih = 0 , brojac_sivih = 0 , brojac_crvenih = 0 , brojac_plavih = 0 ; char max_znak = 0 ; printf ( ""unesite vozila: "" ) ; while ( 100000000 == 100000000 ) { scanf ( ""%c"" , & autom ) ; if ( autom == 'c' || autom == 'c' ) { brojac_crnih ++ ; if ( brojac_crnih > max ) { max = brojac_crnih ; max_znak = 'c' ; } } else if ( autom == 'b' || autom == 'b' ) { brojac_bijelih ++ ; if ( brojac_bijelih > max ) { max = brojac_bijelih ; max_znak = 'b' ; } } else if ( autom == 's' || autom == 's' ) { brojac_sivih ++ ; if ( brojac_sivih > max ) { max = brojac_sivih ; max_znak = 's' ; } } else if ( autom == 'v' || autom == 'v' ) { brojac_crvenih ++ ; if ( brojac_crvenih > max ) { max = brojac_crvenih ; max_znak = 'v' ; } } else if ( autom == 'p' || autom == 'p' ) { brojac_plavih ++ ; if ( brojac_plavih > max ) { max = brojac_plavih ; max_znak = 'p' ; } } else if ( autom == 'k' || autom == 'k' ) { break ; } else { printf ( ""neispravan unos\n"" ) ; } } brojac_ukupno_auta = brojac_crnih + brojac_bijelih + brojac_sivih + brojac_crvenih + brojac_plavih ; printf ( ""ukupno evidentirano %d vozila.\n"" , brojac_ukupno_auta ) ; if ( brojac_ukupno_auta == 0 ) { printf ( ""najpopularnija boja je crna (0.00%)."" ) ; return 0 ; } else { if ( max_znak == 'c' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je crna (%.2f%). "" , procenat ) ; return 0 ; } if ( max_znak == 'b' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je bijela (%.2f%)."" , procenat ) ; return 0 ; } if ( max_znak == 'p' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je plava (%.2f%)."" , procenat ) ; return 0 ; } if ( max_znak == 'v' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je crvena (%.2f%)."" , procenat ) ; return 0 ; } if ( max_znak == 's' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je siva (%.2f%)."" , procenat ) ; return 0 ; } } return 0 ; }","#include <stdio.h> int main ( ) { char autom ; int max = 0 ; float procenat ; int brojac_ukupno_auta = 0 ; int brojac_crnih = 0 , brojac_bijelih = 0 , brojac_sivih = 0 , brojac_crvenih = 0 , brojac_plavih = 0 ; char max_znak = 0 ; printf ( ""unesite vozila: "" ) ; while ( 100000000 == 100000000 ) { scanf ( ""%c"" , & autom ) ; if ( autom == 'c' || autom == 'c' ) { brojac_crnih ++ ; if ( brojac_crnih > max ) { max = brojac_crnih ; max_znak = 'c' ; } } else if ( autom == 'b' || autom == 'b' ) { brojac_bijelih ++ ; if ( brojac_bijelih > max ) { max = brojac_bijelih ; max_znak = 'b' ; } } else if ( autom == 's' || autom == 's' ) { brojac_sivih ++ ; if ( brojac_sivih > max ) { max = brojac_sivih ; max_znak = 's' ; } } else if ( autom == 'v' || autom == 'v' ) { brojac_crvenih ++ ; if ( brojac_crvenih > max ) { max = brojac_crvenih ; max_znak = 'v' ; } } else if ( autom == 'p' || autom == 'p' ) { brojac_plavih ++ ; if ( brojac_plavih > max ) { max = brojac_plavih ; max_znak = 'p' ; } } else if ( autom == 'k' || autom == 'k' ) { break ; } else { printf ( ""neispravan unos\n"" ) ; } } brojac_ukupno_auta = brojac_crnih + brojac_bijelih + brojac_sivih + brojac_crvenih + brojac_plavih ; printf ( ""ukupno evidentirano %d vozila.\n"" , brojac_ukupno_auta ) ; if ( brojac_ukupno_auta == 0 ) { printf ( ""najpopularnija boja je crna (0.00%)."" ) ; return 0 ; } else { if ( max_znak == 'c' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je crna (%.2f%). "" , procenat ) ; return 0 ; } if ( max_znak == 'b' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je bijela (%.2f%)."" , procenat ) ; return 0 ; } if ( max_znak == 'p' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je plava (%.2f%)."" , procenat ) ; return 0 ; } if ( max_znak == 'v' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je crvena (%.2f%)."" , procenat ) ; return 0 ; } if ( max_znak == 's' ) { procenat = ( max * 100. ) / brojac_ukupno_auta ; printf ( ""najpopularnija boja je siva (%.2f%)."" , procenat ) ; return 0 ; } } return 0 ; }"
462,99,99,0,125,A2016/Z4/Z1/student8004,A2016/Z4/Z1/student5468,"#include <stdio.h> void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\0' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { char * ret = s , * prvo_slovo [ 1000 ] , * kraj_rijeci [ 1000 ] , rijec [ 1000 ] [ 1000 ] = { { 0 } } , * pomocni1 , * pomocni2 , rijec_za_izbaciti [ 1000 ] , * pokazivac_rijec_za_izbaciti , konvertovano_velika , * kraj_rijeci_pronadjene ; int neslovo = 1 , broj_rijeci = 0 , i , broj_slova = 0 , j , red , k , brojac_ponavljanja_rijeci [ 1000 ] = { 0 } , broj_reda_maximuma , logicka_rijec , konvertovano_mala ; if ( * s == '\0' ) return ret ; while ( * s != '\0' ) { if ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) neslovo = 1 ; else if ( neslovo == 1 ) { neslovo = 0 ; prvo_slovo [ broj_rijeci ] = s ; broj_rijeci ++ ; } s ++ ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { kraj_rijeci [ i ] = prvo_slovo [ i ] ; while ( ( * kraj_rijeci [ i ] >= 'a' && * kraj_rijeci [ i ] <= 'z' ) || ( * kraj_rijeci [ i ] >= 'a' && * kraj_rijeci [ i ] <= 'z' ) ) kraj_rijeci [ i ] ++ ; j = 0 ; while ( kraj_rijeci [ i ] > prvo_slovo [ i ] ) { rijec [ i ] [ j ] = * prvo_slovo [ i ] ; prvo_slovo [ i ] ++ ; j ++ ; } rijec [ i ] [ j ] = '\0' ; } for ( i = 0 ; i < broj_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { red = 1 ; k = 0 ; while ( ( rijec [ i ] [ k ] != '\0' ) && ( rijec [ j ] [ k ] != '\0' ) ) { if ( ( rijec [ i ] [ k ] != rijec [ j ] [ k ] ) && ( rijec [ i ] [ k ] != rijec [ j ] [ k ] + ( 'a' - 'a' ) ) && ( rijec [ i ] [ k ] != rijec [ j ] [ k ] - ( 'a' - 'a' ) ) ) red = 0 ; k ++ ; } if ( rijec [ i ] [ k ] != rijec [ j ] [ k ] ) red = 0 ; if ( red ) { brojac_ponavljanja_rijeci [ i ] ++ ; } } } broj_reda_maximuma = 0 ; for ( i = 1 ; i < broj_rijeci - 1 ; i ++ ) { if ( brojac_ponavljanja_rijeci [ i ] > brojac_ponavljanja_rijeci [ broj_reda_maximuma ] ) broj_reda_maximuma = i ; } for ( i = 0 ; rijec [ broj_reda_maximuma ] [ i ] != '\0' ; i ++ ) { rijec_za_izbaciti [ i ] = rijec [ broj_reda_maximuma ] [ i ] ; } rijec_za_izbaciti [ i ] = '\0' ; pomocni1 = rijec_za_izbaciti ; pomocni2 = rijec_za_izbaciti ; while ( * pomocni2 != '\0' ) { pomocni2 ++ ; } broj_slova = 0 ; while ( pomocni1 < pomocni2 ) { pomocni1 ++ ; broj_slova ++ ; } pokazivac_rijec_za_izbaciti = rijec_za_izbaciti ; s = ret ; while ( * s != '\0' ) { logicka_rijec = 1 ; pomocni1 = s ; if ( ( ( s == ret ) || ( ( * ( s - 1 ) < 'a' || * ( s - 1 ) > 'z' ) && ( * ( s - 1 ) < 'a' || * ( s - 1 ) > 'z' ) ) ) && ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) { for ( i = 0 ; i < broj_slova ; i ++ ) { konvertovano_velika = * ( pokazivac_rijec_za_izbaciti + i ) - ( 'a' - 'a' ) ; konvertovano_mala = * ( pokazivac_rijec_za_izbaciti + i ) + ( 'a' - 'a' ) ; if ( ( * ( pomocni1 + i ) != * ( pokazivac_rijec_za_izbaciti + i ) ) && ( * ( pomocni1 + i ) != konvertovano_velika ) && ( * ( pomocni1 + i ) != konvertovano_mala ) ) logicka_rijec = 0 ; } if ( * ( pomocni1 + i - 1 ) != '\0' ) if ( ( ( * ( pomocni1 + i ) >= 'a' && * ( pomocni1 + i ) <= 'z' ) || ( * ( pomocni1 + i ) >= 'a' && * ( pomocni1 + i ) <= 'z' ) ) ) logicka_rijec = 0 ; } else logicka_rijec = 0 ; if ( logicka_rijec == 1 ) { kraj_rijeci_pronadjene = s ; pomocni2 = s ; while ( ( * kraj_rijeci_pronadjene >= 'a' && * kraj_rijeci_pronadjene <= 'z' ) || ( * kraj_rijeci_pronadjene >= 'a' && * kraj_rijeci_pronadjene <= 'z' ) ) kraj_rijeci_pronadjene ++ ; while ( * kraj_rijeci_pronadjene != '\0' ) { * pomocni2 = * kraj_rijeci_pronadjene ; pomocni2 ++ ; kraj_rijeci_pronadjene ++ ; } * pomocni2 = '\0' ; } s ++ ; } return ret ; } int main ( ) { char tekst [ 100 ] ; printf ( ""unesite tekst: "" ) ; unesi ( tekst , 100 ) ; printf ( ""string nakon funkcije: '%s'"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\0' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { char * ret = s , * prvo_slovo [ 1000 ] , * kraj_rijeci [ 1000 ] , rijec [ 1000 ] [ 1000 ] = { { 0 } } , * pomocni1 , * pomocni2 , rijec_za_izbaciti [ 1000 ] , * pokazivac_rijec_za_izbaciti , konvertovano_velika , * kraj_rijeci_pronadjene ; int neslovo = 1 , broj_rijeci = 0 , i , broj_slova = 0 , j , red , k , brojac_ponavljanja_rijeci [ 1000 ] = { 0 } , broj_reda_maximuma , logicka_rijec , konvertovano_mala ; if ( * s == '\0' ) return ret ; while ( * s != '\0' ) { if ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) neslovo = 1 ; else if ( neslovo == 1 ) { neslovo = 0 ; prvo_slovo [ broj_rijeci ] = s ; broj_rijeci ++ ; } s ++ ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { kraj_rijeci [ i ] = prvo_slovo [ i ] ; while ( ( * kraj_rijeci [ i ] >= 'a' && * kraj_rijeci [ i ] <= 'z' ) || ( * kraj_rijeci [ i ] >= 'a' && * kraj_rijeci [ i ] <= 'z' ) ) kraj_rijeci [ i ] ++ ; j = 0 ; while ( kraj_rijeci [ i ] > prvo_slovo [ i ] ) { rijec [ i ] [ j ] = * prvo_slovo [ i ] ; prvo_slovo [ i ] ++ ; j ++ ; } rijec [ i ] [ j ] = '\0' ; } for ( i = 0 ; i < broj_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { red = 1 ; k = 0 ; while ( ( rijec [ i ] [ k ] != '\0' ) && ( rijec [ j ] [ k ] != '\0' ) ) { if ( ( rijec [ i ] [ k ] != rijec [ j ] [ k ] ) && ( rijec [ i ] [ k ] != rijec [ j ] [ k ] + ( 'a' - 'a' ) ) && ( rijec [ i ] [ k ] != rijec [ j ] [ k ] - ( 'a' - 'a' ) ) ) red = 0 ; k ++ ; } if ( rijec [ i ] [ k ] != rijec [ j ] [ k ] ) red = 0 ; if ( red ) { brojac_ponavljanja_rijeci [ i ] ++ ; } } } broj_reda_maximuma = 0 ; for ( i = 1 ; i < broj_rijeci - 1 ; i ++ ) { if ( brojac_ponavljanja_rijeci [ i ] > brojac_ponavljanja_rijeci [ broj_reda_maximuma ] ) broj_reda_maximuma = i ; } for ( i = 0 ; rijec [ broj_reda_maximuma ] [ i ] != '\0' ; i ++ ) { rijec_za_izbaciti [ i ] = rijec [ broj_reda_maximuma ] [ i ] ; } rijec_za_izbaciti [ i ] = '\0' ; pomocni1 = rijec_za_izbaciti ; pomocni2 = rijec_za_izbaciti ; while ( * pomocni2 != '\0' ) { pomocni2 ++ ; } broj_slova = 0 ; while ( pomocni1 < pomocni2 ) { pomocni1 ++ ; broj_slova ++ ; } pokazivac_rijec_za_izbaciti = rijec_za_izbaciti ; s = ret ; while ( * s != '\0' ) { logicka_rijec = 1 ; pomocni1 = s ; if ( ( ( s == ret ) || ( ( * ( s - 1 ) < 'a' || * ( s - 1 ) > 'z' ) && ( * ( s - 1 ) < 'a' || * ( s - 1 ) > 'z' ) ) ) && ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) { for ( i = 0 ; i < broj_slova ; i ++ ) { konvertovano_velika = * ( pokazivac_rijec_za_izbaciti + i ) - ( 'a' - 'a' ) ; konvertovano_mala = * ( pokazivac_rijec_za_izbaciti + i ) + ( 'a' - 'a' ) ; if ( ( * ( pomocni1 + i ) != * ( pokazivac_rijec_za_izbaciti + i ) ) && ( * ( pomocni1 + i ) != konvertovano_velika ) && ( * ( pomocni1 + i ) != konvertovano_mala ) ) logicka_rijec = 0 ; } if ( * ( pomocni1 + i - 1 ) != '\0' ) if ( ( ( * ( pomocni1 + i ) >= 'a' && * ( pomocni1 + i ) <= 'z' ) || ( * ( pomocni1 + i ) >= 'a' && * ( pomocni1 + i ) <= 'z' ) ) ) logicka_rijec = 0 ; } else logicka_rijec = 0 ; if ( logicka_rijec == 1 ) { kraj_rijeci_pronadjene = s ; pomocni2 = s ; while ( ( * kraj_rijeci_pronadjene >= 'a' && * kraj_rijeci_pronadjene <= 'z' ) || ( * kraj_rijeci_pronadjene >= 'a' && * kraj_rijeci_pronadjene <= 'z' ) ) kraj_rijeci_pronadjene ++ ; while ( * kraj_rijeci_pronadjene != '\0' ) { * pomocni2 = * kraj_rijeci_pronadjene ; pomocni2 ++ ; kraj_rijeci_pronadjene ++ ; } * pomocni2 = '\0' ; } s ++ ; } return ret ; } int main ( ) { char tekst [ 100 ] ; printf ( ""unesite tekst: "" ) ; unesi ( tekst , 100 ) ; printf ( ""string nakon funkcije: '%s'"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }"
482,96,96,0,22,A2016/Z1/Z4/student4639,A2016/Z1/Z4/student4416,"#include <stdio.h> int main ( ) { int n , i , j ; for ( ; ; ) { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; else { if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } else { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= 4 * n - 3 ; j ++ ) { if ( i == j || i + j == 2 * n || j - i == 2 * n - 2 || j + i == 4 * n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; for ( ; ; ) { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; else { if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } else { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= 4 * n - 3 ; j ++ ) { if ( i == j || i + j == 2 * n || j - i == 2 * n - 2 || j + i == 4 * n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; } } return 0 ; }"
492,29,29,0,34,A2016/Z5/Z1/student1192,A2016/Z5/Z1/student6956,"#include <stdio.h> #define epsilon 0.0001 #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( strcmp ( pr . prezime , dr . prezime ) > 0 ) return 0 ; else if ( strcmp ( pr . prezime , dr . prezime ) < 0 ) return 1 ; if ( strcmp ( pr . ime , dr . ime ) > 0 ) return 0 ; else if ( strcmp ( pr . ime , dr . ime ) < 0 ) return 1 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { float temp = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp > epsilon ) { min = temp ; indexmin = i ; } } float max = 5 ; if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { int vr = dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ; if ( vr == 1 ) indexprvi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ; if ( vr == 1 ) indexdrugi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indextreci ] ) ; if ( vr == 1 ) indextreci = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""eso"" , ""esic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } float prosjek ( int niz [ ] , int vel ) { if ( vel == 0 ) return 5 ; int i = 0 ; float suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) suma = suma + niz [ i ] ; return suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( uporedi ( pr . prezime , dr . prezime ) == - 1 ) return 1 ; if ( uporedi ( pr . prezime , dr . prezime ) == 1 ) return 0 ; if ( uporedi ( pr . ime , dr . ime ) == - 1 ) return 1 ; if ( uporedi ( pr . ime , dr . ime ) == 1 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { temp_prosjek = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( prosjekk - temp_prosjek > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { temp_prosjek = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp_prosjek > epsilon ) { min = temp_prosjek ; indexmin = i ; } } if ( vel == 0 ) return 0 ; if ( vel == 1 ) goto jedan ; if ( vel == 2 ) goto dva ; if ( vel >= 3 ) goto tri ; jedan : indexprvi = indexmin ; printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; return vel ; dva : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) indexdrugi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; return vel ; tri : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) indexdrugi = i ; } indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""nekic"" , { 10 , 10 , 5 , 10 , 10 , 10 , 10 } , 7 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9.8 ) ; printf ( ""vel: %dstudenti:"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; return 0 ; }"
495,97,97,0,41,A2016/Z3/Z1/student4456,A2016/Z3/Z1/student5789,"#include <stdio.h> int daj_prost ( ) { int i , k , prost = 1 ; static int b = 2 ; do { for ( i = 2 ; i < b ; i ++ ) { if ( b % i == 0 ) { prost = 0 ; break ; } } if ( i == b ) prost = 1 ; if ( prost == 0 ) b ++ ; } while ( prost == 0 ) ; k = b ++ ; return k ; } int main ( ) { int a , b , k = 2 , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a < 1 || a >= b ) ; while ( k < b ) { if ( k > a && k < b ) suma = suma + k ; k = daj_prost ( ) ; if ( k >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i , k , prost = 1 ; static int b = 2 ; do { for ( i = 2 ; i < b ; i ++ ) { if ( b % i == 0 ) { prost = 0 ; break ; } } if ( i == b ) prost = 1 ; if ( prost == 0 ) b ++ ; } while ( prost == 0 ) ; k = b ++ ; return k ; } int main ( ) { int a , b , k = 2 , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a < 1 || a >= b ) ; while ( k < b ) { if ( k > a && k < b ) suma = suma + k ; k = daj_prost ( ) ; if ( k >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
496,99,99,0,35,A2016/Z2/Z3/student9318,A2016/Z2/Z3/student8665,"#include <stdio.h> int main ( ) { int i = 0 , j = 0 , x = 0 , y = 0 , n = 0 ; int mat [ 20 ] [ 20 ] = { 0 } ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 10 ) ; i = 0 ; do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x >= 20 || y < 0 || y >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { mat [ y ] [ x ] = 1 ; } i ++ ; } while ( i < n ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i = 0 , j = 0 , x = 0 , y = 0 , n = 0 ; int mat [ 20 ] [ 20 ] = { 0 } ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 10 ) ; i = 0 ; do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x >= 20 || y < 0 || y >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { mat [ y ] [ x ] = 1 ; } i ++ ; } while ( i < n ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
499,54,54,0,60,A2016/Z5/Z1/student1192,A2016/Z5/Z1/student8776,"#include <stdio.h> #define epsilon 0.0001 #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( strcmp ( pr . prezime , dr . prezime ) > 0 ) return 0 ; else if ( strcmp ( pr . prezime , dr . prezime ) < 0 ) return 1 ; if ( strcmp ( pr . ime , dr . ime ) > 0 ) return 0 ; else if ( strcmp ( pr . ime , dr . ime ) < 0 ) return 1 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { float temp = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp > epsilon ) { min = temp ; indexmin = i ; } } float max = 5 ; if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { int vr = dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ; if ( vr == 1 ) indexprvi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ; if ( vr == 1 ) indexdrugi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indextreci ] ) ; if ( vr == 1 ) indextreci = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""eso"" , ""esic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return 1 ; if ( * s1 > * s2 ) return 2 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 2 ; if ( * s2 != '\0' ) return 1 ; return 0 ; } float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { float prosjekprvog = prosjek ( pr . ocjene , pr . br_ocjena ) ; float prosjekdrugog = prosjek ( dr . ocjene , dr . br_ocjena ) ; int sta_je_vratila_f = uporedi ( pr . prezime , dr . prezime ) ; if ( prosjekprvog > prosjekdrugog ) return 1 ; if ( prosjekprvog < prosjekdrugog ) return 0 ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; sta_je_vratila_f = uporedi ( pr . ime , dr . ime ) ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }"
500,9,9,0,13,A2016/Z5/Z3/student8480,A2016/Z5/Z3/student4430,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih ; ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; if ( ucitanih > - 1 ) fclose ( dat ) ; if ( ucitanih > - 1 ) return ucitanih ; } void ispismain ( ) { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; } void unesi ( char niz [ ] ) { char znak = getchar ( ) ; while ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } struct cas prekopiraj ( struct cas cas , int i , int k , int trajanje , char * predmet ) { int ukupno = k + trajanje ; int dan = i ; cas . kraj . sati = ukupno ; cas . pocetak . minute = cas . kraj . minute = 0 ; cas . dan_u_sedmici = dan ; cas . pocetak . sati = k ; if ( cas . pocetak . minute == 0 ) ; return cas ; } int prekl ( int minpoc1 , int minkraj1 , int minpoc2 , int minkraj2 ) { return ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ; } int minute ( int min , int sati ) { return min + sati * 60 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { int minpoc1 = minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) ; int minkraj1 = minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) ; int minpoc2 = minute ( cas . pocetak . minute , cas . pocetak . sati ) ; int minkraj2 = minute ( cas . kraj . minute , cas . kraj . sati ) ; int vr = prekl ( minpoc1 , minkraj1 , minpoc2 , minkraj2 ) ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && vr == 1 ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; if ( trajanje > 10 ) return 0 ; int poz = 1 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; i < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { int dokle = k ; int vr = i ; strcpy ( cas . predmet , predmet ) ; cas = prekopiraj ( cas , i , k , trajanje , predmet ) ; strcpy ( cas . predmet , predmet ) ; if ( poz == 1 && k == dokle ) { if ( preklapanje ( raspored , broj_casova , cas ) == 0 && i == vr ) { moze = 1 ; raspored [ broj_casova ] = cas ; return 1 ; } } } return 0 ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis ( ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; } void daliispisuje ( struct cas raspored [ ] , int i , int broj_casova ) { int k , j ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int k ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; int min = min ( raspored , broj_casova ) ; ispis ( ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; daliispisuje ( raspored , i , broj_casova ) ; printf ( ""\n"" ) ; } } void dansispis ( struct cas raspored [ ] , int broj_casova , int dan ) { int k = 1 , i ; int ispis = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { ispis = 1 ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d"" , raspored [ i ] . pocetak . minute ) ; printf ( ""-"" ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d"" , raspored [ i ] . kraj . sati ) ; printf ( "":"" ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; if ( ispis == 1 ) printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; dansispis ( raspored , broj_casova , dan ) ; return ; } void unosss ( ) { printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; printf ( ""naziv predmeta: "" ) ; printf ( ""vrijeme pocetka: "" ) ; printf ( ""vrijeme zavrsetka: "" ) ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko ; int dan_u_sedmici = dan ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan_u_sedmici ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , k = 0 ; int index = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { index = i ; } } raspored [ index ] = promjena ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; return 1 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , j , r = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; r ++ ; } if ( k == redni_broj ) { if ( r == redni_broj ) for ( j = i ; j < broj_casova - 1 ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; break ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { ispismain ( ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 2 : printf ( ""unesite naziv predmeta: "" ) ; printf ( ""unesite broj casova: "" ) ; unesi ( ime ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 1 ) ucit ++ ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; int i ; for ( i = 0 ; i < ucit ; i ++ ) { if ( raspored [ i ] . pocetak . sati < 9 ) return 1 ; } break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; unosss ( ) ; int sat , min ; char z ; int sat1 , min1 ; char z1 ; scanf ( ""%d"" , & cs ) ; unesi ( ime ) ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; case 4 : printf ( ""unesite dan "" ) ; printf ( ""(1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; if ( dan > 0 ) ucit -- ; break ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) { printf ( ""greska pri otvaranju datoteke.\n"" ) ; return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitano ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; if ( dat == null ) { printf ( ""greska prilikom otvaranja datoteke.\n"" ) ; exit ( 1 ) ; } int zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; if ( ferror ( dat ) ) { printf ( ""greska prilikom pisanja datoteke.\n"" ) ; return 0 ; } fclose ( dat ) ; return 1 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici != dan ) return 0 ; else { if ( raspored [ i ] . pocetak . sati < cas . pocetak . sati && raspored [ i ] . kraj . sati == cas . pocetak . sati && raspored [ i ] . kraj . sati < cas . kraj . sati && raspored [ i ] . kraj . minute > cas . pocetak . minute ) return 1 ; else if ( raspored [ i ] . pocetak . sati < cas . pocetak . sati && raspored [ i ] . kraj . sati > cas . kraj . sati ) return 1 ; else if ( ( raspored [ i ] . pocetak . sati < cas . pocetak . sati && raspored [ i ] . pocetak . sati < cas . kraj . sati ) || ( raspored [ i ] . pocetak . sati > cas . pocetak . sati && raspored [ i ] . pocetak . sati > cas . kraj . sati ) ) return 0 ; else if ( raspored [ i ] . pocetak . sati == cas . pocetak . sati && raspored [ i ] . kraj . sati == cas . kraj . sati && raspored [ i ] . pocetak . minute < cas . pocetak . minute && raspored [ i ] . kraj . minute < cas . kraj . minute ) return 0 ; } } return 1 ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""r"" ) ; char c ; if ( dat == null ) { printf ( ""greska prilikom otvaranja datoteke.\n"" ) ; exit ( 1 ) ; } do { c = fgetc ( dat ) ; printf ( ""%c"" , c ) ; } while ( c < broj_casova ) ; } int main ( ) { return 0 ; }"
514,90,90,0,118,A2016/Z4/Z1/student4473,A2016/Z4/Z1/student3315,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * rijec1 , char * rijec2 , int vel1 , int vel2 ) { int i ; char * p1 = rijec1 , * p2 = rijec2 ; if ( vel1 != vel2 ) return 0 ; else { for ( i = 0 ; i < vel1 - 1 ; i ++ ) { if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' && * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p1 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pok [ 500 ] ; int i = 0 , j = 0 , brojac_slova [ 500 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 500 ] = { 0 } ; p = s ; pok [ j ] = p ; if ( * p == '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , pok [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pok [ max ] , pok [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * ( p + brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pok [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac_slova [ i ] ; } } } p = pok [ max ] ; while ( * p != '\0' ) { * p = * ( p + brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""1pst1 pst2 3pst pstpst pst"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int poredjenje ( char * prva_rijec , char * druga_rijec , int vel1 , int vel2 ) { int k ; char * p1 = prva_rijec , * p2 = druga_rijec ; if ( vel1 != vel2 ) return 0 ; for ( k = 0 ; k < vel1 - 1 ; k ++ ) { if ( * ( p2 + k ) >= 'a' && * ( p2 + k ) <= 'z' ) { if ( * ( p1 + k ) != * ( p2 + k ) + 32 ) return 0 ; continue ; } if ( * ( p2 + k ) >= 'a' && * ( p2 + k ) <= 'z' && * ( p1 + k ) >= 'a' && * ( p1 + k ) <= 'z' ) { if ( * ( p1 + k ) + 32 != * ( p2 + k ) + 32 ) return 0 ; continue ; } if ( * ( p1 + k ) >= 'a' && * ( p1 + k ) <= 'z' ) { if ( * ( p1 + k ) + 32 != * ( p2 + k ) ) return 0 ; continue ; } if ( * ( p1 + k ) != * ( p2 + k ) ) return 0 ; } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pok [ 500 ] ; int i = 0 , j = 0 , brojac [ 500 ] = { 0 } , brojac_rijeci = 1 , najcesca [ 500 ] = { 0 } ; p = s ; pok [ j ] = p ; if ( * p == '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = p ; continue ; } brojac [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( poredjenje ( pok [ i ] , pok [ j ] , brojac [ i ] , brojac [ j ] ) ) najcesca [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( najcesca [ i ] > najcesca [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( poredjenje ( pok [ max ] , pok [ i ] , brojac [ max ] , brojac [ i ] ) ) { p = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * ( p + brojac [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pok [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac [ i ] ; } } } p = pok [ max ] ; while ( * p != '\0' ) { * p = * ( p + brojac [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ 10000 ] ; printf ( ""unesite tekst: "" ) ; unesi ( tekst , 10000 ) ; printf ( ""%s"" , izbaci_najcescu ) ; return 0 ; }"
518,99,99,0,123,A2016/Z4/Z1/student7457,A2016/Z4/Z1/student9175,"#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * string ) { char * max = string , * p = string , * pocetak , * kraj , * temp , * sljedecipocetak , * sljedecikraj , * temp1 , * p2 , * p3 ; int vel1 , brojrijeci = 0 , vel2 , jednaka , vel3 , maxbrojrijeci = 0 , maxvelicina = 0 , znak ; char znak1 , znak2 ; if ( * p == '\0' ) return string ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } brojrijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljedecipocetak = temp ; while ( ( * sljedecipocetak < 'a' || ( * sljedecipocetak > 'z' && * sljedecipocetak < 'a' ) || * sljedecipocetak > 'z' ) && * ( sljedecipocetak + 1 ) != '\0' ) sljedecipocetak ++ ; sljedecikraj = sljedecipocetak ; vel2 = 1 ; while ( ( ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) || ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) ) && * ( sljedecikraj + 1 ) != '\0' ) { vel2 ++ ; sljedecikraj ++ ; } jednaka = 1 ; vel3 = 0 ; temp1 = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * temp1 >= 'a' && * temp1 <= 'z' ) znak1 = ( * temp1 ) + ( 'a' - 'a' ) ; else znak1 = * temp1 ; if ( * sljedecipocetak >= 'a' && * sljedecipocetak <= 'z' ) znak2 = ( * sljedecipocetak ) + ( 'a' - 'a' ) ; else znak2 = * sljedecipocetak ; if ( znak1 != znak2 ) jednaka = 0 ; temp1 ++ ; sljedecipocetak ++ ; vel3 ++ ; } if ( jednaka ) brojrijeci ++ ; temp = sljedecikraj + 1 ; } if ( brojrijeci > maxbrojrijeci ) { maxbrojrijeci = brojrijeci ; max = kraj ; maxvelicina = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= string ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) znak1 = ( * p ) + ( 'a' - 'a' ) ; else znak1 = * p ; if ( * max >= 'a' && * max <= 'z' ) znak2 = ( * max ) + ( 'a' - 'a' ) ; else znak2 = * max ; if ( znak1 == znak2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= string && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= string ) { if ( * p2 >= 'a' && * p2 <= 'z' ) znak1 = ( * p2 ) + ( 'a' - 'a' ) ; else znak1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) znak2 = ( * p2 ) + ( 'a' - 'a' ) ; else znak2 = * p2 ; if ( znak1 != znak2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvelicina != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return string ; } int main ( ) { char str1ng [ 400 ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }","#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * str ) { char * max = str , * p = str , * pocetak , * kraj , * temp , * sljpocetak , * sljkraj , * tempoc , * p2 , * p3 ; int vel1 , broj_rijeci = 0 , vel2 , jednaka , vel3 , max_broj_rijeci = 0 , maxvel = 0 , znak ; char c1 , c2 ; if ( * p == '\0' ) return str ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } broj_rijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljpocetak = temp ; while ( ( * sljpocetak < 'a' || ( * sljpocetak > 'z' && * sljpocetak < 'a' ) || * sljpocetak > 'z' ) && * ( sljpocetak + 1 ) != '\0' ) sljpocetak ++ ; sljkraj = sljpocetak ; vel2 = 1 ; while ( ( ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) || ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) ) && * ( sljkraj + 1 ) != '\0' ) { vel2 ++ ; sljkraj ++ ; } jednaka = 1 ; vel3 = 0 ; tempoc = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * tempoc >= 'a' && * tempoc <= 'z' ) c1 = ( * tempoc ) + ( 'a' - 'a' ) ; else c1 = * tempoc ; if ( * sljpocetak >= 'a' && * sljpocetak <= 'z' ) c2 = ( * sljpocetak ) + ( 'a' - 'a' ) ; else c2 = * sljpocetak ; if ( c1 != c2 ) jednaka = 0 ; tempoc ++ ; sljpocetak ++ ; vel3 ++ ; } if ( jednaka ) broj_rijeci ++ ; temp = sljkraj + 1 ; } if ( broj_rijeci > max_broj_rijeci ) { max_broj_rijeci = broj_rijeci ; max = kraj ; maxvel = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= str ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) c1 = ( * p ) + ( 'a' - 'a' ) ; else c1 = * p ; if ( * max >= 'a' && * max <= 'z' ) c2 = ( * max ) + ( 'a' - 'a' ) ; else c2 = * max ; if ( c1 == c2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= str && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= str ) { if ( * p2 >= 'a' && * p2 <= 'z' ) c1 = ( * p2 ) + ( 'a' - 'a' ) ; else c1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) c2 = ( * p2 ) + ( 'a' - 'a' ) ; else c2 = * p2 ; if ( c1 != c2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvel != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return str ; } int main ( ) { char str1ng [ 400 ] = "" zghklkvedza zvezda zdvdwa"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }"
523,88,88,0,75,A2016/Z3/Z3/student6332,A2016/Z3/Z3/student8561,"#include <stdio.h> int main ( ) { int m , n , i , j , k , h , kolona , vrsta , mat [ 100 ] [ 100 ] , ind = 0 , ind1 = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( ind == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { kolona = 0 ; while ( kolona < n ) { if ( mat [ i ] [ kolona ] == mat [ k ] [ kolona ] ) ind = 1 ; else { ind = 0 ; break ; } kolona ++ ; } if ( ind == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( h = 0 ; h < n ; h ++ ) { mat [ j ] [ h ] = mat [ j + 1 ] [ h ] ; } } m -- ; k -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( ind1 == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { vrsta = 0 ; while ( vrsta < m ) { if ( mat [ vrsta ] [ i ] == mat [ vrsta ] [ k ] ) ind1 = 1 ; else { ind1 = 0 ; break ; } vrsta ++ ; } if ( ind1 == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( h = 0 ; h < m ; h ++ ) { mat [ h ] [ j ] == mat [ h ] [ j + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , mat [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 100 ] [ 100 ] , m , n , i , j , k , l , p , c , r , s ; p = 0 ; s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { if ( p == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { c = 0 ; while ( c < n ) { if ( matrica [ i ] [ c ] == matrica [ k ] [ c ] ) p = 1 ; else { p = 0 ; break ; } c ++ ; } if ( p == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { r = 0 ; while ( r < m ) { if ( matrica [ r ] [ i ] == matrica [ r ] [ k ] ) s = 1 ; else { s = 0 ; break ; } r ++ ; } if ( s == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) matrica [ l ] [ j ] == matrica [ l ] [ j + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
536,99,99,0,77,A2016/Z3/Z3/student1375,A2016/Z3/Z3/student2142,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , e , f , jeste , m , n ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } m = m ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { jeste = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = j ; e < m - 1 ; e ++ ) { for ( f = 0 ; f < n ; f ++ ) { mat [ e ] [ f ] = mat [ e + 1 ] [ f ] ; } } j -- ; m -- ; } } } n = n ; for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { jeste = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ j ] != mat [ k ] [ i ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = i ; e < n - 1 ; e ++ ) { for ( f = 0 ; f < m ; f ++ ) { mat [ f ] [ e ] = mat [ f ] [ e + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , matrica [ 200 ] [ 200 ] , i , j , k , e , f , jeste , m , n ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } m = m ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { jeste = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = j ; e < m - 1 ; e ++ ) { for ( f = 0 ; f < n ; f ++ ) { matrica [ e ] [ f ] = matrica [ e + 1 ] [ f ] ; } } j -- ; m -- ; } } } n = n ; for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { jeste = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ j ] != matrica [ k ] [ i ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = i ; e < n - 1 ; e ++ ) { for ( f = 0 ; f < m ; f ++ ) { matrica [ f ] [ e ] = matrica [ f ] [ e + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
540,78,78,0,166,A2016/Z1/Z1/student1278,A2016/Z1/Z1/student7496,"#include <stdio.h> #include <stdlib.h> int main ( ) { float t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , m1 , m2 , m3 , m4 , m5 ; int a , b , c ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & t5 ) ; if ( t5 < 0 || t5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & b5 ) ; if ( b5 < 0 || b5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & m1 ) ; if ( m1 < 0 || m1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & m2 ) ; if ( m2 < 0 || m2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & m3 ) ; if ( m3 < 0 || m3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & m4 ) ; if ( m4 < 0 || m4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & m5 ) ; if ( m5 < 0 || m5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; a = t1 + t2 + t3 + t4 + t5 ; b = b1 + b2 + b3 + b4 + b5 ; c = m1 + m2 + m3 + m4 + m5 ; if ( a < 55 ) { a = 5 ; } if ( a >= 55 && a < 65 ) { a = 6 ; } if ( a >= 65 && a < 75 ) { a = 7 ; } if ( a >= 75 && a < 85 ) { a = 8 ; } if ( a >= 85 && a < 92 ) { a = 9 ; } if ( a >= 92 && a <= 100 ) { a = 10 ; } if ( b < 55 ) { b = 5 ; } if ( b >= 55 && b < 65 ) { b = 6 ; } if ( b >= 65 && b < 75 ) { b = 7 ; } if ( b >= 75 && b < 85 ) { b = 8 ; } if ( b >= 85 && b < 92 ) { b = 9 ; } if ( b >= 92 && b <= 100 ) { b = 10 ; } if ( c < 55 ) { c = 5 ; } if ( c >= 55 && c < 65 ) { c = 6 ; } if ( c >= 65 && c < 75 ) { c = 7 ; } if ( c >= 75 && c < 85 ) { c = 8 ; } if ( c >= 85 && c < 92 ) { c = 9 ; } if ( c >= 92 && c < 100 ) { c = 10 ; } if ( a > 5 && b > 5 && c > 5 ) { printf ( ""sva tri studenta su polozila. \n"" ) ; } if ( a <= 5 && b <= 5 && c <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( a > 5 && b <= 5 && c <= 5 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( a <= 5 && b > 5 && c <= 5 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( a <= 5 && b <= 5 && c > 5 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( a > 5 && b > 5 && c <= 5 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( a <= 5 && b > 5 && c > 5 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( a > 5 && b <= 5 && c > 5 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( a == b && b == c ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } if ( a != b && b != c ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } if ( a == b && b != c ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } if ( a != b && b == c ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } if ( a == c && b != c ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { float a , b , c , x1 , x2 , x3 , x4 , x5 , y1 , y2 , y3 , y4 , y5 , z1 , z2 , z3 , z4 , z5 ; int x , y , z ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & y1 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & y2 ) ; if ( y2 < 0 || y2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & y3 ) ; if ( y3 < 0 || y3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & y4 ) ; if ( y4 < 0 || y4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & y5 ) ; if ( y5 < 0 || y5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & z1 ) ; if ( z1 < 0 || z1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & z2 ) ; if ( z2 < 0 || z2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & z4 ) ; if ( z4 < 0 || z4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & z5 ) ; if ( z5 < 0 || z5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; a = x1 + x2 + x3 + x4 + x5 ; b = y1 + y2 + y3 + y4 + y5 ; c = z1 + z2 + z3 + z4 + z5 ; x = a ; y = b ; z = c ; if ( x < 55 ) { x = 5 ; } if ( x >= 55 && x < 65 ) { x = 6 ; } if ( x >= 65 && x < 75 ) { x = 7 ; } if ( x >= 75 && x < 85 ) { x = 8 ; } if ( x >= 85 && x < 92 ) { x = 9 ; } if ( x >= 92 && x < 100 ) { x = 10 ; } if ( y < 55 ) { y = 5 ; } if ( y >= 55 && y < 65 ) { y = 6 ; } if ( y >= 65 && y < 75 ) { y = 7 ; } if ( y >= 75 && y < 85 ) { y = 8 ; } if ( y >= 85 && y < 92 ) { y = 9 ; } if ( y >= 92 && y < 100 ) { y = 10 ; } if ( z < 55 ) { z = 5 ; } if ( z >= 55 && z < 65 ) { z = 6 ; } if ( z >= 65 && z < 75 ) { z = 7 ; } if ( z >= 75 && z < 85 ) { z = 8 ; } if ( z >= 85 && z < 92 ) { z = 9 ; } if ( z >= 92 && z < 100 ) { z = 10 ; } if ( x > 5 && y > 5 && z > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; return 0 ; } if ( x <= 5 && y <= 5 && z <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y <= 5 && z <= 5 ) || ( x <= 5 && y > 5 && z <= 5 ) || ( x <= 5 && y <= 5 && z > 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y > 5 && z <= 5 ) || ( x <= 5 && y > 5 && z > 5 ) || ( x > 5 && y <= 5 && z > 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( x == y && y == z ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } if ( x != y && y != z ) { printf ( ""sva tri studenta imaju razlicitu ocjenu.\n"" ) ; return 0 ; } if ( ( x == y && y != z ) || ( x != y && y == z ) || ( x == y && y != z ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } return 0 ; }"
545,99,99,0,68,A2016/Z1/Z3/student8864,A2016/Z1/Z3/student2547,"#include <stdio.h> int main ( ) { int crna = 0 , bijela = 0 , siva = 0 , crvena = 0 , plava = 0 , i , procenat = 0 ; char auta [ 2000 ] ; float procc , procb , procs , procv , procp ; printf ( ""unesite vozila: "" ) ; scanf ( ""%s"" , & auta ) ; for ( i = 0 ; auta [ i ] != '\0' ; ++ i ) { if ( auta [ i ] == 'c' || auta [ i ] == 'c' ) { crna ++ ; } if ( auta [ i ] == 'b' || auta [ i ] == 'b' ) { bijela ++ ; } if ( auta [ i ] == 's' || auta [ i ] == 's' ) { siva ++ ; } if ( auta [ i ] == 'v' || auta [ i ] == 'v' ) { crvena ++ ; } if ( auta [ i ] == 'p' || auta [ i ] == 'p' ) { plava ++ ; } if ( auta [ i ] == 'a' || auta [ i ] == 'd' || auta [ i ] == 'e' || auta [ i ] == 'f' || auta [ i ] == 'g' || auta [ i ] == 'h' || auta [ i ] == 'i' || auta [ i ] == 'j' || auta [ i ] == 'l' || auta [ i ] == 'm' || auta [ i ] == 'n' || auta [ i ] == 'o' || auta [ i ] == 'r' || auta [ i ] == 't' || auta [ i ] == 'u' || auta [ i ] == 'z' || auta [ i ] == 'y' || auta [ i ] == 'x' || auta [ i ] == 'w' || auta [ i ] == ' ' || auta [ i ] == ',' || auta [ i ] == '1' || auta [ i ] == '2' || auta [ i ] == '0' || auta [ i ] == ' 3' || auta [ i ] == '4' || auta [ i ] == '5' || auta [ i ] == '6' || auta [ i ] == '7' || auta [ i ] == '8' || auta [ i ] == '9' || auta [ i ] == '/' || auta [ i ] == '*' || auta [ i ] == '-' || auta [ i ] == '.' || auta [ i ] == '-' || auta [ i ] == '<' || auta [ i ] == '>' || auta [ i ] == 'a' || auta [ i ] == 'd' || auta [ i ] == 'e' || auta [ i ] == 'f' || auta [ i ] == 'g' || auta [ i ] == 'h' || auta [ i ] == 'i' || auta [ i ] == 'j' || auta [ i ] == 'l' || auta [ i ] == 'm' || auta [ i ] == 'n' || auta [ i ] == 'o' || auta [ i ] == 'r' || auta [ i ] == 't' || auta [ i ] == 'u' || auta [ i ] == 'z' || auta [ i ] == 'y' || auta [ i ] == 'w' || auta [ i ] == 'x' ) { printf ( ""neispravan unos\n"" ) ; } if ( auta [ i ] == 'k' || auta [ i ] == 'k' ) { break ; } } procenat = crna + bijela + siva + crvena + plava ; procc = ( crna / ( float ) procenat ) * 100 ; procb = ( bijela / ( float ) procenat ) * 100 ; procs = ( siva / ( float ) procenat ) * 100 ; procv = ( crvena / ( float ) procenat ) * 100 ; procp = ( plava / ( float ) procenat ) * 100 ; printf ( ""ukupno evidentirano %d vozila.\n"" , procenat ) ; if ( procc >= procb && procc >= procs && procc >= procv && procc >= procp ) { printf ( ""najpopularnija boja je crna (%.2f%)."" , procc ) ; } else if ( procb >= procc && procb >= procs && procb >= procv && procb >= procp ) { printf ( ""najpopularnija boja je bijela (%.2f%)."" , procb ) ; } else if ( procs >= procc && procs >= procb && procs >= procv && procs >= procp ) { printf ( ""najpopularnija boja je siva (%.2f%)."" , procs ) ; } else if ( procv >= procc && procv >= procb && procv >= procv && procv >= procp ) { printf ( ""najpopularnija boja je crvena (%.2f%)."" , procv ) ; } else if ( procp >= procc && procp >= procb && procp >= procs && procp >= procv ) { printf ( ""najpopularnija boja je plava (%.2f%)."" , procp ) ; } else if ( procenat == 0 ) { procc = 0 ; printf ( ""najpopularnija boja je crna (%.2f%)."" , procc ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int crna = 0 , bijela = 0 , siva = 0 , crvena = 0 , plava = 0 , i , procenat = 0 ; char auta [ 2000 ] ; float procc , procb , procs , procv , procp ; printf ( ""unesite vozila: "" ) ; scanf ( ""%s"" , & auta ) ; for ( i = 0 ; auta [ i ] != '\0' ; ++ i ) { if ( auta [ i ] == 'c' || auta [ i ] == 'c' ) { crna ++ ; } if ( auta [ i ] == 'b' || auta [ i ] == 'b' ) { bijela ++ ; } if ( auta [ i ] == 's' || auta [ i ] == 's' ) { siva ++ ; } if ( auta [ i ] == 'v' || auta [ i ] == 'v' ) { crvena ++ ; } if ( auta [ i ] == 'p' || auta [ i ] == 'p' ) { plava ++ ; } if ( auta [ i ] == 'a' || auta [ i ] == 'd' || auta [ i ] == 'e' || auta [ i ] == 'f' || auta [ i ] == 'g' || auta [ i ] == 'h' || auta [ i ] == 'i' || auta [ i ] == 'j' || auta [ i ] == 'l' || auta [ i ] == 'm' || auta [ i ] == 'n' || auta [ i ] == 'o' || auta [ i ] == 'r' || auta [ i ] == 't' || auta [ i ] == 'u' || auta [ i ] == 'z' || auta [ i ] == 'y' || auta [ i ] == 'x' || auta [ i ] == 'w' || auta [ i ] == ' ' || auta [ i ] == ',' || auta [ i ] == '1' || auta [ i ] == '2' || auta [ i ] == '0' || auta [ i ] == ' 3' || auta [ i ] == '4' || auta [ i ] == '5' || auta [ i ] == '6' || auta [ i ] == '7' || auta [ i ] == '8' || auta [ i ] == '9' || auta [ i ] == '/' || auta [ i ] == '*' || auta [ i ] == '-' || auta [ i ] == '.' || auta [ i ] == '-' || auta [ i ] == '<' || auta [ i ] == '>' || auta [ i ] == 'a' || auta [ i ] == 'd' || auta [ i ] == 'e' || auta [ i ] == 'f' || auta [ i ] == 'g' || auta [ i ] == 'h' || auta [ i ] == 'i' || auta [ i ] == 'j' || auta [ i ] == 'l' || auta [ i ] == 'm' || auta [ i ] == 'n' || auta [ i ] == 'o' || auta [ i ] == 'r' || auta [ i ] == 't' || auta [ i ] == 'u' || auta [ i ] == 'z' || auta [ i ] == 'y' || auta [ i ] == 'w' || auta [ i ] == 'x' ) { printf ( ""neispravan unos\n"" ) ; } if ( auta [ i ] == 'k' || auta [ i ] == 'k' ) { break ; } } procenat = crna + bijela + siva + crvena + plava ; procc = ( crna / ( float ) procenat ) * 100 ; procb = ( bijela / ( float ) procenat ) * 100 ; procs = ( siva / ( float ) procenat ) * 100 ; procv = ( crvena / ( float ) procenat ) * 100 ; procp = ( plava / ( float ) procenat ) * 100 ; printf ( ""ukupno evidentirano %d vozila.\n"" , procenat ) ; if ( procc >= procb && procc >= procs && procc >= procv && procc >= procp ) { printf ( ""najpopularnija boja je crna (%.2f%)."" , procc ) ; } else if ( procb >= procc && procb >= procs && procb >= procv && procb >= procp ) { printf ( ""najpopularnija boja je bijela (%.2f%)."" , procb ) ; } else if ( procs >= procc && procs >= procb && procs >= procv && procs >= procp ) { printf ( ""najpopularnija boja je siva (%.2f%)."" , procs ) ; } else if ( procv >= procc && procv >= procb && procv >= procv && procv >= procp ) { printf ( ""najpopularnija boja je crvena (%.2f%)."" , procv ) ; } else if ( procp >= procc && procp >= procb && procp >= procs && procp >= procv ) { printf ( ""najpopularnija boja je plava (%.2f%)."" , procp ) ; } else if ( procenat == 0 ) { procc = 0 ; printf ( ""najpopularnija boja je crna (%.2f%)."" , procc ) ; } return 0 ; }"
555,79,79,0,30,A2016/Z2/Z4/student8794,A2016/Z2/Z4/student5829,"#include <stdio.h> #include <math.h> #define epsilon 0.00000000000001 int main ( ) { int i , j , m , n , tep = 1 , cirk = 1 ; double niz [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%lf"" , & niz [ i ] [ j ] ) ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( niz [ i ] [ j ] - niz [ i + 1 ] [ j + 1 ] ) > epsilon ) tep = 0 ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( fabs ( niz [ i ] [ n - 1 ] - niz [ i + 1 ] [ 0 ] ) > epsilon ) cirk = 0 ; } if ( cirk == 1 && tep == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( tep == 1 && cirk == 0 ) printf ( ""matrica je teplicova"" ) ; else if ( tep == 0 && cirk == 0 ) printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; else if ( tep == 0 && cirk == 1 ) printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.001 int main ( ) { int m , n , i , j ; int tep = 1 , cir = 1 ; ; double mat [ 100 ] [ 100 ] ; do { printf ( ""\nunesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( mat [ i ] [ j ] - mat [ i + 1 ] [ j + 1 ] ) > epsilon ) tep = 0 ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( fabs ( mat [ i ] [ n - 1 ] - mat [ i + 1 ] [ 0 ] ) ) cir = 0 ; } if ( tep == 1 && cir == 0 ) printf ( ""matrica je teplicova"" ) ; else if ( cir == 1 && tep == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
568,99,99,0,34,A2016/Z2/Z3/student7735,A2016/Z2/Z3/student9498,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int mat [ 20 ] [ 20 ] = { 0 } , n = 0 , x = 0 , y = 0 , i = 0 , j = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 10 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; continue ; } mat [ y ] [ x ] = 1 ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int mat [ 20 ] [ 20 ] = { 0 } , n = 0 , x = 0 , y = 0 , i = 0 , j = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 10 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; continue ; } mat [ y ] [ x ] = 1 ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
581,97,97,0,48,A2016/Z1/Z4/student7735,A2016/Z1/Z4/student3331,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
595,62,62,0,78,A2016/Z3/Z2/student9160,A2016/Z3/Z2/student9385,"#include <stdio.h> #include<math.h> #include<stdlib.h> #define duzina 10 void ubaci ( int * niz , int velicina ) { int broj , broj2 = 0 , cifra , i , j ; for ( j = velicina - 1 ; j >= 0 ; j -- ) niz [ 2 * j ] = niz [ j ] ; for ( i = 0 ; i < 2 * velicina ; i += 2 ) { broj = abs ( niz [ i ] ) ; if ( broj < 10 ) broj2 = broj ; else { do { cifra = broj % 10 ; broj2 += cifra ; broj /= 10 ; } while ( broj != 0 ) ; } niz [ i + 1 ] = broj2 ; broj2 = 0 ; } } int izbaci ( int * niz , int velicina ) { int j , prvi = 0 , drugi = 1 , treci , i ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) treci = 1 ; else { treci = prvi + drugi ; prvi = drugi ; drugi = treci ; } if ( niz [ i ] == treci ) { int k ; for ( k = i ; k < velicina - 1 ; k ++ ) niz [ k ] = niz [ k + 1 ] ; velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 2 * duzina ] , i , pozivanje ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < duzina ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , duzina ) ; pozivanje = izbaci ( niz , 2 * duzina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < pozivanje ; i ++ ) if ( i == pozivanje - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include<math.h> #include<stdlib.h> void ubaci ( int * niz , int duplo ) { int m , rastavi_cifru = 0 , zbir_cifara = 0 , elem ; for ( m = duplo - 1 ; m >= 0 ; m -- ) { niz [ 2 * m ] = niz [ m ] ; } for ( m = 0 ; m < 2 * duplo ; m += 2 ) { elem = abs ( niz [ m ] ) ; if ( elem < 10 ) { zbir_cifara = elem ; } else { do { rastavi_cifru = elem % 10 ; zbir_cifara = zbir_cifara + rastavi_cifru ; elem = elem / 10 ; } while ( elem != 0 ) ; } niz [ m + 1 ] = zbir_cifara ; zbir_cifara = 0 ; } } int izbaci ( int * niz , int duplo ) { int i , j , prvi_broj = 1 , drugi_broj = 1 , zbir_brojeva = 0 ; for ( i = 0 ; i < duplo ; i ++ ) { prvi_broj = 1 ; drugi_broj = 1 ; for ( j = i ; j < 1000 ; j ++ ) { if ( j == 1 ) { zbir_brojeva = 1 ; } else { zbir_brojeva = prvi_broj + drugi_broj ; prvi_broj = drugi_broj ; drugi_broj = zbir_brojeva ; } if ( niz [ i ] == zbir_brojeva ) { for ( zbir_brojeva = i ; zbir_brojeva < duplo - 1 ; zbir_brojeva ++ ) { niz [ zbir_brojeva ] = niz [ zbir_brojeva + 1 ] ; } duplo -- ; i -- ; break ; } } } return duplo ; } int main ( ) { int niz [ 100 ] , i , mojniz , duzina_niza = 0 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 20 ; i ++ ) { duzina_niza ++ ; scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , duzina_niza ) ; mojniz = ( niz , duzina_niza ) ; printf ( ""modificiran niz glasi: "" ) ; for ( i = 0 ; i < mojniz ; i ++ ) { if ( i == mojniz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d"" , niz [ i ] ) ; } } return 0 ; }"
597,23,23,0,20,A2016/Z5/Z1/student8776,A2016/Z5/Z1/student6548,"#include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return 1 ; if ( * s1 > * s2 ) return 2 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 2 ; if ( * s2 != '\0' ) return 1 ; return 0 ; } float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { float prosjekprvog = prosjek ( pr . ocjene , pr . br_ocjena ) ; float prosjekdrugog = prosjek ( dr . ocjene , dr . br_ocjena ) ; int sta_je_vratila_f = uporedi ( pr . prezime , dr . prezime ) ; if ( prosjekprvog > prosjekdrugog ) return 1 ; if ( prosjekprvog < prosjekdrugog ) return 0 ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; sta_je_vratila_f = uporedi ( pr . ime , dr . ime ) ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjecna_ocjena ( int niz [ ] , int vel ) { if ( vel == 0 ) return 0 ; int i ; double prosjek = 5 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } prosjek = suma / vel ; return prosjek ; } int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } int prvi = - 1 , drugi = - 1 , treci = - 1 ; double najveci = 0 , prosj ; int ispred ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { prvi = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ prvi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ prvi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { prvi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci && i != prvi ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { drugi = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ drugi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ drugi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { drugi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci && i != prvi && i != drugi ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { treci = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ treci ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ treci ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { treci = i ; } } } for ( i = 0 ; i < velicina ; i ++ ) if ( i == prvi ) printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; for ( i = 0 ; i < velicina ; i ++ ) if ( i == drugi ) printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; for ( i = 0 ; i < velicina ; i ++ ) if ( i == treci ) printf ( ""%s %s\n"" , studenti [ treci ] . prezime , studenti [ treci ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 10 ] = { { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 7 , 8 , 9 } , 3 } , { ""mujo"" , ""mujic"" , { 10 , 10 , 10 , 10 , 9 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 7 } , 7 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 6 , 6 , 6 , 5 } , 10 } , { ""osman"" , ""osmic"" , { 8 , 6 , 9 , 10 , 9 } , 5 } , { ""pero"" , ""mujic"" , { 10 , 6 , 10 , 10 , 9 } , 5 } , { ""beba"" , ""mujic"" , { 10 , 8 , 7 , 6 , 9 } , 5 } , } ; int vel = genijalci ( studenti , 9 , 7 ) ; return 0 ; }"
601,79,79,0,59,A2016/Z3/Z3/student2821,A2016/Z3/Z3/student4949,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] = { 0 } ; int m , n , brojac , temp ; int i , j , r , k , m ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || m > 200 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n > 200 || m > 200 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( r = 0 ; r < n ; r ++ ) { if ( mat [ i ] [ r ] == mat [ j ] [ r ] ) brojac ++ ; if ( brojac == n ) { for ( m = j ; m < m ; m ++ ) { for ( k = 0 ; k < n ; k ++ ) { temp = mat [ m ] [ k ] ; mat [ m ] [ k ] = mat [ m + 1 ] [ k ] ; mat [ m + 1 ] [ k ] = temp ; } } j -- ; m -- ; } } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { brojac = 0 ; for ( r = 0 ; r < m ; r ++ ) { if ( mat [ r ] [ i ] == mat [ r ] [ j ] ) brojac ++ ; if ( brojac == m ) { for ( m = i ; m < n ; m ++ ) { for ( k = 0 ; k < n ; k ++ ) { temp = mat [ k ] [ m ] ; mat [ k ] [ m ] = mat [ k ] [ m + 1 ] ; mat [ k ] [ m + 1 ] = temp ; } } i -- ; n -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int a [ 200 ] [ 200 ] = { 0 } ; int m , n , p , br = 0 , treba , k , j , i , e , s , treba1 ; printf ( ""unesite brojeve m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; printf ( ""unesite brojeve m i n: "" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( p = i + 1 ; p < m ; p ++ ) { br = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] == a [ p ] [ j ] ) br ++ ; } if ( br == n ) { for ( s = p ; s < m - 1 ; s ++ ) { for ( k = 0 ; k < n ; k ++ ) { treba = a [ s ] [ k ] ; a [ s ] [ k ] = a [ s + 1 ] [ k ] ; a [ s + 1 ] [ k ] = treba ; } } m -- ; p -- ; } } } br = 0 ; for ( i = 0 ; i < n - 1 ; i ++ ) { for ( e = i + 1 ; e < n ; e ++ ) { br = 0 ; for ( j = 0 ; j < m ; j ++ ) { if ( a [ j ] [ i ] == a [ j ] [ e ] ) br ++ ; } if ( br == m ) { for ( s = 0 ; s < m ; s ++ ) { for ( k = e ; k < n - 1 ; k ++ ) { treba1 = a [ s ] [ k ] ; a [ s ] [ k ] = a [ s ] [ k + 1 ] ; a [ s ] [ k + 1 ] = treba1 ; } } n -- ; e -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , a [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
604,67,67,0,16,A2016/Z1/Z4/student7802,A2016/Z1/Z4/student5649,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * n - 4 ; j ++ ) { if ( j == i || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n , j , i ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * n - 4 ; j ++ ) { if ( i == j || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }"
639,97,97,0,49,A2016/Z1/Z4/student5741,A2016/Z1/Z4/student9095,"#include <stdio.h> int main ( ) { int i , j , n ; jump : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; goto jump ; } else { printf ( ""*"" ) ; for ( i = 0 ; i < 2 * n - 3 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( i = 0 ; i < 2 * n - 3 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; for ( i = 0 ; i < n - 2 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 0 ; j < 2 * n - 5 - 2 * i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 0 ; j < 2 * ( i + 1 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 0 ; j < 2 * n - 5 - 2 * i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( n > 1 ) { for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( i = 0 ; i < 2 * n - 3 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n ; jump : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; goto jump ; } else { printf ( ""*"" ) ; for ( i = 0 ; i < 2 * n - 3 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( i = 0 ; i < 2 * n - 3 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; for ( i = 0 ; i < n - 2 ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 0 ; j < 2 * n - 5 - 2 * i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 0 ; j < 2 * ( i + 1 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 0 ; j < 2 * n - 5 - 2 * i ; j ++ ) printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( n > 1 ) { for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( i = 0 ; i < 2 * n - 3 ; i ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
644,99,99,0,92,A2016/Z4/Z2/student9972,A2016/Z4/Z2/student9538,"#include <stdio.h> void napuniniz ( char * tekst , int niz [ ] ) { while ( * tekst != '\0' ) { niz [ * tekst - 32 ] ++ ; tekst ++ ; } } void napunislova ( char slova [ ] ) { int i ; for ( i = 32 ; i <= 126 ; i ++ ) { int poz = i - 32 ; slova [ poz ] = i ; } } void prekopiraj ( char * tablica , char slova [ ] ) { int i ; for ( i = 0 ; i <= 94 ; i ++ ) { * ( tablica + i ) = slova [ i ] ; } * ( tablica + i ) = '\0' ; } char * kodiraj ( char * tekst , char * tablica ) { char * pocetak = tekst , * s = tekst , * poc = tablica , slova [ 200 ] ; int niz [ 200 ] = { 0 } , i , j ; napuniniz ( tekst , niz ) ; napunislova ( slova ) ; for ( i = 0 ; i <= 94 ; i ++ ) { for ( j = i + 1 ; j <= 94 ; j ++ ) { if ( ( niz [ j ] == niz [ i ] && slova [ j ] < slova [ i ] ) || ( niz [ j ] > niz [ i ] ) ) { int temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; char temp2 = slova [ i ] ; slova [ i ] = slova [ j ] ; slova [ j ] = temp2 ; } } } prekopiraj ( tablica , slova ) ; while ( * tekst != '\0' ) { int i = 0 ; char * t = tablica ; while ( * tekst != * t ++ ) i ++ ; * tekst = 126 - i ; tekst ++ ; } return s ; } char * dekodiraj ( char * tekst , char * tablica ) { char pomtekst [ 2000 ] , pomtabla [ 100 ] , slova [ 200 ] ; char * pocetak = tekst , * p = pomtekst ; int niz [ 200 ] = { 0 } , i , j ; while ( * tekst != '\0' ) { * p = * tekst ; p ++ ; tekst ++ ; } * p = '\0' ; tekst = pocetak ; napuniniz ( pomtekst , niz ) ; napunislova ( slova ) ; for ( i = 0 ; i <= 94 ; i ++ ) { for ( j = i + 1 ; j <= 94 ; j ++ ) { if ( ( niz [ j ] == niz [ i ] && slova [ j ] > slova [ i ] || niz [ j ] > niz [ i ] ) ) { int temp1 = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp1 ; char temp2 = slova [ i ] ; slova [ i ] = slova [ j ] ; slova [ j ] = temp2 ; } } } prekopiraj ( pomtabla , slova ) ; char * pt = pomtekst ; while ( * pt != '\0' ) { int i = 0 ; char * t = pomtabla ; while ( * pomtekst != * t ++ ) i ++ ; * pt = 126 - i ; pt ++ ; } while ( * tekst != '\0' ) { int i = 0 ; p = pomtabla ; while ( * tekst != * p ++ ) i ++ ; * tekst = * ( tablica + i ) ; tekst ++ ; } return pocetak ; } int main ( ) { char tekst [ ] = ""ovo je neki testni teksta"" ; char sifrarnik [ 100 ] = """" ; int i ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik [ i ] ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; return 0 ; }","#include <stdio.h> void napuniniz ( char * tekst , int niz [ ] ) { while ( * tekst != '\0' ) { niz [ * tekst - 32 ] ++ ; tekst ++ ; } } void napunislova ( char slova [ ] ) { int i ; for ( i = 32 ; i <= 126 ; i ++ ) { int poz = i - 32 ; slova [ poz ] = i ; } } void prekopiraj ( char * tablica , char slova [ ] ) { int i ; for ( i = 0 ; i <= 94 ; i ++ ) { * ( tablica + i ) = slova [ i ] ; } * ( tablica + i ) = '\0' ; } char * kodiraj ( char * tekst , char * tablica ) { char * pocetak = tekst , * s = tekst , * poc = tablica , slova [ 200 ] ; int niz [ 200 ] = { 0 } , i , j ; napuniniz ( tekst , niz ) ; napunislova ( slova ) ; for ( i = 0 ; i <= 94 ; i ++ ) { for ( j = i + 1 ; j <= 94 ; j ++ ) { if ( ( niz [ j ] == niz [ i ] && slova [ j ] < slova [ i ] ) || ( niz [ j ] > niz [ i ] ) ) { int temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; char temp2 = slova [ i ] ; slova [ i ] = slova [ j ] ; slova [ j ] = temp2 ; } } } prekopiraj ( tablica , slova ) ; while ( * tekst != '\0' ) { int i = 0 ; char * t = tablica ; while ( * tekst != * t ++ ) i ++ ; * tekst = 126 - i ; tekst ++ ; } return s ; } char * dekodiraj ( char * tekst , char * tablica ) { char pomtekst [ 2000 ] , pomtabla [ 100 ] , slova [ 200 ] ; char * pocetak = tekst , * p = pomtekst ; int niz [ 200 ] = { 0 } , i , j ; while ( * tekst != '\0' ) { * p = * tekst ; p ++ ; tekst ++ ; } * p = '\0' ; tekst = pocetak ; napuniniz ( pomtekst , niz ) ; napunislova ( slova ) ; for ( i = 0 ; i <= 94 ; i ++ ) { for ( j = i + 1 ; j <= 94 ; j ++ ) { if ( ( niz [ j ] == niz [ i ] && slova [ j ] > slova [ i ] || niz [ j ] > niz [ i ] ) ) { int temp1 = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp1 ; char temp2 = slova [ i ] ; slova [ i ] = slova [ j ] ; slova [ j ] = temp2 ; } } } prekopiraj ( pomtabla , slova ) ; char * pt = pomtekst ; while ( * pt != '\0' ) { int i = 0 ; char * t = pomtabla ; while ( * pomtekst != * t ++ ) i ++ ; * pt = 126 - i ; pt ++ ; } while ( * tekst != '\0' ) { int i = 0 ; p = pomtabla ; while ( * tekst != * p ++ ) i ++ ; * tekst = * ( tablica + i ) ; tekst ++ ; } return pocetak ; } int main ( ) { char tekst [ ] = ""ovo je neki testni teksta"" ; char sifrarnik [ 100 ] = """" ; int i ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik [ i ] ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; return 0 ; }"
651,99,99,0,189,A2016/Z4/Z1/student7119,A2016/Z4/Z1/student9673,"#include <stdio.h>  void unesi ( char niz [ ] , int velicina ) { char znak ; int i = 0 ; do { znak = getchar ( ) ; } while ( znak == '\n' ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * niz ) { char * p = niz ; char * q = niz ; char * r = niz ; char * poc = niz ; char * kraj = niz ; char * pi = niz ; char * ki = niz ; char * prvi = niz ; char * drugi = niz ; char * pocetak_izbacivanja = niz ; char * kraj_izbacivanja = niz ; char * temp = niz ; char * pomocna = niz ; char string [ 10000 ] ; int brojac = 0 , max = 0 , pret = 1 , i = 0 , pret_1 = 0 , pret_2 = 0 ; while ( * p != '\0' ) { if ( ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && ( p == niz || * ( p - 1 ) == ' ' || * ( p - 1 ) == '-' || * p == '-' || ( * p >= '0' && * p <= '9' ) ) ) { poc = p ; while ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) p ++ ; if ( poc == niz && * p == '\0' ) { max = 1 ; pocetak_izbacivanja = poc ; kraj_izbacivanja = p ; break ; } else if ( * p == ' ' || * p == '\0' || * p == '-' || ( * p >= '0' && * p <= '9' ) ) { kraj = p ; brojac = 0 ; r = p ; while ( * r != '\0' ) { if ( ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) && ( r == niz || * ( r - 1 ) == ' ' || * ( r - 1 ) == '-' || ( * ( r - 1 ) >= '0' && * ( r - 1 ) <= '9' ) ) ) { pi = r ; while ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) r ++ ; if ( * r == ' ' || * r == '\0' || * r == '-' || ( * p >= '0' && * p <= '9' ) ) { ki = r ; pret = 1 ; } prvi = poc ; drugi = pi ; while ( drugi != ki && drugi != '\0' ) { pret_1 = 0 ; pret_2 = 0 ; if ( * prvi >= 'a' && * prvi <= 'z' ) { * prvi += 'a' - 'a' ; pret_1 = 1 ; } if ( * drugi >= 'a' && * drugi <= 'z' ) { * drugi += 'a' - 'a' ; pret_2 = 1 ; } if ( * prvi != * drugi ) pret = 0 ; if ( pret_1 ) * prvi -= 'a' - 'a' ; if ( pret_2 ) * drugi -= 'a' - 'a' ; prvi ++ ; drugi ++ ; } if ( pret == 1 ) brojac ++ ; } if ( * r == '\0' ) break ; r ++ ; } } if ( * p == '\0' ) break ; } if ( brojac > max ) { max = brojac ; pocetak_izbacivanja = poc ; kraj_izbacivanja = kraj ; } p ++ ; } if ( poc == niz ) { do { * pocetak_izbacivanja = * kraj_izbacivanja ; } while ( * kraj_izbacivanja != '\0' && pocetak_izbacivanja ++ != kraj_izbacivanja ++ ) ; } p = niz ; if ( max == 0 ) { while ( * p != '\0' ) { if ( ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && ( ( p == niz || * ( p - 1 ) == ' ' || * ( p - 1 ) == '-' || ( * ( p - 1 ) >= '0' && * ( p - 1 ) <= '9' ) ) ) ) { poc = p ; while ( ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) ) p ++ ; if ( * p == ' ' || * p == '\0' ) kraj = p ; break ; } p ++ ; } while ( * kraj != '\0' ) { * poc = * kraj ; poc ++ ; kraj ++ ; } if ( * kraj == '\0' ) * poc = '\0' ; } if ( max != 0 && poc != niz ) { while ( pocetak_izbacivanja != kraj_izbacivanja ) { if ( * pocetak_izbacivanja >= 'a' && * pocetak_izbacivanja <= 'z' ) string [ i ] = ( * pocetak_izbacivanja + 32 ) ; else string [ i ] = * pocetak_izbacivanja ; pocetak_izbacivanja ++ ; i ++ ; } string [ i ] = '\0' ; p = niz ; temp = string ; while ( * p != '\0' ) { poc = niz ; kraj = niz ; temp = string ; pret = 0 ; if ( ( * p == * temp || * p == ( * temp - 32 ) ) && ( p == niz || * ( p - 1 ) == ' ' || * ( p - 1 ) == '-' || ( * ( p - 1 ) >= '0' && * ( p - 1 ) <= '9' ) ) ) { poc = p ; pomocna = p ; while ( ( * pomocna == * temp || * pomocna == ( * temp - 32 ) ) && * temp != '\0' ) { pomocna ++ ; temp ++ ; } if ( * temp == '\0' && ( * pomocna == ' ' || * pomocna == '\0' || * pomocna == '-' || ( * pomocna >= '0' && * pomocna <= '9' ) ) ) { kraj = pomocna ; pret = 1 ; } } if ( pret ) { while ( * kraj != '\0' ) { * poc ++ = * kraj ++ ; } if ( * kraj == '\0' ) * poc = '\0' ; } p ++ ; } } else { return q ; } return q ; } int main ( ) { char tekst [ 100 ] ; printf ( ""unesi tekst: "" ) ; unesi ( tekst , 100 ) ; izbaci_najcescu ( tekst ) ; printf ( ""%s"" , tekst ) ; return 0 ; }","#include <stdio.h>  void unesi ( char niz [ ] , int velicina ) { char znak ; int i = 0 ; do { znak = getchar ( ) ; } while ( znak == '\n' ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * niz ) { char * p = niz ; char * q = niz ; char * r = niz ; char * poc = niz ; char * kraj = niz ; char * pi = niz ; char * ki = niz ; char * prvi = niz ; char * drugi = niz ; char * pocetak_izbacivanja = niz ; char * kraj_izbacivanja = niz ; char * temp = niz ; char * pomocna = niz ; char string [ 10000 ] ; int brojac = 0 , max = 0 , pret = 1 , i = 0 , pret_1 = 0 , pret_2 = 0 ; while ( * p != '\0' ) { if ( ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && ( p == niz || * ( p - 1 ) == ' ' || * ( p - 1 ) == '-' || * p == '-' || ( * p >= '0' && * p <= '9' ) ) ) { poc = p ; while ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) p ++ ; if ( poc == niz && * p == '\0' ) { max = 1 ; pocetak_izbacivanja = poc ; kraj_izbacivanja = p ; break ; } else if ( * p == ' ' || * p == '\0' || * p == '-' || ( * p >= '0' && * p <= '9' ) ) { kraj = p ; brojac = 0 ; r = p ; while ( * r != '\0' ) { if ( ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) && ( r == niz || * ( r - 1 ) == ' ' || * ( r - 1 ) == '-' || ( * ( r - 1 ) >= '0' && * ( r - 1 ) <= '9' ) ) ) { pi = r ; while ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) r ++ ; if ( * r == ' ' || * r == '\0' || * r == '-' || ( * p >= '0' && * p <= '9' ) ) { ki = r ; pret = 1 ; } prvi = poc ; drugi = pi ; while ( drugi != ki && drugi != '\0' ) { pret_1 = 0 ; pret_2 = 0 ; if ( * prvi >= 'a' && * prvi <= 'z' ) { * prvi += 'a' - 'a' ; pret_1 = 1 ; } if ( * drugi >= 'a' && * drugi <= 'z' ) { * drugi += 'a' - 'a' ; pret_2 = 1 ; } if ( * prvi != * drugi ) pret = 0 ; if ( pret_1 ) * prvi -= 'a' - 'a' ; if ( pret_2 ) * drugi -= 'a' - 'a' ; prvi ++ ; drugi ++ ; } if ( pret == 1 ) brojac ++ ; } if ( * r == '\0' ) break ; r ++ ; } } if ( * p == '\0' ) break ; } if ( brojac > max ) { max = brojac ; pocetak_izbacivanja = poc ; kraj_izbacivanja = kraj ; } p ++ ; } if ( poc == niz ) { do { * pocetak_izbacivanja = * kraj_izbacivanja ; } while ( * kraj_izbacivanja != '\0' && pocetak_izbacivanja ++ != kraj_izbacivanja ++ ) ; } p = niz ; if ( max == 0 ) { while ( * p != '\0' ) { if ( ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && ( ( p == niz || * ( p - 1 ) == ' ' || * ( p - 1 ) == '-' || ( * ( p - 1 ) >= '0' && * ( p - 1 ) <= '9' ) ) ) ) { poc = p ; while ( ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) ) p ++ ; if ( * p == ' ' || * p == '\0' ) kraj = p ; break ; } p ++ ; } while ( * kraj != '\0' ) { * poc = * kraj ; poc ++ ; kraj ++ ; } if ( * kraj == '\0' ) * poc = '\0' ; } if ( max != 0 && poc != niz ) { while ( pocetak_izbacivanja != kraj_izbacivanja ) { if ( * pocetak_izbacivanja >= 'a' && * pocetak_izbacivanja <= 'z' ) string [ i ] = ( * pocetak_izbacivanja + 32 ) ; else string [ i ] = * pocetak_izbacivanja ; pocetak_izbacivanja ++ ; i ++ ; } string [ i ] = '\0' ; p = niz ; temp = string ; while ( * p != '\0' ) { poc = niz ; kraj = niz ; temp = string ; pret = 0 ; if ( ( * p == * temp || * p == ( * temp - 32 ) ) && ( p == niz || * ( p - 1 ) == ' ' || * ( p - 1 ) == '-' || ( * ( p - 1 ) >= '0' && * ( p - 1 ) <= '9' ) ) ) { poc = p ; pomocna = p ; while ( ( * pomocna == * temp || * pomocna == ( * temp - 32 ) ) && * temp != '\0' ) { pomocna ++ ; temp ++ ; } if ( * temp == '\0' && ( * pomocna == ' ' || * pomocna == '\0' || * pomocna == '-' || ( * pomocna >= '0' && * pomocna <= '9' ) ) ) { kraj = pomocna ; pret = 1 ; } } if ( pret ) { while ( * kraj != '\0' ) { * poc ++ = * kraj ++ ; } if ( * kraj == '\0' ) * poc = '\0' ; } p ++ ; } } else { return q ; } return q ; } int main ( ) { char tekst [ 100 ] ; printf ( ""unesi tekst: "" ) ; unesi ( tekst , 100 ) ; izbaci_najcescu ( tekst ) ; printf ( ""%s"" , tekst ) ; return 0 ; }"
656,98,98,0,72,A2016/Z3/Z2/student3301,A2016/Z3/Z2/student2086,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define brel 10 #define brel2 20 void ubaci ( int * niz , int velicina ) { int i , cifra , broj , broj2 = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { cifra = broj % 10 ; broj2 += cifra ; broj /= 10 ; } broj2 = abs ( broj2 ) ; * ( niz + i ) = broj2 ; broj2 = 0 ; } } } int izbaci ( int * niz , int velicina ) { int i , j , m , prvi = 0 , drugi = 1 , slijedeci ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) slijedeci = j ; else { slijedeci = prvi + drugi ; prvi = drugi ; drugi = slijedeci ; } if ( * ( niz + i ) == slijedeci ) { for ( m = i ; m < velicina - 1 ; m ++ ) { * ( niz + m ) = * ( niz + m + 1 ) ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , brel ) ; n = izbaci ( niz , brel2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < ( n - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define bre1 10 #define bre12 20 void ubaci ( int * niz , int size ) { int n , dig , num1 , num2 = 0 ; for ( n = size - 1 ; n >= 0 ; n -- ) { * ( niz + 2 * n ) = * ( niz + n ) ; } for ( n = 0 ; n < size * 2 ; n ++ ) { if ( n % 2 == 1 ) { num1 = * ( niz + n - 1 ) ; while ( num1 != 0 ) { dig = num1 % 10 ; num2 += dig ; num1 /= 10 ; } num2 = abs ( num2 ) ; * ( niz + n ) = num2 ; num2 = 0 ; } } } int izbaci ( int * niz , int size ) { int n , m , p , first = 0 , second = 1 , next ; for ( n = 0 ; n < size ; n ++ ) { first = 0 ; second = 1 ; for ( m = 1 ; m < 10000 ; m ++ ) { if ( m == 1 ) { next = m ; } else { next = first + second ; first = second ; second = next ; } if ( * ( niz + n ) == next ) { for ( p = n ; p < size - 1 ; p ++ ) { * ( niz + p ) = * ( niz + p + 1 ) ; } size -- ; n -- ; break ; } } } return size ; } int main ( ) { int niz [ 20 ] , n , x ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( n = 0 ; n < 10 ; n ++ ) { scanf ( ""%d"" , & niz [ n ] ) ; } ubaci ( niz , bre1 ) ; x = izbaci ( niz , bre12 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( n = 0 ; n < x ; n ++ ) { if ( n < ( x - 1 ) ) { printf ( ""%d, "" , niz [ n ] ) ; } else { printf ( ""%d. "" , niz [ n ] ) ; } } return 0 ; }"
667,99,99,0,35,A2016/Z3/Z1/student9318,A2016/Z3/Z1/student8665,"#include <stdio.h> int daj_prost ( ) { int prost , i = 0 ; static int broj = 1 ; if ( broj == 1 ) { broj ++ ; return 2 ; } else { do { broj ++ ; prost = 1 ; for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) prost = 0 ; } } while ( prost == 0 ) ; } return broj ; } int main ( ) { int a = 0 , b = 0 , suma = 0 , i = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a <= 0 || a >= b ) ; while ( broj <= b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) suma += broj ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int prost , i = 0 ; static int broj = 1 ; if ( broj == 1 ) { broj ++ ; return 2 ; } else { do { broj ++ ; prost = 1 ; for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) prost = 0 ; } } while ( prost == 0 ) ; } return broj ; } int main ( ) { int a = 0 , b = 0 , suma = 0 , i = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a <= 0 || a >= b ) ; while ( broj <= b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) suma += broj ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
668,96,96,0,43,A2016/Z1/Z4/student9163,A2016/Z1/Z4/student7193,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) printf ( ""***"" ) ; else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( n - 1 ) ; j ++ ) { if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( j = n ; j < 2 * n ; j ++ ) { if ( j == 2 * n - i - 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( j = 1 ; j < n - 1 ; j ++ ) { if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( j = n ; j < 2 * n ; j ++ ) { if ( j == 2 * n - 1 - i ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) printf ( ""***"" ) ; else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( n - 1 ) ; j ++ ) { if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( j = n ; j < 2 * n ; j ++ ) { if ( j == 2 * n - i - 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( j = 1 ; j < n - 1 ; j ++ ) { if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( j = n ; j < 2 * n ; j ++ ) { if ( j == 2 * n - 1 - i ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }"
672,95,95,0,38,A2016/Z2/Z3/student8430,A2016/Z2/Z3/student9113,"#include <stdio.h> int main ( ) { int i , j , n , p , q ; char mat [ 20 ] [ 20 ] ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } while ( 2 ) { printf ( ""\nunesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 10 ) printf ( ""pogresan unos"" ) ; else break ; } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & q , & p ) ; if ( p < 0 || p > 19 || q < 0 || q > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } mat [ p ] [ q ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n , x , y ; char mat [ 20 ] [ 20 ] ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } while ( 1 ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 10 ) printf ( ""pogresan unos\n"" ) ; else break ; } ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || y < 0 || x > 19 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { mat [ x ] [ y ] = '*' ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
678,99,99,0,37,A2016/Z2/Z4/student7119,A2016/Z2/Z4/student4128,"#include <stdio.h> int main ( ) { int m , n , i , j , teplicova , cirkularna ; double mat [ 100 ] [ 100 ] ; do { g : printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m <= 0 || n > 100 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; goto g ; } } while ( m > 100 || m < 0 || n > 100 || n < 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } cirkularna = 1 ; teplicova = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] || mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; } if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } } } if ( n == 1 && m != 1 ) printf ( ""matrica je teplicova"" ) ; else if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , teplicova , cirkularna ; double mat [ 100 ] [ 100 ] ; do { g : printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m <= 0 || n > 100 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; goto g ; } } while ( m > 100 || m < 0 || n > 100 || n < 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } cirkularna = 1 ; teplicova = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] || mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; } if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } } } if ( n == 1 && m != 1 ) printf ( ""matrica je teplicova"" ) ; else if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
685,57,57,0,39,A2016/Z3/Z2/student1180,A2016/Z3/Z2/student2486,"#include <stdio.h> #include <math.h> void ubaci ( int niz [ ] , int vel ) { int i , x , y , suma ; x = 2 * vel - 2 ; for ( i = vel - 1 ; i >= 0 ; i -- ) { niz [ x ] = niz [ i ] ; x = x - 2 ; } for ( i = 0 ; i < 2 * vel ; i += 2 ) { suma = 0 ; y = fabs ( niz [ i ] ) ; do { suma = suma + y % 10 ; y = y / 10 ; } while ( y != 0 ) ; niz [ i + 1 ] = suma ; } } int izbaci ( int niz [ ] , int vel ) { int i , j , niz1 [ 100 ] , k , l , m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( i = 2 ; i < 100 ; i ++ ) { niz1 [ i ] = niz1 [ i - 1 ] + niz1 [ i - 2 ] ; } for ( l = 0 ; l < vel ; l ++ ) { if ( niz [ l ] == 1 ) { for ( m = l ; m < vel - 1 ; m ++ ) { niz [ m ] = niz [ m + 1 ] ; } vel -- ; l -- ; } else { for ( j = 2 ; j < 100 ; j ++ ) { if ( niz [ l ] == niz1 [ j ] ) { for ( k = l ; k < vel - 1 ; k ++ ) { niz [ k ] = niz [ k + 1 ] ; } vel -- ; l -- ; break ; } } } } return vel ; } int main ( ) { int niz [ 100 ] , i , z ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; z = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < z ; i ++ ) { if ( i < z - 1 ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d."" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int niz11 [ ] , int duzina ) { int i , j , k , l , m , n = 0 , c , d ; m = duzina * 2 - 2 ; for ( j = duzina - 1 ; j >= 0 ; j -- ) { niz11 [ m ] = niz11 [ j ] ; m = m - 2 ; } for ( k = 0 ; k < 2 * duzina ; k = k + 2 ) { n = 0 ; l = fabs ( niz11 [ k ] ) ; do { n = n + l % 10 ; l = l / 10 ; } while ( l != 0 ) ; niz11 [ k + 1 ] = n ; } } int izbaci ( int niz11 [ ] , int duzina ) { int a , b , c , d , e , f , g , i , j , k ; int niz12 [ 100 ] ; niz12 [ 0 ] = 1 ; niz12 [ 1 ] = 1 ; for ( j = 2 ; j < 100 ; j ++ ) { niz12 [ j ] = niz12 [ j - 1 ] + niz12 [ j - 2 ] ; } for ( i = 0 ; i < duzina ; i ++ ) { if ( niz11 [ i ] == 1 ) { for ( k = i ; k < duzina - 1 ; k ++ ) { niz11 [ k ] = niz11 [ k + 1 ] ; } duzina -- ; i -- ; k -- ; } else { for ( a = 2 ; a < 100 ; a ++ ) { if ( niz11 [ i ] == niz12 [ a ] ) { g = duzina - 1 ; for ( b = i ; b < g ; b ++ ) { niz11 [ b ] = niz11 [ b + 1 ] ; } duzina -- ; i -- ; b -- ; break ; } } } } return duzina ; } int main ( ) { int niz11 [ 100 ] , i , j , k , l , m = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( j = 0 ; j < m ; j ++ ) { scanf ( ""%d"" , & niz11 [ j ] ) ; } ubaci ( niz11 , 10 ) ; l = izbaci ( niz11 , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < l ; i ++ ) { if ( i != l - 1 ) { printf ( ""%d, "" , niz11 [ i ] ) ; } else printf ( ""%d."" , niz11 [ i ] ) ; } return 0 ; }"
686,92,92,0,32,A2016/Z2/Z4/student6303,A2016/Z2/Z4/student7671,"#include <stdio.h> int main ( ) { int m , n ; int i , j , rez = 0 , tacno_tepl = 1 , tacno_cirk = 1 ; double a [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ! ( m > 0 && m < 101 && n > 0 && n < 101 ) ) printf ( ""pogresan unos!\n"" ) ; rez = m - n ; if ( rez < 0 ) rez = - rez ; } while ( m < 1 || m > 100 || n < 1 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%lf"" , & a [ i ] [ j ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) if ( a [ i ] [ j ] != a [ i + 1 ] [ j + 1 ] ) tacno_tepl = 0 ; if ( a [ i ] [ n - 1 ] != a [ i + 1 ] [ 0 ] || a [ 0 ] [ rez ] != a [ m - 1 ] [ n - 1 ] ) tacno_cirk = 0 ; } if ( tacno_tepl == 0 ) { tacno_cirk = 0 ; for ( i = 1 ; i < m ; i ++ ) { if ( a [ i ] [ 0 ] != a [ 0 ] [ m - i ] ) tacno_cirk = 0 ; } } if ( tacno_cirk == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( tacno_tepl == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , teplicova = 1 , cirkularna = 1 , ukupno = 0 ; double mat [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""\nunesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ! ( m > 0 && m < 101 && n > 0 && n < 101 ) ) printf ( ""pogresan unos!"" ) ; ukupno = m - n ; if ( ukupno < 0 ) ukupno = - ukupno ; } while ( m < 1 || m > 100 || n < 1 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) teplicova = 0 ; else if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] || mat [ 0 ] [ ukupno ] != mat [ m - 1 ] [ n - 1 ] ) cirkularna = 0 ; } } if ( teplicova == 0 ) { cirkularna = 0 ; for ( i = 1 ; i < m ; i ++ ) { if ( mat [ i ] [ 0 ] != mat [ 0 ] [ m - i ] ) cirkularna = 0 ; } } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
687,99,99,0,75,A2016/Z4/Z3/student5744,A2016/Z4/Z3/student2675,"#include <stdio.h> char * zamjena_rijeci ( char * s , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * pom = s ; char * poc ; char * kraj ; int i , j , t , d , duzina ; for ( d = 0 ; d < broj_rijeci ; d ++ ) { s = pom ; while ( * s != '\0' ) { while ( * s == ' ' ) { s ++ ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { kraj = s ; poc = s ; t = 1 ; if ( rijeci [ i ] [ 0 ] == '\0' ) t = 0 ; for ( j = 0 ; rijeci [ i ] [ j ] != '\0' && * kraj != '\0' && * kraj != ' ' ; j ++ , kraj ++ ) { if ( rijeci [ i ] [ j ] != * kraj ) t = 0 ; } if ( s != pom ) { if ( * ( s - 1 ) != ' ' ) t = 0 ; } if ( rijeci [ i ] [ j ] != '\0' || ( * kraj != '\0' && * kraj != ' ' ) ) t = 0 ; if ( t ) { while ( * kraj != '\0' ) { * ( poc ++ ) = * ( kraj ++ ) ; } * poc = '\0' ; duzina = 0 ; for ( j = 0 ; zamjene [ i ] [ j ] != '\0' && zamjene [ i ] [ j ] != ' ' ; j ++ ) { duzina ++ ; } while ( poc != s ) { * ( poc + duzina ) = * poc ; poc -- ; } * ( poc + duzina ) = * poc ; for ( j = 0 ; zamjene [ i ] [ j ] != '\0' && zamjene [ i ] [ j ] != ' ' ; j ++ , s ++ ) { * s = zamjene [ i ] [ j ] ; } } } if ( * s != '\0' ) s ++ ; } } return pom ; } int main ( ) { char * rijeci [ 2 ] = { ""ss"" , ""ss"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; char tekst [ 100 ] = "" s ss s ss s s  s s s"" ; printf ( ""%s\n"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; printf ( ""%s"" , tekst ) ; return 0 ; }","#include <stdio.h> char * zamjena_rijeci ( char * s , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * pom = s ; char * poc ; char * kraj ; int i , j , t , d , duzina ; for ( d = 0 ; d < broj_rijeci ; d ++ ) { s = pom ; while ( * s != '\0' ) { while ( * s == ' ' ) { s ++ ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { kraj = s ; poc = s ; t = 1 ; if ( rijeci [ i ] [ 0 ] == '\0' ) t = 0 ; for ( j = 0 ; rijeci [ i ] [ j ] != '\0' && * kraj != '\0' && * kraj != ' ' ; j ++ , kraj ++ ) { if ( rijeci [ i ] [ j ] != * kraj ) t = 0 ; } if ( s != pom ) { if ( * ( s - 1 ) != ' ' ) t = 0 ; } if ( rijeci [ i ] [ j ] != '\0' || ( * kraj != '\0' && * kraj != ' ' ) ) t = 0 ; if ( t ) { while ( * kraj != '\0' ) { * ( poc ++ ) = * ( kraj ++ ) ; } * poc = '\0' ; duzina = 0 ; for ( j = 0 ; zamjene [ i ] [ j ] != '\0' && zamjene [ i ] [ j ] != ' ' ; j ++ ) { duzina ++ ; } while ( poc != s ) { * ( poc + duzina ) = * poc ; poc -- ; } * ( poc + duzina ) = * poc ; for ( j = 0 ; zamjene [ i ] [ j ] != '\0' && zamjene [ i ] [ j ] != ' ' ; j ++ , s ++ ) { * s = zamjene [ i ] [ j ] ; } } } if ( * s != '\0' ) s ++ ; } } return pom ; } int main ( ) { char * rijeci [ 2 ] = { ""ss"" , ""ss"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; char tekst [ 100 ] = "" s ss s ss s s  s s s"" ; printf ( ""%s\n"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; printf ( ""%s"" , tekst ) ; return 0 ; }"
694,78,78,0,152,A2016/Z1/Z1/student8367,A2016/Z1/Z1/student5867,"#include <stdio.h> int main ( ) { float prvi_parc_tarik , drugi_parc_tarik , prisustvo_tarik , zadace_tarik , zavrsni_ispit_tarik ; float prvi_parc_bojan , drugi_parc_bojan , prisustvo_bojan , zadace_bojan , zavrsni_ispit_bojan ; float prvi_parc_mirza , drugi_parc_mirza , prisustvo_mirza , zadace_mirza , zavrsni_ispit_mirza ; float br_bodova_tarik , br_bodova_bojan , br_bodova_mirza ; int ocjena_tarik , ocjena_bojan , ocjena_mirza ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & prvi_parc_tarik ) ; if ( prvi_parc_tarik < 0 || prvi_parc_tarik > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & drugi_parc_tarik ) ; if ( drugi_parc_tarik < 0 || drugi_parc_tarik > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & prisustvo_tarik ) ; if ( prisustvo_tarik < 0 || prisustvo_tarik > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zadace_tarik ) ; if ( zadace_tarik < 0 || zadace_tarik > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & zavrsni_ispit_tarik ) ; if ( zavrsni_ispit_tarik < 0 || zavrsni_ispit_tarik > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } br_bodova_tarik = prvi_parc_tarik + drugi_parc_tarik + prisustvo_tarik + zadace_tarik + zavrsni_ispit_tarik ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & prvi_parc_bojan ) ; if ( prvi_parc_bojan < 0 || prvi_parc_bojan > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & drugi_parc_bojan ) ; if ( drugi_parc_bojan < 0 || drugi_parc_bojan > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & prisustvo_bojan ) ; if ( prisustvo_bojan < 0 || prisustvo_bojan > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zadace_bojan ) ; if ( zadace_bojan < 0 || zadace_bojan > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & zavrsni_ispit_bojan ) ; if ( zavrsni_ispit_bojan < 0 || zavrsni_ispit_bojan > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } br_bodova_bojan = prvi_parc_bojan + drugi_parc_bojan + prisustvo_bojan + zadace_bojan + zavrsni_ispit_bojan ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & prvi_parc_mirza ) ; if ( prvi_parc_mirza < 0 || prvi_parc_mirza > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & drugi_parc_mirza ) ; if ( drugi_parc_mirza < 0 || drugi_parc_mirza > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & prisustvo_mirza ) ; if ( prisustvo_mirza < 0 || prisustvo_mirza > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zadace_mirza ) ; if ( zadace_mirza < 0 || zadace_mirza > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & zavrsni_ispit_mirza ) ; if ( zavrsni_ispit_mirza < 0 || zavrsni_ispit_mirza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } br_bodova_mirza = prvi_parc_mirza + drugi_parc_mirza + prisustvo_mirza + zadace_mirza + zavrsni_ispit_mirza ; if ( br_bodova_tarik > 55 && br_bodova_tarik < 65 ) ocjena_tarik = 6 ; else if ( br_bodova_tarik >= 65 && br_bodova_tarik < 75 ) ocjena_tarik = 7 ; else if ( br_bodova_tarik >= 75 && br_bodova_tarik < 85 ) ocjena_tarik = 8 ; else if ( br_bodova_tarik >= 85 && br_bodova_tarik < 92 ) ocjena_tarik = 9 ; else if ( br_bodova_tarik >= 92 && br_bodova_tarik <= 100 ) ocjena_tarik = 10 ; if ( br_bodova_bojan >= 55 && br_bodova_bojan < 65 ) ocjena_bojan = 6 ; else if ( br_bodova_bojan >= 65 && br_bodova_bojan < 75 ) ocjena_bojan = 7 ; else if ( br_bodova_bojan >= 75 && br_bodova_bojan < 85 ) ocjena_bojan = 8 ; else if ( br_bodova_bojan >= 85 && br_bodova_bojan < 92 ) ocjena_bojan = 9 ; else if ( br_bodova_bojan >= 92 && br_bodova_bojan <= 100 ) ocjena_bojan = 10 ; if ( br_bodova_mirza >= 55 && br_bodova_mirza < 65 ) ocjena_mirza = 6 ; else if ( br_bodova_mirza >= 65 && br_bodova_mirza < 75 ) ocjena_mirza = 7 ; else if ( br_bodova_mirza >= 75 && br_bodova_mirza < 85 ) ocjena_mirza = 8 ; else if ( br_bodova_mirza >= 85 && br_bodova_mirza < 92 ) ocjena_mirza = 9 ; else if ( br_bodova_mirza >= 92 && br_bodova_mirza <= 100 ) ocjena_mirza = 10 ; if ( br_bodova_tarik < 55 && br_bodova_bojan < 55 && br_bodova_mirza < 55 ) printf ( ""nijedan student nije polozio."" ) ; else if ( br_bodova_tarik >= 55 && br_bodova_bojan < 55 && br_bodova_mirza < 55 ) printf ( ""jedan student je polozio."" ) ; else if ( br_bodova_tarik < 55 && br_bodova_bojan >= 55 && br_bodova_mirza < 55 ) printf ( ""jedan student je polozio."" ) ; else if ( br_bodova_tarik < 55 && br_bodova_bojan < 55 && br_bodova_mirza >= 55 ) printf ( ""jedan student je polozio."" ) ; else if ( br_bodova_tarik >= 55 && br_bodova_bojan >= 55 && br_bodova_mirza < 55 ) printf ( ""dva studenta su polozila."" ) ; else if ( br_bodova_tarik >= 55 && br_bodova_bojan < 55 && br_bodova_mirza >= 55 ) printf ( ""dva studenta su polozila."" ) ; else if ( br_bodova_tarik < 55 && br_bodova_bojan >= 55 && br_bodova_mirza >= 55 ) printf ( ""dva studenta su polozila."" ) ; else if ( br_bodova_tarik >= 55 && br_bodova_bojan >= 55 && br_bodova_mirza >= 55 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ocjena_tarik == ocjena_mirza && ocjena_mirza == ocjena_bojan && ocjena_tarik == ocjena_bojan ) printf ( ""sva tri studenta imaju istu ocjenu."" ) ; else if ( ocjena_tarik == ocjena_mirza && ocjena_tarik != ocjena_bojan && ocjena_mirza != ocjena_bojan ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; else if ( ocjena_tarik == ocjena_bojan && ocjena_tarik != ocjena_mirza && ocjena_bojan != ocjena_mirza ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; else if ( ocjena_mirza == ocjena_bojan && ocjena_mirza != ocjena_tarik && ocjena_bojan != ocjena_tarik ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; else if ( ocjena_tarik != ocjena_bojan && ocjena_tarik != ocjena_mirza && ocjena_bojan != ocjena_mirza ) printf ( ""svaki student ima razlicitu ocjenu."" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { float i_par_t , ii_par_t , prisustvo_t , zadace_t , zavrsni_t ; float i_par_b , ii_par_b , prisustvo_b , zadace_b , zavrsni_b ; float i_par_m , ii_par_m , prisustvo_m , zadace_m , zavrsni_m ; float zbir_t , zbir_b , zbir_m ; int ocjena_t , ocjena_b , ocjena_m ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & i_par_t ) ; if ( i_par_t < 0 || i_par_t > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & ii_par_t ) ; if ( ii_par_t < 0 || ii_par_t > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & prisustvo_t ) ; if ( prisustvo_t < 0 || prisustvo_t > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zadace_t ) ; if ( zadace_t < 0 || zadace_t > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & zavrsni_t ) ; if ( zavrsni_t < 0 || zavrsni_t > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & i_par_b ) ; if ( i_par_b < 0 || i_par_b > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & ii_par_b ) ; if ( ii_par_b < 0 || ii_par_b > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & prisustvo_b ) ; if ( prisustvo_b < 0 || prisustvo_b > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zadace_b ) ; if ( zadace_b < 0 || zadace_b > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & zavrsni_b ) ; if ( zavrsni_b < 0 || zavrsni_b > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & i_par_m ) ; if ( i_par_m < 0 || i_par_m > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & ii_par_m ) ; if ( ii_par_m < 0 || ii_par_m > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & prisustvo_m ) ; if ( prisustvo_m < 0 || prisustvo_m > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zadace_m ) ; if ( zadace_m < 0 || zadace_m > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & zavrsni_m ) ; if ( zavrsni_m < 0 || zavrsni_m > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } zbir_t = i_par_t + ii_par_t + zadace_t + prisustvo_t + zavrsni_t + 0.01 ; zbir_b = i_par_b + ii_par_b + zadace_b + prisustvo_b + zavrsni_b + 0.01 ; zbir_m = i_par_m + ii_par_m + zadace_m + prisustvo_m + zavrsni_m + 0.01 ; if ( zbir_t < 55 && zbir_b < 55 && zbir_m < 55 ) printf ( ""nijedan student nije polozio."" ) ; else if ( ( zbir_t >= 55 && zbir_b < 55 && zbir_m < 55 ) || ( zbir_t < 55 && zbir_b >= 55 && zbir_m < 55 ) || ( zbir_t < 55 && zbir_b < 55 && zbir_m >= 55 ) ) printf ( ""jedan student je polozio."" ) ; else if ( ( zbir_t >= 55 && zbir_b >= 55 && zbir_m < 55 ) || ( zbir_t >= 55 && zbir_b < 55 && zbir_m >= 55 ) || ( zbir_t < 55 && zbir_b >= 55 && zbir_m >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; else if ( zbir_t >= 55 && zbir_b >= 55 && zbir_m >= 55 ) printf ( ""sva tri studenta su polozila."" ) ; if ( zbir_t >= 55 && zbir_t < 65 ) ocjena_t = 6 ; else if ( zbir_t >= 65 && zbir_t < 75 ) ocjena_t = 7 ; else if ( zbir_t >= 75 && zbir_t < 85 ) ocjena_t = 8 ; else if ( zbir_t >= 85 && zbir_t < 92 ) ocjena_t = 9 ; else if ( zbir_t >= 92 && zbir_t <= 100 ) ocjena_t = 10 ; if ( zbir_b >= 55 && zbir_b < 65 ) ocjena_b = 6 ; else if ( zbir_b >= 65 && zbir_b < 75 ) ocjena_b = 7 ; else if ( zbir_b >= 75 && zbir_b < 85 ) ocjena_b = 8 ; else if ( zbir_b >= 85 && zbir_b < 92 ) ocjena_b = 9 ; else if ( zbir_b >= 92 && zbir_b <= 100 ) ocjena_b = 10 ; if ( zbir_m >= 55 && zbir_m < 65 ) ocjena_m = 6 ; else if ( zbir_m >= 65 && zbir_m < 75 ) ocjena_m = 7 ; else if ( zbir_m >= 75 && zbir_m < 85 ) ocjena_m = 8 ; else if ( zbir_m >= 85 && zbir_m < 92 ) ocjena_m = 9 ; else if ( zbir_m >= 92 && zbir_m <= 100 ) ocjena_m = 10 ; if ( zbir_t >= 55 && zbir_b >= 55 && zbir_m >= 55 ) { if ( ocjena_t == ocjena_b && ocjena_t == ocjena_m && ocjena_b == ocjena_m ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ocjena_t == ocjena_b && ocjena_t != ocjena_m && ocjena_b != ocjena_m ) || ( ocjena_t == ocjena_m && ocjena_t != ocjena_b && ocjena_b != ocjena_m ) || ( ocjena_b == ocjena_m && ocjena_b != ocjena_t && ocjena_m != ocjena_t ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else if ( ocjena_t != ocjena_b && ocjena_t != ocjena_m && ocjena_b != ocjena_m ) printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } return 0 ; }"
697,99,99,0,160,A2016/Z1/Z1/student6720,A2016/Z1/Z1/student4628,"#include <stdio.h> int main ( ) { double a1 , b1 , c1 , d1 , e1 , a2 , b2 , c2 , d2 , e2 , a3 , b3 , c3 , d3 , e3 , s1 , s2 , s3 , oc1 , oc2 , oc3 ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a1 ) ; if ( a1 < 0 || a1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c1 ) ; if ( c1 < 0 || c1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d1 ) ; if ( d1 < 0 || d1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e1 ) ; if ( e1 < 0 || e1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a2 ) ; if ( a2 < 0 || a2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c2 ) ; if ( c2 < 0 || c2 > 10 ) { printf ( ""neispravan broj brodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d2 ) ; if ( d2 < 0 || d2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e2 ) ; if ( e2 < 0 || e2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a3 ) ; if ( a3 < 0 || a3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c3 ) ; if ( c3 < 0 || c3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d3 ) ; if ( d3 < 0 || d3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e3 ) ; if ( e3 < 0 || e3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } s1 = a1 + b1 + c1 + d1 + e1 ; s2 = a2 + b2 + c2 + d2 + e2 ; s3 = a3 + b3 + c3 + d3 + e3 ; if ( s1 < 55 ) oc1 = 5 ; else if ( s1 >= 55 && s1 < 65 ) oc1 = 6 ; else if ( s1 >= 65 && s1 < 75 ) oc1 = 7 ; else if ( s1 >= 75 && s1 < 85 ) oc1 = 8 ; else if ( s1 >= 85 && s1 < 92 ) oc1 = 9 ; else if ( s1 >= 92 && s1 <= 100 ) oc1 = 10 ; if ( s2 < 55 ) oc2 = 5 ; if ( s2 >= 55 && s2 < 65 ) oc2 = 6 ; else if ( s2 >= 65 && s2 < 75 ) oc2 = 7 ; else if ( s2 >= 75 && s2 < 85 ) oc2 = 8 ; else if ( s2 >= 85 && s2 < 92 ) oc2 = 9 ; else if ( s2 >= 92 && s2 >= 100 ) oc2 = 10 ; if ( s3 < 55 ) oc3 = 5 ; else if ( s3 >= 55 && s3 < 65 ) oc3 = 6 ; else if ( s3 >= 65 && s3 < 75 ) oc3 = 7 ; else if ( s3 >= 75 && s3 < 85 ) oc3 = 8 ; else if ( s3 >= 85 && s3 < 92 ) oc3 = 9 ; else if ( s3 >= 92 && s3 <= 100 ) oc3 = 10 ; if ( s1 >= 55 && s2 >= 55 && s3 >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ( oc1 == oc2 ) && ( oc2 == oc3 ) ) { printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; } else if ( ( oc1 == oc2 ) || ( oc2 == oc3 ) && ( oc1 == oc3 ) ) { printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } else { printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } } else if ( ( s1 >= 55 && s2 < 55 && s3 < 55 ) || ( s1 < 55 && s2 >= 55 && s3 < 55 ) || ( s1 < 55 && s2 < 55 && s3 >= 55 ) ) { printf ( ""jedan student je polozio."" ) ; } else if ( ( s1 >= 55 && s2 >= 55 && s3 < 55 ) || ( s1 < 55 && s2 >= 55 && s3 >= 55 ) || ( s1 >= 55 && s2 < 55 && s3 >= 55 ) ) { printf ( ""dva studenta su polozila."" ) ; } else { printf ( ""nijedan student nije polozio."" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { double a1 , b1 , c1 , d1 , e1 , a2 , b2 , c2 , d2 , e2 , a3 , b3 , c3 , d3 , e3 , s1 , s2 , s3 , oc1 , oc2 , oc3 ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a1 ) ; if ( a1 < 0 || a1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c1 ) ; if ( c1 < 0 || c1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d1 ) ; if ( d1 < 0 || d1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e1 ) ; if ( e1 < 0 || e1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a2 ) ; if ( a2 < 0 || a2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c2 ) ; if ( c2 < 0 || c2 > 10 ) { printf ( ""neispravan broj brodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d2 ) ; if ( d2 < 0 || d2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e2 ) ; if ( e2 < 0 || e2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & a3 ) ; if ( a3 < 0 || a3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & c3 ) ; if ( c3 < 0 || c3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & d3 ) ; if ( d3 < 0 || d3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & e3 ) ; if ( e3 < 0 || e3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } s1 = a1 + b1 + c1 + d1 + e1 ; s2 = a2 + b2 + c2 + d2 + e2 ; s3 = a3 + b3 + c3 + d3 + e3 ; if ( s1 < 55 ) oc1 = 5 ; else if ( s1 >= 55 && s1 < 65 ) oc1 = 6 ; else if ( s1 >= 65 && s1 < 75 ) oc1 = 7 ; else if ( s1 >= 75 && s1 < 85 ) oc1 = 8 ; else if ( s1 >= 85 && s1 < 92 ) oc1 = 9 ; else if ( s1 >= 92 && s1 <= 100 ) oc1 = 10 ; if ( s2 < 55 ) oc2 = 5 ; if ( s2 >= 55 && s2 < 65 ) oc2 = 6 ; else if ( s2 >= 65 && s2 < 75 ) oc2 = 7 ; else if ( s2 >= 75 && s2 < 85 ) oc2 = 8 ; else if ( s2 >= 85 && s2 < 92 ) oc2 = 9 ; else if ( s2 >= 92 && s2 >= 100 ) oc2 = 10 ; if ( s3 < 55 ) oc3 = 5 ; else if ( s3 >= 55 && s3 < 65 ) oc3 = 6 ; else if ( s3 >= 65 && s3 < 75 ) oc3 = 7 ; else if ( s3 >= 75 && s3 < 85 ) oc3 = 8 ; else if ( s3 >= 85 && s3 < 92 ) oc3 = 9 ; else if ( s3 >= 92 && s3 <= 100 ) oc3 = 10 ; if ( s1 >= 55 && s2 >= 55 && s3 >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ( oc1 == oc2 ) && ( oc2 == oc3 ) ) { printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; } else if ( ( oc1 == oc2 ) || ( oc2 == oc3 ) && ( oc1 == oc3 ) ) { printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } else { printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } } else if ( ( s1 >= 55 && s2 < 55 && s3 < 55 ) || ( s1 < 55 && s2 >= 55 && s3 < 55 ) || ( s1 < 55 && s2 < 55 && s3 >= 55 ) ) { printf ( ""jedan student je polozio."" ) ; } else if ( ( s1 >= 55 && s2 >= 55 && s3 < 55 ) || ( s1 < 55 && s2 >= 55 && s3 >= 55 ) || ( s1 >= 55 && s2 < 55 && s3 >= 55 ) ) { printf ( ""dva studenta su polozila."" ) ; } else { printf ( ""nijedan student nije polozio."" ) ; } return 0 ; }"
712,97,97,0,86,A2016/Z3/Z2/student2464,A2016/Z3/Z2/student2676,"#include <stdio.h> #include <stdlib.h> void ubaci ( int * niz , int duz ) { int * clan ; clan = niz ; while ( clan < niz + duz ) { int broj = 0 ; int bniz = abs ( * clan ) ; while ( bniz > 0 ) { broj += ( bniz % 10 ) ; bniz /= 10 ; } int * qclan ; qclan = niz + duz ; while ( qclan > clan ) { * qclan = * ( qclan - 1 ) ; qclan -- ; } * ( clan + 1 ) = broj ; clan += 2 ; duz += 1 ; } } int izbaci ( int * niz , int duz ) { int * clan ; clan = niz ; while ( clan < niz + duz ) { int ftrue = 0 , pprosli = 0 , prosli = 1 , fbroj = 1 ; while ( fbroj <= * clan ) { if ( * clan == fbroj ) ftrue = 1 ; pprosli = prosli ; prosli = fbroj ; fbroj = prosli + pprosli ; } if ( ftrue ) { int * qclan ; qclan = clan ; while ( qclan < niz + duz - 1 ) { * qclan = * ( qclan + 1 ) ; qclan ++ ; } duz -- ; clan -- ; } clan ++ ; } return duz ; } int main ( ) { int niz [ 301 ] , duz ; int i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; duz = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < duz ; i ++ ) { printf ( ""%d"" , niz [ i ] ) ; if ( i == duz - 1 ) printf ( ""."" ) ; else printf ( "", "" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> void ubaci ( int * niz , int duz ) { int * clan ; clan = niz ; while ( clan < niz + duz ) { int broj = 0 ; int bniz = abs ( * clan ) ; while ( bniz > 0 ) { broj += ( bniz % 10 ) ; bniz /= 10 ; } int * qclan ; qclan = niz + duz ; while ( qclan > clan ) { * qclan = * ( qclan - 1 ) ; qclan -- ; } * ( clan + 1 ) = broj ; clan += 2 ; duz += 1 ; } } int izbaci ( int * niz , int duz ) { int * clan ; clan = niz ; while ( clan < niz + duz ) { int ftrue = 0 , pprosli = 0 , prosli = 1 , fbroj = 1 ; while ( fbroj <= * clan ) { if ( * clan == fbroj ) ftrue = 1 ; pprosli = prosli ; prosli = fbroj ; fbroj = prosli + pprosli ; } if ( ftrue ) { int * qclan ; qclan = clan ; while ( qclan < niz + duz - 1 ) { * qclan = * ( qclan + 1 ) ; qclan ++ ; } duz -- ; clan -- ; } clan ++ ; } return duz ; } int main ( ) { int niz [ 301 ] , duz ; int i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; duz = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < duz ; i ++ ) { printf ( ""%d"" , niz [ i ] ) ; if ( i == duz - 1 ) printf ( ""."" ) ; else printf ( "", "" ) ; } return 0 ; }"
726,89,89,0,61,A2016/Z1/Z3/student4420,A2016/Z1/Z3/student7496,"#include <stdio.h> int main ( ) { int c = 0 , p = 0 , b = 0 , s = 0 , v = 0 , uk = 0 ; float postotak ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'k' || boja == 'k' ) { goto l1 ; } if ( boja == 'v' || boja == 'v' ) { v ++ ; uk ++ ; } if ( boja == 'p' || boja == 'p' ) { p ++ ; uk ++ ; } if ( boja == 'c' || boja == 'c' ) { c ++ ; uk ++ ; } if ( boja == 'b' || boja == 'b' ) { b ++ ; uk ++ ; } if ( boja == 's' || boja == 's' ) { s ++ ; uk ++ ; } if ( boja != 'c' && boja != 's' && boja != 'v' && boja != 'p' && boja != 'b' && boja != 'c' && boja != 's' && boja != 'v' && boja != 'p' && boja != 'b' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos\n"" ) ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c > s && c > v && c > p && c > b ) { postotak = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , postotak ) ; return 0 ; } if ( s > c && s > v && s > p && s > b ) { postotak = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , postotak ) ; return 0 ; } if ( v > s && v > c && v > p && v > b ) { postotak = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , postotak ) ; return 0 ; } if ( p > s && p > v && p > c && p > b ) { postotak = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , postotak ) ; return 0 ; } if ( b > s && b > v && b > p && b > c ) { postotak = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , postotak ) ; return 0 ; } if ( c == s ) { postotak = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , postotak ) ; } if ( s == v && v == p ) { postotak = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , postotak ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c = 0 , p = 0 , b = 0 , s = 0 , v = 0 , uk = 0 ; float procenat ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c ++ ; uk ++ ; } if ( boja == 'b' || boja == 'b' ) { b ++ ; uk ++ ; } if ( boja == 's' || boja == 's' ) { s ++ ; uk ++ ; } if ( boja == 'v' || boja == 'v' ) { v ++ ; uk ++ ; } if ( boja == 'p' || boja == 'p' ) { p ++ ; uk ++ ; } if ( boja != 'c' && boja != 'c' && boja != 'b' && boja != 'b' && boja != 's' && boja != 's' && boja != 'v' && boja != 'v' && boja != 'p' && boja != 'p' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos\n"" ) ; } if ( boja == 'k' || boja == 'k' ) { goto l1 ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (00.00%%)."" ) ; return 0 ; } if ( c > b && c > s && c > v && c > p ) { procenat = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" ) ; } if ( c < b && b > s && b > v && b > p ) { procenat = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , procenat ) ; } if ( c < s && b < s && s > v && s > p ) { procenat = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , procenat ) ; } if ( c < v && b < v && s < v && v > p ) { procenat = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , procenat ) ; } if ( c < p && b < p && s < p && v < p ) { procenat = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , procenat ) ; } return 0 ; }"
727,85,85,0,20,A2016/Z1/Z2/student7980,A2016/Z1/Z2/student3715,"#include <stdio.h> #include<math.h> #define epsilon 0.0001 int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a2 * x + b2 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0001 int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * ( b2 - b1 ) / ( a1 - a2 ) + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
741,53,53,0,31,A2016/Z2/Z2/student8598,A2016/Z2/Z2/student7888,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define g 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , n , sekundaf , stepen , minuta ; double niz [ 500 ] = { 0 } , sekunda , m , b = 0.5 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] *= 180. / pi ; } for ( i = 0 ; i < n ; i ++ ) { m = ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ; sekunda = fabs ( 60 * m ) ; sekunda += b ; sekundaf = sekunda ; if ( sekundaf == 60 ) { sekundaf = 0 ; } if ( sekundaf > 30 ) { for ( j = i ; j < n ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { stepen = niz [ i ] ; minuta = abs ( ( 60 * ( niz [ i ] - ( int ) niz [ i ] ) ) ) ; if ( niz [ i ] >= 0 ) { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) + b ) ) ; } else { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) - b ) ) ; } if ( fabs ( sekunda - 60 ) < g ) { minuta ++ ; sekunda = 0 ; } if ( niz [ i ] >= 0 ) { if ( minuta >= 60 ) { stepen ++ ; minuta = 0 ; } } else { if ( minuta >= 60 ) { stepen -- ; minuta = 0 ; } } sekundaf = sekunda ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepen , minuta , sekundaf ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define eps 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , sekf , ste , min ; int bruglova ; double uglovi [ 500 ] = { 0 } , sek , a ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & bruglova ) ; i = 0 ; while ( i < bruglova ) { scanf ( ""%lf"" , & uglovi [ i ] ) ; uglovi [ i ] *= 180. / pi ; i ++ ; } i = 0 ; while ( i < bruglova ) { a = ( ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) - ( int ) ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) ) ; sek = fabs ( 60 * a ) ; sek += 0.5 ; sekf = sek ; if ( sekf == 60 ) sekf = 0 ; if ( sekf > 30 ) { j = i ; while ( j < bruglova ) { uglovi [ j ] = uglovi [ j + 1 ] ; j ++ ; } bruglova -- ; i -- ; } i ++ ; } printf ( ""uglovi su: \n"" ) ; i = 0 ; while ( i < bruglova ) { ste = uglovi [ i ] ; min = abs ( ( 60 * ( uglovi [ i ] - ( int ) uglovi [ i ] ) ) ) ; if ( uglovi [ i ] >= 0 ) sek = fabs ( ( int ) ( ( 60 * ( ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) - ( int ) ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) ) ) + 0.5 ) ) ; else sek = fabs ( ( int ) ( ( 60 * ( ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) - ( int ) ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) ) ) - 0.5 ) ) ; if ( fabs ( sek - 60 ) < eps ) { min ++ ; sek = 0 ; } if ( uglovi [ i ] >= 0 ) { if ( min >= 60 ) { ste ++ ; min = 0 ; } } else if ( min >= 60 ) { ste -- ; min = 0 ; } sekf = sek ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , ste , min , sekf ) ; i ++ ; } return 0 ; }"
744,95,95,0,19,A2016/Z1/Z4/student8337,A2016/Z1/Z4/student4860,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n < 1 || n > 50 ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( n == 1 ) { printf ( ""**"" ) ; } if ( i == j || j == i + 2 * n - 2 || j == 2 * n - i - 2 || j == 4 * n - i - 4 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos"" ) ; } while ( n <= 0 || n > 50 ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j || j == i + 2 * n - 2 || j == 2 * n - i - 2 || j == 4 * n - i - 4 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
746,99,99,0,93,A2016/Z5/Z1/student3900,A2016/Z5/Z1/student7802,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int provjera ( double niz ) { int i , j ; return 0 ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosj ( int niz [ ] , int br ) { int i = 0 , provj = 0 ; double suma = 0 , pr ; if ( br == 0 ) return 5 ; for ( i = 0 ; i < br ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma = suma + niz [ i ] ; } pr = suma / br ; return pr ; } int genijalci ( struct student pod [ ] , int velicina , double prosjek ) { struct student temp ; int i , j ; double niz_prosjeka [ 100 ] , max ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosj ( pod [ i ] . ocjene , pod [ i ] . br_ocjena ) > prosjek ) niz_prosjeka [ i ] = prosj ( pod [ i ] . ocjene , pod [ i ] . br_ocjena ) ; if ( prosj ( pod [ i ] . ocjene , pod [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) { pod [ j ] = pod [ j + 1 ] ; } velicina -- ; i -- ; } } for ( i = 0 ; i < velicina ; i ++ ) { printf ( ""%s %s\n"" , pod [ i ] . prezime , pod [ i ] . ime ) ; } return velicina ; } int main ( ) { struct student pod [ 100 ] ; double prosjek = 0 ; int vel = 0 , i = 0 , j = 0 , br_studenata1 ; printf ( ""unesite broj studenata: "" ) ; scanf ( ""%d"" , & br_studenata1 ) ; for ( i = 0 ; i < br_studenata1 ; i ++ ) { printf ( ""unesite prezime studenta"" ) ; unesi ( pod [ i ] . prezime , 20 ) ; printf ( ""unesite ime studenta"" ) ; unesi ( pod [ i ] . ime , 20 ) ; printf ( ""unesite broj ocjena studenta"" ) ; scanf ( ""%d"" , & pod [ i ] . br_ocjena ) ; printf ( ""unesite ocjene"" ) ; for ( j = 0 ; j < pod [ i ] . br_ocjena ; j ++ ) { scanf ( ""%d"" , & pod [ i ] . ocjene [ j ] ) ; } } printf ( ""unesite prosjek ocjena: "" ) ; scanf ( ""%lf"" , & prosjek ) ; vel = genijalci ( pod , br_studenata1 , prosjek ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int provjera ( double niz ) { int i , j ; return 0 ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosj ( int niz [ ] , int br ) { int i = 0 , provj = 0 ; double suma = 0 , pr ; if ( br == 0 ) return 5 ; for ( i = 0 ; i < br ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma = suma + niz [ i ] ; } pr = suma / br ; return pr ; } int genijalci ( struct student pod [ ] , int velicina , double prosjek ) { struct student temp ; int i , j ; double niz_prosjeka [ 100 ] , max ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosj ( pod [ i ] . ocjene , pod [ i ] . br_ocjena ) > prosjek ) niz_prosjeka [ i ] = prosj ( pod [ i ] . ocjene , pod [ i ] . br_ocjena ) ; if ( prosj ( pod [ i ] . ocjene , pod [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) { pod [ j ] = pod [ j + 1 ] ; } velicina -- ; i -- ; } } for ( i = 0 ; i < velicina ; i ++ ) { printf ( ""%s %s\n"" , pod [ i ] . prezime , pod [ i ] . ime ) ; } return velicina ; } int main ( ) { struct student pod [ 100 ] ; double prosjek = 0 ; int vel = 0 , i = 0 , j = 0 , br_studenata1 ; printf ( ""unesite broj studenata: "" ) ; scanf ( ""%d"" , & br_studenata1 ) ; for ( i = 0 ; i < br_studenata1 ; i ++ ) { printf ( ""unesite prezime studenta"" ) ; unesi ( pod [ i ] . prezime , 20 ) ; printf ( ""unesite ime studenta"" ) ; unesi ( pod [ i ] . ime , 20 ) ; printf ( ""unesite broj ocjena studenta"" ) ; scanf ( ""%d"" , & pod [ i ] . br_ocjena ) ; printf ( ""unesite ocjene"" ) ; for ( j = 0 ; j < pod [ i ] . br_ocjena ; j ++ ) { scanf ( ""%d"" , & pod [ i ] . ocjene [ j ] ) ; } } printf ( ""unesite prosjek ocjena: "" ) ; scanf ( ""%lf"" , & prosjek ) ; vel = genijalci ( pod , br_studenata1 , prosjek ) ; return 0 ; }"
750,14,14,0,12,A2016/Z4/Z3/student8780,A2016/Z4/Z3/student8540,"#include <stdio.h> void pomocna_fun ( char * s , char * rijec , char * z ) { int zamijeni , duzina_prve , duzina_druge = 0 , pomjeri ; char * a , * b , * pocetak = s ; while ( * s != '\0' ) { zamijeni = 1 ; a = s ; b = rijec ; duzina_prve = 0 ; while ( * b != '\0' ) { if ( * b != * a ) zamijeni = 0 ; a ++ ; b ++ ; duzina_prve ++ ; if ( zamijeni == 0 ) break ; } if ( zamijeni == 1 ) { duzina_druge = 0 ; b = z ; while ( * b != '\0' ) { b ++ ; duzina_druge ++ ; } if ( ( pocetak == s || * ( s - 1 ) == ' ' ) && ( * a == ' ' || * a == '\0' ) ) { if ( duzina_druge >= duzina_prve ) { pomjeri = duzina_druge - duzina_prve ; a -- ; b = a ; while ( * b != '\0' ) b ++ ; while ( b != a ) { * ( b + pomjeri ) = * b ; b -- ; } b = z ; while ( * b != '\0' ) * s ++ = * b ++ ; } else { b = z ; while ( * b != '\0' ) * s ++ = * b ++ ; a = s ; b = s ; while ( * a != ' ' && * a != '\0' ) a ++ ; while ( * b ++ = * a ++ ) ; } s -- ; } } s ++ ; } } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * poc = tekst ; int i = 0 ; while ( i < broj_rijeci ) { pomocna_fun ( tekst , rijeci [ i ] , zamjene [ i ] ) ; i ++ ; } return poc ; } int main ( ) { char * rijeci [ 2 ] = { ""auto"" , ""stop"" } ; char * zamjene [ 2 ] = { ""vozilo"" , ""start"" } ; char tekst [ 100 ] = ""auto-stop auto. stop auto kj stop"" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }","#include <stdio.h> int ifchange ( char * t , char * r ) { char * b = t ; char * br = r ; int m = 1 ; while ( * t != '\0' && * r != '\0' ) { if ( * t != * r ) m = 0 ; t ++ ; r ++ ; } if ( ( * t != ' ' && * t != '\0' ) || * r != '\0' ) m = 0 ; t = b ; r = br ; return m ; } void change ( char * txt , char * w , char * nw ) { char * tmp = txt ; char * wtmp = w , * ntmp = nw , * c = txt ; int m = 0 , i , cnt = 1 ; while ( * txt != '\0' ) { cnt = 0 ; while ( * txt != '\0' && * txt != * w ) { txt ++ ; } if ( * txt != '\0' && ( txt == tmp || * ( txt - 1 ) == ' ' ) && ifchange ( txt , w ) ) { while ( * nw != '\0' ) { if ( * txt == ' ' || * txt == '\0' ) { c = txt ; while ( * txt != '\0' ) { txt ++ ; } txt ++ ; while ( txt > c ) { * txt = * ( txt - 1 ) ; txt -- ; } } * txt = * nw ; txt ++ ; nw ++ ; } cnt = 1 ; } if ( * txt != ' ' && * txt != '\0' && cnt == 1 ) { c = txt ; while ( * txt != ' ' && * txt != '\0' ) { m ++ ; txt ++ ; } txt = c ; for ( i = 0 ; i < m ; i ++ ) { txt = c ; while ( * txt != '\0' ) { * txt = * ( txt + 1 ) ; txt ++ ; } } txt = c ; } if ( * txt != ' ' && * txt != '\0' ) txt ++ ; w = wtmp ; nw = ntmp ; } txt = tmp ; w = wtmp ; nw = ntmp ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * tmptxt = tekst ; int i ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { tekst = tmptxt ; while ( * tekst != '\0' ) { while ( * tekst != '\0' && * tekst == ' ' ) { tekst ++ ; } if ( ifchange ( tekst , rijeci [ i ] ) ) { change ( tekst , rijeci [ i ] , zamjene [ i ] ) ; } while ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; } } return tmptxt ; } int main ( ) { char * rijeci [ 2 ] = { """" , """" } ; char * zamjene [ 2 ] = { """" , """" } ; char tekst [ 100 ] = """" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }"
754,99,99,0,225,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student7597,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
765,96,96,0,22,A2016/Z1/Z2/student9972,A2016/Z1/Z2/student5867,"#include <stdio.h> #include <math.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; return 0 ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; return 0 ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
768,98,98,0,112,A2016/Z4/Z2/student2755,A2016/Z4/Z2/student6419,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * kodiraj ( char * s , char * prazan ) { int brojaci [ 97 ] = { 0 } ; int i , j , maxi , max , broj = 0 , duzina = 0 , min , temp , eror , n = 0 ; char * p ; char * poc = s ; char asci [ 97 ] = ^ _ abcdefghijklmnopqrstuvwxyz { | } ~ char znak ; p = prazan ; while ( * s != '\0' ) { if ( * s >= ' ' && * s <= '~' ) brojaci [ * s - ' ' ] ++ ; s ++ ; } max = brojaci [ 0 ] ; maxi = 0 ; for ( i = 0 ; i < 97 ; i ++ ) if ( brojaci [ i ] > 0 ) maxi ++ ; for ( i = 0 ; i < 96 ; i ++ ) { max = brojaci [ i ] ; znak = asci [ i ] ; eror = 0 ; for ( j = i + 1 ; j < 97 ; j ++ ) { if ( brojaci [ j ] > max ) { max = brojaci [ j ] ; brojaci [ j ] = brojaci [ i ] ; brojaci [ i ] = max ; znak = asci [ j ] ; asci [ j ] = asci [ i ] ; asci [ i ] = znak ; } else if ( brojaci [ j ] == max ) if ( ( int ) znak > ( int ) asci [ j ] && brojaci [ j ] != 0 ) { znak = asci [ i ] ; asci [ i ] = asci [ j ] ; asci [ j ] = znak ; eror = 1 ; } } if ( eror ) i = - 1 ; } i = maxi ; for ( j = 32 ; j <= 126 ; j ++ ) { znak = ( char ) j ; eror = 0 ; for ( min = 0 ; min < maxi ; min ++ ) if ( asci [ min ] == znak ) { eror = 1 ; } if ( eror == 0 ) { asci [ i ] = znak ; i ++ ; } } for ( i = 0 ; i < 97 ; i ++ ) prazan [ i ] = asci [ i ] ; s = poc ; while ( * s != '\0' ) { while ( * s != prazan [ n ] ) { n ++ ; } * s = 126 - n ; s ++ ; n = 0 ; } return poc ; } char * dekodiraj ( char * s , char * prazan ) { int n ; char * p ; p = s ; while ( * s != '\0' ) { n = * s ; * s = prazan [ 126 - n ] ; s ++ ; } return p ; } int main ( ) { char kodirat [ 1000 ] , dekodirat [ 1000 ] , prazan [ 100 ] = """" ; printf ( ""unesite recenicu koju treba kodirat: "" ) ; unesi ( kodirat , 1000 ) ; kodiraj ( kodirat , prazan ) ; printf ( ""unesite recenicu koju treba dekodirat: "" ) ; unesi ( dekodirat , 1000 ) ; printf ( ""recenica koju treba kodirat izgleda ovako %s, a recenica koju treba dekodirat izgleda ovako %s."" , kodiraj ( kodirat , prazan ) , dekodiraj ( dekodirat , prazan ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * kodiraj ( char * s , char * prazan ) { int brojaci [ 97 ] = { 0 } ; int i , j , maxi , max , broj = 0 , duzina = 0 , min , temp , eror , n = 0 ; char * p ; char * poc = s ; char asci [ 97 ] = ^ _ abcdefghijklmnopqrstuvwxyz { | } ~ char znak ; p = prazan ; while ( * s != '\0' ) { if ( * s >= ' ' && * s <= '~' ) brojaci [ * s - ' ' ] ++ ; s ++ ; } max = brojaci [ 0 ] ; maxi = 0 ; for ( i = 0 ; i < 97 ; i ++ ) if ( brojaci [ i ] > 0 ) maxi ++ ; for ( i = 0 ; i < 96 ; i ++ ) { max = brojaci [ i ] ; znak = asci [ i ] ; eror = 0 ; for ( j = i + 1 ; j < 97 ; j ++ ) { if ( brojaci [ j ] > max ) { max = brojaci [ j ] ; brojaci [ j ] = brojaci [ i ] ; brojaci [ i ] = max ; znak = asci [ j ] ; asci [ j ] = asci [ i ] ; asci [ i ] = znak ; } else if ( brojaci [ j ] == max ) if ( ( int ) znak > ( int ) asci [ j ] && brojaci [ j ] != 0 ) { znak = asci [ i ] ; asci [ i ] = asci [ j ] ; asci [ j ] = znak ; eror = 1 ; } } if ( eror ) i = - 1 ; } i = maxi ; for ( j = 32 ; j <= 126 ; j ++ ) { znak = ( char ) j ; eror = 0 ; for ( min = 0 ; min < maxi ; min ++ ) if ( asci [ min ] == znak ) { eror = 1 ; } if ( eror == 0 ) { asci [ i ] = znak ; i ++ ; } } for ( i = 0 ; i < 97 ; i ++ ) prazan [ i ] = asci [ i ] ; s = poc ; while ( * s != '\0' ) { while ( * s != prazan [ n ] ) { n ++ ; } * s = 126 - n ; s ++ ; n = 0 ; } return poc ; } char * dekodiraj ( char * s , char * prazan ) { int n ; char * p ; p = s ; while ( * s != '\0' ) { n = * s ; * s = prazan [ 126 - n ] ; s ++ ; } return p ; } int main ( ) { char kodirat [ 1000 ] , dekodirat [ 1000 ] , prazan [ 100 ] = """" ; printf ( ""unesite recenicu koju treba kodirat: "" ) ; unesi ( kodirat , 1000 ) ; kodiraj ( kodirat , prazan ) ; printf ( ""unesite recenicu koju treba dekodirat: "" ) ; unesi ( dekodirat , 1000 ) ; printf ( ""recenica koju treba kodirat izgleda ovako %s, a recenica koju treba dekodirat izgleda ovako %s."" , kodiraj ( kodirat , prazan ) , dekodiraj ( dekodirat , prazan ) ) ; return 0 ; }"
778,75,75,0,34,A2016/Z2/Z4/student1616,A2016/Z2/Z4/student7341,"#include <stdio.h> #include <stdlib.h> #include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int i , j , teplic = 0 , cirk = 1 , m , n , desise = 0 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m < 1 || n > 100 || n < 1 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m < 1 || n > 100 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { cirk = 0 ; } } } if ( cirk == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { desise = 1 ; } } if ( desise == 1 ) { teplic = 1 ; break ; } } if ( teplic == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica je cirkularna"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int m , n , cirkularna = 1 , teplicova = 1 , i , j ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( ( m <= 0 || m > 100 ) || ( n <= 0 ) || ( n > 100 ) ) { printf ( ""pogresan unos!\n"" ) ; } } while ( ( m <= 0 || m > 100 ) || ( n <= 0 ) || ( n > 100 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) teplicova = 0 ; } } if ( teplicova == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) cirkularna = 0 ; } } } else if ( teplicova == 0 ) cirkularna = 0 ; if ( teplicova == 1 && cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 && cirkularna == 0 ) printf ( ""matrica je teplicova"" ) ; else if ( teplicova == 0 && cirkularna == 0 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }"
779,85,85,0,53,A2016/Z2/Z2/student5380,A2016/Z2/Z2/student8317,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; double step , min , sec , x ; int i , j , n ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { x = fabs ( ( niz [ i ] ) * ( 180 / pi ) ) ; min = ( ( x - ( int ) x ) * 60 ) ; sec = ( round ( ( min - ( int ) min ) * 60 ) ) ; if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { x = ( niz [ i ] * ( 180 / pi ) ) ; min = fabs ( ( x - ( int ) x ) * 60 ) ; sec = ( ( min - ( int ) min ) * 60 ) ; step = ( int ) x ; min = ( int ) min ; sec = round ( sec ) ; if ( step >= 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step ++ ; } } if ( step < 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , step , min , sec ) ; } return 0 ; }","#include<stdio.h> #include<stdlib.h> #include<math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; int i , j , n ; double stepeni , minute , sekunde ; double ugao ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { ugao = fabs ( ( niz [ i ] * 180 ) / pi ) ; minute = ( ugao - ( int ) ugao ) * 60 ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; if ( sekunde == 60 ) { sekunde = 0 , minute ++ ; } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { ugao = ( niz [ i ] * 180 ) / pi ; minute = fabs ( ( ugao - ( int ) ugao ) * 60 ) ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; stepeni = ( int ) ugao ; minute = ( int ) minute ; sekunde = round ( sekunde ) ; if ( stepeni >= 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni ++ ; } } if ( stepeni < 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , stepeni , minute , sekunde ) ; } return 0 ; }"
789,99,99,0,73,A2016/Z3/Z2/student8029,A2016/Z3/Z2/student3715,"#include <stdio.h> void ubaci ( int * niz , int vel ) { int i , j , suma = 0 , broj ; for ( i = 0 ; i < vel ; i ++ ) { suma = 0 ; broj = niz [ i ] ; while ( broj != 0 ) { suma += broj % 10 ; broj /= 10 ; } if ( suma < 0 ) suma *= - 1 ; for ( j = vel ; j > i + 1 ; j -- ) niz [ j ] = niz [ j - 1 ] ; niz [ i + 1 ] = suma ; vel ++ ; i ++ ; } } int izbaci ( int * niz , int vel ) { int fib [ 500 ] ; int i , j , k , pret = 0 ; fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( i = 1 ; i < 400 ; i ++ ) { fib [ i + 1 ] = fib [ i ] + fib [ i - 1 ] ; } for ( i = 0 ; i < vel ; i ++ ) { pret = 0 ; for ( j = 0 ; j < 400 ; j ++ ) { if ( fib [ j ] == niz [ i ] ) pret = 1 ; } if ( pret == 1 ) { for ( k = i ; k < vel - 1 ; k ++ ) niz [ k ] = niz [ k + 1 ] ; i -- ; vel -- ; } } return vel ; } int main ( ) { int niz [ 500 ] ; int i , vel = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; vel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ vel - 1 ] ) ; return 0 ; }","#include <stdio.h> void ubaci ( int * niz , int vel ) { int i , j , suma = 0 , broj ; for ( i = 0 ; i < vel ; i ++ ) { suma = 0 ; broj = niz [ i ] ; while ( broj != 0 ) { suma += broj % 10 ; broj /= 10 ; } if ( suma < 0 ) suma *= - 1 ; for ( j = vel ; j > i + 1 ; j -- ) niz [ j ] = niz [ j - 1 ] ; niz [ i + 1 ] = suma ; vel ++ ; i ++ ; } } int izbaci ( int * niz , int vel ) { int fib [ 500 ] ; int i , j , k , pret = 0 ; fib [ 0 ] = 1 ; fib [ 1 ] = 1 ; for ( i = 1 ; i < 400 ; i ++ ) { fib [ i + 1 ] = fib [ i ] + fib [ i - 1 ] ; } for ( i = 0 ; i < vel ; i ++ ) { pret = 0 ; for ( j = 0 ; j < 400 ; j ++ ) { if ( fib [ j ] == niz [ i ] ) pret = 1 ; } if ( pret == 1 ) { for ( k = i ; k < vel - 1 ; k ++ ) niz [ k ] = niz [ k + 1 ] ; i -- ; vel -- ; } } return vel ; } int main ( ) { int niz [ 500 ] ; int i , vel = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; vel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ vel - 1 ] ) ; return 0 ; }"
793,99,99,0,115,A2016/Z5/Z1/student7507,A2016/Z5/Z1/student7820,"#include <stdio.h> #include <stdlib.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek ( struct student s ) { if ( s . br_ocjena == 0 ) return 5.0 ; int suma = 0 , i ; for ( i = 0 ; i < s . br_ocjena ; i ++ ) { if ( s . ocjene [ i ] == 5 ) return 5.0 ; suma += s . ocjene [ i ] ; } return ( double ) suma / s . br_ocjena ; } void izbacintog ( struct student * studenti , int brst , int indeks ) { int i ; for ( i = indeks ; i < brst - 1 ; i ++ ) studenti [ i ] = studenti [ i + 1 ] ; } void abecedno ( struct student * * p , struct student * * d ) { struct student * prvi = * p , * drugi = * d ; int prezime = strcmp ( prvi [ 0 ] . prezime , drugi [ 0 ] . prezime ) ; struct student * tmp = * p ; if ( prezime > 0 ) { * p = * d ; * d = tmp ; } else if ( prezime == 0 ) { int ime = strcmp ( prvi [ 0 ] . ime , drugi [ 0 ] . ime ) ; if ( ime > 0 ) { * p = * d ; * d = tmp ; } } } void najtri ( struct student * studenti , int brst ) { if ( brst == 0 ) return ; int i ; struct student * prvi = null , * drugi = null , * treci = null ; prvi = studenti ; for ( i = 0 ; i < brst ; i ++ ) { double st = prosjek ( studenti [ i ] ) ; if ( st > prosjek ( * prvi ) ) { treci = drugi ; drugi = prvi ; prvi = studenti + i ; } else if ( i > 0 && st == prosjek ( * prvi ) ) { struct student * tmp = studenti + i ; abecedno ( & prvi , & tmp ) ; treci = drugi ; drugi = tmp ; } else if ( drugi && st > prosjek ( * drugi ) ) { treci = drugi ; drugi = studenti + i ; } else if ( drugi && st == prosjek ( * drugi ) ) { struct student * tmp = studenti + i ; abecedno ( & drugi , & tmp ) ; treci = tmp ; } else if ( treci && st > prosjek ( * treci ) ) treci = studenti + i ; else if ( treci && st == prosjek ( * treci ) ) { struct student * tmp = studenti + i ; abecedno ( & treci , & tmp ) ; } if ( ! drugi ) drugi = studenti + i ; else if ( ! treci ) treci = studenti + i ; } if ( treci == drugi ) treci = null ; if ( drugi == prvi ) drugi = null ; if ( prvi && drugi && prosjek ( prvi [ 0 ] ) == prosjek ( drugi [ 0 ] ) ) abecedno ( & prvi , & drugi ) ; if ( prvi && treci && prosjek ( prvi [ 0 ] ) == prosjek ( treci [ 0 ] ) ) abecedno ( & prvi , & treci ) ; if ( treci && drugi && prosjek ( treci [ 0 ] ) == prosjek ( drugi [ 0 ] ) ) abecedno ( & drugi , & treci ) ; if ( prvi ) printf ( ""%s %s\n"" , prvi [ 0 ] . prezime , prvi [ 0 ] . ime ) ; if ( drugi ) printf ( ""%s %s\n"" , drugi [ 0 ] . prezime , drugi [ 0 ] . ime ) ; if ( treci ) printf ( ""%s %s\n"" , treci [ 0 ] . prezime , treci [ 0 ] . ime ) ; } int genijalci ( struct student * studenti , int brojst , double prosj ) { int i ; for ( i = 0 ; i < brojst ; i ++ ) { if ( prosjek ( studenti [ i ] ) < prosj ) { izbacintog ( studenti , brojst , i ) ; i -- ; brojst -- ; } } najtri ( studenti , brojst ) ; return brojst ; } int main ( ) { return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek ( struct student s ) { if ( s . br_ocjena == 0 ) return 5.0 ; int suma = 0 , i ; for ( i = 0 ; i < s . br_ocjena ; i ++ ) { if ( s . ocjene [ i ] == 5 ) return 5.0 ; suma += s . ocjene [ i ] ; } return ( double ) suma / s . br_ocjena ; } void izbacintog ( struct student * studenti , int brst , int indeks ) { int i ; for ( i = indeks ; i < brst - 1 ; i ++ ) studenti [ i ] = studenti [ i + 1 ] ; } void abecedno ( struct student * * p , struct student * * d ) { struct student * prvi = * p , * drugi = * d ; int prezime = strcmp ( prvi [ 0 ] . prezime , drugi [ 0 ] . prezime ) ; struct student * tmp = * p ; if ( prezime > 0 ) { * p = * d ; * d = tmp ; } else if ( prezime == 0 ) { int ime = strcmp ( prvi [ 0 ] . ime , drugi [ 0 ] . ime ) ; if ( ime > 0 ) { * p = * d ; * d = tmp ; } } } void najtri ( struct student * studenti , int brst ) { if ( brst == 0 ) return ; int i ; struct student * prvi = null , * drugi = null , * treci = null ; prvi = studenti ; for ( i = 0 ; i < brst ; i ++ ) { double st = prosjek ( studenti [ i ] ) ; if ( st > prosjek ( * prvi ) ) { treci = drugi ; drugi = prvi ; prvi = studenti + i ; } else if ( i > 0 && st == prosjek ( * prvi ) ) { struct student * tmp = studenti + i ; abecedno ( & prvi , & tmp ) ; treci = drugi ; drugi = tmp ; } else if ( drugi && st > prosjek ( * drugi ) ) { treci = drugi ; drugi = studenti + i ; } else if ( drugi && st == prosjek ( * drugi ) ) { struct student * tmp = studenti + i ; abecedno ( & drugi , & tmp ) ; treci = tmp ; } else if ( treci && st > prosjek ( * treci ) ) treci = studenti + i ; else if ( treci && st == prosjek ( * treci ) ) { struct student * tmp = studenti + i ; abecedno ( & treci , & tmp ) ; } if ( ! drugi ) drugi = studenti + i ; else if ( ! treci ) treci = studenti + i ; } if ( treci == drugi ) treci = null ; if ( drugi == prvi ) drugi = null ; if ( prvi && drugi && prosjek ( prvi [ 0 ] ) == prosjek ( drugi [ 0 ] ) ) abecedno ( & prvi , & drugi ) ; if ( prvi && treci && prosjek ( prvi [ 0 ] ) == prosjek ( treci [ 0 ] ) ) abecedno ( & prvi , & treci ) ; if ( treci && drugi && prosjek ( treci [ 0 ] ) == prosjek ( drugi [ 0 ] ) ) abecedno ( & drugi , & treci ) ; if ( prvi ) printf ( ""%s %s\n"" , prvi [ 0 ] . prezime , prvi [ 0 ] . ime ) ; if ( drugi ) printf ( ""%s %s\n"" , drugi [ 0 ] . prezime , drugi [ 0 ] . ime ) ; if ( treci ) printf ( ""%s %s\n"" , treci [ 0 ] . prezime , treci [ 0 ] . ime ) ; } int genijalci ( struct student * studenti , int brojst , double prosj ) { int i ; for ( i = 0 ; i < brojst ; i ++ ) { if ( prosjek ( studenti [ i ] ) < prosj ) { izbacintog ( studenti , brojst , i ) ; i -- ; brojst -- ; } } najtri ( studenti , brojst ) ; return brojst ; } int main ( ) { return 0 ; }"
796,97,97,0,25,A2016/Z1/Z2/student9160,A2016/Z1/Z2/student3421,"#include <stdio.h> int main ( ) { double a1 = 0 , a2 = 0 , b1 = 0 , b2 = 0 , x = 0 , y = 0 ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%lf,%lf,%lf,%lf"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 ) { if ( b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { printf ( ""paralelne su"" ) ; } } else if ( a1 != a2 && b1 != b2 ) { x = ( ( b2 - b1 ) / ( a1 - a2 ) ) ; y = ( a1 * x + b1 ) ; printf ( ""prave se sijeku u tacci (%.1lf,%.1lf)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { double a1 = 0 , b1 = 0 , a2 = 0 , b2 = 0 , x = 0 , y = 0 ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%lf,%lf,%lf,%lf"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 ) { if ( b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { printf ( ""paralelne su"" ) ; } } else if ( a1 != a2 && b1 != b2 ) { x = ( ( b2 - b1 ) / ( a1 - a2 ) ) ; y = ( a1 * x + b1 ) ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
802,99,99,0,236,A2016/Z1/Z1/student2900,A2016/Z1/Z1/student4036,"#include <stdio.h> #include <math.h> int main ( ) { double t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , m1 , m2 , m3 , m4 , m5 , bt , bm , bb ; int ocjena1 = 0 , ocjena2 = 0 , ocjena3 = 0 ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & t5 ) ; if ( t5 < 0 || t5 > 40 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & b5 ) ; if ( b5 < 0 || b5 > 40 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & m1 ) ; if ( m1 < 0 || m1 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & m2 ) ; if ( m2 < 0 || m2 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & m3 ) ; if ( m3 < 0 || m3 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & m4 ) ; if ( m4 < 0 || m4 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & m5 ) ; if ( m5 < 0 || m5 > 40 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } bt = t1 + t2 + t3 + t4 + t5 ; bb = b1 + b2 + b3 + b4 + b5 ; bm = m1 + m2 + m3 + m4 + m5 ; if ( bm < 55 ) ocjena1 = 5 ; else if ( bm >= 55 && bm < 65 ) ocjena1 = 6 ; else if ( bm >= 65 && bm < 75 ) ocjena1 = 7 ; else if ( bm >= 75 && bm < 85 ) ocjena1 = 8 ; else if ( bm >= 85 && bm < 92 ) ocjena1 = 9 ; else if ( bm >= 92 && bm <= 100 ) ocjena1 = 10 ; if ( bb < 55 ) ocjena2 = 5 ; else if ( bb >= 55 && bb < 65 ) ocjena2 = 6 ; else if ( bb >= 65 && bb < 75 ) ocjena2 = 7 ; else if ( bb >= 75 && bb < 85 ) ocjena2 = 8 ; else if ( bb >= 85 && bb < 92 ) ocjena2 = 9 ; else if ( bb >= 92 && bb <= 100 ) ocjena2 = 10 ; if ( bt < 55 ) ocjena3 = 5 ; else if ( bt >= 55 && bt < 65 ) ocjena3 = 6 ; else if ( bt >= 65 && bt < 75 ) ocjena3 = 7 ; else if ( bt >= 75 && bt < 85 ) ocjena3 = 8 ; else if ( bt >= 85 && bt < 92 ) ocjena3 = 9 ; else if ( bt >= 92 && bt <= 100 ) ocjena3 = 10 ; if ( bm < 55 && bt < 55 && bb < 55 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } else if ( bm < 55 && bt < 55 && bb >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( bm < 55 && bb < 55 && bt >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( bb < 55 && bt < 55 && bm >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( bm >= 55 && bt >= 55 && bb < 55 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( bm >= 55 && bb >= 55 && bt < 55 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( bb >= 55 && bt >= 55 && bm < 55 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else { printf ( ""sva tri studenta su polozila.\n"" ) ; } if ( ocjena1 == ocjena2 && ocjena2 == ocjena3 ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ocjena1 == ocjena2 && ocjena2 != ocjena3 && ocjena1 != ocjena3 ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ocjena2 == ocjena3 && ocjena1 != ocjena2 && ocjena1 != ocjena3 ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ocjena1 == ocjena3 && ocjena2 != ocjena1 && ocjena2 != ocjena3 ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { double t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , m1 , m2 , m3 , m4 , m5 , bt , bm , bb ; int ocjena1 = 0 , ocjena2 = 0 , ocjena3 = 0 ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & t5 ) ; if ( t5 < 0 || t5 > 40 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & b5 ) ; if ( b5 < 0 || b5 > 40 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & m1 ) ; if ( m1 < 0 || m1 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & m2 ) ; if ( m2 < 0 || m2 > 20 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & m3 ) ; if ( m3 < 0 || m3 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & m4 ) ; if ( m4 < 0 || m4 > 10 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & m5 ) ; if ( m5 < 0 || m5 > 40 ) { printf ( ""neispravan broj bodova \n"" ) ; return 0 ; } bt = t1 + t2 + t3 + t4 + t5 ; bb = b1 + b2 + b3 + b4 + b5 ; bm = m1 + m2 + m3 + m4 + m5 ; if ( bm < 55 ) ocjena1 = 5 ; else if ( bm >= 55 && bm < 65 ) ocjena1 = 6 ; else if ( bm >= 65 && bm < 75 ) ocjena1 = 7 ; else if ( bm >= 75 && bm < 85 ) ocjena1 = 8 ; else if ( bm >= 85 && bm < 92 ) ocjena1 = 9 ; else if ( bm >= 92 && bm <= 100 ) ocjena1 = 10 ; if ( bb < 55 ) ocjena2 = 5 ; else if ( bb >= 55 && bb < 65 ) ocjena2 = 6 ; else if ( bb >= 65 && bb < 75 ) ocjena2 = 7 ; else if ( bb >= 75 && bb < 85 ) ocjena2 = 8 ; else if ( bb >= 85 && bb < 92 ) ocjena2 = 9 ; else if ( bb >= 92 && bb <= 100 ) ocjena2 = 10 ; if ( bt < 55 ) ocjena3 = 5 ; else if ( bt >= 55 && bt < 65 ) ocjena3 = 6 ; else if ( bt >= 65 && bt < 75 ) ocjena3 = 7 ; else if ( bt >= 75 && bt < 85 ) ocjena3 = 8 ; else if ( bt >= 85 && bt < 92 ) ocjena3 = 9 ; else if ( bt >= 92 && bt <= 100 ) ocjena3 = 10 ; if ( bm < 55 && bt < 55 && bb < 55 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } else if ( bm < 55 && bt < 55 && bb >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( bm < 55 && bb < 55 && bt >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( bb < 55 && bt < 55 && bm >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( bm >= 55 && bt >= 55 && bb < 55 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( bm >= 55 && bb >= 55 && bt < 55 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( bb >= 55 && bt >= 55 && bm < 55 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else { printf ( ""sva tri studenta su polozila.\n"" ) ; } if ( ocjena1 == ocjena2 && ocjena2 == ocjena3 ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ocjena1 == ocjena2 && ocjena2 != ocjena3 && ocjena1 != ocjena3 ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ocjena2 == ocjena3 && ocjena1 != ocjena2 && ocjena1 != ocjena3 ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ocjena1 == ocjena3 && ocjena2 != ocjena1 && ocjena2 != ocjena3 ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } return 0 ; }"
811,84,84,0,79,A2016/Z1/Z1/student8670,A2016/Z1/Z1/student5830,"#include <stdio.h> int main ( ) { double tp1 , tp2 , tp , tz , tzi , bp1 , bp2 , bp , bz , bzi , mp1 , mp2 , mp , mz , mzi ; double tb , bb , mb ; int toc , boc , moc ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & tp1 ) ; if ( tp1 < 0 || tp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & tp2 ) ; if ( tp2 < 0 || tp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & tp ) ; if ( tp < 0 || tp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & tz ) ; if ( tz < 0 || tz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & tzi ) ; if ( tzi < 0 || tzi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 < 0 || bp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 < 0 || bp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp < 0 || bp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bz ) ; if ( bz < 0 || bz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi < 0 || bzi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 < 0 || mp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 < 0 || mp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp < 0 || mp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mz ) ; if ( mz < 0 || mz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi < 0 || mzi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = tp1 + tp2 + tp + tz + tzi ; bb = bp1 + bp2 + bp + bz + bzi ; mb = mp1 + mp2 + mp + mz + mzi ; if ( tb < 55 ) { toc = 5 ; } else if ( tb >= 55 && tb < 65 ) { toc = 6 ; } else if ( tb >= 65 && tb < 75 ) { toc = 7 ; } else if ( tb >= 75 && tb < 85 ) { toc = 8 ; } else if ( tb >= 85 && tb < 92 ) { toc = 9 ; } else if ( tb >= 92 && tb <= 100 ) { toc = 10 ; } if ( bb < 55 ) { boc = 5 ; } else if ( bb >= 55 && bb < 65 ) { boc = 6 ; } else if ( bb >= 65 && bb < 75 ) { boc = 7 ; } else if ( bb >= 75 && bb < 85 ) { boc = 8 ; } else if ( bb >= 85 && bb < 92 ) { boc = 9 ; } else if ( bb >= 92 && bb <= 100 ) { boc = 10 ; } if ( mb < 55 ) { moc = 5 ; } else if ( mb >= 55 && mb < 65 ) { moc = 6 ; } else if ( mb >= 65 && mb < 75 ) { moc = 7 ; } else if ( mb >= 75 && mb < 85 ) { moc = 8 ; } else if ( mb >= 85 && mb < 92 ) { moc = 9 ; } else if ( mb >= 92 && mb <= 100 ) { moc = 10 ; } if ( toc == 5 && boc == 5 && moc == 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; } else if ( ( toc > 5 && boc == 5 && moc == 5 ) || ( toc == 5 && boc > 5 && moc == 5 ) || ( toc == 5 && boc == 5 && moc > 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( ( toc > 5 && boc > 5 && moc == 5 ) || ( toc > 5 && boc == 5 && moc > 5 ) || ( toc == 5 && boc > 5 && moc > 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; } else if ( toc > 5 && boc > 5 && moc > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ( tb > 55 && bb > 55 && mb > 55 ) && ( toc == boc && boc == moc ) ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( toc == boc || toc == moc || boc == moc ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( toc != boc && toc != moc && boc != moc ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { double t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , m1 , m2 , m3 , m4 , m5 ; double t , b , m ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & t5 ) ; if ( t5 < 0 || t3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & b5 ) ; if ( b5 < 0 || b3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & m1 ) ; if ( m1 < 0 || m1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & m2 ) ; if ( m2 < 0 || m2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & m3 ) ; if ( m3 < 0 || m3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & m4 ) ; if ( m4 < 0 || m4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & m5 ) ; if ( m5 < 0 || m3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } t = t1 + t2 + t3 + t4 + t5 ; b = b1 + b2 + b3 + b4 + b5 ; m = m1 + m2 + m3 + m4 + m5 ; if ( t < 55 ) { ot = 5 ; } else if ( t >= 55 && t < 65 ) { ot = 6 ; } else if ( t >= 65 && t < 75 ) { ot = 7 ; } else if ( t >= 75 && t < 85 ) { ot = 8 ; } else if ( t >= 85 && t < 92 ) { ot = 9 ; } else if ( t >= 92 && t <= 100 ) { ot = 10 ; } if ( b < 55 ) { ob = 5 ; } else if ( b >= 55 && b < 65 ) { ob = 6 ; } else if ( b >= 65 && b < 75 ) { ob = 7 ; } else if ( b >= 75 && b < 85 ) { ob = 8 ; } else if ( b >= 85 && b < 92 ) { ob = 9 ; } else if ( b >= 92 && b <= 100 ) { ob = 10 ; } if ( m < 55 ) { om = 5 ; } else if ( m >= 55 && m < 65 ) { om = 6 ; } else if ( m >= 65 && m < 75 ) { om = 7 ; } else if ( m >= 75 && m < 85 ) { om = 8 ; } else if ( m >= 85 && m < 92 ) { om = 9 ; } else if ( m >= 92 && m <= 100 ) { om = 10 ; } if ( ot == 5 && ob == 5 && om == 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( ( ot > 5 && ob == 5 && om == 5 ) || ( ot == 5 && ob > 5 && om == 5 ) || ( ot == 5 && ob == 5 && om > 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( ( ot > 5 && ob > 5 && om == 5 ) || ( ot == 5 && ob > 5 && om > 5 ) || ( ot > 5 && ob == 5 && om > 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; } if ( ot > 5 && ob > 5 && om > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; } if ( ot == ob && ot == om ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } if ( ot == ob || ot == om || ob == om ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } if ( ( ot > 5 && ob > 5 && om > 5 ) && ( ot != ob && ot != om && ob != om ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } return 0 ; }"
819,55,55,0,10,A2016/Z2/Z1/student5624,A2016/Z2/Z1/student8631,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int a , b , c , p = 0 , broj = 0 , i = 0 , fbroj = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & a ) ; while ( a != 0 ) { b = a % 10 ; c = ( a % 100 - b ) / 10 ; a = a / 10 ; if ( a == 0 ) break ; p = abs ( b - c ) ; broj = pow ( 10 , i ) * p ; fbroj += broj ; i ++ ; } printf ( ""%d"" , fbroj ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int a , i = 0 , zadnjacifra , predzadnja , rezultat = 0 , broj = 0 ; int sum = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & a ) ; while ( a != 0 ) { zadnjacifra = a % 10 ; predzadnja = ( a % 100 - zadnjacifra ) / 10 ; a = a / 10 ; if ( a == 0 ) break ; rezultat = abs ( zadnjacifra - predzadnja ) ; broj = pow ( 10 , i ) * rezultat ; sum = sum + broj ; i ++ ; } printf ( ""%d"" , sum ) ; return 0 ; }"
830,82,82,0,42,A2016/Z2/Z3/student2645,A2016/Z2/Z3/student3421,"#include <stdio.h> int main ( ) { int n ; int i , j , x , y ; char zvjezdice [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 10 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { zvjezdice [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; while ( ( x < 0 || x > 19 ) || ( y < 0 || y > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; } zvjezdice [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( zvjezdice [ i ] [ j ] != '*' ) zvjezdice [ i ] [ j ] = ' ' ; printf ( ""%c"" , zvjezdice [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int broj_tacaka , brojac , n , m ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; while ( broj_tacaka < 1 || broj_tacaka > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { niz [ n ] [ m ] = ' ' ; } } for ( brojac = 0 ; brojac < broj_tacaka ; brojac ++ ) { printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; while ( n < 0 || m < 0 || n > 19 || m > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; } niz [ n ] [ m ] = '*' ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { printf ( ""%c"" , niz [ m ] [ n ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
831,99,99,0,86,A2016/Z4/Z2/student5744,A2016/Z4/Z2/student2675,"#include <stdio.h> char * kodiraj ( char * s , char * kod ) { int broj [ 96 ] = { 0 } , i , j , pomi ; char * pom = s ; char pomc = ' ' ; for ( i = 0 ; i < 95 ; i ++ , pomc ++ ) { kod [ i ] = pomc ; } while ( * s != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * s == kod [ i ] ) { broj [ i ] ++ ; break ; } } s ++ ; } for ( i = 0 ; i < 94 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( broj [ i ] < broj [ j ] || ( broj [ i ] == broj [ j ] && kod [ i ] > kod [ j ] ) ) { pomc = kod [ i ] ; kod [ i ] = kod [ j ] ; kod [ j ] = pomc ; pomi = broj [ i ] ; broj [ i ] = broj [ j ] ; broj [ j ] = pomi ; } } } s = pom ; while ( * s != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * s == kod [ i ] ) { * s = '~' - i ; break ; } } s ++ ; } return pom ; } char * dekodiraj ( char * s , char * kod ) { int i ; char * pom = s ; while ( * s != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * s == 126 - i ) { * s = kod [ i ] ; break ; } } s ++ ; } return pom ; } int main ( ) { char s [ ] = ""ssuu"" , kod [ 96 ] ; char * p = s ; int i ; p = kodiraj ( s , kod ) ; for ( i = 0 ; i < 4 ; p ++ , i ++ ) { printf ( ""%c"" , * p ) ; } return 0 ; }","#include <stdio.h> char * kodiraj ( char * s , char * kod ) { int broj [ 96 ] = { 0 } , i , j , pomi ; char * pom = s ; char pomc = ' ' ; for ( i = 0 ; i < 95 ; i ++ , pomc ++ ) { kod [ i ] = pomc ; } while ( * s != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * s == kod [ i ] ) { broj [ i ] ++ ; break ; } } s ++ ; } for ( i = 0 ; i < 94 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( broj [ i ] < broj [ j ] || ( broj [ i ] == broj [ j ] && kod [ i ] > kod [ j ] ) ) { pomc = kod [ i ] ; kod [ i ] = kod [ j ] ; kod [ j ] = pomc ; pomi = broj [ i ] ; broj [ i ] = broj [ j ] ; broj [ j ] = pomi ; } } } s = pom ; while ( * s != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * s == kod [ i ] ) { * s = '~' - i ; break ; } } s ++ ; } return pom ; } char * dekodiraj ( char * s , char * kod ) { int i ; char * pom = s ; while ( * s != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * s == 126 - i ) { * s = kod [ i ] ; break ; } } s ++ ; } return pom ; } int main ( ) { char s [ ] = ""ssuu"" , kod [ 96 ] ; char * p = s ; int i ; p = kodiraj ( s , kod ) ; for ( i = 0 ; i < 4 ; p ++ , i ++ ) { printf ( ""%c"" , * p ) ; } return 0 ; }"
851,89,89,0,59,A2016/Z3/Z3/student8152,A2016/Z3/Z3/student8774,"#include <stdio.h> int main ( ) { int m , n , matrica [ 200 ] [ 200 ] , i , j , k , l , isti = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n <= 0 || m <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( n <= 0 || m <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( k = j ; k < m - 1 ; k ++ ) { for ( l = 0 ; l < n ; l ++ ) { matrica [ k ] [ l ] = matrica [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] != matrica [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { matrica [ l ] [ k ] = matrica [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , k , l ; int m , n , isti ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ k ] [ l ] = niz [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ l ] [ k ] = niz [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
865,72,72,0,47,A2016/Z1/Z3/student7704,A2016/Z1/Z3/student7697,"#include <stdio.h> int main ( ) { int c , b , s , v , p , ukupno , max ; double procenat ; char boja ; c = 0 ; b = 0 ; s = 0 ; v = 0 ; p = 0 ; max = 0 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c ++ ; if ( c > max ) { max = c ; } } else if ( boja == 'b' || boja == 'b' ) { b ++ ; if ( b > max ) { max = b ; } } else if ( boja == 's' || boja == 's' ) { s ++ ; if ( s > max ) { max = s ; } } else if ( boja == 'v' || boja == 'v' ) { v ++ ; if ( v > max ) { max = v ; } } else if ( boja == 'p' || boja == 'p' ) { p ++ ; if ( p > max ) { max = p ; } } else if ( ! ( boja == 'k' || boja == 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ! ( boja == 'k' || boja == 'k' ) ) ; ukupno = c + v + b + p + s ; printf ( ""ukupno evidentirano %d vozila.\n"" , ukupno ) ; if ( ukupno == 0 ) { procenat = 0 ; } else { procenat = ( max * 100. ) / ukupno ; } if ( max == c ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , procenat ) ; } else if ( max == b ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , procenat ) ; } else if ( max == s ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , procenat ) ; } else if ( max == v ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , procenat ) ; } else if ( max == p ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , procenat ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , k = 0 , ukupno , max ; double procenat = 0 ; char slovo = 'a' ; c = 0 ; b = 0 ; s = 0 ; v = 0 ; p = 0 ; max = 0 ; printf ( ""unesite vozila: "" ) ; while ( 1 ) { scanf ( ""%c"" , & slovo ) ; if ( slovo == 'c' || slovo == 'c' ) { c ++ ; if ( c > max ) { max = c ; } } else if ( slovo == 'b' || slovo == 'b' ) { b ++ ; if ( b > max ) { max = b ; } } else if ( slovo == 's' || slovo == 's' ) { s ++ ; if ( s > max ) { max = s ; } } else if ( slovo == 'v' || slovo == 'v' ) { v ++ ; if ( v > max ) { max = v ; } } else if ( slovo == 'p' || slovo == 'p' ) { p ++ ; if ( p > max ) { max = p ; } } else if ( slovo == 'k' || slovo == 'k' ) break ; else printf ( ""neispravan unos\n"" ) ; } ukupno = c + b + s + v + p ; printf ( ""ukupno evidentirano %d vozila.\n"" , ukupno ) ; if ( ukupno == 0 ) { procenat = 0 ; } else { procenat = ( max * 100. ) / ukupno ; } if ( max == c ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , procenat ) ; } else if ( max == b ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , procenat ) ; } else if ( max == s ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , procenat ) ; } else if ( max == v ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , procenat ) ; } else if ( max == p ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , procenat ) ; } return 0 ; }"
868,72,72,0,47,A2016/Z1/Z3/student2925,A2016/Z1/Z3/student7697,"#include <stdio.h> int main ( ) { int c , b , s , v , p , ukupno , max ; double procenat ; char boja ; c = 0 ; b = 0 ; s = 0 ; v = 0 ; p = 0 ; max = 0 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c ++ ; if ( c > max ) { max = c ; } } else if ( boja == 'b' || boja == 'b' ) { b ++ ; if ( b > max ) { max = b ; } } else if ( boja == 's' || boja == 's' ) { s ++ ; if ( s > max ) { max = s ; } } else if ( boja == 'v' || boja == 'v' ) { v ++ ; if ( v > max ) { max = v ; } } else if ( boja == 'p' || boja == 'p' ) { p ++ ; if ( p > max ) { max = p ; } } else if ( ! ( boja == 'k' || boja == 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ! ( boja == 'k' || boja == 'k' ) ) ; ukupno = c + b + s + v + p ; printf ( ""ukupno evidentirano %d vozila.\n"" , ukupno ) ; if ( ukupno == 0 ) { procenat = 0 ; } else { procenat = ( max * 100. ) / ukupno ; } if ( max == c ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , procenat ) ; } else if ( max == b ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , procenat ) ; } else if ( max == s ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , procenat ) ; } else if ( max == v ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , procenat ) ; } else if ( max == p ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , procenat ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , k = 0 , ukupno , max ; double procenat = 0 ; char slovo = 'a' ; c = 0 ; b = 0 ; s = 0 ; v = 0 ; p = 0 ; max = 0 ; printf ( ""unesite vozila: "" ) ; while ( 1 ) { scanf ( ""%c"" , & slovo ) ; if ( slovo == 'c' || slovo == 'c' ) { c ++ ; if ( c > max ) { max = c ; } } else if ( slovo == 'b' || slovo == 'b' ) { b ++ ; if ( b > max ) { max = b ; } } else if ( slovo == 's' || slovo == 's' ) { s ++ ; if ( s > max ) { max = s ; } } else if ( slovo == 'v' || slovo == 'v' ) { v ++ ; if ( v > max ) { max = v ; } } else if ( slovo == 'p' || slovo == 'p' ) { p ++ ; if ( p > max ) { max = p ; } } else if ( slovo == 'k' || slovo == 'k' ) break ; else printf ( ""neispravan unos\n"" ) ; } ukupno = c + b + s + v + p ; printf ( ""ukupno evidentirano %d vozila.\n"" , ukupno ) ; if ( ukupno == 0 ) { procenat = 0 ; } else { procenat = ( max * 100. ) / ukupno ; } if ( max == c ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , procenat ) ; } else if ( max == b ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , procenat ) ; } else if ( max == s ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , procenat ) ; } else if ( max == v ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , procenat ) ; } else if ( max == p ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , procenat ) ; } return 0 ; }"
874,72,72,0,18,A2016/Z2/Z1/student1547,A2016/Z2/Z1/student6516,"#include <stdio.h> #include <stdlib.h> int main ( ) { int pc , dc , jed = 1 , broj = 0 , unos ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & unos ) ; unos = abs ( unos ) ; if ( unos < 10 ) { printf ( ""0"" ) ; return 0 ; } while ( unos >= 10 ) { pc = unos % 10 ; unos = unos / 10 ; dc = unos % 10 ; broj = broj + ( abs ( pc - dc ) ) * jed ; jed = jed * 10 ; } printf ( ""%d"" , broj ) ; return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> int main ( ) { int a , b , broj , rezultat = 0 , kolicnik = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; broj = abs ( broj ) ; if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } while ( broj >= 10 ) { a = broj % 10 ; broj = broj / 10 ; b = broj % 10 ; rezultat = rezultat + ( abs ( a - b ) ) * kolicnik ; kolicnik = kolicnik * 10 ; } printf ( ""%d"" , rezultat ) ; return 0 ; }"
879,54,54,0,18,A2016/Z2/Z1/student4150,A2016/Z2/Z1/student9923,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int broj , brojac = 0 , kopija , broj1 , broj2 , razlika = 0 , i , konacno = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) broj *= - 1 ; kopija = broj ; while ( broj != 0 ) { broj /= 10 ; brojac ++ ; } if ( broj < 10 && broj > 0 ) { printf ( ""0"" ) ; return 0 ; } for ( i = 0 ; i < brojac - 1 ; i ++ ) { broj1 = kopija % 10 ; kopija /= 10 ; broj2 = kopija % 10 ; razlika += abs ( broj1 - broj2 ) ; razlika *= 10 ; } razlika /= 10 ; for ( i = 0 ; i < brojac - 1 ; i ++ ) { konacno += razlika % 10 ; konacno *= 10 ; razlika /= 10 ; } konacno /= 10 ; printf ( ""%d"" , konacno ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int e , d , br = 0 , broj1 , broj2 , zbir = 0 , kon = 0 , i ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & e ) ; if ( e > 0 && e < 10 ) { printf ( ""0"" ) ; return 0 ; } d = e ; while ( e != 0 ) { e /= 10 ; br ++ ; } for ( i = 0 ; i < br - 1 ; i ++ ) { broj1 = d % 10 ; d /= 10 ; broj2 = d % 10 ; zbir += abs ( broj1 - broj2 ) ; zbir *= 10 ; } zbir /= 10 ; for ( i = 0 ; i < br - 1 ; i ++ ) { kon += zbir % 10 ; kon *= 10 ; zbir /= 10 ; } kon /= 10 ; printf ( ""%d"" , kon ) ; return 0 ; }"
885,81,81,0,32,A2016/Z2/Z3/student2142,A2016/Z2/Z3/student9931,"#include <stdio.h> int main ( ) { int niz1 [ 100 ] , niz2 [ 100 ] , i , j , n , k = 0 , brojac = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 10 ) ; i = 0 ; do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & niz1 [ i ] , & niz2 [ i ] ) ; if ( niz1 [ i ] < 0 || niz1 [ i ] >= 20 || niz2 [ i ] < 0 || niz2 [ i ] >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } i ++ ; } while ( i < n ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( niz1 [ k ] == j && niz2 [ k ] == i ) { brojac ++ ; break ; } } if ( brojac > 0 ) printf ( ""*"" ) ; else printf ( "" "" ) ; brojac = 0 ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int niz [ 20 ] , nizz [ 20 ] , i = 0 , j = 0 , t = 0 , n , w = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n < 1 || n > 10 ) ; do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & niz [ i ] , & nizz [ i ] ) ; if ( niz [ i ] < 0 || niz [ i ] >= 20 || nizz [ i ] < 0 || nizz [ i ] >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } i ++ ; } while ( i < n ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( t = 0 ; t < n ; t ++ ) { if ( niz [ t ] == j && nizz [ t ] == i ) { w ++ ; break ; } } if ( w > 0 ) printf ( ""*"" ) ; else printf ( "" "" ) ; w = 0 ; } printf ( ""\n"" ) ; } return 0 ; }"
891,99,99,0,55,A2016/Z2/Z2/student9315,A2016/Z2/Z2/student4766,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define max_size 500 int main ( ) { double ugao [ max_size ] , stepeni [ max_size ] , minute [ max_size ] , sekunde [ max_size ] ; int n , i , j , sgn ; double stepsec , minsec , sec ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > max_size ) n = max_size ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & ugao [ i ] ) ; ugao [ i ] = ugao [ i ] * ( 180 / pi ) ; } for ( i = 0 ; i < n ; i ++ ) { sec = ugao [ i ] * 3600 ; stepeni [ i ] = ( ( int ) sec ) / 3600 ; stepsec = ( stepeni [ i ] * 3600 ) ; minute [ i ] = ( int ) ( ( ( int ) ( sec - stepsec ) ) / 60 ) ; minsec = minute [ i ] * 60 ; sekunde [ i ] = sec - stepsec - minsec ; } for ( i = 0 ; i < n ; i ++ ) { sgn = 1 ; if ( sekunde [ i ] < 0 ) sgn = - 1 ; sekunde [ i ] = ( int ) ( sekunde [ i ] + sgn * 0.5 ) ; if ( fabs ( sekunde [ i ] ) == 60 ) { sekunde [ i ] = 0 ; minute [ i ] += sgn * 1 ; if ( fabs ( minute [ i ] ) == 60 ) { minute [ i ] = 0 ; stepeni [ i ] += sgn * 1 ; } } if ( fabs ( sekunde [ i ] ) > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { ugao [ j ] = ugao [ j + 1 ] ; stepeni [ j ] = stepeni [ j + 1 ] ; minute [ j ] = minute [ j + 1 ] ; sekunde [ j ] = sekunde [ j + 1 ] ; } i -- ; n -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""%d stepeni %d minuta %d sekundi \n"" , ( int ) stepeni [ i ] , abs ( minute [ i ] ) , abs ( sekunde [ i ] ) ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define max_size 500 int main ( ) { double ugao [ max_size ] , stepeni [ max_size ] , minute [ max_size ] , sekunde [ max_size ] ; int n , i , j , sgn ; double stepsec , minsec , sec ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > max_size ) n = max_size ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & ugao [ i ] ) ; ugao [ i ] = ugao [ i ] * ( 180 / pi ) ; } for ( i = 0 ; i < n ; i ++ ) { sec = ugao [ i ] * 3600 ; stepeni [ i ] = ( ( int ) sec ) / 3600 ; stepsec = ( stepeni [ i ] * 3600 ) ; minute [ i ] = ( int ) ( ( ( int ) ( sec - stepsec ) ) / 60 ) ; minsec = minute [ i ] * 60 ; sekunde [ i ] = sec - stepsec - minsec ; } for ( i = 0 ; i < n ; i ++ ) { sgn = 1 ; if ( sekunde [ i ] < 0 ) sgn = - 1 ; sekunde [ i ] = ( int ) ( sekunde [ i ] + sgn * 0.5 ) ; if ( fabs ( sekunde [ i ] ) == 60 ) { sekunde [ i ] = 0 ; minute [ i ] += sgn * 1 ; if ( fabs ( minute [ i ] ) == 60 ) { minute [ i ] = 0 ; stepeni [ i ] += sgn * 1 ; } } if ( fabs ( sekunde [ i ] ) > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { ugao [ j ] = ugao [ j + 1 ] ; stepeni [ j ] = stepeni [ j + 1 ] ; minute [ j ] = minute [ j + 1 ] ; sekunde [ j ] = sekunde [ j + 1 ] ; } i -- ; n -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""%d stepeni %d minuta %d sekundi \n"" , ( int ) stepeni [ i ] , abs ( minute [ i ] ) , abs ( sekunde [ i ] ) ) ; } return 0 ; }"
900,89,89,0,90,A2016/Z3/Z3/student5612,A2016/Z3/Z3/student7293,"#include <stdio.h> #include <stdlib.h> int main ( ) { int i ; int j ; int m ; int n ; int x = 0 ; int matrix [ 200 ] [ 200 ] ; int l = 0 ; int a , b ; int zamjena ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m < 1 || n > 200 || n < 1 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m > 200 || m < 1 || n > 200 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrix [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { l = 0 ; for ( x = 0 ; x < n ; x ++ ) { if ( matrix [ i ] [ x ] == matrix [ j ] [ x ] ) { l ++ ; } if ( l == n ) { for ( a = j + 1 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { zamjena = matrix [ a - 1 ] ; matrix [ a - 1 ] [ b ] = matrix [ a ] [ b ] ; matrix [ a ] [ b ] = zamjena ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { l = 0 ; for ( x = 0 ; x < m ; x ++ ) { if ( matrix [ x ] [ i ] == matrix [ x ] [ j ] ) { l ++ ; } if ( l == m ) { for ( a = j + 1 ; a < n ; a ++ ) { for ( b = 0 ; b < m ; b ++ ) { zamjena = matrix [ b ] [ a - 1 ] ; matrix [ b ] [ a - 1 ] = matrix [ b ] [ a ] ; matrix [ b ] [ a ] = zamjena ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrix [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , br = 0 , k = 0 , l , temp , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { br = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) ; { br ++ ; } if ( br == n ) { for ( l = j + 1 ; l < m ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) { temp = mat [ l - 1 ] [ p ] ; mat [ l - 1 ] [ p ] = mat [ l ] [ p ] ; mat [ l ] [ p ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { br = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { br ++ ; } if ( br == m ) { for ( l = j + 1 ; l < n ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) { temp = mat [ p ] [ l - 1 ] ; mat [ p ] [ l - 1 ] = mat [ p ] [ l ] ; mat [ p ] [ l ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) ; { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
901,99,99,0,39,A2016/Z1/Z3/student5621,A2016/Z1/Z3/student7255,"#include <stdio.h> int main ( ) { float c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , cp = 0.0 , bp = 0.0 , sp = 0.0 , vp = 0.0 , pp = 0.0 , uv = 0 ; char unos ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & unos ) ; if ( ( unos == 'c' ) || ( unos == 'c' ) ) { c ++ ; } else if ( ( unos == 'b' ) || ( unos == 'b' ) ) { b ++ ; } else if ( ( unos == 's' ) || ( unos == 's' ) ) { s ++ ; } else if ( ( unos == 'v' ) || ( unos == 'v' ) ) { v ++ ; } else if ( ( unos == 'p' ) || ( unos == 'p' ) ) { p ++ ; } else if ( ( unos != 'k' ) && ( unos != 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ( unos != 'k' ) && ( unos != 'k' ) ) ; uv = c + b + s + v + p ; cp = ( c / uv ) * 100 ; bp = ( b / uv ) * 100 ; sp = ( s / uv ) * 100 ; vp = ( v / uv ) * 100 ; pp = ( p / uv ) * 100 ; printf ( ""ukupno evidentirano %g vozila.\n"" , uv ) ; if ( uv == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( ( c >= b ) && ( c >= s ) && ( c >= v ) && ( c >= p ) ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , cp ) ; return 0 ; } if ( ( b >= c ) && ( b >= s ) && ( b >= v ) && ( b >= p ) ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , bp ) ; return 0 ; } if ( ( s >= c ) && ( s >= b ) && ( s >= v ) && ( s >= p ) ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , sp ) ; return 0 ; } if ( ( v >= c ) && ( v >= b ) && ( v >= s ) && ( v >= p ) ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , vp ) ; return 0 ; } if ( ( p >= c ) && ( p >= b ) && ( p >= s ) && ( p >= v ) ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; return 0 ; } return 0 ; }","#include <stdio.h> int main ( ) { float c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , cp = 0.0 , bp = 0.0 , sp = 0.0 , vp = 0.0 , pp = 0.0 , uv = 0 ; char unos ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & unos ) ; if ( ( unos == 'c' ) || ( unos == 'c' ) ) { c ++ ; } else if ( ( unos == 'b' ) || ( unos == 'b' ) ) { b ++ ; } else if ( ( unos == 's' ) || ( unos == 's' ) ) { s ++ ; } else if ( ( unos == 'v' ) || ( unos == 'v' ) ) { v ++ ; } else if ( ( unos == 'p' ) || ( unos == 'p' ) ) { p ++ ; } else if ( ( unos != 'k' ) && ( unos != 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ( unos != 'k' ) && ( unos != 'k' ) ) ; uv = c + b + s + v + p ; cp = ( c / uv ) * 100 ; bp = ( b / uv ) * 100 ; sp = ( s / uv ) * 100 ; vp = ( v / uv ) * 100 ; pp = ( p / uv ) * 100 ; printf ( ""ukupno evidentirano %g vozila.\n"" , uv ) ; if ( uv == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( ( c >= b ) && ( c >= s ) && ( c >= v ) && ( c >= p ) ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , cp ) ; return 0 ; } if ( ( b >= c ) && ( b >= s ) && ( b >= v ) && ( b >= p ) ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , bp ) ; return 0 ; } if ( ( s >= c ) && ( s >= b ) && ( s >= v ) && ( s >= p ) ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , sp ) ; return 0 ; } if ( ( v >= c ) && ( v >= b ) && ( v >= s ) && ( v >= p ) ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , vp ) ; return 0 ; } if ( ( p >= c ) && ( p >= b ) && ( p >= s ) && ( p >= v ) ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; return 0 ; } return 0 ; }"
910,94,94,0,9,A2016/Z1/Z2/student5263,A2016/Z1/Z2/student2652,"#include <stdio.h> #define epsilon 0.001 #include <math.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; return 0 ; } if ( fabs ( a1 - a2 ) < epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * ( b2 - b1 ) / ( a1 - a2 ) + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.001 #include <math.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; return 0 ; } if ( fabs ( a1 - a2 ) < epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * ( b2 - b1 ) / ( a1 - a2 ) + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
914,81,81,0,65,A2016/Z2/Z4/student6824,A2016/Z2/Z4/student3329,"#include <stdio.h> int main ( ) { int m , n , i , j , teplicova = 1 , cirkularna = 1 ; double selma [ 100 ] [ 100 ] ; double suma [ 100 ] = { 0 } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 100 || n < 1 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m < 1 || m > 100 || n < 1 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & selma [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( selma [ i ] [ j ] != selma [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } } } if ( teplicova == 1 ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { suma [ i ] = suma [ i ] + selma [ i ] [ j ] ; } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( suma [ i ] != suma [ i + 1 ] ) { cirkularna = 0 ; } } } } else { cirkularna = 0 ; } if ( teplicova == 1 && cirkularna == 0 ) { printf ( ""matrica je teplicova\n"" ) ; } else if ( teplicova == 1 && cirkularna == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( teplicova == 0 && cirkularna == 0 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , teplicova = 1 , cirkularna = 1 , i , j ; double mat [ 100 ] [ 100 ] ; double sumareda [ 100 ] = { 0 } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m < 1 || n > 100 || n < 1 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m < 1 || n > 100 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } } } if ( teplicova == 1 ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { sumareda [ i ] += mat [ i ] [ j ] ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( sumareda [ i ] != sumareda [ i + 1 ] ) { cirkularna = 0 ; } } } else { cirkularna = 0 ; } if ( teplicova == 1 && cirkularna == 0 ) { printf ( ""matrica je teplicova"" ) ; } else if ( cirkularna == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( teplicova == 0 && cirkularna == 0 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }"
915,87,87,0,34,A2016/Z2/Z3/student1476,A2016/Z2/Z3/student7255,"#include <stdio.h> int main ( ) { int i , j , n , br ; char mat [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < n ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; while ( ( i < 0 || i > 19 ) || ( j < 0 || j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bt , n , i , j ; int p , d ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; while ( bt < 1 || bt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < bt ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; while ( p < 0 || p > 19 || d < 0 || d > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; } niz [ d ] [ p ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
929,99,99,0,75,A2016/Z3/Z3/student8532,A2016/Z3/Z3/student3186,"#include <stdio.h> #define vel 200 int izbaci_red ( int mat [ vel ] [ vel ] , int red , int kolona ) { int i , j , k , l , brojac ; for ( i = 0 ; i < red ; i ++ ) { for ( j = i + 1 ; j < red ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < kolona ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) brojac ++ ; } if ( brojac == kolona ) { for ( k = 0 ; k < kolona ; k ++ ) { for ( l = j ; l < red - 1 ; l ++ ) mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } red -- ; j -- ; } } } return red ; } int izbaci_kolonu ( int mat [ vel ] [ vel ] , int red , int kolona ) { int i , j , k , l , brojac ; for ( i = 0 ; i < kolona ; i ++ ) { for ( j = i + 1 ; j < kolona ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < red ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) brojac ++ ; } if ( brojac == red ) { for ( k = 0 ; k < red ; k ++ ) { for ( l = j ; l < kolona - 1 ; l ++ ) mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } kolona -- ; j -- ; } } } return kolona ; } int main ( ) { int m , n , i , j , mat [ vel ] [ vel ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m < 1 || n < 1 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || n > 200 || m < 1 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } m = izbaci_red ( mat , m , n ) ; n = izbaci_kolonu ( mat , m , n ) ; printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #define vel 200 int izbaci_red ( int mat [ vel ] [ vel ] , int red , int kolona ) { int i , j , k , l , brojac ; for ( i = 0 ; i < red ; i ++ ) { for ( j = i + 1 ; j < red ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < kolona ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) brojac ++ ; } if ( brojac == kolona ) { for ( k = 0 ; k < kolona ; k ++ ) { for ( l = j ; l < red - 1 ; l ++ ) mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } red -- ; j -- ; } } } return red ; } int izbaci_kolonu ( int mat [ vel ] [ vel ] , int red , int kolona ) { int i , j , k , l , brojac ; for ( i = 0 ; i < kolona ; i ++ ) { for ( j = i + 1 ; j < kolona ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < red ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) brojac ++ ; } if ( brojac == red ) { for ( k = 0 ; k < red ; k ++ ) { for ( l = j ; l < kolona - 1 ; l ++ ) mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } kolona -- ; j -- ; } } } return kolona ; } int main ( ) { int m , n , i , j , mat [ vel ] [ vel ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m < 1 || n < 1 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || n > 200 || m < 1 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } m = izbaci_red ( mat , m , n ) ; n = izbaci_kolonu ( mat , m , n ) ; printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
942,98,98,0,40,A2016/Z2/Z4/student6122,A2016/Z2/Z4/student2126,"#include <stdio.h> #include <math.h> #define epsilon 0.000001 int main ( ) { double mat [ 100 ] [ 100 ] = { { 0 } } ; int i , j , m , n , t1 = 1 ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( ( m > 100 || m <= 0 ) || ( n > 100 || n <= 0 ) ) { do { printf ( ""pogresan unos!"" ) ; printf ( ""\nunesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; } while ( ( m > 100 || m <= 0 ) || ( n > 100 || n <= 0 ) ) ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } if ( n == 1 && m != 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( mat [ i ] [ j ] - mat [ i + 1 ] [ j + 1 ] ) > epsilon ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( mat [ i ] [ n - 1 ] - mat [ i + 1 ] [ 0 ] ) > epsilon ) { t1 = 0 ; } } } if ( t1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.000001 int main ( ) { double mat [ 100 ] [ 100 ] = { { 0 } } ; int i , j , m , n , t1 = 1 ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( ( m > 100 || m <= 0 ) || ( n > 100 || n <= 0 ) ) { do { printf ( ""pogresan unos!"" ) ; printf ( ""\nunesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; } while ( ( m > 100 || m <= 0 ) || ( n > 100 || n <= 0 ) ) ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } if ( n == 1 && m != 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( mat [ i ] [ j ] - mat [ i + 1 ] [ j + 1 ] ) > epsilon ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( mat [ i ] [ n - 1 ] - mat [ i + 1 ] [ 0 ] ) > epsilon ) { t1 = 0 ; } } } if ( t1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; return 0 ; }"
950,88,88,0,66,A2016/Z3/Z3/student9358,A2016/Z3/Z3/student7810,"#include <stdio.h> int main ( ) { int m = 0 , n = 0 , i , j , k , mat [ 200 ] [ 200 ] , isticl = 0 , a , b , postoji ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & mat [ i ] [ j ] ) ; while ( 1 ) { postoji = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == mat [ k ] [ j ] ) isticl ++ ; } if ( isticl == n ) { postoji = 1 ; for ( b = k ; b < m - 1 ; b ++ ) { for ( a = 0 ; a < n ; a ++ ) { mat [ b ] [ a ] = mat [ b + 1 ] [ a ] ; } } m -- ; } isticl = 0 ; } } if ( postoji == 0 ) break ; } while ( 1 ) { postoji = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] == mat [ i ] [ k ] ) isticl ++ ; } if ( isticl == m ) { postoji = 1 ; for ( b = k ; b < n - 1 ; b ++ ) { for ( a = 0 ; a < m ; a ++ ) { mat [ a ] [ b ] = mat [ a ] [ b + 1 ] ; } } n -- ; } isticl = 0 ; } } if ( postoji == 0 ) break ; } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , k , matrica [ 200 ] [ 200 ] , brojac = 0 , isticlan = 0 , z , t ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m > 200 || n > 200 || m <= 0 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || n > 200 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; while ( 1 ) { isticlan = 0 ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] == matrica [ k ] [ j ] ) brojac ++ ; } if ( brojac == n ) { isticlan = 1 ; for ( z = k ; z < m - 1 ; z ++ ) { for ( t = 0 ; t < m ; t ++ ) { matrica [ z ] [ t ] = matrica [ z + 1 ] [ t ] ; } } m = m - 1 ; } brojac = 0 ; } } if ( isticlan == 0 ) break ; } while ( 1 ) { isticlan = 0 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { for ( i = 0 ; i < m ; i ++ ) { if ( matrica [ i ] [ j ] == matrica [ i ] [ k ] ) brojac ++ ; } if ( brojac == m ) { isticlan = 1 ; for ( z = k ; z < n - 1 ; z ++ ) { for ( t = 0 ; t < m ; t ++ ) { matrica [ t ] [ z ] = matrica [ t ] [ z + 1 ] ; } } n -- ; } brojac = 0 ; } } if ( isticlan == 0 ) break ; } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
951,88,88,0,84,A2016/Z3/Z3/student4554,A2016/Z3/Z3/student8561,"#include <stdio.h> int main ( ) { int n , m ; int m [ 100 ] [ 100 ] ; int l , j , i , f , r , kol ; int ind1 = 0 , ind2 = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & m [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( ind1 == 1 ) i -- ; for ( f = i + 1 ; f < m ; f ++ ) { kol = 0 ; while ( kol < n ) { if ( m [ i ] [ kol ] == m [ f ] [ kol ] ) { ind1 = 1 ; } else { ind1 = 0 ; break ; } kol ++ ; } if ( ind1 == 1 ) { for ( j = f ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) { m [ j ] [ l ] = m [ j + 1 ] [ l ] ; } } m -- ; f -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( ind2 == 1 ) { i -- ; } for ( f = i + 1 ; f < n ; f ++ ) { r = 0 ; while ( r < m ) { if ( m [ r ] [ i ] == m [ r ] [ f ] ) { ind2 = 1 ; } else { ind2 = 0 ; break ; } r ++ ; } if ( ind2 == 1 ) { for ( j = f ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) { m [ l ] [ j ] = m [ l ] [ j + 1 ] ; } } n -- ; f -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , m [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 100 ] [ 100 ] , m , n , i , j , k , l , p , c , r , s ; p = 0 ; s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { if ( p == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { c = 0 ; while ( c < n ) { if ( matrica [ i ] [ c ] == matrica [ k ] [ c ] ) p = 1 ; else { p = 0 ; break ; } c ++ ; } if ( p == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { r = 0 ; while ( r < m ) { if ( matrica [ r ] [ i ] == matrica [ r ] [ k ] ) s = 1 ; else { s = 0 ; break ; } r ++ ; } if ( s == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) matrica [ l ] [ j ] == matrica [ l ] [ j + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
956,83,83,0,61,A2016/Z3/Z2/student7232,A2016/Z3/Z2/student6877,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define bre1 10 #define bre12 20 void ubaci ( int * niz , int size ) { int n , dig , num1 , num2 = 0 ; for ( n = size - 1 ; n >= 0 ; n -- ) { * ( niz + 2 * n ) = * ( niz + n ) ; } for ( n = 0 ; n < size * 2 ; n ++ ) { if ( n % 2 == 1 ) { num1 = * ( niz + n - 1 ) ; while ( num1 != 0 ) { dig = num1 % 10 ; num2 += dig ; num1 /= 10 ; } num2 = abs ( num2 ) ; * ( niz + n ) = num2 ; num2 = 0 ; } } } int izbaci ( int * niz , int size ) { int n , m , p , first = 0 , second = 1 , next ; for ( n = 0 ; n < size ; n ++ ) { first = 0 ; second = 1 ; for ( m = 1 ; m < 10000 ; m ++ ) { if ( m == 1 ) { next = m ; } else { next = first + second ; first = second ; second = next ; } if ( * ( niz + n ) == next ) { for ( p = n ; p < size - 1 ; p ++ ) { * ( niz + p ) = * ( niz + p + 1 ) ; } size -- ; n -- ; break ; } } } return size ; } int main ( ) { int niz [ 20 ] , n , x ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( n = 0 ; n < 10 ; n ++ ) { scanf ( ""%d"" , & niz [ n ] ) ; } ubaci ( niz , bre1 ) ; x = izbaci ( niz , bre12 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( n = 0 ; n < x ; n ++ ) { if ( n < ( x - 1 ) ) { printf ( ""%d, "" , niz [ n ] ) ; } else { printf ( ""%d. "" , niz [ n ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define velniz1 10 #define velniz2 20 void ubaci ( int * niz , int vel1 ) { int i , suma = 0 , zadcifra , broj ; for ( i = vel1 - 1 ; i >= 0 ; i -- ) * ( niz + 2 * i ) = * ( niz + i ) ; for ( i = 0 ; i < vel1 * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { zadcifra = broj % 10 ; suma = suma + zadcifra ; broj = broj / 10 ; } suma = abs ( suma ) ; * ( niz + i ) = suma ; suma = 0 ; } } } int izbaci ( int * niz , int vel2 ) { int i , j , k , prvi , drugi , temp ; for ( i = 0 ; i < vel2 ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 0 ; j < 1000 ; j ++ ) { temp = prvi + drugi ; prvi = drugi ; drugi = temp ; if ( * ( niz + i ) == temp ) { for ( k = i ; k < vel2 - 1 ; k ++ ) { * ( niz + k ) = * ( niz + k + 1 ) ; } vel2 -- ; i -- ; break ; } } } return vel2 ; } int main ( ) { int niz [ 20 ] , i , brclanova ; printf ( ""\nunesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , velniz1 ) ; brclanova = izbaci ( niz , velniz2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < brclanova ; i ++ ) { if ( i < ( brclanova - 1 ) ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d. "" , niz [ i ] ) ; } return 0 ; }"
961,56,56,0,24,A2016/Z3/Z1/student7802,A2016/Z3/Z1/student5170,"#include <stdio.h> int daj_prost ( ) { static int prost = 2 ; int i , prosti_broj = 0 ; for ( i = 2 ; i <= prost ; i ++ ) { if ( ( prost % i == 0 ) && ( prost == i ) ) { prosti_broj = prost ; break ; } else if ( ( prost % i == 0 ) && ( prost != i ) ) { prost ++ ; i = 2 ; } } prost ++ ; return prosti_broj ; } int main ( ) { int a , suma = 0 , prost = 0 , b , i ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) { printf ( ""a nije manje od b."" ) ; printf ( ""\n"" ) ; } else if ( a <= 0 ) { printf ( ""a nije prirodan broj."" ) ; printf ( ""\n"" ) ; } else if ( b <= 0 ) { printf ( ""b nije prirodan broj."" ) ; printf ( ""\n"" ) ; } } while ( a >= b || a <= 0 || b <= 0 ) ; for ( i = 0 ; i < b ; i ++ ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) { suma = suma + prost ; } else if ( prost > b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i , prbr = 0 ; static int br = 2 ; for ( i = 2 ; i <= br ; i ++ ) { if ( br == i ) { prbr = br ; break ; } else if ( br % i == 0 && br != i ) { br ++ ; i = 2 ; } } br ++ ; return prbr ; } int main ( ) { int a , b , suma = 0 , i , poziv ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; } while ( a >= b || a <= 0 || b <= 0 ) ; for ( i = 0 ; i < b ; i ++ ) { poziv = daj_prost ( ) ; if ( poziv < b && poziv > a ) suma = suma + poziv ; else if ( poziv > b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
965,98,98,0,49,A2016/Z2/Z3/student1476,A2016/Z2/Z3/student3421,"#include <stdio.h> int main ( ) { int i , j , n , br ; char mat [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < n ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; while ( ( i < 0 || i > 19 ) || ( j < 0 || j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int broj_tacaka , brojac , n , m ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; while ( broj_tacaka < 1 || broj_tacaka > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { niz [ n ] [ m ] = ' ' ; } } for ( brojac = 0 ; brojac < broj_tacaka ; brojac ++ ) { printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; while ( n < 0 || m < 0 || n > 19 || m > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; } niz [ n ] [ m ] = '*' ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { printf ( ""%c"" , niz [ m ] [ n ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
966,97,97,0,27,A2016/Z1/Z4/student6720,A2016/Z1/Z4/student4628,"#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) printf ( ""***"" ) ; else { int a = 0 , sredina = 2 * n - 1 , kraj = 4 * n - 3 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( j == a || j == sredina - a - 1 || j == sredina + a - 1 || j == kraj - a - 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; a ++ ; } } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) printf ( ""***"" ) ; else { int a = 0 , sredina = 2 * n - 1 , kraj = 4 * n - 3 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( j == a || j == sredina - a - 1 || j == sredina + a - 1 || j == kraj - a - 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; a ++ ; } } return 0 ; }"
977,97,97,0,23,A2016/Z2/Z1/student8520,A2016/Z2/Z1/student8753,"#include <stdio.h> #include <math.h> int oduzmi ( int broj ) { int zadnja , predzadnja ; zadnja = broj % 10 ; predzadnja = ( broj / 10 ) % 10 ; return fabs ( zadnja - predzadnja ) ; } int main ( ) { int broj ; int novibroj = 0 ; int i , cifra , cifra2 ; i = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%i"" , & broj ) ; broj = fabs ( broj ) ; while ( broj > 10 ) { novibroj += oduzmi ( broj ) * i ; i *= 10 ; broj /= 10 ; } printf ( ""%d"" , novibroj ) ; }","#include <stdio.h> #include <math.h> int oduzmi ( int broj ) { int zadnjibr , predzadnjibr ; zadnjibr = broj % 10 ; predzadnjibr = ( broj / 10 ) % 10 ; return fabs ( zadnjibr - predzadnjibr ) ; } int main ( ) { int br ; int nbr = 0 ; int m , cifra , cifra2 ; m = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & br ) ; br = fabs ( br ) ; while ( br > 10 ) { nbr += oduzmi ( br ) * m ; m *= 10 ; br /= 10 ; } printf ( ""%d"" , nbr ) ; return 0 ; }"
984,69,69,0,27,A2016/Z3/Z1/student6617,A2016/Z3/Z1/student6403,"#include <stdio.h> int daj_prost ( ) { int j ; static int i = 1 ; i ++ ; for ( j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { i ++ ; j = 2 ; } } return i ; } int main ( ) { int a , b , i , x = 0 , p ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a <= 0 || a >= b ) ; for ( i = 0 ; i < b ; i ++ ) { p = daj_prost ( ) ; if ( p > a && p < b ) { x = x + p ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , x ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int daj_prost ( ) { int i ; static int br = 1 ; br ++ ; for ( i = 2 ; i < br ; i ++ ) { if ( br % i == 0 ) { br ++ ; i = 1 ; } } return br ; } int main ( ) { int a , b , suma = 0 , n ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a <= 0 || a >= b ) ; do { n = daj_prost ( ) ; if ( n <= a || n >= b ) continue ; suma += n ; } while ( n < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
994,28,28,0,33,A2016/Z5/Z1/student2160,A2016/Z5/Z1/student1542,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ocjena ( int ocjene [ ] , int br_ocjena ) { double prosjek1 = 0 , suma = 0 ; int i = 0 ; if ( br_ocjena == 0 ) return 5.0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek1 = 5.0 ; return prosjek1 ; } suma += ocjene [ i ] ; } prosjek1 = suma / br_ocjena ; return prosjek1 ; } int kriterij ( struct student prvi , struct student drugi ) { double p1 , p2 ; p1 = prosjek_ocjena ( prvi . ocjene , prvi . br_ocjena ) ; p2 = prosjek_ocjena ( drugi . ocjene , drugi . br_ocjena ) ; if ( p1 > p2 ) return 1 ; if ( p1 < p2 ) return 0 ; if ( strcmp ( prvi . prezime , drugi . prezime ) < 0 ) return 1 ; else if ( strcmp ( prvi . prezime , drugi . prezime ) > 0 ) return 0 ; if ( strcmp ( prvi . ime , drugi . ime ) < 0 ) return 1 ; else return 0 ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { double pr ; int i = 0 , j = 0 , i1 = 0 , i2 = - 1 , i3 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { pr = prosjek_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( pr < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } if ( velicina == 0 ) return 0 ; for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i1 ] ) ) i1 = i ; for ( i = 0 ; i < velicina ; i ++ ) if ( i != i1 ) i2 = i ; if ( i2 != - 1 ) { for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i2 ] ) && i != i1 ) i2 = i ; for ( i = 0 ; i < velicina ; i ++ ) if ( i != i2 && i != i1 ) i3 = i ; if ( i3 != - 1 ) for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i3 ] ) && i != i2 && i != i1 ) i3 = i ; } printf ( ""%s %s\n"" , studenti [ i1 ] . prezime , studenti [ i1 ] . ime ) ; if ( i2 != - 1 ) printf ( ""%s %s\n"" , studenti [ i2 ] . prezime , studenti [ i2 ] . ime ) ; if ( i3 != - 1 ) printf ( ""%s %s\n"" , studenti [ i3 ] . prezime , studenti [ i3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; printf ( ""%d "" , kriterij ( studenti [ 0 ] , studenti [ 5 ] ) ) ; return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } float prosjek ( int niz [ ] , int velicina ) { int i , suma = 0 ; float pr ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] == 5 || velicina == 0 ) return 5 ; suma += niz [ i ] ; } pr = ( float ) suma / velicina ; return pr ; } int genijalci ( struct student * niz , int velicina , float pros ) { int i , j , indeks = 0 , indeks2 = 0 , indeks3 = 0 ; float max = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] . br_ocjena == 0 || prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) < pros ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } if ( velicina == 0 ) return 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks ] . ime , niz [ i ] . ime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks ] . prezime , niz [ indeks ] . ime ) ; max = 0 ; indeks2 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; else { indeks2 = i ; break ; } } if ( indeks2 == - 1 ) return velicina ; max = prosjek ( niz [ indeks2 ] . ocjene , niz [ indeks2 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks2 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks2 ] . ime , niz [ i ] . ime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks2 ] . prezime , niz [ indeks2 ] . ime ) ; max = 0 ; indeks3 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; else { indeks3 = i ; break ; } } if ( indeks3 == - 1 ) return velicina ; max = prosjek ( niz [ indeks3 ] . ocjene , niz [ indeks3 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks3 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks3 ] . ime , niz [ i ] . ime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks3 ] . prezime , niz [ indeks3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }"
996,97,97,0,46,A2016/Z1/Z4/student4824,A2016/Z1/Z4/student1483,"#include <stdio.h> int main ( ) { int n ; unos : printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( ( n < 1 ) || ( n > 50 ) ) { printf ( ""pogresan unos"" ) ; goto unos ; } int i , j , k , z , q ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( z = 0 ; z < n - 1 ; z ++ ) { if ( i == z + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( q = 0 ; q <= n ; q ++ ) { if ( i + q == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n ; unos : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; goto unos ; } int i , j , k , l , s ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( l = 0 ; l < n - 1 ; l ++ ) { if ( i == l + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( s = 0 ; s <= n ; s ++ ) { if ( i + s == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1015,22,22,0,33,A2016/Z5/Z1/student9897,A2016/Z5/Z1/student8357,"#include <stdio.h> #include <string.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek_svih_studenata ( int niz [ ] , int vel ) { float prosjek_svih = 0.0 ; int i ; float suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 || vel == 0 ) return 5.0 ; suma += niz [ i ] ; prosjek_svih = suma / vel ; } return prosjek_svih ; } int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return - 1 ; if ( strcmp ( s1 , s2 ) > 0 ) return 1 ; while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } int redoslijed ( struct student prvi , struct student drugi ) { float prosjek1 = prosjek_svih_studenata ( prvi . ocjene , prvi . br_ocjena ) ; float prosjek2 = prosjek_svih_studenata ( drugi . ocjene , drugi . br_ocjena ) ; if ( prosjek1 > prosjek2 ) return 1 ; else if ( prosjek1 < prosjek2 ) return 0 ; if ( uporedi ( prvi . prezime , drugi . prezime ) == - 1 ) return 1 ; else if ( uporedi ( prvi . prezime , drugi . prezime ) == 1 ) return 0 ; if ( uporedi ( prvi . ime , drugi . ime ) == - 1 ) return 1 ; else if ( uporedi ( prvi . ime , drugi . ime ) == 1 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , float prosjekk ) { int i , j , index1 , index2 , index3 , indexmin = 0 ; double temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek_svih_studenata ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { temp_prosjek = prosjek_svih_studenata ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - prosjek_svih_studenata ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = temp_prosjek ; indexmin = i ; } } if ( vel == 0 ) return 0 ; if ( vel == 1 ) goto jedan ; if ( vel > 1 ) goto dva ; jedan : index1 = indexmin ; printf ( ""\n%s %s"" , niz [ index1 ] . prezime , niz [ index1 ] . ime ) ; return vel ; dva : index1 = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( redoslijed ( niz [ i ] , niz [ index1 ] ) ) index1 = i ; } index2 = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == index1 ) continue ; if ( redoslijed ( niz [ i ] , niz [ index2 ] ) ) index2 = i ; } printf ( ""\n%s %s"" , niz [ index1 ] . prezime , niz [ index1 ] . ime ) ; printf ( ""\n%s %s"" , niz [ index2 ] . prezime , niz [ index2 ] . ime ) ; if ( vel > 2 ) { index3 = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == index1 || i == index2 ) continue ; if ( redoslijed ( niz [ i ] , niz [ index3 ] ) ) index3 = i ; } printf ( ""\n%s %s"" , niz [ index3 ] . prezime , niz [ index3 ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ ] = { { ""ajla"" , ""smajic"" , { 7 , 9 , 10 , 10 } , 4 } , { ""sajra"" , ""gujic"" , { 6 , 8 , 9 } , 3 } , { ""imad"" , ""fazlinovic"" , { 7 , 9 , 5 , 8 } , 4 } } ; int i ; int vel = genijalci ( studenti , 4 , 7.7 ) ; printf ( ""vel:%dstudenti:"" , vel ) ; for ( i = 0 ; i < vel ; i ++ ) ; printf ( ""%s %s"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( strcmp ( pr . prezime , dr . prezime ) > 0 ) return 0 ; else if ( strcmp ( pr . prezime , dr . prezime ) < 0 ) return 1 ; if ( strcmp ( pr . ime , dr . ime ) > 0 ) return 0 ; else if ( strcmp ( pr . ime , dr . ime ) < 0 ) return 1 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { float temp = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp > epsilon ) { min = temp ; indexmin = i ; } } float max = 5 ; if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { int vr = dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ; if ( vr == 1 ) indexprvi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ; if ( vr == 1 ) indexdrugi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indextreci ] ) ; if ( vr == 1 ) indextreci = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""eso"" , ""esic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }"
1030,95,95,0,18,A2016/Z1/Z2/student7085,A2016/Z1/Z2/student4780,"#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { float a1 , b1 , a2 , b2 , y , x ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a2 * x + b2 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
1040,25,25,0,75,A2016/Z5/Z3/student6956,A2016/Z5/Z3/student8357,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int vr = znak ; int i = 0 ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' && vr > 0 ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { int ima = 0 ; if ( znak == '\0' ) return ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( ucitano == ucitano1 ) return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int nasao = 0 ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { nasao = 1 ; max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 && nasao == 1 ) max = max - 1 ; if ( nasao == 1 ) return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; int nasao = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) nasao = 1 ; min = raspored [ i ] . pocetak . sati ; } if ( nasao == 1 ) return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; printf ( ""\n       "" ) ; printf ( ""pon       "" ) ; printf ( ""uto       "" ) ; printf ( ""sri       "" ) ; printf ( ""cet       "" ) ; printf ( ""pet       "" ) ; printf ( ""sub\n"" ) ; for ( i = min ( raspored , broj_casova ) ; i <= max ( raspored , broj_casova ) ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; int brojac = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d"" , raspored [ i ] . kraj . minute ) ; printf ( "")"" ) ; } brojac ++ ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { int zapisano ; int nova ; file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } nova = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( zapisano >= 1 && nova == zapisano ) return 1 ; else return 0 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 , obrisan = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { obrisan = 1 ; for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 ) { int d1 = t1 . sati * 3600 + t1 . minute * 60 + t1 . sekunde ; int d2 = t2 . sati * 3600 + t2 . minute * 60 + t2 . sekunde ; if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return - 1 ; if ( d1 == d2 ) return 0 ; return - 2 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int flag = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int prvi = poredivrj ( raspored [ i ] . kraj , cas . pocetak ) ; int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak ) ; if ( prvi == 1 && drugi == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { flag = 1 ; break ; } } return flag ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; int dokle = 19 - trajanje ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= dokle ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; struct cas cas1 = { ""pom"" , 2 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; while ( * q ++ = * p ++ ) ; char * a = cas1 . predmet ; char * b = cas1 . predmet ; if ( a == b ) preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 0 : { zapisi_datoteku ( raspored , broj_casova ) ; break ; } case 1 : { ispis_rasporeda ( raspored , broj_casova ) ; break ; } case 2 : { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; if ( vr == 1 ) broj_casova ++ ; break ; } case 3 : { struct cas promjena ; int dan , redni ; char * q , * p ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; int broj = broj_casova ; ispisi_dan ( raspored , broj , dan ) ; promjena . dan_u_sedmici = dan ; int dani = dan + 7 ; printf ( ""\nizaberite koji cas zelite promijeniti:  naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; ocisti ( unesi ( predmet , 10 ) ) ; q = promjena . predmet ; p = predmet ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; if ( dani > 0 ) promijeni_cas ( raspored , broj , dan , redni , promjena ) ; break ; } case 4 : { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 , k = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; k ++ ; } niz [ k ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) return 0 ; int kap = kapacitet ; int vel = sizeof ( struct cas ) ; int ucitano ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; fclose ( ulaz ) ; return ucitano ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } void ispisss ( ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; } void ispispr ( char * pr ) { printf ( ""%-10s"" , pr ) ; } void ispispraz ( int d ) { printf ( ""          "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; ispisss ( ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { ispispr ( raspored [ k ] . predmet ) ; break ; ispispraz ( 10 ) ; } if ( k == broj_casova ) ispispraz ( 10 ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int sat = raspored [ i ] . pocetak . sati ; int min = raspored [ i ] . pocetak . minute ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( sat < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , sat ) ; if ( min < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , min ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)\n"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 ; int sat1 = t2 . sati * 3600 ; int min = t1 . minute * 60 ; int min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return - 1 ; if ( d1 == d2 ) return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) == 1 && drugi == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } int prazan ( struct cas cas ) { if ( cas . predmet == """" ) return 0 ; else return 1 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; if ( trajanje < 0 || trajanje > 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; int praz = prazan ( cas ) ; struct cas pom = { """" , 0 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) return 0 ; int kap = broj_casova ; int vel = sizeof ( struct cas ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; return 1 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; char predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, "" ) ; printf ( ""2=utorak..., "" ) ; printf ( ""6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""izaberite koji cas zelite promijeniti:  "" ) ; scanf ( ""%d"" , & redni ) ; if ( redni > 100 || redni < 0 ) goto preskok ; printf ( ""naziv predmeta: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; char * q ; if ( opcija != 0 ) q = promjena . predmet ; char * p ; if ( opcija != 0 ) p = predmet ; preskok : strcpy ( q , p ) ; char znak ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( "" cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }"
1043,28,28,0,38,A2016/Z5/Z1/student9972,A2016/Z5/Z1/student1624,"#include <string.h> #include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return 1 ; else return 2 ; } float prosjek ( int niz [ ] , int vel ) { if ( vel == 0 ) return 5 ; int i = 0 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) suma = suma + niz [ i ] ; return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { float prosjekprvog = prosjek ( pr . ocjene , pr . br_ocjena ) ; float prosjekdrugog = prosjek ( dr . ocjene , dr . br_ocjena ) ; int sta_je_vratila_f = uporedi ( pr . prezime , dr . prezime ) ; if ( prosjekprvog > prosjekdrugog ) return 1 ; if ( prosjekprvog < prosjekdrugog ) return 0 ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; int nesto = uporedi ( pr . ime , dr . ime ) ; if ( nesto == 1 ) return 1 ; if ( nesto == 2 ) return 0 ; else return 1 ; } int izbacivanj ( struct student niz [ ] , int vel , double prosjekk ) { int i ; int j ; int izmjena = 0 ; for ( i = 0 ; i < vel ; i ++ ) { izmjena = 0 ; if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) izmjena = 1 ; if ( izmjena == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } return vel ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double min = 10 ; vel = izbacivanj ( niz , vel , prosjekk ) ; if ( vel == 0 ) return 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } indexprvi = indexmin ; indexdrugi = indexmin ; indextreci = indexmin ; if ( vel == 1 ) { printf ( ""\n%s %s"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; return 1 ; } if ( vel == 2 ) { for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; return 2 ; } else { for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) == 1 && i != indexprvi && i != indexdrugi ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } } ; genijalci ( studenti , 3 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define eps 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int summa ( int niz [ ] , int vel ) { int i , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return - 100 ; else suma += niz [ i ] ; return suma ; } int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) < 0 ) return 1 ; if ( strcmp ( s1 , s2 ) > 0 ) return 2 ; } float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma ; suma = summa ( niz , vel ) ; if ( vel == 0 || suma < 0 ) return 5 ; return ( float ) suma / vel ; } int poredidouble ( double d1 , double d2 ) { if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return 0 ; else return 5 ; } int izbaci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > eps ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int dalijeveci ( struct student pr , struct student dr ) { int vr = poredidouble ( prosjek ( pr . ocjene , pr . br_ocjena ) , prosjek ( dr . ocjene , dr . br_ocjena ) ) ; if ( vr == 1 || vr == 5 && uporedi ( pr . prezime , dr . prezime ) == 1 ) return 1 ; if ( vr == 0 || vr == 5 && uporedi ( pr . prezime , dr . prezime ) == 2 ) return 0 ; if ( vr == 5 ) { if ( uporedi ( pr . ime , dr . ime ) == 1 ) return 1 ; if ( uporedi ( pr . ime , dr . ime ) == 2 ) return 0 ; } return 1 ; } int vratimin ( struct student niz [ ] , int vel , double prosjekk ) { int i , j ; double min = 10 ; int indexmin = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > eps ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } return indexmin ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci ; double min = 10 ; vel = izbaci ( niz , vel , prosjekk ) ; int indexmin = vratimin ( niz , vel , prosjekk ) ; int bilo = 0 ; switch ( vel ) { case 1 : indexprvi = indexmin ; printf ( ""\n%s %s"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; return vel ; case 0 : return 0 ; case 2 : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; return 2 ; default : indexprvi = indexmin ; indexdrugi = indexmin ; indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 ) { indexdrugi = i ; } } for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexdrugi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) == 1 && i != indexprvi ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; return vel ; } } int main ( ) { struct student studenti [ 5 ] = { { ""amra"" , ""djelmo"" , { 7 , 10 , 10 , 10 , 10 } , 5 } , { ""aske"" , ""askelov"" , { 10 , 10 , 10 , 10 , 10 } , 5 } , } ; genijalci ( studenti , 2 , 6.5 ) ; return 0 ; }"
1053,99,99,0,54,A2016/Z1/Z1/student4639,A2016/Z1/Z1/student4416,"#include <stdio.h> #include <math.h> #define eps 1e-5 int main ( ) { double i1 , i2 , i3 , ii1 , ii2 , ii3 , z1 , z2 , z3 , p1 , p2 , p3 , z1 , z2 , z3 , u1 , u2 , u3 ; double o1 , o2 , o3 ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & i1 ) ; if ( i1 < 0 || i1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ii1 ) ; if ( ii1 < 0 || ii1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 < 0 || p1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & i2 ) ; if ( i2 < 0 || i2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ii2 ) ; if ( ii2 < 0 || ii2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 < 0 || p2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & i3 ) ; if ( i3 < 0 || i3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ii3 ) ; if ( ii3 < 0 || ii3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p3 ) ; if ( p3 < 0 || p3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & z3 ) ; if ( z3 < 0 || z3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } u1 = i1 + ii1 + p1 + z1 + z1 ; u2 = i2 + ii2 + p2 + z2 + z2 ; u3 = i3 + ii3 + p3 + z3 + z3 ; if ( u1 < 55 ) o1 = 5 ; if ( u1 >= 55 && u1 < 65 ) o1 = 6 ; if ( u1 >= 65 && u1 < 75 ) o1 = 7 ; if ( u1 >= 75 && u1 < 85 ) o1 = 8 ; if ( u1 >= 85 && u1 < 92 ) o1 = 9 ; if ( u1 >= 92 ) o1 = 10 ; if ( u2 < 55 ) o2 = 5 ; if ( u2 >= 55 && u2 < 65 ) o2 = 6 ; if ( u2 >= 65 && u2 < 75 ) o2 = 7 ; if ( u2 >= 75 && u2 < 85 ) o2 = 8 ; if ( u2 >= 85 && u2 < 92 ) o2 = 9 ; if ( u2 >= 92 ) o2 = 10 ; if ( u3 < 55 ) o3 = 5 ; if ( u3 >= 55 && u3 < 65 ) o3 = 6 ; if ( u3 >= 65 && u3 < 75 ) o3 = 7 ; if ( u3 >= 75 && u3 < 85 ) o3 = 8 ; if ( u3 >= 85 && u3 < 92 ) o3 = 9 ; if ( u3 >= 92 ) o3 = 10 ; if ( o1 == 5 && o2 == 5 && o3 == 5 ) printf ( ""nijedan student nije polozio."" ) ; else { if ( ( o1 == 5 && o2 == 5 && o3 != 5 ) || ( o1 != 5 && o2 == 5 && o3 == 5 ) || ( o1 == 5 && o2 != 5 && o3 == 5 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( o1 == 5 && o2 != 5 && o3 != 5 ) || ( o1 != 5 && o2 == 5 && o3 != 5 ) || ( o1 != 5 && o2 != 5 && o3 == 5 ) ) printf ( ""dva studenta su polozila."" ) ; } if ( o1 != 5 && o2 != 5 && o3 != 5 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( o1 == o2 && o1 == o3 ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; if ( o1 != o2 && o1 != o3 && o2 != o3 ) printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; if ( ( o1 == o2 && o1 != o3 ) || ( o1 == o3 && o2 != o3 ) || ( o2 == o3 && o1 != o2 ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define eps 1e-5 int main ( ) { double i1 , i2 , i3 , ii1 , ii2 , ii3 , z1 , z2 , z3 , p1 , p2 , p3 , z1 , z2 , z3 , u1 , u2 , u3 ; double o1 , o2 , o3 ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & i1 ) ; if ( i1 < 0 || i1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ii1 ) ; if ( ii1 < 0 || ii1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 < 0 || p1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & i2 ) ; if ( i2 < 0 || i2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ii2 ) ; if ( ii2 < 0 || ii2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 < 0 || p2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & i3 ) ; if ( i3 < 0 || i3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ii3 ) ; if ( ii3 < 0 || ii3 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p3 ) ; if ( p3 < 0 || p3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & z3 ) ; if ( z3 < 0 || z3 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } u1 = i1 + ii1 + p1 + z1 + z1 ; u2 = i2 + ii2 + p2 + z2 + z2 ; u3 = i3 + ii3 + p3 + z3 + z3 ; if ( u1 < 55 ) o1 = 5 ; if ( u1 >= 55 && u1 < 65 ) o1 = 6 ; if ( u1 >= 65 && u1 < 75 ) o1 = 7 ; if ( u1 >= 75 && u1 < 85 ) o1 = 8 ; if ( u1 >= 85 && u1 < 92 ) o1 = 9 ; if ( u1 >= 92 ) o1 = 10 ; if ( u2 < 55 ) o2 = 5 ; if ( u2 >= 55 && u2 < 65 ) o2 = 6 ; if ( u2 >= 65 && u2 < 75 ) o2 = 7 ; if ( u2 >= 75 && u2 < 85 ) o2 = 8 ; if ( u2 >= 85 && u2 < 92 ) o2 = 9 ; if ( u2 >= 92 ) o2 = 10 ; if ( u3 < 55 ) o3 = 5 ; if ( u3 >= 55 && u3 < 65 ) o3 = 6 ; if ( u3 >= 65 && u3 < 75 ) o3 = 7 ; if ( u3 >= 75 && u3 < 85 ) o3 = 8 ; if ( u3 >= 85 && u3 < 92 ) o3 = 9 ; if ( u3 >= 92 ) o3 = 10 ; if ( o1 == 5 && o2 == 5 && o3 == 5 ) printf ( ""nijedan student nije polozio."" ) ; else { if ( ( o1 == 5 && o2 == 5 && o3 != 5 ) || ( o1 != 5 && o2 == 5 && o3 == 5 ) || ( o1 == 5 && o2 != 5 && o3 == 5 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( o1 == 5 && o2 != 5 && o3 != 5 ) || ( o1 != 5 && o2 == 5 && o3 != 5 ) || ( o1 != 5 && o2 != 5 && o3 == 5 ) ) printf ( ""dva studenta su polozila."" ) ; } if ( o1 != 5 && o2 != 5 && o3 != 5 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( o1 == o2 && o1 == o3 ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; if ( o1 != o2 && o1 != o3 && o2 != o3 ) printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; if ( ( o1 == o2 && o1 != o3 ) || ( o1 == o3 && o2 != o3 ) || ( o2 == o3 && o1 != o2 ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } return 0 ; }"
1056,99,99,0,255,A2016/Z5/Z2/student7802,A2016/Z5/Z2/student5378,"#include <stdio.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 , j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #include <ctype.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int da_li_je_slovo ( int n ) { if ( n >= 'a' && n <= 'z' || n >= 'a' && n <= 'z' ) return 1 ; return 0 ; } void zamijeni ( char * p , char * s ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , s ) ; strcpy ( s , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( da_li_je_slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; zamijeni ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( da_li_je_slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv2 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv2 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int br_rijeci = 0 , duzina = 0 , br = 0 ; char znak = fgetc ( ulaz ) ; int flag = 0 ; while ( znak != eof ) { duzina = 0 ; flag = 0 ; while ( da_li_je_slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ br_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < br_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { flag = 1 ; break ; } } if ( flag ) break ; br_rijeci ++ ; } znak = fgetc ( ulaz ) ; } br = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) br ++ ; if ( br == br_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * q = rijeci [ c - 20 ] ; n = 1 ; while ( * q != '\0' ) { fputc ( * q , izlaz ) ; q ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int biraj ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & biraj ) ; switch ( biraj ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( biraj != 0 ) ; return 0 ; }"
1066,99,99,0,72,A2016/Z3/Z3/student8561,A2016/Z3/Z3/student8419,"#include <stdio.h> int main ( ) { int matrica [ 100 ] [ 100 ] , m , n , i , j , k , l , p , c , r , s ; p = 0 ; s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { if ( p == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { c = 0 ; while ( c < n ) { if ( matrica [ i ] [ c ] == matrica [ k ] [ c ] ) p = 1 ; else { p = 0 ; break ; } c ++ ; } if ( p == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { r = 0 ; while ( r < m ) { if ( matrica [ r ] [ i ] == matrica [ r ] [ k ] ) s = 1 ; else { s = 0 ; break ; } r ++ ; } if ( s == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) matrica [ l ] [ j ] == matrica [ l ] [ j + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 100 ] [ 100 ] , m , n , i , j , k , l , p , c , r , s ; p = 0 ; s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { if ( p == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { c = 0 ; while ( c < n ) { if ( matrica [ i ] [ c ] == matrica [ k ] [ c ] ) p = 1 ; else { p = 0 ; break ; } c ++ ; } if ( p == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { r = 0 ; while ( r < m ) { if ( matrica [ r ] [ i ] == matrica [ r ] [ k ] ) s = 1 ; else { s = 0 ; break ; } r ++ ; } if ( s == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) matrica [ l ] [ j ] == matrica [ l ] [ j + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
1069,70,70,0,30,A2016/Z2/Z2/student6550,A2016/Z2/Z2/student4973,"#include <stdio.h> #define pi 3.1415926 int main ( ) { int i , j , n ; double niz [ 500 ] , d , minpom , secpom , step , min , sec ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 || n > 500 ) printf ( ""pogresan unos.\n"" ) ; } while ( n < 0 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } printf ( ""uglovi su:\n "" ) ; for ( i = 0 ; i < n ; i ++ ) { d = niz [ i ] * 180. / pi ; step = ( int ) d ; minpom = ( d - step ) * 60 ; if ( minpom < 0 ) minpom *= - 1 ; min = ( int ) minpom ; secpom = ( minpom - min ) * 60 ; sec = ( int ) secpom ; if ( secpom - sec > 0.5 ) sec ++ ; if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 && step > 0 ) { min = 0 ; step ++ ; } if ( min == 60 && step < 0 ) { min = 0 ; step -- ; } if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } else printf ( ""\n%g stepeni %g minuta %g sekundi"" , step , min , sec ) ; } return 0 ; }","#include <stdio.h> #define pi 3.1415926 int main ( ) { int i , j , br_uglova ; double stepeni , minuta , sekundi , niz [ 500 ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & br_uglova ) ; if ( br_uglova < 0 || br_uglova > 500 ) printf ( ""pogresan unos.\n"" ) ; } while ( br_uglova < 0 || br_uglova > 500 ) ; for ( i = 0 ; i < br_uglova ; i ++ ) scanf ( ""%lf"" , & niz [ i ] ) ; printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < br_uglova ; i ++ ) { stepeni = niz [ i ] * 180 / pi ; int s = stepeni ; minuta = ( stepeni - s ) * 60 ; if ( minuta < 0 ) minuta *= - 1 ; int m = minuta ; sekundi = ( minuta - m ) * 60 ; int sec = sekundi ; if ( sekundi - sec > 0.5 ) sec ++ ; if ( sec == 60 ) { sec = 0 ; m ++ ; } if ( m == 60 && s > 0 ) { m = 0 ; s ++ ; } if ( m == 60 && s < 0 ) { m = 0 ; s -- ; } if ( sec > 30 ) { for ( j = i ; j < br_uglova - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; br_uglova -- ; i -- ; } else printf ( ""%d stepeni %d minuta %d sekundi\n"" , s , m , sec ) ; } return 0 ; }"
1070,98,98,0,72,A2016/Z2/Z2/student4682,A2016/Z2/Z2/student7173,"#include <stdio.h> #define pi 3.1415926 int main ( ) { int i , j , n ; double step [ 500 ] , min [ 500 ] , sek [ 500 ] , niz [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( niz [ i ] > 0 ) { niz [ i ] = niz [ i ] * 180 / pi ; step [ i ] = ( int ) niz [ i ] ; niz [ i ] = niz [ i ] - step [ i ] ; niz [ i ] = niz [ i ] * 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = ( niz [ i ] - min [ i ] ) ; niz [ i ] = niz [ i ] * 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { step [ i ] ++ ; min [ i ] = 0 ; } } else { niz [ i ] = niz [ i ] * 180 / pi ; step [ i ] = ( int ) niz [ i ] ; niz [ i ] = step [ i ] - niz [ i ] ; niz [ i ] = niz [ i ] * 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = niz [ i ] - min [ i ] ; niz [ i ] = niz [ i ] * 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { step [ i ] -- ; min [ i ] = 0 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { step [ j ] = step [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; sek [ j ] = sek [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:"" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( ""\n%g stepeni %g minuta %g sekundi"" , step [ i ] , min [ i ] , sek [ i ] ) ; return 0 ; }","#include <stdio.h> #define pi 3.1415926 int main ( ) { int i , j , n ; double step [ 500 ] , min [ 500 ] , sek [ 500 ] , niz [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( niz [ i ] > 0 ) { niz [ i ] = niz [ i ] * 180 / pi ; step [ i ] = ( int ) niz [ i ] ; niz [ i ] = niz [ i ] - step [ i ] ; niz [ i ] = niz [ i ] * 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = ( niz [ i ] - min [ i ] ) ; niz [ i ] = niz [ i ] * 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { step [ i ] ++ ; min [ i ] = 0 ; } } else { niz [ i ] = niz [ i ] * 180 / pi ; step [ i ] = ( int ) niz [ i ] ; niz [ i ] = step [ i ] - niz [ i ] ; niz [ i ] = niz [ i ] * 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = niz [ i ] - min [ i ] ; niz [ i ] = niz [ i ] * 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { step [ i ] -- ; min [ i ] = 0 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { step [ j ] = step [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; sek [ j ] = sek [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:"" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( ""\n%g stepeni %g minuta %g sekundi"" , step [ i ] , min [ i ] , sek [ i ] ) ; return 0 ; }"
1086,98,98,0,36,A2016/Z2/Z3/student4082,A2016/Z2/Z3/student7597,"#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , x , y ; int n ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } while ( 1 ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; } else break ; } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x > 19 || y > 19 || y < 0 || x < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { mat [ y ] [ x ] = '*' ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , x , y ; int n ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } while ( 1 ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; } else break ; } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x > 19 || y > 19 || y < 0 || x < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { mat [ y ] [ x ] = '*' ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1087,99,99,0,31,A2016/Z2/Z4/student7507,A2016/Z2/Z4/student5162,"#include <stdio.h> int main ( ) { int i , j ; int m = 0 , n = 0 ; int teplicova = 1 , cirkularna = 1 ; float mat [ 100 ] [ 100 ] ; while ( 1 ) { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || n > 100 || m <= 0 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; continue ; } if ( m <= 100 && m > 0 && n <= 100 && n > 0 ) break ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%f"" , & mat [ i ] [ j ] ) ; } } for ( i = 1 ; i < m - 1 ; i ++ ) { for ( j = 1 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } if ( mat [ i ] [ n - 1 ] != mat [ i ] [ 0 ] ) { cirkularna = 0 ; } else teplicova = 1 ; } } if ( cirkularna == 1 && ( teplicova == 1 || teplicova == 0 ) ) printf ( ""matrica je cirkularna\n"" ) ; else if ( teplicova == 1 && cirkularna == 0 ) printf ( ""matrica je teplicova\n"" ) ; else if ( teplicova == 0 && cirkularna == 0 ) printf ( ""matrica nije ni cirkularna ni teplicova\n"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int i , j ; int m = 0 , n = 0 ; int teplicova = 1 , cirkularna = 1 ; float mat [ 100 ] [ 100 ] ; while ( 1 ) { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || n > 100 || m <= 0 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; continue ; } if ( m <= 100 && m > 0 && n <= 100 && n > 0 ) break ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%f"" , & mat [ i ] [ j ] ) ; } } for ( i = 1 ; i < m - 1 ; i ++ ) { for ( j = 1 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } if ( mat [ i ] [ n - 1 ] != mat [ i ] [ 0 ] ) { cirkularna = 0 ; } else teplicova = 1 ; } } if ( cirkularna == 1 && ( teplicova == 1 || teplicova == 0 ) ) printf ( ""matrica je cirkularna\n"" ) ; else if ( teplicova == 1 && cirkularna == 0 ) printf ( ""matrica je teplicova\n"" ) ; else if ( teplicova == 0 && cirkularna == 0 ) printf ( ""matrica nije ni cirkularna ni teplicova\n"" ) ; return 0 ; }"
1092,80,80,0,23,A2016/Z2/Z1/student5573,A2016/Z2/Z1/student7496,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int n , i = 0 , a , b , c , d = 0 , e = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) { n = abs ( n ) ; } if ( n > 0 && n < 10 ) { e = 0 ; printf ( ""%d"" , e ) ; return 0 ; } while ( n > 9 ) { a = n % 10 ; n = n / 10 ; c = n % 10 ; d = abs ( ( a - c ) ) * pow ( 10 , i ) ; e = e + d ; i ++ ; } printf ( ""%d"" , e ) ; return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> int main ( ) { int n , br = 0 , broj = 0 , broj1 , broj2 , i = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) { n = abs ( n ) ; } if ( n >= 0 && n < 10 ) { broj = 0 ; printf ( ""%d"" , broj ) ; return 0 ; } while ( n > 9 ) { broj1 = n % 10 ; n = n / 10 ; broj2 = n % 10 ; br = abs ( ( broj1 - broj2 ) ) * pow ( 10 , i ) ; broj = broj + br ; i ++ ; } printf ( ""%d"" , broj ) ; return 0 ; }"
1098,28,28,0,35,A2016/Z5/Z1/student6613,A2016/Z5/Z1/student5659,"#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void unesi ( char niz [ ] , int vel ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i <= vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student unesi_osobu ( ) { struct student s ; int i = 0 ; unesi ( s . ime , 20 ) ; unesi ( s . prezime , 20 ) ; scanf ( ""%d"" , & s . br_ocjena ) ; for ( i = 0 ; i < s . br_ocjena ; i ++ ) { scanf ( ""%d"" , & s . ocjene [ i ] ) ; } return s ; } double fprosjek ( struct student s ) { double suma = 0 , brocjena , prosjek2 ; int j , r ; brocjena = s . br_ocjena ; if ( brocjena == 0 ) r = - 1 ; else r = 0 ; for ( j = r ; j < brocjena ; j ++ ) { if ( s . ocjene [ j ] == 5 || j == - 1 ) { suma = 5 ; brocjena = 1 ; j = brocjena - 1 ; } else { suma = suma + s . ocjene [ j ] ; } if ( j == brocjena - 1 ) { prosjek2 = ( double ) suma / brocjena ; } } return prosjek2 ; } int poredjenje ( struct student o1 , struct student o2 ) { int i = 0 , t = 2 ; do { if ( o1 . prezime [ i ] < o2 . prezime [ i ] ) return - 1 ; if ( o2 . prezime [ i ] < o1 . prezime [ i ] ) return 1 ; i ++ ; if ( o1 . prezime [ i ] == '\0' && o2 . prezime [ i ] != '\0' ) return - 1 ; if ( o1 . prezime [ i ] != '\0' && o2 . prezime [ i ] == '\0' ) return 1 ; if ( o1 . prezime [ i ] == '\0' && o2 . prezime [ i ] == '\0' ) t = 0 ; } while ( o1 . prezime [ i ] != '\0' && o2 . prezime [ i ] != '\0' ) ; if ( t == 0 ) { i = 0 ; do { if ( o1 . ime [ i ] < o2 . ime [ i ] ) return - 1 ; if ( o2 . ime [ i ] < o1 . ime [ i ] ) return 1 ; i ++ ; if ( o1 . ime [ i ] == '\0' && o2 . ime [ i ] != '\0' ) return - 1 ; if ( o1 . ime [ i ] != '\0' && o2 . ime [ i ] == '\0' ) return 1 ; if ( o1 . ime [ i ] == '\0' && o2 . ime [ i ] == '\0' ) t = 0 ; } while ( o1 . ime [ i ] != '\0' && o2 . ime [ i ] != '\0' ) ; } if ( t == 0 ) return 0 ; return 0 ; } int genijalci ( struct student niz [ ] , int n , double prosjek ) { int i , j , k , s , brocjena , r , t = 0 , br = 0 , brojac = 0 , m , z = - 1 , h , u = 0 , rporedjenja , istimaxi = 0 , isti = 0 , kolikoistih = 0 ; ; int maxi = - 1 , drugi , treci , maxi2 ; double prosjek2 = 0 ; double max1 = prosjek , max2 = prosjek , max3 = prosjek , prosjeci ; for ( i = 0 ; i < n ; i ++ ) { s = 0 ; brocjena = niz [ i ] . br_ocjena ; if ( brocjena == 0 ) r = - 1 ; else r = 0 ; for ( j = r ; j < brocjena ; j ++ ) { if ( niz [ i ] . ocjene [ j ] == 5 || j == - 1 ) { s = 5 ; brocjena = 1 ; j = brocjena - 1 ; } else { s = s + niz [ i ] . ocjene [ j ] ; } if ( j == brocjena - 1 ) { prosjek2 = ( double ) s / brocjena ; if ( prosjek2 < prosjek ) { for ( k = i ; k < n - 1 ; k ++ ) { niz [ k ] = niz [ k + 1 ] ; } n -- ; i -- ; continue ; } else if ( prosjek2 > max1 ) max1 = prosjek2 ; else if ( prosjek2 == prosjek ) u = 1 ; } } } if ( u == 0 && max1 == prosjek ) return n ; for ( i = 0 ; i < n ; i ++ ) { prosjek2 = fprosjek ( niz [ i ] ) ; if ( prosjek2 == max1 ) br ++ ; } if ( br == 2 || br == 1 ) { for ( i = 0 ; i < n ; i ++ ) { prosjek2 = fprosjek ( niz [ i ] ) ; if ( prosjek2 == max1 ) { brojac ++ ; if ( brojac == 1 ) { if ( br == 1 ) { printf ( ""%s %s\n"" , niz [ i ] . prezime , niz [ i ] . ime ) ; } else { maxi = i ; i ++ ; continue ; } } else if ( brojac == 2 ) { if ( br == 2 ) { h = poredjenje ( niz [ maxi ] , niz [ i ] ) ; if ( h == - 1 ) { printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; printf ( ""%s %s\n"" , niz [ i ] . prezime , niz [ i ] . ime ) ; break ; } else if ( h == 1 ) { printf ( ""%s %s\n"" , niz [ i ] . prezime , niz [ i ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; break ; } else if ( h == 0 ) { printf ( ""%s %s\n"" , niz [ i ] . prezime , niz [ i ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; break ; } } } } } } else if ( br >= 3 ) { for ( i = 0 ; i < n ; i ++ ) { prosjek2 = fprosjek ( niz [ i ] ) ; if ( prosjek2 == max1 ) { for ( j = i + 1 ; j < n ; j ++ ) { prosjeci = fprosjek ( niz [ j ] ) ; if ( prosjeci == max1 ) { rporedjenja = poredjenje ( niz [ i ] , niz [ j ] ) ; if ( rporedjenja == - 1 ) maxi = i ; else if ( rporedjenja == 1 ) maxi = j ; else if ( rporedjenja == 0 ) { maxi = i ; istimaxi = i ; } } } } } for ( i = 0 ; i < n ; i ++ ) { prosjek2 = fprosjek ( niz [ i ] ) ; if ( prosjek2 == max1 ) { isti = poredjenje ( niz [ i ] , niz [ maxi ] ) ; if ( isti == 0 ) kolikoistih ++ ; else continue ; } } if ( istimaxi == maxi && kolikoistih >= 3 ) { printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; } else if ( istimaxi == maxi && kolikoistih == 2 ) { printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; } else printf ( ""%s %s\n"" , niz [ maxi ] . prezime , niz [ maxi ] . ime ) ; } return n ; } int main ( ) { struct student niz [ 100 ] ; int i , n , j ; double prosjek ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { niz [ i ] = unesi_osobu ( ) ; } scanf ( ""%lf"" , & prosjek ) ; n = genijalci ( niz , n , prosjek ) ; for ( j = 0 ; j < n ; j ++ ) { printf ( ""\n%s %s"" , niz [ j ] . ime , niz [ j ] . prezime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak = '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student unesi_studenta ( ) { struct student s ; int i ; unesi ( s . ime , 20 ) ; unesi ( s . prezime , 20 ) ; scanf ( ""%d"" , & s . br_ocjena ) ; for ( i = 0 ; i < s . br_ocjena ; i ++ ) { scanf ( ""%d"" , & s . ocjene [ i ] ) ; } return s ; } double prosjek ( struct student st [ ] , int i ) { int j , br = 0 ; double p , s = 0 ; for ( j = 0 ; j < st [ i ] . br_ocjena ; j ++ ) { s += st [ i ] . ocjene [ j ] ; br ++ ; if ( st [ i ] . ocjene [ j ] == 5 ) { s = 5 ; br = 1 ; break ; } } p = s / br ; return p ; } int genijalci ( struct student st [ 100 ] , int vel , double prosjek1 ) { int i , j , m , v ; v = vel ; for ( i = 0 ; i < v ; i ++ ) { if ( prosjek ( st , i ) < prosjek1 ) { for ( j = i ; j < v ; j ++ ) { st [ j ] = st [ j + 1 ] ; } v -- ; i -- ; } } return v ; } void ispisi_3 ( struct student st [ ] , int v , double prosjek1 ) { int i , j , max , vel ; double p ; p = prosjek1 ; vel = v ; struct student tmp ; for ( i = 0 ; i < v ; i ++ ) { max = i ; for ( j = i + 1 ; j < v ; j ++ ) if ( prosjek ( st , j ) > prosjek ( st , max ) ) max = j ; tmp = st [ i ] ; st [ i ] = st [ max ] ; st [ max ] = tmp ; } v = genijalci ( st , vel , p ) ; if ( v == 1 ) printf ( ""%s %s\n"" , st [ 0 ] . prezime , st [ 0 ] . ime ) ; else if ( v == 2 ) { printf ( ""%s %s\n"" , st [ 0 ] . prezime , st [ 0 ] . ime ) ; printf ( ""%s %s\n"" , st [ 1 ] . prezime , st [ 1 ] . ime ) ; } else if ( v >= 3 ) { printf ( ""%s %s\n"" , st [ 0 ] . prezime , st [ 0 ] . ime ) ; printf ( ""%s %s\n"" , st [ 1 ] . prezime , st [ 1 ] . ime ) ; printf ( ""%s %s\n"" , st [ 2 ] . prezime , st [ 2 ] . ime ) ; } } int main ( ) { struct student st [ 100 ] ; int i , j , q , vel ; double prosjek1 ; scanf ( ""%d"" , & q ) ; for ( i = 0 ; i < q ; i ++ ) { st [ i ] = unesi_studenta ( ) ; } scanf ( ""%lf"" , & prosjek1 ) ; ispisi_3 ( st , q , prosjek1 ) ; return 0 ; }"
1102,73,73,0,45,A2016/Z2/Z4/student6824,A2016/Z2/Z4/student9160,"#include <stdio.h> int main ( ) { int m , n , i , j , teplicova = 1 , cirkularna = 1 ; double selma [ 100 ] [ 100 ] ; double suma [ 100 ] = { 0 } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 100 || n < 1 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m < 1 || m > 100 || n < 1 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & selma [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( selma [ i ] [ j ] != selma [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; } } } if ( teplicova == 1 ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { suma [ i ] = suma [ i ] + selma [ i ] [ j ] ; } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( suma [ i ] != suma [ i + 1 ] ) { cirkularna = 0 ; } } } } else { cirkularna = 0 ; } if ( teplicova == 1 && cirkularna == 0 ) { printf ( ""matrica je teplicova\n"" ) ; } else if ( teplicova == 1 && cirkularna == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( teplicova == 0 && cirkularna == 0 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , teplicova = 1 , cirkularna = 1 ; double mat [ 100 ] [ 100 ] ; double suma [ 100 ] = { 0 } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d"" , & m ) ; scanf ( ""%d"" , & n ) ; if ( m < 1 || n < 1 || m > 100 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m < 1 || n < 1 || m > 100 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) teplicova = 0 ; } } if ( teplicova ) { for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) suma [ i ] += mat [ i ] [ j ] ; } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( suma [ i ] != suma [ i + 1 ] ) cirkularna = 0 ; } } if ( cirkularna == 1 && teplicova == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 && cirkularna == 0 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1108,97,97,0,24,A2016/Z2/Z1/student5904,A2016/Z2/Z1/student7774,"#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , cifra , prethodna_cifra , znamenka , rezultat = 0 , a = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; broj = abs ( broj ) ; while ( broj > 10 ) { cifra = broj % 10 ; broj /= 10 ; prethodna_cifra = broj % 10 ; znamenka = abs ( cifra - prethodna_cifra ) ; rezultat = rezultat + a * znamenka ; a *= 10 ; } printf ( ""%d"" , rezultat ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , cifra , prethodna_cifra , znamenka , rezultat = 0 , a = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; broj = abs ( broj ) ; while ( broj > 10 ) { cifra = broj % 10 ; broj /= 10 ; prethodna_cifra = broj % 10 ; znamenka = abs ( cifra - prethodna_cifra ) ; rezultat = rezultat + a * znamenka ; a *= 10 ; } printf ( ""%d"" , rezultat ) ; return 0 ; }"
1115,96,96,0,20,A2016/Z2/Z2/student9175,A2016/Z2/Z2/student2086,"#include <stdio.h> #define pi 3.1415926 int main ( ) { int a , i , s , m , sec ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & a ) ; double niz [ 500 ] ; for ( i = 0 ; i < a ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < a ; i ++ ) { niz [ i ] = niz [ i ] * 180 / pi ; s = ( int ) ( niz [ i ] ) ; niz [ i ] = ( ( niz [ i ] - ( int ) ( niz [ i ] ) ) * 60 ) ; m = ( int ) ( niz [ i ] + 0.5 ) ; niz [ i ] = ( ( niz [ i ] - ( int ) ( niz [ i ] ) ) * 60 ) ; sec = ( int ) ( niz [ i ] + 0.5 ) ; if ( sec > 30 ) continue ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , s , m , sec ) ; } return 0 ; }","#include <stdio.h> #define pi 3.1415926 int main ( ) { int a , i , s , m , sec ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & a ) ; double niz [ 500 ] ; for ( i = 0 ; i < a ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < a ; i ++ ) { niz [ i ] = niz [ i ] * 180 / pi ; s = ( int ) ( niz [ i ] ) ; niz [ i ] = ( ( niz [ i ] - ( int ) ( niz [ i ] ) ) * 60 ) ; m = ( int ) ( niz [ i ] + 0.5 ) ; niz [ i ] = ( ( niz [ i ] - ( int ) ( niz [ i ] ) ) * 60 ) ; sec = ( int ) ( niz [ i ] + 0.5 ) ; if ( sec > 30 ) continue ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , s , m , sec ) ; } return 0 ; }"
1118,70,70,0,18,A2016/Z1/Z4/student7085,A2016/Z1/Z4/student2806,"#include <stdio.h> int main ( ) { int i , j , n ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( j == i || j + i == 2 * n - 2 || j - i == 2 * n - 2 || j + i == 4 * n - 4 ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= 4 * n - 3 ; j ++ ) { if ( i == j || i + j == 2 * n || i + j == 4 * n - 2 || j - i == 2 * n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }"
1122,89,89,0,65,A2016/Z3/Z1/student4108,A2016/Z3/Z1/student2086,"#include <stdio.h> int daj_prost ( ) { int i , prost = 1 ; static int a = 1 ; while ( 1 ) { a ++ ; if ( a == 2 ) { return a ; } else { for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { prost = 0 ; break ; } } } if ( prost ) { return a ; } else { prost = 1 ; } } } int main ( ) { int a , b , c = 0 , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( b <= a ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b ) ; while ( c < b ) { c = daj_prost ( ) ; if ( c > a && c < b ) { suma += c ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include<stdio.h> int daj_prost ( ) { int prost = 1 , n ; static int br = 1 ; while ( 1 ) { br ++ ; if ( br == 2 ) { return br ; } else { for ( n = 2 ; n < br ; n ++ ) { if ( br % n == 0 ) { prost = 0 ; break ; } } if ( prost ) { return br ; } else { prost = 1 ; } } } } int main ( ) { int x , y , zbir = 0 , br = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & x , & y ) ; if ( x < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( x >= y ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( x < 1 || x >= y || y <= 0 ) ; while ( br < y ) { br = daj_prost ( ) ; if ( br > x && br < y ) { zbir += br ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , x , y , zbir ) ; return 0 ; }"
1124,91,91,0,67,A2016/Z3/Z3/student1502,A2016/Z3/Z3/student2371,"#include <stdio.h> int main ( ) { int a , b , l ; int mat [ 201 ] [ 201 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 || a > 200 || b <= 0 || b > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( a <= 0 || a > 200 || b <= 0 || b > 200 ) ; int i , j , h = 0 ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } int t ; for ( i = 0 ; i < b ; i ++ ) { for ( j = i + 1 ; j < b ; j ++ ) { l = 0 ; for ( t = 0 ; t < a ; t ++ ) { if ( mat [ t ] [ i ] != mat [ t ] [ j ] ) l = 1 ; } if ( l == 0 ) { int s , d ; for ( d = j ; d < b - 1 ; d ++ ) { for ( s = 0 ; s < a ; s ++ ) { mat [ s ] [ d ] = mat [ s ] [ d + 1 ] ; } } b -- ; j -- ; } } } for ( i = 0 ; i < a ; i ++ ) { for ( j = i + 1 ; j < a ; j ++ ) { l = 0 ; for ( t = 0 ; t < b ; t ++ ) { if ( mat [ i ] [ t ] != mat [ j ] [ t ] ) { l = 1 ; } } if ( l == 0 ) { int s , d ; for ( d = j ; d < a - 1 ; d ++ ) { for ( s = 0 ; s < b ; s ++ ) { mat [ d ] [ s ] = mat [ d + 1 ] [ s ] ; } } a -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int a , b , c ; int mat [ 201 ] [ 201 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 || a > 200 || b <= 0 || b > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( a <= 0 || a > 200 || b <= 0 || b > 200 ) ; int i , j ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } while ( 1 == 1 ) { int p ; for ( i = 0 ; i < b ; i ++ ) { for ( j = i + 1 ; j < b ; j ++ ) { c = 1 ; for ( p = 0 ; p < a ; p ++ ) { if ( mat [ p ] [ i ] != mat [ p ] [ j ] ) { c = 0 ; } } if ( c ) { int x , y ; for ( y = j ; y < b - 1 ; y ++ ) { for ( x = 0 ; x < a ; x ++ ) { mat [ x ] [ y ] = mat [ x ] [ y + 1 ] ; } } b -- ; j -- ; } } } for ( i = 0 ; i < a ; i ++ ) { for ( j = i + 1 ; j < a ; j ++ ) { c = 1 ; for ( p = 0 ; p < b ; p ++ ) { if ( mat [ i ] [ p ] != mat [ j ] [ p ] ) { c = 0 ; } } if ( c ) { int x , y ; for ( y = j ; y < a - 1 ; y ++ ) { for ( x = 0 ; x < b ; x ++ ) { mat [ y ] [ x ] = mat [ y + 1 ] [ x ] ; } } a -- ; j -- ; } } } break ; } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1127,27,27,0,31,A2016/Z5/Z1/student1542,A2016/Z5/Z1/student2526,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } float prosjek ( int niz [ ] , int velicina ) { int i , suma = 0 ; float pr ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] == 5 || velicina == 0 ) return 5 ; suma += niz [ i ] ; } pr = ( float ) suma / velicina ; return pr ; } int genijalci ( struct student * niz , int velicina , float pros ) { int i , j , indeks = 0 , indeks2 = 0 , indeks3 = 0 ; float max = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] . br_ocjena == 0 || prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) < pros ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } if ( velicina == 0 ) return 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks ] . ime , niz [ i ] . ime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks ] . prezime , niz [ indeks ] . ime ) ; max = 0 ; indeks2 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; else { indeks2 = i ; break ; } } if ( indeks2 == - 1 ) return velicina ; max = prosjek ( niz [ indeks2 ] . ocjene , niz [ indeks2 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks2 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks2 ] . ime , niz [ i ] . ime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks2 ] . prezime , niz [ indeks2 ] . ime ) ; max = 0 ; indeks3 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; else { indeks3 = i ; break ; } } if ( indeks3 == - 1 ) return velicina ; max = prosjek ( niz [ indeks3 ] . ocjene , niz [ indeks3 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks3 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks3 ] . ime , niz [ i ] . ime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks3 ] . prezime , niz [ indeks3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjekstudenta ( int * niz , int brojocjena ) { if ( brojocjena == 0 ) return 5 ; int i , suma = 0 ; double prosjek1 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; else suma += niz [ i ] ; } prosjek1 = ( float ) suma / brojocjena ; return prosjek1 ; } int genijalci ( struct student * niz , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } int max1 = 0 , max2 = 0 , max3 = 0 ; double prosjek1 = 0 , prosjek2 = 0 , prosjek3 = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) >= prosjek && prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > prosjek1 ) { max1 = i ; prosjek1 = prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) >= prosjek && i != max1 && prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > prosjek2 ) { max2 = i ; prosjek2 = prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) >= prosjek && i != max1 && i != max2 && prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > prosjek3 ) { max3 = i ; prosjek3 = prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } int tmp ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == prosjek1 && i != max1 ) { if ( strcmp ( niz [ max1 ] . prezime , niz [ i ] . prezime ) > 0 ) { tmp = max1 ; max1 = i ; } if ( max2 == max1 ) max2 = tmp ; if ( max3 == max1 ) max3 = tmp ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == prosjek2 && i != max2 && i != max1 ) { if ( strcmp ( niz [ max2 ] . prezime , niz [ i ] . prezime ) > 0 ) { tmp = max2 ; max2 = i ; } if ( max3 == max2 ) max3 = tmp ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == prosjek3 && i != max3 && i != max1 && i != max2 ) { if ( strcmp ( niz [ max3 ] . prezime , niz [ i ] . prezime ) > 0 ) max3 = i ; } } if ( prosjek1 != 0 ) printf ( ""%s %s \n"" , niz [ max1 ] . prezime , niz [ max1 ] . ime ) ; if ( prosjek2 != 0 ) printf ( ""%s %s \n"" , niz [ max2 ] . prezime , niz [ max2 ] . ime ) ; if ( prosjek3 != 0 ) printf ( ""%s %s \n"" , niz [ max3 ] . prezime , niz [ max3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 4 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 4 , 6.5 ) ; return 0 ; }"
1129,94,94,0,37,A2016/Z2/Z4/student4237,A2016/Z2/Z4/student8580,"#include <stdio.h> int main ( ) { int m , n , i , j , p = 1 , q = 1 ; double niz [ 200 ] [ 200 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d  %d"" , & m , & n ) ; if ( n > 100 || n <= 0 || m > 100 || m <= 0 ) printf ( ""pogresan unos!\n"" ) ; } while ( n > 100 || n <= 0 || m > 100 || m <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < ( m - 1 ) ; i ++ ) { for ( j = 0 ; j < ( n - 1 ) ; j ++ ) { if ( niz [ i ] [ j ] != niz [ i + 1 ] [ j + 1 ] ) p = 0 ; } } for ( i = 0 ; i < ( m - 1 ) ; i ++ ) { if ( niz [ i ] [ n - 1 ] != niz [ i + 1 ] [ 0 ] ) q = 0 ; } if ( p == 1 && q == 0 ) printf ( ""matrica je teplicova"" ) ; else if ( p == 1 && q == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { int m , n , i , j , tm = 1 , cm = 1 ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m <= 0 || n > 100 || n <= 0 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m <= 0 || n > 100 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) tm = 0 ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) cm = 0 ; } if ( tm == 1 && cm == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( tm == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1140,72,72,0,35,A2016/Z1/Z4/student6776,A2016/Z1/Z4/student4824,"#include <stdio.h> int main ( ) { int n , i , j , k , l , s ; unos : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; goto unos ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( l = 0 ; l < n - 1 ; l ++ ) { if ( i == l + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( s = 0 ; s <= n ; s ++ ) { if ( i + s == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n ; unos : printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( ( n < 1 ) || ( n > 50 ) ) { printf ( ""pogresan unos"" ) ; goto unos ; } int i , j , k , z , q ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( z = 0 ; z < n - 1 ; z ++ ) { if ( i == z + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( q = 0 ; q <= n ; q ++ ) { if ( i + q == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1153,33,33,0,55,A2016/Z4/Z4/student3116,A2016/Z4/Z4/student9188,"#include <stdio.h> void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0,-3.1),(-15.09,4),(2.,2),(-1.1,217)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }","#include <stdio.h> #include <string.h> char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; int neg = 0 ; char * pt , * kt ; float x , y ; float a , b ; char * pom = p ; if ( * pom == '\0' ) return 0 ; while ( * pom != '\0' ) { if ( * pom != '(' ) return 0 ; else pom ++ ; if ( * pom == ',' ) return 0 ; while ( * pom != ',' ) { if ( ( * pom < '0' || * pom > '9' ) && ( * pom != '.' && * pom != '-' ) ) { return 0 ; } if ( * pom == '.' && * ( pom - 1 ) == '(' ) return 0 ; pom ++ ; } if ( * pom != ',' ) return 0 ; else pom ++ ; if ( * pom == ')' ) return 0 ; while ( * pom != ')' ) { if ( ( * pom < '0' || * pom > '9' ) && ( * pom != '.' && * pom != '-' ) ) { return 0 ; } if ( * pom == '.' && * ( pom - 1 ) == ',' ) return 0 ; pom ++ ; } if ( * pom != ')' ) { return 0 ; } else pom ++ ; if ( * pom != '\0' ) pom ++ ; if ( * pom == '\0' && * ( pom - 1 ) != ')' ) return 0 ; } while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } x = 0 ; while ( * p >= '0' && * p <= '9' ) { x = x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; x = x + a ; } if ( neg == 1 ) x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } y = 0 ; while ( * p >= '0' && * p <= '9' ) { y = y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b = b / 10 ; y = y + b ; } if ( neg == 1 ) y *= - 1 ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; if ( * p == ',' ) p ++ ; kt = p ; while ( * kt != '\0' ) { * pt ++ = * kt ++ ; } * pt = '\0' ; p = p - ( kt - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(-15,-30)"" ; char pom [ 100 ] ; strcpy ( pom , s ) ; obuhvat ( pom , - 15 , - 30 , - 14 , - 29 ) ; printf ( ""'%s' "" , pom ) ; strcpy ( pom , s ) ; obuhvat ( pom , - 30 , - 30 , - 15 , - 15 ) ; printf ( ""'%s' "" , pom ) ; strcpy ( pom , s ) ; obuhvat ( pom , - 32 , - 31 , - 16 , - 15 ) ; printf ( ""'%s' "" , pom ) ; strcpy ( pom , s ) ; obuhvat ( pom , - 15 , - 30 , - 15 , - 30 ) ; printf ( ""'%s' "" , pom ) ; strcpy ( pom , s ) ; obuhvat ( pom , 14 , 29 , 16 , 31 ) ; printf ( ""'%s' "" , pom ) ; return 0 ; }"
1178,88,88,0,65,A2016/Z3/Z3/student5624,A2016/Z3/Z3/student9821,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , i , j , k , l , m , n , pret , pret1 , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) matrica [ l ] [ p ] = matrica [ l + 1 ] [ p ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { pret1 = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( matrica [ j ] [ i ] != matrica [ j ] [ k ] ) pret1 = 0 ; } if ( pret1 == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) matrica [ p ] [ l ] = matrica [ p ] [ l + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , a , b , c , d , e , i , j , k , f ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 || a > 200 || b <= 0 || b > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( a <= 0 || a > 200 || b <= 0 || b > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < a - 1 ; i ++ ) { for ( j = i + 1 ; j < a ; j ++ ) { c = 0 ; if ( mat [ i ] [ 0 ] == mat [ j ] [ 0 ] ) { c = 1 ; for ( d = 1 ; d < b ; d ++ ) { if ( mat [ i ] [ d ] != mat [ j ] [ d ] ) c = 0 ; } } if ( c == 1 ) { for ( k = j ; k < a - 1 ; k ++ ) { for ( e = 0 ; e < b ; e ++ ) { mat [ k ] [ e ] = mat [ k + 1 ] [ e ] ; } } a -- ; j -- ; } } } for ( i = 0 ; i < b - 1 ; i ++ ) { for ( j = ( i + 1 ) ; j < b ; j ++ ) { c = 0 ; if ( mat [ 0 ] [ i ] == mat [ 0 ] [ j ] ) { c = 1 ; for ( d = 1 ; d < a ; d ++ ) { if ( mat [ d ] [ i ] != mat [ d ] [ j ] ) c = 0 ; } if ( c == 1 ) { for ( k = j ; k < b - 1 ; k ++ ) { for ( f = 0 ; f < a ; f ++ ) { mat [ f ] [ k ] = mat [ f ] [ k + 1 ] ; } } b -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1183,99,99,0,50,A2016/Z3/Z1/student5621,A2016/Z3/Z1/student7255,"#include <stdio.h> int daj_prost ( ) { int p = 0 , i ; static int q = 0 ; while ( 1 ) { q ++ ; if ( q == 2 ) { return q ; } else if ( q == 3 ) { return q ; } else { for ( i = 2 ; i < q ; i ++ ) { if ( q % i == 0 ) { p = 0 ; break ; } } if ( p ) { return q ; } else { p = 1 ; } } } } int main ( ) { int a , b , sum = 0 , q = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( q < b ) { q = daj_prost ( ) ; if ( q > a && q < b ) { sum += q ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int p = 0 , i ; static int q = 0 ; while ( 1 ) { q ++ ; if ( q == 2 ) { return q ; } else if ( q == 3 ) { return q ; } else { for ( i = 2 ; i < q ; i ++ ) { if ( q % i == 0 ) { p = 0 ; break ; } } if ( p ) { return q ; } else { p = 1 ; } } } } int main ( ) { int a , b , sum = 0 , q = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( q < b ) { q = daj_prost ( ) ; if ( q > a && q < b ) { sum += q ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }"
1184,61,61,0,68,A2016/Z3/Z2/student4237,A2016/Z3/Z2/student4495,"#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * p , int duzina ) { int * pomp = p ; int * pomp2 ; int clan = 0 ; int k = 0 ; int broj ; while ( pomp < p + 2 * duzina ) { broj = abs ( * pomp ) ; while ( broj ) { clan = clan + broj % 10 ; broj = broj / 10 ; } for ( pomp2 = p + ( duzina + k ) ; pomp2 > pomp ; pomp2 -- ) { * pomp2 = * ( pomp2 - 1 ) ; } k ++ ; pomp ++ ; * pomp = clan ; clan = 0 ; pomp ++ ; } } int fibonaccijeve ( int broj ) { int niz [ 1000 ] ; niz [ 0 ] = 1 ; niz [ 1 ] = 1 ; if ( broj == 1 ) return 1 ; int * pomp1 = niz ; int * pomp2 = niz + 1 ; int * pomp3 = niz + 2 ; while ( 1 ) { * pomp3 = * pomp2 + * pomp1 ; if ( * pomp3 == broj ) return 1 ; if ( * pomp3 > broj ) { return 0 ; } pomp1 ++ ; pomp2 ++ ; pomp3 ++ ; } } int izbaci ( int * p , int duzina ) { int * pomp = p ; int * pomp2 ; int broj ; while ( pomp < p + duzina ) { broj = * pomp ; broj = fibonaccijeve ( broj ) ; if ( broj == 1 ) { for ( pomp2 = pomp ; pomp2 < p + duzina - 1 ; pomp2 ++ ) { * pomp2 = * ( pomp2 + 1 ) ; } duzina -- ; pomp -- ; } pomp ++ ; } return duzina ; } int main ( ) { int i , n ; int niz [ 100 ] ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == n - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int * clan ; clan = niz ; while ( clan < niz + vel ) { int suma_c = 0 ; int clan_niza = abs ( * clan ) ; while ( clan_niza != 0 ) { suma_c = suma_c + ( clan_niza % 10 ) ; clan_niza = clan_niza / 10 ; } int * temp_p ; temp_p = niz + vel ; while ( temp_p > clan ) { * temp_p = * ( temp_p - 1 ) ; temp_p -- ; } * ( clan + 1 ) = suma_c ; clan = clan + 2 ; vel ++ ; } } int fibonacci ( int br ) { int niz [ 1000 ] ; niz [ 0 ] = 1 ; niz [ 1 ] = 1 ; if ( br == 1 ) return 1 ; int * p1 = niz ; int * p2 = niz + 1 ; int * p3 = niz + 2 ; while ( 1 ) { * p3 = * p2 + * p1 ; if ( * p3 == br ) return 1 ; if ( * p3 > br ) return 0 ; p1 ++ ; p2 ++ ; p3 ++ ; } } int izbaci ( int * p , int vel ) { int * niz = p ; int br ; int * temp_p ; while ( niz < p + vel ) { br = * niz ; br = fibonacci ( br ) ; if ( br == 1 ) { for ( temp_p = niz ; temp_p < p + vel - 1 ; temp_p ++ ) { * temp_p = * ( temp_p + 1 ) ; } vel -- ; niz -- ; } niz ++ ; } return vel ; } int main ( ) { int niz [ 100 ] , i , izbaceni ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; izbaceni = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izbaceni ; i ++ ) { if ( i < izbaceni - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }"
1192,94,94,0,34,A2016/Z2/Z3/student1476,A2016/Z2/Z3/student2526,"#include <stdio.h> int main ( ) { int i , j , n , br ; char mat [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < n ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; while ( ( i < 0 || i > 19 ) || ( j < 0 || j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bt , i , j , tacke ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; while ( bt < 1 || bt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( tacke = 0 ; tacke < bt ; tacke ++ ) { printf ( ""unesite %d. tacku: "" , tacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( i < 0 || j < 0 || i > 19 || j > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , tacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } niz [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1195,99,99,0,111,A2016/Z1/Z1/student9163,A2016/Z1/Z1/student7193,"#include <stdio.h> #include <math.h> #define eps 0.001 int main ( ) { float ipt , iipt , pt , zt , kt , ipb , iipb , pb , zb , kb , ipm , iipm , pm , zm , km , t , b , m ; int oc1 = 0 , oc2 = 0 , oc3 = 0 ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & ipt ) ; if ( ipt < 0 || ipt > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & iipt ) ; if ( iipt < 0 || iipt > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & pt ) ; if ( pt < 0 || pt > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zt ) ; if ( zt < 0 || zt > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & kt ) ; if ( kt < 0 || kt > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } t = ipt + iipt + pt + zt + kt ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & ipb ) ; if ( ipb < 0 || ipb > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & iipb ) ; if ( iipb < 0 || iipb > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & pb ) ; if ( pb < 0 || pb > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zb ) ; if ( zb < 0 || zb > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & kb ) ; if ( kb < 0 || kb > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } b = ipb + iipb + pb + zb + kb ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & ipm ) ; if ( ipm < 0 || ipm > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & iipm ) ; if ( iipm < 0 || iipm > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & pm ) ; if ( pm < 0 || pm > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zm ) ; if ( zm < 0 || zm > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & km ) ; if ( km < 0 || km > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } m = ipm + iipm + pm + zm + km ; if ( fabs ( t + eps ) < 55 ) oc1 = 5 ; else if ( fabs ( t + eps ) >= 55 && fabs ( t + eps ) < 65 ) oc1 = 6 ; else if ( fabs ( t + eps ) >= 65 && fabs ( t + eps ) < 75 ) oc1 = 7 ; else if ( fabs ( t + eps ) >= 75 && fabs ( t + eps ) < 85 ) oc1 = 8 ; else if ( fabs ( t + eps ) >= 85 && fabs ( t + eps ) < 92 ) oc1 = 9 ; else if ( fabs ( t + eps ) >= 92 && fabs ( t + eps ) <= 100 ) oc1 = 10 ; if ( fabs ( b + eps ) < 55 ) oc2 = 5 ; else if ( fabs ( b + eps ) >= 55 && fabs ( b + eps ) < 65 ) oc2 = 6 ; else if ( fabs ( b + eps ) >= 65 && fabs ( b + eps ) < 75 ) oc2 = 7 ; else if ( fabs ( b + eps ) >= 75 && fabs ( b + eps ) < 85 ) oc2 = 8 ; else if ( fabs ( b + eps ) >= 85 && fabs ( b + eps ) < 92 ) oc2 = 9 ; else if ( fabs ( b + eps ) >= 92 && fabs ( b + eps ) <= 100 ) oc2 = 10 ; if ( fabs ( m + eps ) < 55 ) oc3 = 5 ; else if ( fabs ( m + eps ) >= 55 && fabs ( m + eps ) < 65 ) oc3 = 6 ; else if ( fabs ( m + eps ) >= 65 && fabs ( m + eps ) < 75 ) oc3 = 7 ; else if ( fabs ( m + eps ) >= 75 && fabs ( m + eps ) < 85 ) oc3 = 8 ; else if ( fabs ( m + eps ) >= 85 && fabs ( m + eps ) < 92 ) oc3 = 9 ; else if ( fabs ( m + eps ) >= 92 && fabs ( m + eps ) <= 100 ) oc3 = 10 ; if ( oc1 == 5 && oc2 == 5 && oc3 == 5 ) printf ( ""nijedan student nije polozio."" ) ; else if ( oc1 > 5 && oc2 > 5 && oc3 > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( oc1 == oc2 && oc1 == oc3 ) printf ( ""sva tri studenta imaju istu ocjenu."" ) ; else if ( oc1 != oc2 && oc2 != oc3 && oc1 != oc3 ) printf ( ""svaki student ima razlicitu ocjenu."" ) ; else if ( oc1 == oc2 && oc1 != oc3 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; else if ( oc1 == oc3 && oc1 != oc2 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; else if ( oc2 == oc3 && oc2 != oc1 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; } else if ( oc1 > 5 && oc2 == 5 && oc3 == 5 ) printf ( ""jedan student je polozio."" ) ; else if ( oc1 > 5 && oc2 > 5 && oc3 == 5 ) printf ( ""dva studenta su polozila."" ) ; else if ( oc1 > 5 && oc2 == 5 && oc3 >= 5 ) printf ( ""dva studenta su polozila."" ) ; else if ( oc1 == 5 && oc2 > 5 && oc3 >= 5 ) printf ( ""dva studenta su polozila."" ) ; else if ( oc1 == 5 && oc2 == 5 && oc3 > 5 ) printf ( ""jedan student je polozio."" ) ; else if ( oc1 == 5 && oc2 > 5 && oc3 == 5 ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define eps 0.001 int main ( ) { float ipt , iipt , pt , zt , kt , ipb , iipb , pb , zb , kb , ipm , iipm , pm , zm , km , t , b , m ; int oc1 = 0 , oc2 = 0 , oc3 = 0 ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & ipt ) ; if ( ipt < 0 || ipt > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & iipt ) ; if ( iipt < 0 || iipt > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & pt ) ; if ( pt < 0 || pt > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zt ) ; if ( zt < 0 || zt > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & kt ) ; if ( kt < 0 || kt > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } t = ipt + iipt + pt + zt + kt ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & ipb ) ; if ( ipb < 0 || ipb > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & iipb ) ; if ( iipb < 0 || iipb > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & pb ) ; if ( pb < 0 || pb > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zb ) ; if ( zb < 0 || zb > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & kb ) ; if ( kb < 0 || kb > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } b = ipb + iipb + pb + zb + kb ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & ipm ) ; if ( ipm < 0 || ipm > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & iipm ) ; if ( iipm < 0 || iipm > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & pm ) ; if ( pm < 0 || pm > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & zm ) ; if ( zm < 0 || zm > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & km ) ; if ( km < 0 || km > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } m = ipm + iipm + pm + zm + km ; if ( fabs ( t + eps ) < 55 ) oc1 = 5 ; else if ( fabs ( t + eps ) >= 55 && fabs ( t + eps ) < 65 ) oc1 = 6 ; else if ( fabs ( t + eps ) >= 65 && fabs ( t + eps ) < 75 ) oc1 = 7 ; else if ( fabs ( t + eps ) >= 75 && fabs ( t + eps ) < 85 ) oc1 = 8 ; else if ( fabs ( t + eps ) >= 85 && fabs ( t + eps ) < 92 ) oc1 = 9 ; else if ( fabs ( t + eps ) >= 92 && fabs ( t + eps ) <= 100 ) oc1 = 10 ; if ( fabs ( b + eps ) < 55 ) oc2 = 5 ; else if ( fabs ( b + eps ) >= 55 && fabs ( b + eps ) < 65 ) oc2 = 6 ; else if ( fabs ( b + eps ) >= 65 && fabs ( b + eps ) < 75 ) oc2 = 7 ; else if ( fabs ( b + eps ) >= 75 && fabs ( b + eps ) < 85 ) oc2 = 8 ; else if ( fabs ( b + eps ) >= 85 && fabs ( b + eps ) < 92 ) oc2 = 9 ; else if ( fabs ( b + eps ) >= 92 && fabs ( b + eps ) <= 100 ) oc2 = 10 ; if ( fabs ( m + eps ) < 55 ) oc3 = 5 ; else if ( fabs ( m + eps ) >= 55 && fabs ( m + eps ) < 65 ) oc3 = 6 ; else if ( fabs ( m + eps ) >= 65 && fabs ( m + eps ) < 75 ) oc3 = 7 ; else if ( fabs ( m + eps ) >= 75 && fabs ( m + eps ) < 85 ) oc3 = 8 ; else if ( fabs ( m + eps ) >= 85 && fabs ( m + eps ) < 92 ) oc3 = 9 ; else if ( fabs ( m + eps ) >= 92 && fabs ( m + eps ) <= 100 ) oc3 = 10 ; if ( oc1 == 5 && oc2 == 5 && oc3 == 5 ) printf ( ""nijedan student nije polozio."" ) ; else if ( oc1 > 5 && oc2 > 5 && oc3 > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( oc1 == oc2 && oc1 == oc3 ) printf ( ""sva tri studenta imaju istu ocjenu."" ) ; else if ( oc1 != oc2 && oc2 != oc3 && oc1 != oc3 ) printf ( ""svaki student ima razlicitu ocjenu."" ) ; else if ( oc1 == oc2 && oc1 != oc3 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; else if ( oc1 == oc3 && oc1 != oc2 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; else if ( oc2 == oc3 && oc2 != oc1 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; } else if ( oc1 > 5 && oc2 == 5 && oc3 == 5 ) printf ( ""jedan student je polozio."" ) ; else if ( oc1 > 5 && oc2 > 5 && oc3 == 5 ) printf ( ""dva studenta su polozila."" ) ; else if ( oc1 > 5 && oc2 == 5 && oc3 >= 5 ) printf ( ""dva studenta su polozila."" ) ; else if ( oc1 == 5 && oc2 > 5 && oc3 >= 5 ) printf ( ""dva studenta su polozila."" ) ; else if ( oc1 == 5 && oc2 == 5 && oc3 > 5 ) printf ( ""jedan student je polozio."" ) ; else if ( oc1 == 5 && oc2 > 5 && oc3 == 5 ) printf ( ""jedan student je polozio."" ) ; return 0 ; }"
1209,81,81,0,48,A2016/Z2/Z4/student5660,A2016/Z2/Z4/student4420,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define eps 0.000000000000000000000001 int main ( ) { double matrica [ 100 ] [ 100 ] ; int m , n , i = 0 , j , jelisedesiobreak = 0 ; do { if ( i > 0 ) printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; i ++ ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ i + 1 ] [ j + 1 ] ) > eps ) { jelisedesiobreak ++ ; break ; } } if ( jelisedesiobreak == 1 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; break ; } } if ( jelisedesiobreak == 0 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( m == 1 ) break ; for ( j = 0 ; j < n ; j ++ ) { if ( fabs ( matrica [ i ] [ n - 1 ] - matrica [ i + 1 ] [ 0 ] ) > eps ) { jelisedesiobreak ++ ; printf ( ""matrica je teplicova"" ) ; break ; } } if ( jelisedesiobreak == 1 ) break ; } if ( jelisedesiobreak == 0 ) printf ( ""matrica je cirkularna"" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define g 0.000000000000000000000001 int main ( ) { double niz [ 100 ] [ 100 ] ; int m , n , i = 0 , j , a = 0 ; do { if ( i > 0 ) printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; i ++ ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; i = 0 ; while ( i < m ) { j = 0 ; while ( j < n ) { scanf ( ""%lf"" , & niz [ i ] [ j ] ) ; j ++ ; } i ++ ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( niz [ i ] [ j ] - niz [ i + 1 ] [ j + 1 ] ) > g ) { a ++ ; break ; } } if ( a == 1 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } } if ( a == 0 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( m == 1 ) { break ; } for ( j = 0 ; j < n ; j ++ ) { if ( fabs ( niz [ i ] [ n - 1 ] - niz [ i + 1 ] [ 0 ] ) > g ) { a ++ ; printf ( ""matrica je teplicova "" ) ; break ; } } if ( a == 1 ) { break ; } } if ( a == 0 ) { printf ( ""matrica je cirkularna "" ) ; } } return 0 ; }"
1217,83,83,0,67,A2016/Z3/Z2/student6877,A2016/Z3/Z2/student4420,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define velniz1 10 #define velniz2 20 void ubaci ( int * niz , int vel1 ) { int i , suma = 0 , zadcifra , broj ; for ( i = vel1 - 1 ; i >= 0 ; i -- ) * ( niz + 2 * i ) = * ( niz + i ) ; for ( i = 0 ; i < vel1 * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { zadcifra = broj % 10 ; suma = suma + zadcifra ; broj = broj / 10 ; } suma = abs ( suma ) ; * ( niz + i ) = suma ; suma = 0 ; } } } int izbaci ( int * niz , int vel2 ) { int i , j , k , prvi , drugi , temp ; for ( i = 0 ; i < vel2 ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 0 ; j < 1000 ; j ++ ) { temp = prvi + drugi ; prvi = drugi ; drugi = temp ; if ( * ( niz + i ) == temp ) { for ( k = i ; k < vel2 - 1 ; k ++ ) { * ( niz + k ) = * ( niz + k + 1 ) ; } vel2 -- ; i -- ; break ; } } } return vel2 ; } int main ( ) { int niz [ 20 ] , i , brclanova ; printf ( ""\nunesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , velniz1 ) ; brclanova = izbaci ( niz , velniz2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < brclanova ; i ++ ) { if ( i < ( brclanova - 1 ) ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d. "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define brel 10 #define brel2 20 void ubaci ( int * niz , int velicina ) { int i , cifra , broj , broj2 = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { cifra = broj % 10 ; broj2 += cifra ; broj /= 10 ; } broj2 = abs ( broj2 ) ; * ( niz + i ) = broj2 ; broj2 = 0 ; } } } int izbaci ( int * niz , int velicina ) { int i , j , m , prvi = 0 , drugi = 1 , slijedeci ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) slijedeci = j ; else { slijedeci = prvi + drugi ; prvi = drugi ; drugi = slijedeci ; } if ( * ( niz + i ) == slijedeci ) { for ( m = i ; m < velicina - 1 ; m ++ ) { * ( niz + m ) = * ( niz + m + 1 ) ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , brel ) ; n = izbaci ( niz , brel2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < ( n - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }"
1219,97,97,0,42,A2016/Z3/Z1/student1476,A2016/Z3/Z1/student5496,"#include <stdio.h> int daj_prost ( ) { static int n = 1 ; int i , prost = 1 ; for ( ; ; ) { n ++ ; if ( n == 2 ) return n ; for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prost = 0 ; break ; } } if ( prost ) return n ; prost = 1 ; } } int suma ( int a , int b ) { int suma = 0 , i , broj = 0 ; for ( i = 0 ; i < b ; i ++ ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } return suma ; } int main ( ) { int a , b ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ( a , b ) ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int n = 1 ; int i , prost = 1 ; for ( ; ; ) { n ++ ; if ( n == 2 ) return n ; for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prost = 0 ; break ; } } if ( prost ) return n ; prost = 1 ; } } int suma ( int a , int b ) { int suma = 0 , i , broj = 0 ; for ( i = 0 ; i < b ; i ++ ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } return suma ; } int main ( ) { int a , b ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ( a , b ) ) ; return 0 ; }"
1227,94,94,0,71,A2016/Z3/Z3/student7085,A2016/Z3/Z3/student5624,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , l , pret ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m <= 0 || n > 200 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || m <= 0 || n > 200 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ l ] [ j ] = mat [ l + 1 ] [ j ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { pret = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( i = 0 ; i < m ; i ++ ) { mat [ i ] [ l ] = mat [ i ] [ l + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , i , j , k , l , m , n , pret , pret1 , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) matrica [ l ] [ p ] = matrica [ l + 1 ] [ p ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { pret1 = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( matrica [ j ] [ i ] != matrica [ j ] [ k ] ) pret1 = 0 ; } if ( pret1 == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) matrica [ p ] [ l ] = matrica [ p ] [ l + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
1230,64,64,0,26,A2016/Z2/Z4/student4804,A2016/Z2/Z4/student5140,"#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { int m , n , i , j , t = 0 , c = 0 ; double a [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( a [ i ] [ j ] - a [ i + 1 ] [ j + 1 ] ) < e ) t = 1 ; else { t = 0 ; break ; } } if ( t == 0 ) break ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( t == 1 && ( fabs ( a [ i ] [ n - 1 ] - a [ i + 1 ] [ 0 ] ) < e ) ) c = 1 ; else { c = 0 ; break ; } } if ( c == 0 ) break ; } if ( c == 1 || m == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( t == 1 || n == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define a 0.000001 int main ( ) { int m , n , i , j , tep = 0 , cirk = 0 ; double matrica [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m < 1 || n > 100 || n < 1 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m < 1 || n > 100 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ i + 1 ] [ j + 1 ] ) < a ) tep ++ ; } } for ( i = 0 ; i < m ; i ++ ) { if ( fabs ( matrica [ i ] [ n - 1 ] - matrica [ i + 1 ] [ 0 ] ) < a ) cirk ++ ; } if ( m == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } if ( n == 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } if ( cirk + tep == n * ( m - 1 ) ) printf ( ""matrica je cirkularna"" ) ; else if ( tep == ( n - 1 ) * ( m - 1 ) ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1243,86,86,0,85,A2016/Z1/Z3/student4824,A2016/Z1/Z3/student4934,"#include <stdio.h> int main ( ) { int ubv , c , s , b , v , p , m ; float udio ; char unos ; c = 0 ; b = 0 ; s = 0 ; v = 0 ; p = 0 ; m = 0 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & unos ) ; if ( unos == 'c' || unos == 'c' ) { c ++ ; if ( c > m ) { m = c ; } } else if ( unos == 'b' || unos == 'b' ) { b ++ ; if ( b > m ) { m = b ; } } else if ( unos == 's' || unos == 's' ) { s ++ ; if ( s > m ) { m = s ; } } else if ( unos == 'v' || unos == 'v' ) { v ++ ; if ( v > m ) { m = v ; } } else if ( unos == 'p' || unos == 'p' ) { p ++ ; if ( p > m ) { m = p ; } } else if ( ! ( unos == 'k' || unos == 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ! ( unos == 'k' || unos == 'k' ) ) ; ubv = ( c + b + s + v + p ) ; udio = ( m * 100. ) / ubv ; if ( ubv == 0 ) { printf ( ""\nukupno evidentirano %d vozila."" , ubv ) ; printf ( ""\nnajpopularnija boja je crna (0.00%%)."" , udio ) ; return 0 ; } else { printf ( ""ukupno evidentirano %d vozila."" , ubv ) ; } if ( m == c ) { printf ( ""\nnajpopularnija boja je crna (%.2f%%). "" , udio ) ; return 0 ; } else if ( m == s ) { printf ( ""\nnajpopularnija boja je siva (%.2f%%). "" , udio ) ; return 0 ; } else if ( m == b ) { printf ( ""\nnajpopularnija boja je bijela (%.2f%%). "" , udio ) ; return 0 ; } else if ( m == v ) { printf ( ""\nnajpopularnija boja je crvena (%.2f%%). "" , udio ) ; return 0 ; } else if ( m == p ) { printf ( ""\nnajpopularnija boja je plava (%.2f%%). "" , udio ) ; return 0 ; } }","#include <stdio.h> int main ( ) { int c , b , s , v , p , u , m ; double x ; char slovo ; c = 0 ; b = 0 ; s = 0 ; v = 0 ; p = 0 ; m = 0 ; x = 0 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & slovo ) ; if ( slovo == 'c' || slovo == 'c' ) { c ++ ; if ( c > m ) { m = c ; } } else if ( slovo == 'b' || slovo == 'b' ) { b ++ ; if ( b > m ) { m = b ; } } else if ( slovo == 's' || slovo == 's' ) { s ++ ; if ( s > m ) { m = s ; } } else if ( slovo == 'v' || slovo == 'v' ) { v ++ ; if ( v > m ) { m = v ; } } else if ( slovo == 'p' || slovo == 'p' ) { p ++ ; if ( p > m ) { m = p ; } } else if ( ! ( slovo == 'k' || slovo == 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ! ( slovo == 'k' || slovo == 'k' ) ) ; u = c + b + v + p + s ; x = ( m * 100. ) / u ; if ( u == 0 ) { printf ( ""ukupno evidentirano 0 vozila.\n"" ) ; printf ( ""najpopularnija boja je crna (0.00%).\n"" ) ; return 0 ; } else { printf ( ""ukupno evidentirano %d vozila.\n"" , u ) ; } if ( m == c ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , x ) ; return 0 ; } else if ( m == b ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , x ) ; return 0 ; } else if ( m == s ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , x ) ; return 0 ; } else if ( m == v ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , x ) ; return 0 ; } else if ( m == p ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , x ) ; return 0 ; } return 0 ; }"
1255,99,99,0,52,A2016/Z2/Z3/student8864,A2016/Z2/Z3/student2547,"#include <stdio.h> int main ( ) { int i , j , n = 0 , x [ 10 ] = { 0 } , y [ 10 ] = { 0 } , k ; char praznamjesta [ 20 ] [ 20 ] ; ponovi1 : printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; goto ponovi1 ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { praznamjesta [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < n ; i ++ ) { ponovi2 : printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x [ i ] , & y [ i ] ) ; if ( ( x [ i ] >= 20 || x [ i ] < 0 ) || ( y [ i ] >= 20 || y [ i ] < 0 ) ) { printf ( ""pogresan unos\n"" ) ; goto ponovi2 ; } } for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( i == y [ k ] && j == x [ k ] ) { praznamjesta [ i ] [ j ] = '*' ; } } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , praznamjesta [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n = 0 , x [ 10 ] = { 0 } , y [ 10 ] = { 0 } , k ; char praznamjesta [ 20 ] [ 20 ] ; ponovi1 : printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; goto ponovi1 ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { praznamjesta [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < n ; i ++ ) { ponovi2 : printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x [ i ] , & y [ i ] ) ; if ( ( x [ i ] >= 20 || x [ i ] < 0 ) || ( y [ i ] >= 20 || y [ i ] < 0 ) ) { printf ( ""pogresan unos\n"" ) ; goto ponovi2 ; } } for ( k = 0 ; k < n ; k ++ ) { for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( i == y [ k ] && j == x [ k ] ) { praznamjesta [ i ] [ j ] = '*' ; } } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , praznamjesta [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1258,99,99,0,372,A2016/Z5/Z3/student7802,A2016/Z5/Z3/student3386,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; if ( sat + min + t1 . sekunde > sat1 + min1 + t2 . sekunde ) return 1 ; if ( sat + min + t1 . sekunde < sat1 + min1 + t2 . sekunde ) return - 1 ; if ( sat + min + t1 . sekunde == sat1 + min1 + t2 . sekunde ) return 0 ; } int prvi ( struct cas raspored [ ] , int casova ) { int i , j = 25 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < j ) j = raspored [ i ] . pocetak . sati ; } return j ; } int zadnji ( struct cas raspored [ ] , int casova ) { int i , j = 0 , index = 0 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati > j ) j = raspored [ i ] . kraj . sati ; index = i ; } if ( raspored [ index ] . kraj . minute == 0 ) j -- ; return j ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , flag2 = 1 , index_min = - 1 ; int last = zadnji ( raspored , broj_casova ) ; int first = prvi ( raspored , broj_casova ) ; char sedmica [ ] [ 7 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; char sati [ ] [ 25 ] = { ""0:00"" , ""1:00"" , ""2:00"" , ""3:00"" , ""4:00"" , ""5:00"" , ""6:00"" , ""7:00"" , ""8:00"" , ""9:00"" , ""10:00"" , ""11:00"" , ""12:00"" , ""13:00"" , ""14:00"" , ""15:00"" , ""16:00"" , ""17:00"" , ""18:00"" , ""19:00"" , ""20:00"" , ""21:00"" , ""22:00"" , ""23:00"" } ; printf ( ""\n"" ) ; printf ( ""%-7s"" , "" "" ) ; for ( i = 0 ; i < 6 ; i ++ ) { printf ( ""%-10s"" , sedmica [ i ] ) ; } printf ( ""\n"" ) ; for ( i = first ; i - 1 < last ; i ++ ) { printf ( ""%-7s"" , sati [ i ] ) ; for ( k = 1 ; k < 7 ; k ++ ) { index_min = - 1 ; flag2 = 1 ; for ( j = 0 ; j < broj_casova ; j ++ ) { if ( raspored [ j ] . dan_u_sedmici == k ) { if ( ( raspored [ j ] . pocetak . sati <= i ) && ( raspored [ j ] . kraj . sati >= i ) && ! ( raspored [ j ] . kraj . sati == i && raspored [ j ] . kraj . minute == 0 ) ) { if ( flag2 ) { index_min = j ; flag2 = 0 ; } else if ( poredivrj ( raspored [ j ] . pocetak , raspored [ index_min ] . pocetak ) == - 1 ) { index_min = j ; } } } } if ( index_min == - 1 ) { printf ( ""%-10s"" , "" "" ) ; } else if ( index_min != - 1 ) { printf ( ""%-10s"" , raspored [ index_min ] . predmet ) ; } } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n"" ) ; printf ( ""%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; printf ( ""%02d:"" , raspored [ i ] . pocetak . sati ) ; printf ( ""%02d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:"" , raspored [ i ] . kraj . sati ) ; printf ( ""%02d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int minute ( int min , int sati ) { return min + sati * 60 ; } int prekl ( int minpoc1 , int minkraj1 , int minpoc2 , int minkraj2 ) { return ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int vr = prekl ( minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) , minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) , minute ( cas . pocetak . minute , cas . pocetak . sati ) , minute ( cas . kraj . minute , cas . kraj . sati ) ) ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minute ( cas . pocetak . minute , cas . pocetak . sati ) == minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) || minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) == minute ( cas . kraj . minute , cas . kraj . sati ) ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && vr == 1 ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & redni ) ; printf ( ""naziv predmeta: "" ) ; char predmet [ 10 ] ; if ( opcija != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet , * p = predmet ; char znak ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & promjena . pocetak . sati ) ; scanf ( ""%c"" , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . kraj . sati , & znak ) ; scanf ( ""%d"" , & promjena . kraj . minute ) ; if ( opcija != 0 ) promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( ""cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; if ( sat + min + t1 . sekunde > sat1 + min1 + t2 . sekunde ) return 1 ; if ( sat + min + t1 . sekunde < sat1 + min1 + t2 . sekunde ) return - 1 ; if ( sat + min + t1 . sekunde == sat1 + min1 + t2 . sekunde ) return 0 ; } int prvi ( struct cas raspored [ ] , int casova ) { int i , j = 25 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < j ) j = raspored [ i ] . pocetak . sati ; } return j ; } int zadnji ( struct cas raspored [ ] , int casova ) { int i , j = 0 , index = 0 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati > j ) j = raspored [ i ] . kraj . sati ; index = i ; } if ( raspored [ index ] . kraj . minute == 0 ) j -- ; return j ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , flag2 = 1 , index_min = - 1 ; int last = zadnji ( raspored , broj_casova ) ; int first = prvi ( raspored , broj_casova ) ; char sedmica [ ] [ 7 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; char sati [ ] [ 25 ] = { ""0:00"" , ""1:00"" , ""2:00"" , ""3:00"" , ""4:00"" , ""5:00"" , ""6:00"" , ""7:00"" , ""8:00"" , ""9:00"" , ""10:00"" , ""11:00"" , ""12:00"" , ""13:00"" , ""14:00"" , ""15:00"" , ""16:00"" , ""17:00"" , ""18:00"" , ""19:00"" , ""20:00"" , ""21:00"" , ""22:00"" , ""23:00"" } ; printf ( ""\n"" ) ; printf ( ""%-7s"" , "" "" ) ; for ( i = 0 ; i < 6 ; i ++ ) { printf ( ""%-10s"" , sedmica [ i ] ) ; } printf ( ""\n"" ) ; for ( i = first ; i - 1 < last ; i ++ ) { printf ( ""%-7s"" , sati [ i ] ) ; for ( k = 1 ; k < 7 ; k ++ ) { index_min = - 1 ; flag2 = 1 ; for ( j = 0 ; j < broj_casova ; j ++ ) { if ( raspored [ j ] . dan_u_sedmici == k ) { if ( ( raspored [ j ] . pocetak . sati <= i ) && ( raspored [ j ] . kraj . sati >= i ) && ! ( raspored [ j ] . kraj . sati == i && raspored [ j ] . kraj . minute == 0 ) ) { if ( flag2 ) { index_min = j ; flag2 = 0 ; } else if ( poredivrj ( raspored [ j ] . pocetak , raspored [ index_min ] . pocetak ) == - 1 ) { index_min = j ; } } } } if ( index_min == - 1 ) { printf ( ""%-10s"" , "" "" ) ; } else if ( index_min != - 1 ) { printf ( ""%-10s"" , raspored [ index_min ] . predmet ) ; } } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n"" ) ; printf ( ""%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; printf ( ""%02d:"" , raspored [ i ] . pocetak . sati ) ; printf ( ""%02d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:"" , raspored [ i ] . kraj . sati ) ; printf ( ""%02d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int minute ( int min , int sati ) { return min + sati * 60 ; } int prekl ( int minpoc1 , int minkraj1 , int minpoc2 , int minkraj2 ) { return ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int vr = prekl ( minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) , minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) , minute ( cas . pocetak . minute , cas . pocetak . sati ) , minute ( cas . kraj . minute , cas . kraj . sati ) ) ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minute ( cas . pocetak . minute , cas . pocetak . sati ) == minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) || minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) == minute ( cas . kraj . minute , cas . kraj . sati ) ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && vr == 1 ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & redni ) ; printf ( ""naziv predmeta: "" ) ; char predmet [ 10 ] ; if ( opcija != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet , * p = predmet ; char znak ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & promjena . pocetak . sati ) ; scanf ( ""%c"" , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . kraj . sati , & znak ) ; scanf ( ""%d"" , & promjena . kraj . minute ) ; if ( opcija != 0 ) promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( ""cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }"
1259,98,98,0,69,A2016/Z5/Z1/student3133,A2016/Z5/Z1/student4824,"#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double daj_prosjek ( int * ocjene , int br ) { double prosjek ; int suma = 0 , i ; if ( br == 0 ) { prosjek = 5 ; return prosjek ; } for ( i = 0 ; i < br ; i ++ ) { suma += ocjene [ i ] ; if ( ocjene [ i ] == 5 ) { prosjek = 5 ; return prosjek ; } } prosjek = ( float ) suma / i ; return prosjek ; } void najbolji ( struct student studenti [ ] , int velicina , double prosjek ) { double max = prosjek ; int i , j , maxi1 , maxi2 , maxi3 ; for ( j = 0 ; j < velicina ; j ++ ) { for ( i = 0 ; i < velicina ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > max ) { max = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; maxi1 = i ; } } printf ( ""%s %s\n"" , studenti [ maxi1 ] . ime , studenti [ maxi1 ] . prezime ) ; max = prosjek ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i != maxi1 && daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > max ) { max = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; maxi2 = i ; } } printf ( ""%s %s\n"" , studenti [ maxi2 ] . ime , studenti [ maxi2 ] . prezime ) ; max = prosjek ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i != maxi1 && i != maxi2 && daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > max ) { max = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; maxi3 = i ; } } printf ( ""%s %s"" , studenti [ maxi3 ] . ime , studenti [ maxi3 ] . prezime ) ; } } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j , izbacivanja = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { izbacivanja ++ ; for ( j = i ; j < velicina - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } velicina -- ; i -- ; } } return velicina ; } int main ( ) { return 0 ; }","#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double daj_prosjek ( int * ocjene , int br ) { double prosjek ; int suma = 0 , i ; if ( br == 0 ) { prosjek = 5 ; return prosjek ; } for ( i = 0 ; i < br ; i ++ ) { suma += ocjene [ i ] ; if ( ocjene [ i ] == 5 ) { prosjek = 5 ; return prosjek ; } } prosjek = ( float ) suma / i ; return prosjek ; } void najbolji ( struct student studenti [ ] , int velicina , double prosjek ) { double max = prosjek ; int i , j , maxi1 , maxi2 , maxi3 ; for ( j = 0 ; j < velicina ; j ++ ) { for ( i = 0 ; i < velicina ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > max ) { max = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; maxi1 = i ; } } printf ( ""%s %s\n"" , studenti [ maxi1 ] . ime , studenti [ maxi1 ] . prezime ) ; max = prosjek ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i != maxi1 && daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > max ) { max = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; maxi2 = i ; } } printf ( ""%s %s\n"" , studenti [ maxi2 ] . ime , studenti [ maxi2 ] . prezime ) ; max = prosjek ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i != maxi1 && i != maxi2 && daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > max ) { max = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; maxi3 = i ; } } printf ( ""%s %s"" , studenti [ maxi3 ] . ime , studenti [ maxi3 ] . prezime ) ; } } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j , izbacivanja = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { izbacivanja ++ ; for ( j = i ; j < velicina - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } velicina -- ; i -- ; } } return velicina ; } int main ( ) { return 0 ; }"
1267,98,98,0,38,A2016/Z1/Z3/student9949,A2016/Z1/Z3/student8540,"#include <stdio.h> #include <math.h> int main ( ) { char a ; int c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , uv = 0 ; float pc , pb , ps , pv , pp ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & a ) ; if ( a != 'c' && a != 'c' && a != 'b' && a != 'b' && a != 's' && a != 's' && a != 'v' && a != 'v' && a != 'p' && a != 'p' && a != 'k' && a != 'k' ) { printf ( ""neispravan unos\n"" ) ; } else if ( a == 'c' || a == 'c' || a == 'b' || a == 'b' || a == 's' || a == 's' || a == 'v' || a == 'v' || a == 'p' || a == 'p' ) { uv ++ ; } if ( a == 'c' || a == 'c' ) { c ++ ; } if ( a == 'b' || a == 'b' ) { b ++ ; } if ( a == 's' || a == 's' ) { s ++ ; } if ( a == 'v' || a == 'v' ) { v ++ ; } if ( a == 'p' || a == 'p' ) { p ++ ; } } while ( a != 'k' && a != 'k' ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , uv ) ; if ( uv != 0 ) { if ( c >= b && c >= s && c >= v && c >= p ) { pc = ( c * 100.0 / uv ) ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , pc ) ; } else if ( b >= c && b >= s && b >= v && b >= p ) { pb = ( b * 100.0 / uv ) ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pb ) ; } else if ( s >= c && s >= b && s >= v && s >= p ) { ps = ( s * 100.0 / uv ) ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , ps ) ; } else if ( v >= c && v >= b && v >= s && v >= p ) { pv = ( v * 100.0 / uv ) ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pv ) ; } else if ( p >= c && p >= b && p >= s && p >= v ) { pp = ( p * 100.0 / uv ) ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; } } else { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { char m ; int ca = 0 , ba = 0 , sa = 0 , pa = 0 , va = 0 , ubv = 0 ; float cb , bb , sb , pb , vb ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & m ) ; if ( m != 'c' && m != 'c' && m != 'b' && m != 'b' && m != 's' && m != 's' && m != 'p' && m != 'p' && m != 'k' && m != 'k' && m != 'v' && m != 'v' && m != '\n' ) { printf ( ""neispravan unos\n"" ) ; } else if ( m == 'c' || m == 'c' || m == 'b' || m == 'b' || m == 's' || m == 's' || m == 'p' || m == 'p' || m == 'v' || m == 'v' ) { ubv ++ ; } if ( m == 'c' || m == 'c' ) { ca ++ ; } if ( m == 'b' || m == 'b' ) { ba ++ ; } if ( m == 's' || m == 's' ) { sa ++ ; } if ( m == 'p' || m == 'p' ) { pa ++ ; } if ( m == 'v' || m == 'v' ) { va ++ ; } } while ( m != 'k' && m != 'k' ) ; printf ( ""ukupno evidentirano %d vozila. \n"" , ubv ) ; if ( ubv != 0 ) { if ( ca >= ba && ca >= sa && ca >= pa && ca >= va ) { cb = ( ca * 100.0 ) / ubv ; printf ( ""najpopularnija boja je crna (%.2f%)."" , cb ) ; } else if ( ba >= ca && ba >= sa && ba >= pa && ba >= va ) { bb = ( ba * 100.0 ) / ubv ; printf ( ""najpopularnija boja je bijela (%.2f%)."" , bb ) ; } else if ( sa >= ba && sa >= ca && sa >= pa && sa >= va ) { sb = ( sa * 100.0 ) / ubv ; printf ( ""najpopularnija boja je siva (%.2f%)."" , sb ) ; } else if ( pa >= ba && pa >= sa && pa >= ca && pa >= va ) { pb = ( pa * 100.0 ) / ubv ; printf ( ""najpopularnija boja je plava (%.2f%)."" , pb ) ; } else if ( va >= ba && va >= sa && va >= pa && va >= ca ) { vb = ( va * 100.0 ) / ubv ; printf ( ""najpopularnija boja je crvena (%.2f%)."" , vb ) ; } } else { printf ( ""najpopularnija boja je crna (0.00%)."" ) ; } return 0 ; }"
1273,86,86,0,18,A2016/Z2/Z1/student5533,A2016/Z2/Z1/student7085,"#include <stdio.h> #include <math.h> #include <stdlib.h> int main ( ) { int c1 , c2 , n , suma = 0 , k = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; c1 = n % 10 ; n /= 10 ; while ( n ) { c2 = n % 10 ; suma += ( abs ( c1 - c2 ) ) * k ; k *= 10 ; c1 = c2 ; n /= 10 ; } printf ( ""%d"" , suma ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { int a , c1 , c2 , suma = 0 , k = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & a ) ; c1 = a % 10 ; a /= 10 ; while ( a != 0 ) { c2 = a % 10 ; suma += fabs ( ( c1 - c2 ) ) * k ; k *= 10 ; c1 = c2 ; a /= 10 ; } printf ( ""%d"" , suma ) ; return 0 ; }"
1277,3,3,0,4,A2016/Z5/Z2/student7392,A2016/Z5/Z2/student6723,"#include <stdio.h> #include <stdlib.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( znak == ' ' ) znak = getchar ( ) ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void zamjeni ( char * rijec1 , char * rijec2 ) { int i ; char temp ; for ( i = 0 ; i < 11 ; i ++ ) { temp = rijec1 [ i ] ; rijec1 [ i ] = rijec2 [ i ] ; rijec2 [ i ] = temp ; } } void kompresuj ( char * imeulazne , char * imeizlazne ) { file * ulaz = fopen ( imeulazne , ""r"" ) ; if ( ulaz == null ) return ; file * izlaz = fopen ( imeizlazne , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return ; } int i ; int brojrazl = 0 ; char rijeci [ 1000 ] [ 11 ] ; int koliko [ 1000 ] ; for ( i = 0 ; i < 1000 ; i ++ ) { rijeci [ i ] [ 0 ] = '\0' ; koliko [ i ] = 0 ; } char rijec [ 1000 ] ; int c ; int j ; int duzina = 0 ; int tempint ; do { c = fgetc ( ulaz ) ; if ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) { if ( duzina > 9 ) { duzina ++ ; } else { rijec [ duzina ] = c ; duzina ++ ; rijec [ duzina ] = '\0' ; } } else { if ( duzina > 1 && duzina < 10 ) { for ( i = 0 ; i < brojrazl ; i ++ ) { if ( strcmp ( rijec , rijeci [ i ] ) == 0 ) { koliko [ i ] ++ ; break ; } } if ( i == brojrazl ) { strcpy ( rijeci [ i ] , rijec ) ; koliko [ i ] = 1 ; brojrazl ++ ; } } duzina = 0 ; rijec [ 0 ] = '\0' ; } } while ( c != eof ) ; for ( i = 0 ; i < brojrazl ; i ++ ) { for ( j = i ; j < brojrazl ; j ++ ) { if ( koliko [ i ] < koliko [ j ] ) { tempint = koliko [ i ] ; koliko [ i ] = koliko [ j ] ; koliko [ j ] = tempint ; zamjeni ( rijeci [ i ] , rijeci [ j ] ) ; } else if ( koliko [ i ] == koliko [ j ] ) { if ( strcmp ( rijeci [ i ] , rijeci [ j ] ) > 0 ) { tempint = koliko [ i ] ; koliko [ i ] = koliko [ j ] ; koliko [ j ] = tempint ; zamjeni ( rijeci [ i ] , rijeci [ j ] ) ; } } } } for ( i = 0 ; i < brojrazl ; i ++ ) { if ( i < 10 ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } if ( brojrazl < 10 ) fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; duzina = 0 ; rijec [ 0 ] = '\0' ; ulaz = fopen ( imeulazne , ""r"" ) ; do { c = fgetc ( ulaz ) ; if ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) { if ( duzina > 9 ) { duzina ++ ; fprintf ( izlaz , ""%c"" , c ) ; } else { rijec [ duzina ] = c ; duzina ++ ; rijec [ duzina ] = '\0' ; if ( duzina == 10 ) fprintf ( izlaz , ""%s"" , rijec ) ; } } else { if ( duzina < 10 ) { for ( i = 0 ; i < brojrazl ; i ++ ) { if ( i < 10 && strcmp ( rijec , rijeci [ i ] ) == 0 ) { fprintf ( izlaz , ""%c"" , 20 + i ) ; break ; } } if ( i == brojrazl ) { fprintf ( izlaz , ""%s"" , rijec ) ; } } if ( c != eof ) fprintf ( izlaz , ""%c"" , c ) ; duzina = 0 ; rijec [ 0 ] = '\0' ; } } while ( c != eof ) ; printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; } void dekompresuj ( char * imeulazne , char * imeizlazne ) { file * ulaz = fopen ( imeulazne , ""r"" ) ; if ( ulaz == null ) return ; file * izlaz = fopen ( imeizlazne , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return ; } char top [ 10 ] [ 10 ] ; int c ; int duzina = 0 ; int brojac = 0 ; do { c = fgetc ( ulaz ) ; if ( c == eof ) break ; if ( c != '\n' ) { top [ brojac ] [ duzina ] = c ; duzina ++ ; } else { if ( duzina == 0 ) { break ; } top [ brojac ] [ duzina ] = '\0' ; brojac ++ ; if ( brojac == 10 ) break ; duzina = 0 ; } } while ( c != eof ) ; do { c = fgetc ( ulaz ) ; if ( c == eof ) break ; if ( c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , top [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%c"" , c ) ; } } while ( c != eof ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; } int main ( ) { int a ; char datoteka1 [ 500 ] = ""gg"" ; char datoteka2 [ 500 ] = ""izlaz.txt"" ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & a ) ; if ( a == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( datoteka1 , 500 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( datoteka2 , 500 ) ; kompresuj ( datoteka1 , datoteka2 ) ; } if ( a == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( datoteka1 , 500 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( datoteka2 , 500 ) ; dekompresuj ( datoteka1 , datoteka2 ) ; } } while ( a ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }"
1280,97,97,0,32,A2016/Z2/Z1/student6824,A2016/Z2/Z1/student5899,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int broj , nbroj = 0 , cifra1 , cifra2 , raz , i = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; broj = abs ( broj ) ; if ( broj < 10 ) { nbroj = 0 ; printf ( ""%d"" , nbroj ) ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; if ( broj != 0 ) { cifra2 = broj % 10 ; raz = abs ( cifra2 - cifra1 ) ; nbroj += raz * pow ( 10 , i ) ; i ++ ; } } while ( broj != 0 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int broj , nbroj = 0 , cifra1 , cifra2 , raz , i = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; broj = abs ( broj ) ; if ( broj < 10 ) { nbroj = 0 ; printf ( ""%d"" , nbroj ) ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; if ( broj != 0 ) { cifra2 = broj % 10 ; raz = abs ( cifra2 - cifra1 ) ; nbroj += raz * pow ( 10 , i ) ; i ++ ; } } while ( broj != 0 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
1283,99,99,0,75,A2016/Z5/Z1/student2717,A2016/Z5/Z1/student8043,"#include <stdio.h> #include <math.h> #include <stdlib.h> #include <string.h> #define e 0.01 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek_studenta ( int studenti [ ] , int velicina ) { int i , suma = 0 ; float prosjek ; for ( i = 0 ; i < velicina ; i ++ ) { if ( studenti [ i ] == 5 || velicina == 0 ) { return 5.00 ; } suma = suma + studenti [ i ] ; } prosjek = ( float ) suma / velicina ; return prosjek ; } int genijalci ( struct student studenti [ ] , int velicina , double zadani_prosjek ) { int i , j , brojac = 0 ; struct student tmp ; for ( i = 0 ; i < velicina ; i ++ ) { if ( zadani_prosjek > prosjek_studenta ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) { for ( j = i ; j < velicina - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } velicina -- ; i -- ; } } for ( i = 0 ; i < velicina ; ++ i ) { for ( j = i + 1 ; j < velicina ; ++ j ) { if ( fabs ( prosjek_studenta ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) - prosjek_studenta ( studenti [ j ] . ocjene , studenti [ j ] . br_ocjena ) ) < e ) { if ( strcmp ( studenti [ i ] . prezime , studenti [ j ] . prezime ) > 0 ) { tmp = studenti [ i ] ; studenti [ i ] = studenti [ j ] ; studenti [ j ] = tmp ; } if ( strcmp ( studenti [ i ] . ime , studenti [ j ] . ime ) > 0 ) { tmp = studenti [ i ] ; studenti [ i ] = studenti [ j ] ; studenti [ j ] = tmp ; } } if ( prosjek_studenta ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek_studenta ( studenti [ j ] . ocjene , studenti [ j ] . br_ocjena ) ) { tmp = studenti [ i ] ; studenti [ i ] = studenti [ j ] ; studenti [ j ] = tmp ; } } } i = 0 ; printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; printf ( ""%s %s\n"" , studenti [ i + 1 ] . prezime , studenti [ i + 1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ i + 2 ] . prezime , studenti [ i + 2 ] . ime ) ; return velicina ; } int main ( ) { return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #include <string.h> #define e 0.01 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek_studenta ( int studenti [ ] , int velicina ) { int i , suma = 0 ; float prosjek ; for ( i = 0 ; i < velicina ; i ++ ) { if ( studenti [ i ] == 5 || velicina == 0 ) { return 5.00 ; } suma = suma + studenti [ i ] ; } prosjek = ( float ) suma / velicina ; return prosjek ; } int genijalci ( struct student studenti [ ] , int velicina , double zadani_prosjek ) { int i , j , brojac = 0 ; struct student tmp ; for ( i = 0 ; i < velicina ; i ++ ) { if ( zadani_prosjek > prosjek_studenta ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) { for ( j = i ; j < velicina - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } velicina -- ; i -- ; } } for ( i = 0 ; i < velicina ; ++ i ) { for ( j = i + 1 ; j < velicina ; ++ j ) { if ( fabs ( prosjek_studenta ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) - prosjek_studenta ( studenti [ j ] . ocjene , studenti [ j ] . br_ocjena ) ) < e ) { if ( strcmp ( studenti [ i ] . prezime , studenti [ j ] . prezime ) > 0 ) { tmp = studenti [ i ] ; studenti [ i ] = studenti [ j ] ; studenti [ j ] = tmp ; } if ( strcmp ( studenti [ i ] . ime , studenti [ j ] . ime ) > 0 ) { tmp = studenti [ i ] ; studenti [ i ] = studenti [ j ] ; studenti [ j ] = tmp ; } } if ( prosjek_studenta ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek_studenta ( studenti [ j ] . ocjene , studenti [ j ] . br_ocjena ) ) { tmp = studenti [ i ] ; studenti [ i ] = studenti [ j ] ; studenti [ j ] = tmp ; } } } i = 0 ; printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; printf ( ""%s %s\n"" , studenti [ i + 1 ] . prezime , studenti [ i + 1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ i + 2 ] . prezime , studenti [ i + 2 ] . ime ) ; return velicina ; } int main ( ) { return 0 ; }"
1288,98,98,0,146,A2016/Z2/Z2/student2111,A2016/Z2/Z2/student7165,"#include <stdio.h> #define pi 3.1415926 #include <math.h> int main ( ) { int minute , sekunde , stepeni ; float minute_racun ; float sekunde_racun ; float niz [ 500 ] ; int broj_uglova ; int i , j ; float uglovi_u_radijanima ; float ukupno_stepeni ; float sekunde_zaokruzivanje ; int ostatak_sekunde ; int ostatak ; int cijeli_dio ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & broj_uglova ) ; printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < broj_uglova ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } for ( i = 0 ; i < broj_uglova ; i ++ ) { uglovi_u_radijanima = niz [ i ] ; ukupno_stepeni = uglovi_u_radijanima * 180 / pi ; stepeni = ( int ) ukupno_stepeni ; minute_racun = ( ukupno_stepeni - stepeni ) * 60 ; minute = ( int ) minute_racun ; sekunde_racun = ( minute_racun - minute ) * 60 ; sekunde = ( int ) sekunde_racun ; sekunde_zaokruzivanje = sekunde_racun - sekunde ; sekunde_zaokruzivanje = sekunde_zaokruzivanje * 100 ; ostatak_sekunde = sekunde_zaokruzivanje ; cijeli_dio = ostatak_sekunde / 10 ; ostatak = ostatak_sekunde % 10 ; if ( fabs ( sekunde_racun - sekunde ) >= 0.5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } else if ( cijeli_dio == 4 && ostatak >= 5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } if ( sekunde <= - 60 ) { sekunde = sekunde + 60 ; minute = minute - 1 ; } if ( minute <= - 60 ) { minute = minute + 60 ; stepeni = stepeni - 1 ; } if ( sekunde >= 60 ) { sekunde = sekunde - 60 ; minute = minute + 1 ; } if ( minute >= 60 ) { minute = minute - 60 ; stepeni = stepeni + 1 ; } if ( ( sekunde > 30 || sekunde < - 30 ) ) { for ( j = i ; j < broj_uglova - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } broj_uglova -- ; i -- ; } } for ( i = 0 ; i < broj_uglova ; i ++ ) { uglovi_u_radijanima = niz [ i ] ; ukupno_stepeni = uglovi_u_radijanima * 180 / pi ; stepeni = ( int ) ukupno_stepeni ; minute_racun = ( ukupno_stepeni - stepeni ) * 60 ; minute = ( int ) minute_racun ; sekunde_racun = ( minute_racun - minute ) * 60 ; sekunde = ( int ) sekunde_racun ; sekunde_zaokruzivanje = sekunde_racun - sekunde ; sekunde_zaokruzivanje = sekunde_zaokruzivanje * 100 ; ostatak_sekunde = sekunde_zaokruzivanje ; cijeli_dio = ostatak_sekunde / 10 ; ostatak = ostatak_sekunde % 10 ; if ( fabs ( sekunde_racun - sekunde ) >= 0.5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } else if ( cijeli_dio == 4 && ostatak >= 5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } if ( sekunde <= - 60 ) { sekunde = sekunde + 60 ; minute = minute - 1 ; } if ( minute <= - 60 ) { minute = minute + 60 ; stepeni = stepeni - 1 ; } if ( sekunde >= 60 ) { sekunde = sekunde - 60 ; minute = minute + 1 ; } if ( minute >= 60 ) { minute = minute - 60 ; stepeni = stepeni + 1 ; } if ( sekunde < 0 ) { sekunde = 0 - sekunde ; } if ( minute < 0 ) { minute = 0 - minute ; } printf ( ""%d stepeni %d minuta %d sekundi \n"" , stepeni , minute , sekunde ) ; } return 0 ; }","#include <stdio.h> #define pi 3.1415926 #include <math.h> int main ( ) { int minute , sekunde , stepeni ; float minute_racun ; float sekunde_racun ; float niz [ 500 ] ; int broj_uglova ; int i , j ; float uglovi_u_radijanima ; float ukupno_stepeni ; float sekunde_zaokruzivanje ; int ostatak_sekunde ; int ostatak ; int cijeli_dio ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & broj_uglova ) ; printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < broj_uglova ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } for ( i = 0 ; i < broj_uglova ; i ++ ) { uglovi_u_radijanima = niz [ i ] ; ukupno_stepeni = uglovi_u_radijanima * 180 / pi ; stepeni = ( int ) ukupno_stepeni ; minute_racun = ( ukupno_stepeni - stepeni ) * 60 ; minute = ( int ) minute_racun ; sekunde_racun = ( minute_racun - minute ) * 60 ; sekunde = ( int ) sekunde_racun ; sekunde_zaokruzivanje = sekunde_racun - sekunde ; sekunde_zaokruzivanje = sekunde_zaokruzivanje * 100 ; ostatak_sekunde = sekunde_zaokruzivanje ; cijeli_dio = ostatak_sekunde / 10 ; ostatak = ostatak_sekunde % 10 ; if ( fabs ( sekunde_racun - sekunde ) >= 0.5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } else if ( cijeli_dio == 4 && ostatak >= 5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } if ( sekunde <= - 60 ) { sekunde = sekunde + 60 ; minute = minute - 1 ; } if ( minute <= - 60 ) { minute = minute + 60 ; stepeni = stepeni - 1 ; } if ( sekunde >= 60 ) { sekunde = sekunde - 60 ; minute = minute + 1 ; } if ( minute >= 60 ) { minute = minute - 60 ; stepeni = stepeni + 1 ; } if ( ( sekunde > 30 || sekunde < - 30 ) ) { for ( j = i ; j < broj_uglova - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } broj_uglova -- ; i -- ; } } for ( i = 0 ; i < broj_uglova ; i ++ ) { uglovi_u_radijanima = niz [ i ] ; ukupno_stepeni = uglovi_u_radijanima * 180 / pi ; stepeni = ( int ) ukupno_stepeni ; minute_racun = ( ukupno_stepeni - stepeni ) * 60 ; minute = ( int ) minute_racun ; sekunde_racun = ( minute_racun - minute ) * 60 ; sekunde = ( int ) sekunde_racun ; sekunde_zaokruzivanje = sekunde_racun - sekunde ; sekunde_zaokruzivanje = sekunde_zaokruzivanje * 100 ; ostatak_sekunde = sekunde_zaokruzivanje ; cijeli_dio = ostatak_sekunde / 10 ; ostatak = ostatak_sekunde % 10 ; if ( fabs ( sekunde_racun - sekunde ) >= 0.5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } else if ( cijeli_dio == 4 && ostatak >= 5 ) { if ( sekunde >= 0 ) { sekunde = sekunde + 1 ; } else if ( sekunde < 0 ) { sekunde = sekunde - 1 ; } } if ( sekunde <= - 60 ) { sekunde = sekunde + 60 ; minute = minute - 1 ; } if ( minute <= - 60 ) { minute = minute + 60 ; stepeni = stepeni - 1 ; } if ( sekunde >= 60 ) { sekunde = sekunde - 60 ; minute = minute + 1 ; } if ( minute >= 60 ) { minute = minute - 60 ; stepeni = stepeni + 1 ; } if ( sekunde < 0 ) { sekunde = 0 - sekunde ; } if ( minute < 0 ) { minute = 0 - minute ; } printf ( ""%d stepeni %d minuta %d sekundi \n"" , stepeni , minute , sekunde ) ; } return 0 ; }"
1293,99,99,0,222,A2016/Z5/Z1/student6824,A2016/Z5/Z1/student5899,"#include <stdio.h> #include <stdlib.h> #include <math.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student { char ime [ 20 ] ; char prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( struct student student1 , struct student student2 ) { char * p1 = student1 . prezime , * p2 = student2 . prezime ; char * i1 = student1 . ime , * i2 = student2 . ime ; while ( * p1 != '\0' && * p2 != '\0' ) { if ( * p1 < * p2 ) return 0 ; else if ( * p1 > * p2 ) return 1 ; p1 ++ ; p2 ++ ; } if ( * p1 == 0 && * p2 == 0 ) { while ( ( * i1 != 0 && * i2 != 0 ) ) { if ( * i1 < * i2 ) return 0 ; else if ( * i1 > * i2 ) return 1 ; i1 ++ ; i2 ++ ; } if ( * i1 != 0 ) return 1 ; else if ( * i2 != 0 ) return 0 ; } else if ( * p1 != '\0' ) return 1 ; else if ( * p2 != '\0' ) return 0 ; return 0 ; } int genijalci ( struct student niz [ ] , int vel , float prosjek_2 ) { int i , j ; float prosjek1 ; for ( i = 0 ; i < vel ; i ++ ) { prosjek1 = 0 ; int suma = 0 , rendom = 0 ; for ( j = 0 ; j < niz [ i ] . br_ocjena ; j ++ ) { prosjek1 = 0 ; if ( niz [ i ] . ocjene [ j ] == 5 ) { rendom = 1 ; } suma += niz [ i ] . ocjene [ j ] ; } if ( rendom == 1 || niz [ i ] . br_ocjena == 0 ) { prosjek1 = 5.00 ; } else { prosjek1 = ( float ) suma / niz [ i ] . br_ocjena ; } if ( prosjek1 < prosjek_2 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } float nizp [ 100 ] ; float max = 0 ; for ( i = 0 ; i < vel ; i ++ ) { prosjek1 = 0 ; int suma = 0 , rendom = 0 ; for ( j = 0 ; j < niz [ i ] . br_ocjena ; j ++ ) { if ( niz [ i ] . ocjene [ j ] == 5 ) { rendom = 1 ; } suma += niz [ i ] . ocjene [ j ] ; } if ( rendom == 1 || niz [ i ] . br_ocjena == 0 ) { prosjek1 = 5.00 ; } else { prosjek1 = ( float ) suma / niz [ i ] . br_ocjena ; } nizp [ i ] = prosjek1 ; } int zapamti = 0 , brojac = 0 , maxindeks1 = 0 , maxindeks2 = 0 , maxindeks3 = 0 ; while ( brojac < 3 && brojac < vel ) { for ( i = 0 ; i < vel ; i ++ ) { if ( nizp [ i ] > max ) { max = nizp [ i ] ; zapamti = i ; } } brojac ++ ; if ( brojac == 1 ) maxindeks1 = zapamti ; else if ( brojac == 2 ) maxindeks2 = zapamti ; else if ( brojac == 3 ) maxindeks3 = zapamti ; nizp [ zapamti ] = - 1. ; int dupli = 0 , zapamti2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( fabs ( nizp [ i ] - max ) < 0.00001 ) { dupli = 1 ; zapamti2 = i ; } } if ( dupli == 1 ) { if ( uporedi ( niz [ zapamti ] , niz [ zapamti2 ] ) == 0 ) { if ( brojac == 1 ) maxindeks1 = zapamti ; else if ( brojac == 2 ) maxindeks2 = zapamti ; else if ( brojac == 3 ) maxindeks3 = zapamti ; brojac ++ ; if ( brojac == 1 ) maxindeks1 = zapamti2 ; else if ( brojac == 2 ) maxindeks2 = zapamti2 ; else if ( brojac == 3 ) maxindeks3 = zapamti2 ; } else if ( uporedi ( niz [ zapamti ] , niz [ zapamti2 ] ) == 1 ) { if ( brojac == 1 ) maxindeks1 = zapamti2 ; else if ( brojac == 2 ) maxindeks2 = zapamti2 ; else if ( brojac == 3 ) maxindeks3 = zapamti2 ; brojac ++ ; if ( brojac == 1 ) maxindeks1 = zapamti ; else if ( brojac == 2 ) maxindeks2 = zapamti ; else if ( brojac == 3 ) maxindeks3 = zapamti ; } nizp [ zapamti2 ] = - 1. ; dupli = 0 ; } max = 0 ; } printf ( ""%s %s\n"" , niz [ maxindeks1 ] . prezime , niz [ maxindeks1 ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxindeks2 ] . prezime , niz [ maxindeks2 ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxindeks3 ] . prezime , niz [ maxindeks3 ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student { char ime [ 20 ] ; char prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( struct student student1 , struct student student2 ) { char * p1 = student1 . prezime , * p2 = student2 . prezime ; char * i1 = student1 . ime , * i2 = student2 . ime ; while ( * p1 != '\0' && * p2 != '\0' ) { if ( * p1 < * p2 ) return 0 ; else if ( * p1 > * p2 ) return 1 ; p1 ++ ; p2 ++ ; } if ( * p1 == 0 && * p2 == 0 ) { while ( ( * i1 != 0 && * i2 != 0 ) ) { if ( * i1 < * i2 ) return 0 ; else if ( * i1 > * i2 ) return 1 ; i1 ++ ; i2 ++ ; } if ( * i1 != 0 ) return 1 ; else if ( * i2 != 0 ) return 0 ; } else if ( * p1 != '\0' ) return 1 ; else if ( * p2 != '\0' ) return 0 ; return 0 ; } int genijalci ( struct student niz [ ] , int vel , float prosjek_2 ) { int i , j ; float prosjek1 ; for ( i = 0 ; i < vel ; i ++ ) { prosjek1 = 0 ; int suma = 0 , rendom = 0 ; for ( j = 0 ; j < niz [ i ] . br_ocjena ; j ++ ) { prosjek1 = 0 ; if ( niz [ i ] . ocjene [ j ] == 5 ) { rendom = 1 ; } suma += niz [ i ] . ocjene [ j ] ; } if ( rendom == 1 || niz [ i ] . br_ocjena == 0 ) { prosjek1 = 5.00 ; } else { prosjek1 = ( float ) suma / niz [ i ] . br_ocjena ; } if ( prosjek1 < prosjek_2 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } float nizp [ 100 ] ; float max = 0 ; for ( i = 0 ; i < vel ; i ++ ) { prosjek1 = 0 ; int suma = 0 , rendom = 0 ; for ( j = 0 ; j < niz [ i ] . br_ocjena ; j ++ ) { if ( niz [ i ] . ocjene [ j ] == 5 ) { rendom = 1 ; } suma += niz [ i ] . ocjene [ j ] ; } if ( rendom == 1 || niz [ i ] . br_ocjena == 0 ) { prosjek1 = 5.00 ; } else { prosjek1 = ( float ) suma / niz [ i ] . br_ocjena ; } nizp [ i ] = prosjek1 ; } int zapamti = 0 , brojac = 0 , maxindeks1 = 0 , maxindeks2 = 0 , maxindeks3 = 0 ; while ( brojac < 3 && brojac < vel ) { for ( i = 0 ; i < vel ; i ++ ) { if ( nizp [ i ] > max ) { max = nizp [ i ] ; zapamti = i ; } } brojac ++ ; if ( brojac == 1 ) maxindeks1 = zapamti ; else if ( brojac == 2 ) maxindeks2 = zapamti ; else if ( brojac == 3 ) maxindeks3 = zapamti ; nizp [ zapamti ] = - 1. ; int dupli = 0 , zapamti2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( fabs ( nizp [ i ] - max ) < 0.00001 ) { dupli = 1 ; zapamti2 = i ; } } if ( dupli == 1 ) { if ( uporedi ( niz [ zapamti ] , niz [ zapamti2 ] ) == 0 ) { if ( brojac == 1 ) maxindeks1 = zapamti ; else if ( brojac == 2 ) maxindeks2 = zapamti ; else if ( brojac == 3 ) maxindeks3 = zapamti ; brojac ++ ; if ( brojac == 1 ) maxindeks1 = zapamti2 ; else if ( brojac == 2 ) maxindeks2 = zapamti2 ; else if ( brojac == 3 ) maxindeks3 = zapamti2 ; } else if ( uporedi ( niz [ zapamti ] , niz [ zapamti2 ] ) == 1 ) { if ( brojac == 1 ) maxindeks1 = zapamti2 ; else if ( brojac == 2 ) maxindeks2 = zapamti2 ; else if ( brojac == 3 ) maxindeks3 = zapamti2 ; brojac ++ ; if ( brojac == 1 ) maxindeks1 = zapamti ; else if ( brojac == 2 ) maxindeks2 = zapamti ; else if ( brojac == 3 ) maxindeks3 = zapamti ; } nizp [ zapamti2 ] = - 1. ; dupli = 0 ; } max = 0 ; } printf ( ""%s %s\n"" , niz [ maxindeks1 ] . prezime , niz [ maxindeks1 ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxindeks2 ] . prezime , niz [ maxindeks2 ] . ime ) ; printf ( ""%s %s\n"" , niz [ maxindeks3 ] . prezime , niz [ maxindeks3 ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }"
1297,98,98,0,57,A2016/Z1/Z3/student5744,A2016/Z1/Z3/student2675,"#include <stdio.h> int main ( ) { int c = 0 , i , b = 0 , s = 0 , v = 0 , p = 0 ; float x ; char a ; printf ( ""unesite vozila: "" ) ; for ( i = 0 ; ; i ++ ) { scanf ( ""%c"" , & a ) ; if ( a == 'c' || a == 'c' ) { c ++ ; } else if ( a == 'b' || a == 'b' ) { b ++ ; } else if ( a == 's' || a == 's' ) { s ++ ; } else if ( a == 'v' || a == 'v' ) { v ++ ; } else if ( a == 'p' || a == 'p' ) { p ++ ; } else if ( a == 'k' || a == 'k' ) { break ; } else { printf ( ""neispravan unos\n"" ) ; i -- ; } } printf ( ""ukupno evidentirano %d vozila.\n"" , i ) ; if ( i == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" , x ) ; } else if ( c >= b && c >= s && c >= v && c >= p ) { x = ( c * 100. ) / i ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , x ) ; } else if ( b >= s && b >= v && b >= p ) { x = ( b * 100. ) / i ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , x ) ; } else if ( s >= v && s >= p ) { x = ( s * 100. ) / i ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , x ) ; } else if ( v >= p ) { x = ( v * 100. ) / i ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , x ) ; } else { x = ( p * 100. ) / i ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , x ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c = 0 , i , b = 0 , s = 0 , v = 0 , p = 0 ; float x ; char a ; printf ( ""unesite vozila: "" ) ; for ( i = 0 ; ; i ++ ) { scanf ( ""%c"" , & a ) ; if ( a == 'c' || a == 'c' ) { c ++ ; } else if ( a == 'b' || a == 'b' ) { b ++ ; } else if ( a == 's' || a == 's' ) { s ++ ; } else if ( a == 'v' || a == 'v' ) { v ++ ; } else if ( a == 'p' || a == 'p' ) { p ++ ; } else if ( a == 'k' || a == 'k' ) { break ; } else { printf ( ""neispravan unos\n"" ) ; i -- ; } } printf ( ""ukupno evidentirano %d vozila.\n"" , i ) ; if ( i == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" , x ) ; } else if ( c >= b && c >= s && c >= v && c >= p ) { x = ( c * 100. ) / i ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , x ) ; } else if ( b >= s && b >= v && b >= p ) { x = ( b * 100. ) / i ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , x ) ; } else if ( s >= v && s >= p ) { x = ( s * 100. ) / i ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , x ) ; } else if ( v >= p ) { x = ( v * 100. ) / i ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , x ) ; } else { x = ( p * 100. ) / i ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , x ) ; } return 0 ; }"
1299,98,98,0,32,A2016/Z2/Z3/student8794,A2016/Z2/Z3/student4415,"#include <stdio.h> int main ( ) { int a , b = 22 , c = 22 , i , j , nizi [ 20 ] , nizj [ 20 ] , k = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & a ) ; if ( a <= 0 || a > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( a <= 0 || a > 10 ) ; for ( i = 0 ; i < a ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & nizj [ i ] , & nizi [ i ] ) ; if ( nizj [ i ] < 0 || nizj [ i ] > 19 || nizi [ i ] < 0 || nizi [ i ] > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < a ; k ++ ) { if ( i == nizi [ k ] && j == nizj [ k ] ) { printf ( ""*"" ) ; b = nizi [ k ] ; c = nizj [ k ] ; break ; } } if ( i == b && j == c ) { continue ; } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int a , b = 22 , c = 22 , i , j , nizi [ 20 ] , nizj [ 20 ] , k = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & a ) ; if ( a <= 0 || a > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( a <= 0 || a > 10 ) ; for ( i = 0 ; i < a ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & nizj [ i ] , & nizi [ i ] ) ; if ( nizj [ i ] < 0 || nizj [ i ] > 19 || nizi [ i ] < 0 || nizi [ i ] > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < a ; k ++ ) { if ( i == nizi [ k ] && j == nizj [ k ] ) { printf ( ""*"" ) ; b = nizi [ k ] ; c = nizj [ k ] ; break ; } } if ( i == b && j == c ) { continue ; } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1306,99,99,0,176,A2016/Z4/Z1/student7125,A2016/Z4/Z1/student2254,"#include <stdio.h> int trazi_rijec ( char * s1 , char * s2 ) ; char * izbaci_najcescu ( char * s ) ; int duz_string ( char * s ) ; void unesi ( char niz [ ] , int velicina ) ; int main ( ) { char k [ ] = ""ayyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy l"" ; printf ( ""'%s'"" , izbaci_najcescu ( k ) ) ; return 0 ; } int trazi_rijec ( char * s1 , char * s2 ) { int u = 0 ; while ( * s1 != '\0' ) { while ( * s1 == ' ' ) s1 ++ ; char * p = s1 ; char * q = s2 ; while ( ( ( * p == * q ) && ( * p != 0 ) ) || ( * p + 32 == * q && * p != 0 ) || ( * p - 32 == * q && * p != 0 ) ) { p ++ ; q ++ ; if ( * q == '\0' && ( * p == ' ' || * p == '\0' ) ) { u ++ ; q = s2 ; } } while ( * s1 != ' ' && * s1 != '\0' ) s1 ++ ; } return u ; } int duz_string ( char * s ) { char * p = s ; int duz = 0 ; while ( * p != 0 ) { p ++ ; duz ++ ; } return duz ; } void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { char rijec [ 100000 ] , nova_recenica [ 100000 ] , naj_pon_rijec [ 100000 ] , rijec2 [ 100000 ] ; char * d = naj_pon_rijec , * q = rijec , * f = nova_recenica , * p = s , * k = s , * q2 = rijec2 ; int br_pon [ 100000 ] , i = 0 , j = 0 , nemaslovo = 1 , samoslovo = 1 ; while ( * p != 0 ) { if ( ! ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) samoslovo = 0 ; p ++ ; } p = s ; if ( samoslovo ) * p = '\0' ; while ( * p != 0 ) { if ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) nemaslovo = 0 ; p ++ ; } if ( i == 50000 ) i = 1 ; if ( nemaslovo ) return s ; p = s ; while ( * p != 0 ) { while ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) { * q ++ = * p ++ ; } * q = '\0' ; while ( ! ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && * p != 0 ) p ++ ; q = rijec ; br_pon [ i ] = trazi_rijec ( s , rijec ) ; if ( i == 0 ) { while ( * q != 0 ) * d ++ = * q ++ ; * d = '\0' ; } d = naj_pon_rijec ; if ( i != 0 ) { if ( br_pon [ j ] < br_pon [ i ] ) { while ( * q != 0 ) * d ++ = * q ++ ; * d = '\0' ; j = i ; } } d = naj_pon_rijec ; i ++ ; } p = s ; while ( * p != 0 ) { q = rijec ; while ( ! ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && * p != 0 ) { * q2 ++ = * p ++ ; } * q2 = '\0' ; q2 = rijec2 ; while ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) { * q ++ = * p ++ ; } * q = '\0' ; q = rijec ; while ( * q2 != 0 ) * f ++ = * q2 ++ ; q2 = rijec2 ; if ( trazi_rijec ( rijec , naj_pon_rijec ) == 0 ) { while ( * q != 0 ) { * f ++ = * q ++ ; } q = rijec2 ; } } k = s ; * f = '\0' ; f = nova_recenica ; while ( * f != 0 ) { * k ++ = * f ++ ; } * k = '\0' ; return s ; }","#include <stdio.h> int trazi_rijec ( char * s1 , char * s2 ) ; char * izbaci_najcescu ( char * s ) ; int duz_string ( char * s ) ; void unesi ( char niz [ ] , int velicina ) ; int main ( ) { char k [ ] = ""ayyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy l"" ; printf ( ""'%s'"" , izbaci_najcescu ( k ) ) ; return 0 ; } int trazi_rijec ( char * s1 , char * s2 ) { int u = 0 ; while ( * s1 != '\0' ) { while ( * s1 == ' ' ) s1 ++ ; char * p = s1 ; char * q = s2 ; while ( ( ( * p == * q ) && ( * p != 0 ) ) || ( * p + 32 == * q && * p != 0 ) || ( * p - 32 == * q && * p != 0 ) ) { p ++ ; q ++ ; if ( * q == '\0' && ( * p == ' ' || * p == '\0' ) ) { u ++ ; q = s2 ; } } while ( * s1 != ' ' && * s1 != '\0' ) s1 ++ ; } return u ; } int duz_string ( char * s ) { char * p = s ; int duz = 0 ; while ( * p != 0 ) { p ++ ; duz ++ ; } return duz ; } void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { char rijec [ 100000 ] , nova_recenica [ 100000 ] , naj_pon_rijec [ 100000 ] , rijec2 [ 100000 ] ; char * d = naj_pon_rijec , * q = rijec , * f = nova_recenica , * p = s , * k = s , * q2 = rijec2 ; int br_pon [ 100000 ] , i = 0 , j = 0 , nemaslovo = 1 , samoslovo = 1 ; while ( * p != 0 ) { if ( ! ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) samoslovo = 0 ; p ++ ; } p = s ; if ( samoslovo ) * p = '\0' ; while ( * p != 0 ) { if ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) nemaslovo = 0 ; p ++ ; } if ( i == 50000 ) i = 1 ; if ( nemaslovo ) return s ; p = s ; while ( * p != 0 ) { while ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) { * q ++ = * p ++ ; } * q = '\0' ; while ( ! ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && * p != 0 ) p ++ ; q = rijec ; br_pon [ i ] = trazi_rijec ( s , rijec ) ; if ( i == 0 ) { while ( * q != 0 ) * d ++ = * q ++ ; * d = '\0' ; } d = naj_pon_rijec ; if ( i != 0 ) { if ( br_pon [ j ] < br_pon [ i ] ) { while ( * q != 0 ) * d ++ = * q ++ ; * d = '\0' ; j = i ; } } d = naj_pon_rijec ; i ++ ; } p = s ; while ( * p != 0 ) { q = rijec ; while ( ! ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) && * p != 0 ) { * q2 ++ = * p ++ ; } * q2 = '\0' ; q2 = rijec2 ; while ( ( * p >= 'a' && * p <= 'z' ) || ( * p >= 'a' && * p <= 'z' ) ) { * q ++ = * p ++ ; } * q = '\0' ; q = rijec ; while ( * q2 != 0 ) * f ++ = * q2 ++ ; q2 = rijec2 ; if ( trazi_rijec ( rijec , naj_pon_rijec ) == 0 ) { while ( * q != 0 ) { * f ++ = * q ++ ; } q = rijec2 ; } } k = s ; * f = '\0' ; f = nova_recenica ; while ( * f != 0 ) { * k ++ = * f ++ ; } * k = '\0' ; return s ; }"
1311,66,66,0,39,A2016/Z1/Z3/student1110,A2016/Z1/Z3/student9601,"#include <stdio.h> int main ( ) { char c ; int x = 0 , i ; float c = 0 , b = 0 , s = 0 , v = 0 , p = 0 ; float cc , bb , ss , vv , pp ; printf ( ""unesite vozila: "" ) ; for ( i = 0 ; i < 100 ; i ++ ) { scanf ( ""%c"" , & c ) ; if ( c == 'c' || c == 'c' ) { c ++ ; x ++ ; } else if ( c == 'b' || c == 'b' ) { b ++ ; x ++ ; } else if ( c == 's' || c == 's' ) { s ++ ; x ++ ; } else if ( c == 'v' || c == 'v' ) { v ++ ; x ++ ; } else if ( c == 'p' || c == 'p' ) { p ++ ; x ++ ; } else if ( c == 'k' || c == 'k' ) break ; else printf ( ""neispravan unos\n"" ) ; } printf ( ""ukupno evidentirano %d vozila."" , x ) ; printf ( ""\n"" ) ; cc = c / ( c + b + s + v + p ) * 100 ; bb = b / ( c + b + s + v + p ) * 100 ; ss = s / ( c + b + s + v + p ) * 100 ; vv = v / ( c + b + s + v + p ) * 100 ; pp = p / ( c + b + s + v + p ) * 100 ; if ( x == 0 ) printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; else if ( cc >= bb && cc >= vv && cc >= ss && cc >= pp ) printf ( ""najpopularnija boja je crna (%.2f%%)."" , cc ) ; else if ( bb >= cc && bb >= vv && bb >= ss && bb >= pp ) printf ( ""najpopularnija boja je bijela (%.2f%%)."" , bb ) ; else if ( ss >= cc && ss >= bb && ss >= vv && ss >= pp ) printf ( ""najpopularnija boja je siva (%.2f%%)."" , ss ) ; else if ( vv >= cc && vv >= bb && vv >= ss && vv >= pp ) printf ( ""najpopularnija boja je crvena (%.2f%%)."" , vv ) ; else if ( pp >= cc && pp >= bb && pp >= vv && pp >= ss ) printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; return 0 ; }","#include <stdio.h> int main ( ) { int c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , n = 0 ; char a ; float c , b , s , v , p ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & a ) ; if ( a == 'c' || a == 'c' ) { c ++ ; n ++ ; } else if ( a == 'b' || a == 'b' ) { b ++ ; n ++ ; } else if ( a == 's' || a == 's' ) { s ++ ; n ++ ; } else if ( a == 'v' || a == 'v' ) { v ++ ; n ++ ; } else if ( a == 'p' || a == 'p' ) { p ++ ; n ++ ; } else if ( a == 'k' || a == 'k' ) break ; else printf ( ""neispravan unos\n"" ) ; } while ( a != 'k' && a != 'k' ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , n ) ; c = ( ( float ) c / n ) * 100 ; p = ( ( float ) p / n ) * 100 ; s = ( ( float ) s / n ) * 100 ; v = ( ( float ) v / n ) * 100 ; b = ( ( float ) b / n ) * 100 ; if ( n == 0 ) printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; else if ( c >= b && c >= s && c >= v && c >= p ) printf ( ""najpopularnija boja je crna (%.2f%%)."" , c ) ; else if ( b >= c && b >= s && b >= v && b >= p ) printf ( ""najpopularnija boja je bijela (%.2f%%)."" , b ) ; else if ( s >= c && s >= b && s >= v && s >= p ) printf ( ""najpopularnija boja je siva (%.2f%%)."" , s ) ; else if ( v >= p && v >= c && v >= s && v >= b ) printf ( ""najpopularnija boja je crvena (%.2f%%)."" , v ) ; else if ( p >= c && p >= b && p >= s && p >= v ) printf ( ""najpopularnija boja je plava (%.2f%%)."" , p ) ; return 0 ; }"
1316,24,24,0,17,A2016/Z5/Z1/student2574,A2016/Z5/Z1/student9823,"#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int * niz , int velicina ) { float * q = niz ; double prosjekx = 0 ; double suma = 0 ; while ( niz < q + velicina ) { if ( velicina == 0 ) { prosjekx = 5.0 ; return prosjekx ; } if ( * niz == 5 ) { prosjekx = 5.0 ; return prosjekx ; } suma += * niz ; niz ++ ; } prosjekx = ( double ) suma / velicina ; return prosjekx ; } int uporedi ( char * p1 , char * p2 , char * i1 , char * i2 ) { while ( * p1 != '\0' && * p2 != '\0' ) { if ( * p1 < * p2 ) return - 1 ; if ( * p1 > * p2 ) return 1 ; p1 ++ ; p2 ++ ; } if ( * p1 != '\0' ) return 1 ; if ( * p2 != '\0' ) return - 1 ; while ( * i1 != '\0' && * i2 != '\0' ) { if ( * i1 < * i2 ) return - 1 ; if ( * i1 > * i2 ) return 1 ; i1 ++ ; i2 ++ ; } if ( * i1 != '\0' ) return 1 ; if ( * i2 != '\0' ) return - 1 ; return 0 ; } int genijalci ( struct student * niz , int velicina , float a ) { int poredak = 0 , index1 = 0 , index2 = 0 , index3 = 0 , i = 0 , j = 0 , k = 0 , x = velicina , max1 = 0 , max2 = 0 , max3 = 0 ; double prosjekstudenata = 0 ; for ( k = 0 ; k < x ; k ++ ) { prosjekstudenata = prosjek ( niz [ k ] . ocjene , niz [ k ] . br_ocjena ) ; if ( prosjekstudenata < a || prosjekstudenata <= 5.0 ) { for ( j = k ; j < x - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } x -- ; k -- ; } } for ( k = 0 ; k < x ; k ++ ) { prosjekstudenata = prosjek ( niz [ k ] . ocjene , niz [ k ] . br_ocjena ) ; if ( prosjekstudenata > max1 ) { max3 = max2 ; index3 = index2 ; max2 = max1 ; index2 = index1 ; max1 = prosjekstudenata ; index1 = k ; } else if ( prosjekstudenata == max1 ) { poredak = uporedi ( niz [ k ] . prezime , niz [ max1 ] . prezime , niz [ k ] . ime , niz [ max1 ] . ime ) ; if ( poredak == - 1 ) { if ( prosjekstudenata > max2 ) { max3 = max2 ; index3 = index2 ; } else if ( prosjekstudenata == max2 ) { poredak = uporedi ( niz [ k ] . prezime , niz [ max2 ] . prezime , niz [ k ] . ime , niz [ max2 ] . ime ) ; if ( poredak == - 1 ) { if ( prosjekstudenata > max3 ) { max3 = k ; } poredak = uporedi ( niz [ k ] . prezime , niz [ max3 ] . prezime , niz [ k ] . ime , niz [ max3 ] . ime ) ; if ( poredak == 1 ) { max3 = prosjekstudenata ; index3 = k ; } } else if ( poredak == 1 ) { max3 = max2 ; index3 = index2 ; max2 = prosjekstudenata ; index2 = k ; max1 = max3 ; index1 = index3 ; } } } if ( poredak == 1 ) { poredak = uporedi ( niz [ max1 ] . prezime , niz [ max2 ] . prezime , niz [ max1 ] . ime , niz [ max2 ] . ime ) ; if ( poredak == - 1 ) { poredak = uporedi ( niz [ max1 ] . prezime , niz [ max3 ] . prezime , niz [ max1 ] . ime , niz [ max3 ] . ime ) ; if ( poredak == - 1 ) { poredak = uporedi ( niz [ max2 ] . prezime , niz [ max3 ] . prezime , niz [ max2 ] . ime , niz [ max3 ] . ime ) ; if ( poredak == - 1 ) { poredak = uporedi ( niz [ k ] . prezime , niz [ max3 ] . prezime , niz [ k ] . ime , niz [ max3 ] . ime ) ; if ( poredak == - 1 ) { max3 = max2 ; index3 = index2 ; max2 = prosjekstudenata ; index2 = k ; max1 = max3 ; index1 = index3 ; } else if ( poredak == 1 ) { max1 = prosjekstudenata ; index1 = k ; max3 = max2 ; index3 = index2 ; max2 = max3 ; index2 = index3 ; } } } } } } } for ( i = 0 ; i < x ; ++ i ) { printf ( ""%s %s\n"" , niz [ i ] . prezime , niz [ i ] . ime ) ; } return x ; } int main ( ) { int i = 0 , x = 0 ; int velicina = 20 ; int broj_genijalaca = 0 ; struct student studenti [ 20 ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""neko"" , ""nekic"" , { 10 , 10 , 5 , 10 , 10 , 10 , 10 } , 7 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""beba"" , ""bebic"" , { } , 0 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 } , 29 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 6 } , 29 } , } ; double prosjek = 0 ; printf ( ""prosjek: "" ) ; scanf ( ""%lf"" , & prosjek ) ; x = genijalci ( studenti , velicina , prosjek ) ; printf ( ""%d\n"" , x ) ; for ( i = 0 ; i < x ; ++ i ) { printf ( ""%s %s \n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double daj_prosjek ( int niz [ ] , int vel ) { int i ; double suma = 0 ; if ( vel == 0 ) return 5. ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5. ; suma += niz [ i ] ; } return suma / vel ; } int uporedi ( char * ime1 , char * ime2 , char * prezime1 , char * prezime2 ) { while ( * prezime1 != '\0' && * prezime2 != '\0' && * prezime1 == * prezime2 ) { prezime1 ++ ; prezime2 ++ ; } if ( ( * prezime1 != '\0' && * prezime2 == '\0' ) || ( * prezime1 > * prezime2 ) ) return 1 ; else if ( ( * prezime1 == '\0' && * prezime2 != '\0' ) || ( * prezime1 < * prezime2 ) ) return 2 ; while ( * ime1 != '\0' && * ime2 != '\0' && * ime1 == * ime2 ) { ime1 ++ ; ime2 ++ ; } if ( ( * ime1 != '\0' && * ime2 == '\0' ) || ( * ime1 > * ime2 ) ) return 1 ; else if ( ( * ime1 == '\0' && * ime2 != '\0' ) || ( * ime1 < * ime2 ) ) return 2 ; return 0 ; } int genijalci ( struct student studenti [ ] , int vel , double prosjek ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < vel - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } vel -- ; i -- ; } } int pomocna = 0 ; i = 0 ; double max1 = prosjek ; double max2 = prosjek ; double max3 = prosjek ; int prvi = - 1 , drugi = - 1 , treci = - 1 ; for ( i = 0 ; i < vel ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) == max1 && i != 0 && prvi != - 1 ) { pomocna = uporedi ( studenti [ i ] . ime , studenti [ prvi ] . ime , studenti [ i ] . prezime , studenti [ prvi ] . prezime ) ; } if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= max1 ) { if ( pomocna == 1 ) { continue ; } max1 = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; prvi = i ; } } pomocna = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) == max2 && i != 0 && drugi != - 1 ) { pomocna = uporedi ( studenti [ i ] . ime , studenti [ drugi ] . ime , studenti [ i ] . prezime , studenti [ drugi ] . prezime ) ; } if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= max2 && i != prvi ) { if ( pomocna == 1 ) { continue ; } max2 = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; drugi = i ; } } pomocna = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) == max3 && i != 0 && treci != - 1 ) { pomocna = uporedi ( studenti [ i ] . ime , studenti [ treci ] . ime , studenti [ i ] . prezime , studenti [ treci ] . prezime ) ; } if ( daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= max3 && i != drugi && i != prvi ) { if ( pomocna == 1 ) { continue ; } max3 = daj_prosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; treci = i ; } } if ( prvi != - 1 ) printf ( ""%s %s"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; if ( drugi != - 1 ) printf ( ""\n%s %s"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; if ( treci != - 1 ) printf ( ""\n%s %s"" , studenti [ treci ] . prezime , studenti [ treci ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""beeic"" , { 10 , 9 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""\nvel: %dstudenti:"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""\n%s %s"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; return 0 ; }"
1323,72,72,0,68,A2016/Z4/Z2/student5624,A2016/Z4/Z2/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void izmjeni ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pomocni_sifrarnik = sifrarnik ; int brojac ; while ( * pomocni_string != '\0' ) { brojac = 0 ; pomocni_sifrarnik = sifrarnik ; while ( * pomocni_sifrarnik != '\0' ) { if ( * pomocni_string == * pomocni_sifrarnik ++ ) { * pomocni_string = 126 - brojac ; break ; } brojac ++ ; } pomocni_string ++ ; } } void sortiraj ( int * niz , int * niz_sort , int * indeks , char * pokazivac , char * string ) { int i , j ; int temp ; char * sifrarnik = pokazivac ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j ++ ) { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && indeks [ i ] > indeks [ j ] ) { temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } } } for ( i = 0 ; i < 127 ; i ++ ) { if ( indeks [ i ] != - 1 ) { * pokazivac = indeks [ i ] ; pokazivac ++ ; } } izmjeni ( string , sifrarnik ) ; } char * kodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pokazivac = sifrarnik ; int i ; int niz [ 127 ] ; int niz_sort [ 127 ] ; int indeks [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; indeks [ i ] = - 1 ; } else { niz [ i ] = 0 ; indeks [ i ] = i ; } } while ( * pomocni_string != '\0' ) { niz [ * pomocni_string + 0 ] ++ ; pomocni_string ++ ; } for ( i = 0 ; i < 127 ; i ++ ) { niz_sort [ i ] = niz [ i ] ; } sortiraj ( niz , niz_sort , indeks , pokazivac , string ) ; return string ; } char * dekodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string ; while ( * pomocni_string != '\0' ) { * pomocni_string = sifrarnik [ 126 - * pomocni_string ] ; pomocni_string ++ ; } return string ; } int main ( ) { printf ( ""zadaca 4, zadatak 2"" ) ; return 0 ; }","#include <stdio.h> void sortiraj ( int * niz , int * sort , int * index ) { int i , j ; int temp ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && index [ i ] > index [ j ] ) { temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } } } } void pretvori ( char * s , char * sifrarnik ) { char * p = s , * kljuc = sifrarnik ; int br ; while ( * p != '\0' ) { br = 0 ; kljuc = sifrarnik ; while ( * kljuc != '\0' ) { if ( * p == * kljuc ++ ) { * p = 126 - br ; break ; } br ++ ; } p ++ ; } } char * kodiraj ( char * s , char * sifrarnik ) { char * p = s , * pok = sifrarnik ; int i ; int niz [ 127 ] ; int sort [ 127 ] ; int index [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; index [ i ] = - 1 ; } else { niz [ i ] = 0 ; index [ i ] = i ; } } while ( * p != '\0' ) { niz [ * p + 0 ] ++ ; p ++ ; } for ( i = 0 ; i < 127 ; i ++ ) sort [ i ] = niz [ i ] ; sortiraj ( niz , sort , index ) ; for ( i = 0 ; i < 127 ; i ++ ) { if ( index [ i ] != - 1 ) { * pok = index [ i ] ; pok ++ ; } } pretvori ( s , sifrarnik ) ; return s ; } char * dekodiraj ( char * s , char * sifrarnik ) { char * p = s ; while ( * p != '\0' ) { * p = sifrarnik [ 126 - * p ] ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""u ovom testu cemo testirati samo kodiranje"" ; char sifrarnik [ 100 ] = """" ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; printf ( ""%s\n"" , sifrarnik ) ; return 0 ; }"
1331,18,18,0,23,A2016/Z5/Z1/student4416,A2016/Z5/Z1/student8776,"#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosj ( int * ocj , int brocj ) { int suma = 0 , i ; for ( i = 0 ; i < brocj ; i ++ ) { if ( ocj [ i ] == 5 ) return 5 ; suma = suma + ocj [ i ] ; } if ( suma == 0 ) return 5 ; return ( float ) suma / brocj ; } int leks ( char * i1 , char * p1 , char * i2 , char * p2 ) { while ( * p1 != 0 && * p2 != 0 ) { if ( * p1 < * p2 ) return 1 ; if ( * p1 > * p2 ) return 2 ; p1 ++ ; p2 ++ ; } if ( * p1 != 0 ) return 2 ; if ( * p2 != 0 ) return 1 ; while ( * i1 != 0 && * i2 != 0 ) { if ( * i1 < * i2 ) return 1 ; if ( * i1 > * i2 ) return 2 ; i1 ++ ; i2 ++ ; } if ( * i1 != 0 ) return 2 ; if ( * i2 != 0 ) return 1 ; return 0 ; } int genijalci ( struct student * niz , int velicina , float prosjek ) { int veci , i , j , max1 = 0 , max2 = 0 , max3 = 0 ; float t , p1 = 0 , p2 = 0 , p3 = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek > prosj ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; velicina -- ; } } for ( i = 0 ; i < velicina ; i ++ ) { t = ( prosj ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) ; if ( t > p1 ) { p3 = p2 ; max3 = max2 ; p2 = p1 ; max2 = max1 ; p1 = t ; max1 = i ; } else if ( t == p1 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max1 ] . ime , niz [ max1 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = p1 ; max2 = max1 ; p1 = t ; max1 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max2 ] . ime , niz [ max2 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 || veci == 0 ) { p3 = t ; max3 = i ; } } } else if ( veci == 0 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } } else if ( t > p2 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( t == p2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max2 ] . ime , niz [ max2 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 ) { p3 = t ; max3 = i ; } } else if ( veci == 0 ) { p3 = t ; max3 = i ; } } else if ( t > p3 ) { p3 = t ; max3 = i ; } else if ( t == p3 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 ) { p3 = t ; max3 = i ; } } } if ( p1 > 0 ) printf ( ""\n%s %s"" , niz [ max1 ] . prezime , niz [ max1 ] . ime ) ; if ( p2 > 0 ) printf ( ""\n%s %s"" , niz [ max2 ] . prezime , niz [ max2 ] . ime ) ; if ( p3 > 0 ) printf ( ""\n%s %s"" , niz [ max3 ] . prezime , niz [ max3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 4 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 4 , 6.5 ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return 1 ; if ( * s1 > * s2 ) return 2 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 2 ; if ( * s2 != '\0' ) return 1 ; return 0 ; } float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { float prosjekprvog = prosjek ( pr . ocjene , pr . br_ocjena ) ; float prosjekdrugog = prosjek ( dr . ocjene , dr . br_ocjena ) ; int sta_je_vratila_f = uporedi ( pr . prezime , dr . prezime ) ; if ( prosjekprvog > prosjekdrugog ) return 1 ; if ( prosjekprvog < prosjekdrugog ) return 0 ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; sta_je_vratila_f = uporedi ( pr . ime , dr . ime ) ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }"
1334,11,11,0,31,A2016/Z5/Z3/student9897,A2016/Z5/Z3/student8776,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; return ucitano1 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int vel = sizeof ( struct cas ) ; int ucitano = fwrite ( raspored , vel , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , x , s , min = 100 , max = 0 ; int indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { s = raspored [ k ] . pocetak . sati ; if ( s <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; x = i ; } } if ( k == broj_casova ) for ( x = 0 ; x < 10 ; x ++ ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( cas . pocetak . minute + cas . pocetak . sati * 60 == raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 || raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 == cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . pocetak . minute + cas . pocetak . sati * 60 && raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 > cas . pocetak . minute + cas . pocetak . sati * 60 || cas . pocetak . minute + cas . pocetak . sati * 60 < raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 && cas . kraj . minute + cas . kraj . sati * 60 > raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 || raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . kraj . minute + cas . kraj . sati * 60 && raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 > cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 ; int i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j ; int k = 0 ; int n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , poc , moze = 0 ; struct cas cas ; for ( i = 1 ; i < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { dan = i ; poc = k ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = dan ; cas . pocetak . sati = poc ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; int index = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { index = i ; break ; } } raspored [ index ] = promjena ; } int poziv ( struct cas raspored [ ] , int ucit , char * ime , int br ) { int vr = dodaj_cas ( raspored , ucit , ime , br ) ; return vr ; } struct cas zamj ( struct cas casko , int dan , int sat , int min , int sat1 , int min1 ) { casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; return casko ; } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , rez , dan , cs , zap , m ; char ime [ 100 ] ; for ( m = 0 ; m < kapacitet ; m ++ ) { raspored [ m ] . pocetak . sati = 0 ; raspored [ m ] . kraj . sati = 0 ; raspored [ m ] . dan_u_sedmici = 1 ; raspored [ m ] . pocetak . minute = 0 ; raspored [ m ] . kraj . minute = 0 ; raspored [ m ] . pocetak . sekunde = 0 ; raspored [ m ] . kraj . sekunde = 0 ; } poc : printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; if ( broj == 0 ) return 0 ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; if ( broj == 0 ) return 0 ; rez = poziv ( raspored , ucit , ime , br ) ; if ( rez == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( rez == 1 ) ucit ++ ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; if ( broj == 0 ) return 0 ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; int sat , min ; char z ; int sat1 , min1 ; char z1 ; ispisi_dan ( raspored , ucit , dan ) ; if ( broj == 0 ) return 0 ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko = zamj ( casko , dan , sat , min , sat1 , min1 ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } if ( broj != 0 ) goto poc ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) { return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; fclose ( ulaz ) ; return ucitano ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , pocetak = 9 , kraj = 0 , k , ispisan = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati >= kraj ) { kraj = raspored [ i ] . kraj . sati ; if ( raspored [ i ] . kraj . minute == 0 ) kraj -- ; } if ( raspored [ i ] . pocetak . sati < pocetak ) pocetak = raspored [ i ] . pocetak . sati ; } char dani [ ] [ 4 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; printf ( ""\n"" ) ; for ( i = 0 ; i < 6 ; i ++ ) printf ( ""%10s"" , dani [ i ] ) ; printf ( ""\n"" ) ; for ( i = pocetak ; i <= kraj ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 0 ; j < 6 ; j ++ ) { ispisan = 0 ; for ( k = 0 ; k < broj_casova ; k ++ ) { if ( raspored [ k ] . dan_u_sedmici == j + 1 && raspored [ k ] . pocetak . sati <= i && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; ispisan = 1 ; break ; } } if ( ispisan == 0 ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i = 0 ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int sat = raspored [ i ] . pocetak . sati ; int min = raspored [ i ] . pocetak . minute ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( sat < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , sat ) ; if ( min < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , min ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) { if ( raspored [ i ] . pocetak . sati == cas . pocetak . sati || raspored [ i ] . kraj . sati == cas . kraj . sati ) return 1 ; if ( raspored [ i ] . pocetak . sati == cas . kraj . sati && raspored [ i ] . pocetak . minute < cas . kraj . minute ) return 1 ; if ( raspored [ i ] . kraj . sati == cas . pocetak . sati && raspored [ i ] . kraj . minute > cas . pocetak . minute ) return 1 ; if ( raspored [ i ] . pocetak . sati < cas . pocetak . sati && raspored [ i ] . kraj . sati > cas . kraj . sati ) return 1 ; if ( raspored [ i ] . pocetak . sati > cas . pocetak . sati && raspored [ i ] . kraj . minute < cas . kraj . minute ) return 1 ; if ( raspored [ i ] . pocetak . sati > cas . pocetak . sati && raspored [ i ] . pocetak . sati < cas . kraj . sati ) return 1 ; if ( raspored [ i ] . kraj . sati > cas . pocetak . sati && raspored [ i ] . pocetak . sati < cas . kraj . sati ) return 1 ; } } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) { printf ( ""otvaranje datoteke raspored nije uspjelo."" ) ; return 0 ; } int zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; fclose ( ulaz ) ; if ( zapisano >= 1 ) return 1 ; else return 0 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; if ( dodan == 1 ) broj_casova ++ ; else printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti:  "" ) ; scanf ( ""%d"" , & redni ) ; printf ( ""naziv predmeta: "" ) ; char predmet [ 10 ] ; ocisti ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet , * p = predmet ; while ( * q ++ = * p ++ ) ; char znak ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } } while ( opcija != 0 ) ; return 0 ; }"
1336,58,58,0,36,A2016/Z1/Z3/student5573,A2016/Z1/Z3/student1483,"#include <stdio.h> int main ( ) { int c = 0 , p = 0 , b = 0 , s = 0 , v = 0 , uk = 0 ; float postotak ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'k' || boja == 'k' ) { goto l1 ; } if ( boja == 'v' || boja == 'v' ) { v ++ ; uk ++ ; } if ( boja == 'p' || boja == 'p' ) { p ++ ; uk ++ ; } if ( boja == 'c' || boja == 'c' ) { c ++ ; uk ++ ; } if ( boja == 'b' || boja == 'b' ) { b ++ ; uk ++ ; } if ( boja == 's' || boja == 's' ) { s ++ ; uk ++ ; } if ( boja != 'c' && boja != 's' && boja != 'v' && boja != 'p' && boja != 'b' && boja != 'c' && boja != 's' && boja != 'v' && boja != 'p' && boja != 'b' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos\n"" ) ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c > s && c > v && c > p && c > b ) { postotak = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , postotak ) ; return 0 ; } if ( s > c && s > v && s > p && s > b ) { postotak = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , postotak ) ; return 0 ; } if ( v > s && v > c && v > p && v > b ) { postotak = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , postotak ) ; return 0 ; } if ( p > s && p > v && p > c && p > b ) { postotak = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , postotak ) ; return 0 ; } if ( b > s && b > v && b > p && b > c ) { postotak = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , postotak ) ; return 0 ; } if ( c == s ) { postotak = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , postotak ) ; } if ( s == v && v == p ) { postotak = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , postotak ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c , p , b , s , v , uk ; c = 0 ; p = 0 ; b = 0 ; s = 0 ; v = 0 ; uk = 0 ; float pr ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c = c + 1 ; uk = uk + 1 ; } if ( boja == 'b' || boja == 'b' ) { b = b + 1 ; uk = uk + 1 ; } if ( boja == 's' || boja == 's' ) { s = s + 1 ; uk = uk + 1 ; } if ( boja == 'v' || boja == 'v' ) { v = v + 1 ; uk = uk + 1 ; } if ( boja == 'p' || boja == 'p' ) { p = p + 1 ; uk = uk + 1 ; } if ( boja != 'c' && boja != 'c' && boja != 'b' && boja != 'b' && boja != 's' && boja != 's' && boja != 'v' && boja != 'v' && boja != 'p' && boja != 'p' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos \n"" ) ; } if ( boja == 'k' || boja == 'k' ) { goto l1 ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c < v && b < v && s < v && v >= p ) { pr = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pr ) ; } if ( c < p && b < p && s < p && v < p ) { pr = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , pr ) ; } if ( c >= b && c >= s && c >= v && c >= p ) { pr = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , pr ) ; } if ( c < b && b >= s && b >= v && b >= p ) { pr = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pr ) ; } if ( c < s && b < s && s >= v && s >= p ) { pr = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , pr ) ; } return 0 ; }"
1342,91,91,0,102,A2016/Z3/Z3/student4108,A2016/Z3/Z3/student7232,"#include <stdio.h> int main ( ) { int i , k , br , j , mat [ 200 ] [ 200 ] , m , n , a , b , temp ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m >= 200 || n < 1 || n >= 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { br = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { br ++ ; } if ( br == n ) { for ( a = j + 1 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { temp = mat [ m - 1 ] [ n ] ; mat [ m - 1 ] [ n ] = mat [ m ] [ n ] ; mat [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { br = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { br ++ ; } if ( br == m ) { for ( a = j + 1 ; a < n ; a ++ ) { for ( b = 0 ; b < m ; b ++ ) { temp = mat [ n ] [ m - 1 ] ; mat [ n ] [ m - 1 ] = mat [ n ] [ m ] ; mat [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , n , m , m , n , x , y , p = 0 , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( n = 0 ; n < m ; n ++ ) { for ( m = 0 ; m < n ; m ++ ) { scanf ( ""%d"" , & mat [ n ] [ m ] ) ; } } for ( n = 0 ; n < m ; n ++ ) { for ( m = n + 1 ; m < m ; m ++ ) { brojac = 0 ; for ( p = 0 ; p < n ; p ++ ) { if ( mat [ n ] [ p ] == mat [ m ] [ p ] ) { brojac ++ ; } if ( brojac == n ) { for ( y = m + 1 ; y < m ; y ++ ) { for ( x = 0 ; x < n ; x ++ ) { temp = mat [ y - 1 ] [ x ] ; mat [ y - 1 ] [ x ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = temp ; } } m -- ; m -- ; } } } } for ( n = 0 ; n < n ; n ++ ) { for ( m = n + 1 ; m < n ; m ++ ) { brojac = 0 ; for ( p = 0 ; p < m ; p ++ ) { if ( mat [ p ] [ n ] == mat [ p ] [ m ] ) { brojac ++ ; } if ( brojac == m ) { for ( y = m + 1 ; y < n ; y ++ ) { for ( x = 0 ; x < m ; x ++ ) { temp = mat [ x ] [ y - 1 ] ; mat [ x ] [ y - 1 ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = temp ; } } n -- ; m -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( n = 0 ; n < m ; n ++ ) { for ( m = 0 ; m < n ; m ++ ) { printf ( ""%5d"" , mat [ n ] [ m ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1343,66,66,0,39,A2016/Z2/Z2/student3217,A2016/Z2/Z2/student3421,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int st = 0 , m = 0 , s = 0 , n , i , j ; double niz [ 500 ] , us = 0 ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; us = fabs ( niz [ i ] * 180 / pi ) * 3600 ; us = abs ( ( int ) ( us + 0.5 ) ) ; st = ( us / 3600 ) ; m = abs ( ( us - st * 3600 ) / 60 ) ; s = abs ( ( us - st * 3600 - m * 60 ) ) ; if ( s >= 60 ) { m += 1 ; s -= 60 ; } if ( m >= 60 ) { st += 1 ; m -= 60 ; } if ( s > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; n -- ; i -- ; } } else if ( niz [ i ] < 0 ) printf ( ""-%d stepeni %d minuta %d sekundi\n"" , st , m , s ) ; else printf ( ""%d stepeni %d minuta %d sekundi \n"" , st , m , s ) ; } return 0 ; }","#include <stdio.h> #define pi 3.1415926 #include<stdlib.h> #include<math.h> int main ( ) { int step = 0 , min = 0 , sec = 0 , i , j , k ; double totsec = 0 , ugao [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & k ) ; for ( i = 0 ; i < k ; i ++ ) { scanf ( ""%lf"" , & ugao [ i ] ) ; } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < k ; i ++ ) { totsec = fabs ( ( ugao [ i ] * 180 / pi ) * 3600 ) ; totsec = abs ( ( int ) ( totsec + 0.5 ) ) ; step = ( totsec / 3600 ) ; min = abs ( ( totsec - step * 3600 ) / 60 ) ; sec = abs ( ( totsec - step * 3600 - min * 60 ) ) ; if ( sec >= 60 ) { min += 1 ; sec -= 60 ; } if ( min >= 60 ) { step += 1 ; min -= 60 ; ; } if ( sec > 30 ) { for ( j = i ; j < k - 1 ; j ++ ) { ugao [ j ] = ugao [ j + 1 ] ; } k -- ; i -- ; } else if ( ugao [ i ] < 0 ) printf ( ""-%d stepeni %d minuta %d sekundi\n"" , step , min , sec ) ; else { printf ( ""%d stepeni %d minuta %d sekundi\n"" , step , min , sec ) ; } } return 0 ; }"
1348,99,99,0,97,A2016/Z3/Z2/student5789,A2016/Z3/Z2/student1029,"#include <stdio.h> int cifre ( int n ) { int suma = 0 ; if ( n < 0 ) n = - n ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int n ) { int niz2 [ 100 ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { niz2 [ i * 2 ] = niz [ i ] ; niz2 [ i * 2 + 1 ] = cifre ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * n ; i ++ ) niz [ i ] = niz2 [ i ] ; } int fibonacijev ( int n ) { int a [ 100 ] = { 1 , 1 , 2 } ; int i = 2 ; do { i ++ ; a [ i ] = a [ i - 1 ] + a [ i - 2 ] ; } while ( a [ i ] > 0 ) ; for ( ; i >= 0 ; i -- ) { if ( n == a [ i ] ) return 1 ; } return 0 ; } int izbaci ( int * niz , int n ) { int niz2 [ 100 ] ; int i = 0 , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( fibonacijev ( niz [ i ] ) == 0 ) niz2 [ j ++ ] = niz [ i ] ; } for ( i = 0 ; i < j ; i ++ ) { niz [ i ] = niz2 [ i ] ; } return j ; } int main ( ) { int niz [ 100 ] ; int i ; int n = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) printf ( ""prazan niz.\n"" ) ; else { printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { printf ( "", %d"" , niz [ i ] ) ; } printf ( ""."" ) ; } return 0 ; }","#include <stdio.h> int cifre ( int n ) { int suma = 0 ; if ( n < 0 ) n = - n ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int n ) { int niz2 [ 100 ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { niz2 [ i * 2 ] = niz [ i ] ; niz2 [ i * 2 + 1 ] = cifre ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * n ; i ++ ) niz [ i ] = niz2 [ i ] ; } int fibonacijev ( int n ) { int a [ 100 ] = { 1 , 1 , 2 } ; int i = 2 ; do { i ++ ; a [ i ] = a [ i - 1 ] + a [ i - 2 ] ; } while ( a [ i ] > 0 ) ; for ( ; i >= 0 ; i -- ) { if ( n == a [ i ] ) return 1 ; } return 0 ; } int izbaci ( int * niz , int n ) { int niz2 [ 100 ] ; int i = 0 , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( fibonacijev ( niz [ i ] ) == 0 ) niz2 [ j ++ ] = niz [ i ] ; } for ( i = 0 ; i < j ; i ++ ) { niz [ i ] = niz2 [ i ] ; } return j ; } int main ( ) { int niz [ 100 ] ; int i ; int n = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) printf ( ""prazan niz.\n"" ) ; else { printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { printf ( "", %d"" , niz [ i ] ) ; } printf ( ""."" ) ; } return 0 ; }"
1350,98,98,0,34,A2016/Z3/Z1/student8363,A2016/Z3/Z1/student1938,"#include <stdio.h> int daj_prost ( ) { static int i = 2 ; int j , c ; while ( 1 ) { c = 1 ; for ( j = 2 ; j < i / 2 + 1 ; j ++ ) { if ( i % j == 0 ) { c = 0 ; i ++ ; break ; } } if ( c ) return i ++ ; } } int main ( ) { int i , a , b , temp , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a >= b || a < 1 ) ; temp = 2 ; while ( temp < b ) { temp = daj_prost ( ) ; for ( i = a + 1 ; i < b ; i ++ ) { if ( i == temp ) { suma += i ; break ; } } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int i = 2 ; int j , c ; while ( 1 ) { c = 1 ; for ( j = 2 ; j < i / 2 + 1 ; j ++ ) { if ( i % j == 0 ) { c = 0 ; i ++ ; break ; } } if ( c ) return i ++ ; } } int main ( ) { int i , a , b , temp , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a >= b || a < 1 ) ; temp = 2 ; while ( temp < b ) { temp = daj_prost ( ) ; for ( i = a + 1 ; i < b ; i ++ ) { if ( i == temp ) { suma += i ; break ; } } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
1353,60,60,0,29,A2016/Z2/Z4/student9931,A2016/Z2/Z4/student4804,"#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { int m = 0 , n = 0 , i , j , w = 1 , p = 1 , v = 0 ; double a [ 100 ] [ 100 ] ; do { printf ( ""\nunesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n < 1 || n > 100 || m < 1 || m > 100 ) { printf ( ""pogresan unos!"" ) ; } } while ( n < 1 || n > 100 || m < 1 || m > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( a [ i ] [ j ] - a [ i + 1 ] [ j + 1 ] ) < e ) { p = 0 ; } else { p = 1 ; goto mm ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( fabs ( a [ i ] [ n - 1 ] - a [ i + 1 ] [ 0 ] ) < e ) { w = 0 ; } else { w = 1 ; goto mm ; } } mm : if ( m == 1 ) { w = 0 ; p = 0 ; } if ( m == 100 ) { w = 1 ; p = 0 ; } if ( w == 0 && p == 0 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( w == 1 && p == 0 ) { printf ( ""matrica je teplicova"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { int m , n , i , j , t = 0 , c = 0 ; double a [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( a [ i ] [ j ] - a [ i + 1 ] [ j + 1 ] ) < e ) t = 1 ; else { t = 0 ; break ; } } if ( t == 0 ) break ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( t == 1 && ( fabs ( a [ i ] [ n - 1 ] - a [ i + 1 ] [ 0 ] ) < e ) ) c = 1 ; else { c = 0 ; break ; } } if ( c == 0 ) break ; } if ( c == 1 || m == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( t == 1 || n == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1383,99,99,0,208,A2016/Z5/Z1/student1738,A2016/Z5/Z1/student8598,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } double pros ( struct student n ) { int zboc = 0 , i ; double pr ; if ( n . br_ocjena == 0 ) { return 5 ; } for ( i = 0 ; i < n . br_ocjena ; i ++ ) { if ( n . ocjene [ i ] == 5 ) { return 5 ; } } for ( i = 0 ; i < n . br_ocjena ; i ++ ) { zboc += n . ocjene [ i ] ; } pr = ( double ) zboc / ( double ) n . br_ocjena ; return pr ; } void ispis ( struct student niz [ ] , int v ) { int i ; for ( i = 0 ; i < v ; i ++ ) { printf ( ""\nprosjek za %s %s je %f."" , niz [ i ] . ime , niz [ i ] . prezime , pros ( niz [ i ] ) ) ; } } int genijalci ( struct student niz [ ] , int v , double prosjek ) { struct student nbt ; struct student nit [ 250 ] ; char t [ 35 ] , ime [ 35 ] ; int pom = 0 , i , j , ret = 0 ; double prosjeci [ 100 ] , nb , temm ; for ( i = 0 ; i < v ; i ++ ) { nit [ i ] = niz [ i ] ; } for ( i = 0 ; i < v ; i ++ ) { prosjeci [ i ] = pros ( nit [ i ] ) ; } for ( i = 0 ; i < v ; i ++ ) { if ( prosjeci [ i ] < prosjek ) { pom ++ ; continue ; } } if ( pom == v ) { return 0 ; } for ( i = 0 ; i < v ; i ++ ) { if ( prosjeci [ i ] < prosjek ) { for ( j = i ; j < v - 1 ; j ++ ) { prosjeci [ j ] = prosjeci [ j + 1 ] ; nit [ j ] = nit [ j + 1 ] ; niz [ j ] = niz [ j + 1 ] ; } v -- ; i -- ; } } for ( i = 0 ; i < v - 1 ; ++ i ) { for ( j = 0 ; j < v - 1 - i ; ++ j ) { if ( prosjeci [ j + 1 ] > prosjeci [ j ] ) { nbt = nit [ j + 1 ] ; nb = prosjeci [ j + 1 ] ; prosjeci [ j + 1 ] = prosjeci [ j ] ; nit [ j + 1 ] = nit [ j ] ; prosjeci [ j ] = nb ; nit [ j ] = nbt ; } } } for ( i = 0 ; i < v ; i ++ ) { for ( i = 1 ; i < v ; i ++ ) { for ( j = 1 ; j < v ; j ++ ) { if ( strcmp ( nit [ j - 1 ] . prezime , nit [ j ] . prezime ) > 0 ) { strcpy ( t , nit [ j - 1 ] . prezime ) ; strcpy ( ime , nit [ j - 1 ] . ime ) ; temm = prosjeci [ j - 1 ] ; strcpy ( nit [ j - 1 ] . prezime , nit [ j ] . prezime ) ; strcpy ( nit [ j - 1 ] . ime , nit [ j ] . ime ) ; prosjeci [ j - 1 ] = prosjeci [ j ] ; strcpy ( nit [ j ] . prezime , t ) ; strcpy ( nit [ j ] . ime , ime ) ; prosjeci [ j ] = temm ; } } } for ( i = 1 ; i < v ; i ++ ) { for ( j = 1 ; j < v ; j ++ ) { if ( strcmp ( nit [ j - 1 ] . ime , nit [ j ] . ime ) > 0 ) { strcpy ( t , nit [ j - 1 ] . ime ) ; strcpy ( ime , nit [ j - 1 ] . prezime ) ; temm = prosjeci [ j - 1 ] ; strcpy ( nit [ j - 1 ] . ime , nit [ j ] . ime ) ; strcpy ( nit [ j - 1 ] . prezime , nit [ j ] . prezime ) ; prosjeci [ j - 1 ] = prosjeci [ j ] ; strcpy ( nit [ j ] . ime , t ) ; strcpy ( nit [ j ] . prezime , ime ) ; prosjeci [ j ] = temm ; } } } } for ( i = 0 ; i < v - 1 ; ++ i ) { for ( j = 0 ; j < v - 1 - i ; ++ j ) { if ( prosjeci [ j + 1 ] > prosjeci [ j ] ) { nbt = nit [ j + 1 ] ; nb = prosjeci [ j + 1 ] ; prosjeci [ j + 1 ] = prosjeci [ j ] ; nit [ j + 1 ] = nit [ j ] ; prosjeci [ j ] = nb ; nit [ j ] = nbt ; } } } if ( v >= 3 ) { for ( i = 0 ; i < 3 ; i ++ ) { printf ( ""\n%s %s"" , nit [ i ] . prezime , nit [ i ] . ime ) ; } } else { for ( i = 0 ; i < v ; i ++ ) { printf ( ""\n%s %s"" , nit [ i ] . prezime , nit [ i ] . ime ) ; } } ret = 0 ; for ( i = 0 ; i < v ; i ++ ) { ret ++ ; } return ret ; } int main ( ) { return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } double pros ( struct student n ) { int zboc = 0 , i ; double pr ; if ( n . br_ocjena == 0 ) { return 5 ; } for ( i = 0 ; i < n . br_ocjena ; i ++ ) { if ( n . ocjene [ i ] == 5 ) { return 5 ; } } for ( i = 0 ; i < n . br_ocjena ; i ++ ) { zboc += n . ocjene [ i ] ; } pr = ( double ) zboc / ( double ) n . br_ocjena ; return pr ; } void ispis ( struct student niz [ ] , int v ) { int i ; for ( i = 0 ; i < v ; i ++ ) { printf ( ""\nprosjek za %s %s je %f."" , niz [ i ] . ime , niz [ i ] . prezime , pros ( niz [ i ] ) ) ; } } int genijalci ( struct student niz [ ] , int v , double prosjek ) { struct student nbt ; struct student nit [ 250 ] ; char t [ 35 ] , ime [ 35 ] ; int pom = 0 , i , j , ret = 0 ; double prosjeci [ 100 ] , nb , temm ; for ( i = 0 ; i < v ; i ++ ) { nit [ i ] = niz [ i ] ; } for ( i = 0 ; i < v ; i ++ ) { prosjeci [ i ] = pros ( nit [ i ] ) ; } for ( i = 0 ; i < v ; i ++ ) { if ( prosjeci [ i ] < prosjek ) { pom ++ ; continue ; } } if ( pom == v ) { return 0 ; } for ( i = 0 ; i < v ; i ++ ) { if ( prosjeci [ i ] < prosjek ) { for ( j = i ; j < v - 1 ; j ++ ) { prosjeci [ j ] = prosjeci [ j + 1 ] ; nit [ j ] = nit [ j + 1 ] ; niz [ j ] = niz [ j + 1 ] ; } v -- ; i -- ; } } for ( i = 0 ; i < v - 1 ; ++ i ) { for ( j = 0 ; j < v - 1 - i ; ++ j ) { if ( prosjeci [ j + 1 ] > prosjeci [ j ] ) { nbt = nit [ j + 1 ] ; nb = prosjeci [ j + 1 ] ; prosjeci [ j + 1 ] = prosjeci [ j ] ; nit [ j + 1 ] = nit [ j ] ; prosjeci [ j ] = nb ; nit [ j ] = nbt ; } } } for ( i = 0 ; i < v ; i ++ ) { for ( i = 1 ; i < v ; i ++ ) { for ( j = 1 ; j < v ; j ++ ) { if ( strcmp ( nit [ j - 1 ] . prezime , nit [ j ] . prezime ) > 0 ) { strcpy ( t , nit [ j - 1 ] . prezime ) ; strcpy ( ime , nit [ j - 1 ] . ime ) ; temm = prosjeci [ j - 1 ] ; strcpy ( nit [ j - 1 ] . prezime , nit [ j ] . prezime ) ; strcpy ( nit [ j - 1 ] . ime , nit [ j ] . ime ) ; prosjeci [ j - 1 ] = prosjeci [ j ] ; strcpy ( nit [ j ] . prezime , t ) ; strcpy ( nit [ j ] . ime , ime ) ; prosjeci [ j ] = temm ; } } } for ( i = 1 ; i < v ; i ++ ) { for ( j = 1 ; j < v ; j ++ ) { if ( strcmp ( nit [ j - 1 ] . ime , nit [ j ] . ime ) > 0 ) { strcpy ( t , nit [ j - 1 ] . ime ) ; strcpy ( ime , nit [ j - 1 ] . prezime ) ; temm = prosjeci [ j - 1 ] ; strcpy ( nit [ j - 1 ] . ime , nit [ j ] . ime ) ; strcpy ( nit [ j - 1 ] . prezime , nit [ j ] . prezime ) ; prosjeci [ j - 1 ] = prosjeci [ j ] ; strcpy ( nit [ j ] . ime , t ) ; strcpy ( nit [ j ] . prezime , ime ) ; prosjeci [ j ] = temm ; } } } } for ( i = 0 ; i < v - 1 ; ++ i ) { for ( j = 0 ; j < v - 1 - i ; ++ j ) { if ( prosjeci [ j + 1 ] > prosjeci [ j ] ) { nbt = nit [ j + 1 ] ; nb = prosjeci [ j + 1 ] ; prosjeci [ j + 1 ] = prosjeci [ j ] ; nit [ j + 1 ] = nit [ j ] ; prosjeci [ j ] = nb ; nit [ j ] = nbt ; } } } if ( v >= 3 ) { for ( i = 0 ; i < 3 ; i ++ ) { printf ( ""\n%s %s"" , nit [ i ] . prezime , nit [ i ] . ime ) ; } } else { for ( i = 0 ; i < v ; i ++ ) { printf ( ""\n%s %s"" , nit [ i ] . prezime , nit [ i ] . ime ) ; } } ret = 0 ; for ( i = 0 ; i < v ; i ++ ) { ret ++ ; } return ret ; } int main ( ) { return 0 ; }"
1386,99,99,0,68,A2016/Z3/Z3/student8029,A2016/Z3/Z3/student3715,"#include <stdio.h> int main ( ) { int mat [ 235 ] [ 235 ] ; int i , j , k , p , r , m , n , pret = 1 , h = 0 , s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m <= 0 ) printf ( ""brojevi nisu u trazenom opsegu. \n"" ) ; else if ( n > 200 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu. \n"" ) ; } while ( ( m > 200 || m <= 0 ) || ( n > 200 || n <= 0 ) ) ; h = m ; s = n ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) pret = 0 ; if ( pret == 1 ) { for ( p = k ; p < m - 1 ; p ++ ) for ( r = 0 ; r < n ; r ++ ) mat [ p ] [ r ] = mat [ p + 1 ] [ r ] ; p -- ; m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { pret = 1 ; for ( i = 0 ; i < m ; i ++ ) if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) pret = 0 ; if ( pret == 1 ) { for ( p = k ; p < n - 1 ; p ++ ) for ( r = 0 ; r < m ; r ++ ) mat [ r ] [ p ] = mat [ r ] [ p + 1 ] ; p -- ; n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] > 9 || mat [ i ] [ j ] < 0 ) printf ( ""   "" ) ; else printf ( ""    "" ) ; printf ( ""%d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 235 ] [ 235 ] ; int i , j , k , p , r , m , n , pret = 1 , h = 0 , s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m <= 0 ) printf ( ""brojevi nisu u trazenom opsegu. \n"" ) ; else if ( n > 200 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu. \n"" ) ; } while ( ( m > 200 || m <= 0 ) || ( n > 200 || n <= 0 ) ) ; h = m ; s = n ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) pret = 0 ; if ( pret == 1 ) { for ( p = k ; p < m - 1 ; p ++ ) for ( r = 0 ; r < n ; r ++ ) mat [ p ] [ r ] = mat [ p + 1 ] [ r ] ; p -- ; m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { pret = 1 ; for ( i = 0 ; i < m ; i ++ ) if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) pret = 0 ; if ( pret == 1 ) { for ( p = k ; p < n - 1 ; p ++ ) for ( r = 0 ; r < m ; r ++ ) mat [ r ] [ p ] = mat [ r ] [ p + 1 ] ; p -- ; n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] > 9 || mat [ i ] [ j ] < 0 ) printf ( ""   "" ) ; else printf ( ""    "" ) ; printf ( ""%d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1398,89,89,0,60,A2016/Z2/Z2/student5380,A2016/Z2/Z2/student2406,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; double step , min , sec , x ; int i , j , n ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { x = fabs ( ( niz [ i ] ) * ( 180 / pi ) ) ; min = ( ( x - ( int ) x ) * 60 ) ; sec = ( round ( ( min - ( int ) min ) * 60 ) ) ; if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { x = ( niz [ i ] * ( 180 / pi ) ) ; min = fabs ( ( x - ( int ) x ) * 60 ) ; sec = ( ( min - ( int ) min ) * 60 ) ; step = ( int ) x ; min = ( int ) min ; sec = round ( sec ) ; if ( step >= 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step ++ ; } } if ( step < 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , step , min , sec ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] , stepeni , minute , sekunde ; double u ; int j , i , x ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < x ; i ++ ) { u = fabs ( ( niz [ i ] * 180 ) / pi ) ; minute = ( u - ( int ) u ) * 60 ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( sekunde > 30 ) { for ( j = i ; j < x - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } x -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < x ; i ++ ) { u = ( niz [ i ] * 180 ) / pi ; minute = fabs ( ( u - ( int ) u ) * 60 ) ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; stepeni = ( int ) u ; minute = ( int ) minute ; sekunde = round ( sekunde ) ; if ( stepeni > 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni ++ ; } } if ( stepeni < 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , stepeni , minute , sekunde ) ; } return 0 ; }"
1400,77,77,0,56,A2016/Z3/Z2/student2086,A2016/Z3/Z2/student9946,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define bre1 10 #define bre12 20 void ubaci ( int * niz , int size ) { int n , dig , num1 , num2 = 0 ; for ( n = size - 1 ; n >= 0 ; n -- ) { * ( niz + 2 * n ) = * ( niz + n ) ; } for ( n = 0 ; n < size * 2 ; n ++ ) { if ( n % 2 == 1 ) { num1 = * ( niz + n - 1 ) ; while ( num1 != 0 ) { dig = num1 % 10 ; num2 += dig ; num1 /= 10 ; } num2 = abs ( num2 ) ; * ( niz + n ) = num2 ; num2 = 0 ; } } } int izbaci ( int * niz , int size ) { int n , m , p , first = 0 , second = 1 , next ; for ( n = 0 ; n < size ; n ++ ) { first = 0 ; second = 1 ; for ( m = 1 ; m < 10000 ; m ++ ) { if ( m == 1 ) { next = m ; } else { next = first + second ; first = second ; second = next ; } if ( * ( niz + n ) == next ) { for ( p = n ; p < size - 1 ; p ++ ) { * ( niz + p ) = * ( niz + p + 1 ) ; } size -- ; n -- ; break ; } } } return size ; } int main ( ) { int niz [ 20 ] , n , x ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( n = 0 ; n < 10 ; n ++ ) { scanf ( ""%d"" , & niz [ n ] ) ; } ubaci ( niz , bre1 ) ; x = izbaci ( niz , bre12 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( n = 0 ; n < x ; n ++ ) { if ( n < ( x - 1 ) ) { printf ( ""%d, "" , niz [ n ] ) ; } else { printf ( ""%d. "" , niz [ n ] ) ; } } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define brel 10 #define brel2 20 void ubaci ( int * niz , int velicina ) { int i ; int cifra ; int broj ; int broj2 = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { cifra = broj % 10 ; broj2 += cifra ; broj /= 10 ; } * ( niz + i ) = abs ( broj2 ) ; broj2 = 0 ; } } } int izbaci ( int * niz , int velicina ) { int i ; int j ; int m ; int prvi = 0 ; int drugi = 1 ; int slijedeci ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) slijedeci = j ; else { slijedeci = prvi + drugi ; prvi = drugi ; drugi = slijedeci ; } if ( * ( niz + i ) == slijedeci ) { for ( m = i ; m < velicina - 1 ; m ++ ) { * ( niz + m ) = * ( niz + m + 1 ) ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 20 ] ; int i ; int n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , brel ) ; n = izbaci ( niz , brel2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < ( n - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }"
1406,74,74,0,24,A2016/Z2/Z4/student6877,A2016/Z2/Z4/student4665,"#include <stdio.h> #include <math.h> int main ( ) { int i , j , m , n , teplicova , cirkularna ; double mat [ 100 ] [ 100 ] ; printf ( ""unesite m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; } } while ( m < 0 || m > 100 || n < 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } teplicova = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; break ; } } } cirkularna = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] || mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; break ; } } } if ( teplicova == 1 && cirkularna == 0 ) printf ( ""matrica je teplicova"" ) ; else if ( cirkularna == 1 && teplicova == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j ; float mat [ 100 ] [ 100 ] ; int cirkularna = 1 , teplicova = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%f"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; break ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] || mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; break ; } } } if ( n == 1 && m != 1 ) cirkularna = 0 ; if ( cirkularna ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1413,90,90,0,50,A2016/Z2/Z3/student8780,A2016/Z2/Z3/student4420,"#include <stdio.h> int main ( ) { int i , j , n , x , y ; char sistem [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n > 10 || n < 1 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { sistem [ i ] [ j ] = ' ' ; } } for ( j = 1 ; j <= n ; j ++ ) { printf ( ""unesite %d. tacku: "" , j ) ; scanf ( ""%d %d"" , & x , & y ) ; while ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite %d. tacku: "" , j ) ; scanf ( ""%d %d"" , & x , & y ) ; } sistem [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , sistem [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bkt , i , j , ktacke ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; while ( bkt < 1 || bkt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( ktacke = 0 ; ktacke < bkt ; ktacke ++ ) { printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( i < 0 || j < 0 || i > 19 || j > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } niz [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1433,71,71,0,65,A2016/Z4/Z2/student2585,A2016/Z4/Z2/student1029,"#include <stdio.h> char * kodiraj ( char * tekst , char * sifrarnik ) { char * pok_na_string = tekst ; char * pok_na_tabelu = sifrarnik ; int niz_brojaca [ 95 ] = { 0 } ; int slovo , i , br = 0 ; while ( * tekst != '\0' ) { niz_brojaca [ * tekst - 32 ] ++ ; tekst ++ ; } for ( ; ; ) { int postoji_slovo = 0 ; for ( i = 0 ; i < 95 ; i ++ ) { if ( niz_brojaca [ i ] > 0 ) { postoji_slovo = 1 ; break ; } } if ( postoji_slovo == 1 ) { int max = 0 ; for ( i = 0 ; i < 95 ; i ++ ) { if ( niz_brojaca [ i ] > max ) { max = niz_brojaca [ i ] ; slovo = i ; } } niz_brojaca [ slovo ] = - 1 ; br ++ ; * sifrarnik = slovo + 32 ; sifrarnik ++ ; } else break ; } * sifrarnik = ' ' ; for ( i = 0 ; i < 95 ; i ++ ) { if ( niz_brojaca [ i ] == 0 ) { * sifrarnik = i + 32 ; sifrarnik ++ ; } } sifrarnik ++ ; * sifrarnik = '\0' ; tekst = pok_na_string ; sifrarnik = pok_na_tabelu ; while ( * tekst ) { int pozicija ; for ( i = 0 ; i < br ; i ++ ) { if ( * tekst == sifrarnik [ i ] ) { pozicija = i ; break ; } } * tekst = 126 - pozicija ; tekst ++ ; } return pok_na_string ; } char * dekodiraj ( char * tekst , char * sifrarnik ) { char * pok_na_string = tekst ; while ( * tekst ) { int pozicija = 126 - * tekst ; * tekst = sifrarnik [ pozicija ] ; tekst ++ ; } return pok_na_string ; } int main ( ) { return 0 ; }","#include <stdio.h> char * kodiraj ( char * c , char * sifrarnik ) { char * pokazivac_stringa = c ; char * pokazivac_tabele = sifrarnik ; int znak = 0 ; int i ; int brojaci [ 95 ] = { 0 } ; int brojac = 0 ; int mjesto_stringa = 0 ; while ( * c != '\0' ) { brojaci [ * c - 32 ] ++ ; c ++ ; } for ( ; ; ) { int postoji = 0 ; for ( i = 0 ; i < 95 ; i ++ ) { if ( brojaci [ i ] > 0 ) { postoji = 1 ; break ; } } if ( postoji == 1 ) { int max = 0 ; for ( i = 0 ; i < 95 ; i ++ ) { if ( brojaci [ i ] > max ) { max = brojaci [ i ] ; znak = i ; } } brojaci [ znak ] = - 1 ; brojac ++ ; * sifrarnik = znak + 32 ; sifrarnik ++ ; } else break ; } * sifrarnik = ' ' ; for ( i = 0 ; i < 95 ; i ++ ) { if ( brojaci [ i ] == 0 ) { * sifrarnik = i + 32 ; sifrarnik ++ ; } } sifrarnik ++ ; * sifrarnik = '\0' ; c = pokazivac_stringa ; sifrarnik = pokazivac_tabele ; while ( * c ) { for ( i = 0 ; i < brojac ; i ++ ) { if ( * c == sifrarnik [ i ] ) { mjesto_stringa = i ; break ; } } * c = 126 - mjesto_stringa ; c ++ ; } return pokazivac_stringa ; } char * dekodiraj ( char * c , char * sifrarnik ) { int mjesto_stringa ; char * pokazivac_stringa = c ; while ( * c ) { mjesto_stringa = 126 - * c ; * c = sifrarnik [ mjesto_stringa ] ; c ++ ; } return pokazivac_stringa ; } int main ( ) { return 0 ; }"
1446,97,97,0,20,A2016/Z1/Z2/student7665,A2016/Z1/Z2/student8187,"#include <stdio.h> #include<math.h> #define epsilon 0.001 int main ( ) { float a1 , y1 , x , b1 , a2 , b2 ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; return 0 ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y1 = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%2.1f,%2.1f)"" , x , y1 ) ; return 0 ; } }","#include <stdio.h> #define epsilon 0.01 #include <math.h> int main ( ) { float a1 , b1 , a2 , b2 , y , x ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } else if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; return 0 ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; } return 0 ; }"
1447,90,90,0,58,A2016/Z3/Z3/student8152,A2016/Z3/Z3/student7425,"#include <stdio.h> int main ( ) { int m , n , matrica [ 200 ] [ 200 ] , i , j , k , l , isti = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n <= 0 || m <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( n <= 0 || m <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( k = j ; k < m - 1 ; k ++ ) { for ( l = 0 ; l < n ; l ++ ) { matrica [ k ] [ l ] = matrica [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] != matrica [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { matrica [ l ] [ k ] = matrica [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , matrix [ 200 ] [ 200 ] , i , j , k , l , z , br = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrix [ i ] [ j ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { br = 1 ; for ( j = 0 ; j < n ; j ++ ) if ( matrix [ i ] [ j ] != matrix [ k ] [ j ] ) br = 0 ; if ( br == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) for ( z = 0 ; z < n ; z ++ ) matrix [ l ] [ z ] = matrix [ l + 1 ] [ z ] ; m -- ; k -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { br = 1 ; for ( j = 0 ; j < m ; j ++ ) if ( matrix [ j ] [ i ] != matrix [ j ] [ k ] ) br = 0 ; if ( br == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) for ( z = 0 ; z < m ; z ++ ) matrix [ z ] [ l ] = matrix [ z ] [ l + 1 ] ; n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrix [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1454,53,53,0,31,A2016/Z2/Z2/student5573,A2016/Z2/Z2/student7888,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define g 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , n , sekundaf , stepen , minuta ; double niz [ 500 ] = { 0 } , sekunda , m , b = 0.5 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] *= 180. / pi ; } for ( i = 0 ; i < n ; i ++ ) { m = ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ; sekunda = fabs ( 60 * m ) ; sekunda += b ; sekundaf = sekunda ; if ( sekundaf == 60 ) { sekundaf = 0 ; } if ( sekundaf > 30 ) { for ( j = i ; j < n ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { stepen = niz [ i ] ; minuta = abs ( ( 60 * ( niz [ i ] - ( int ) niz [ i ] ) ) ) ; if ( niz [ i ] >= 0 ) { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) + b ) ) ; } else { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) - b ) ) ; } if ( fabs ( sekunda - 60 ) < g ) { minuta ++ ; sekunda = 0 ; } if ( niz [ i ] >= 0 ) { if ( minuta >= 60 ) { stepen ++ ; minuta = 0 ; } } else { if ( minuta >= 60 ) { stepen -- ; minuta = 0 ; } } sekundaf = sekunda ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepen , minuta , sekundaf ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define eps 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , sekf , ste , min ; int bruglova ; double uglovi [ 500 ] = { 0 } , sek , a ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & bruglova ) ; i = 0 ; while ( i < bruglova ) { scanf ( ""%lf"" , & uglovi [ i ] ) ; uglovi [ i ] *= 180. / pi ; i ++ ; } i = 0 ; while ( i < bruglova ) { a = ( ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) - ( int ) ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) ) ; sek = fabs ( 60 * a ) ; sek += 0.5 ; sekf = sek ; if ( sekf == 60 ) sekf = 0 ; if ( sekf > 30 ) { j = i ; while ( j < bruglova ) { uglovi [ j ] = uglovi [ j + 1 ] ; j ++ ; } bruglova -- ; i -- ; } i ++ ; } printf ( ""uglovi su: \n"" ) ; i = 0 ; while ( i < bruglova ) { ste = uglovi [ i ] ; min = abs ( ( 60 * ( uglovi [ i ] - ( int ) uglovi [ i ] ) ) ) ; if ( uglovi [ i ] >= 0 ) sek = fabs ( ( int ) ( ( 60 * ( ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) - ( int ) ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) ) ) + 0.5 ) ) ; else sek = fabs ( ( int ) ( ( 60 * ( ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) - ( int ) ( 60 * ( uglovi [ i ] - ( int ) ( uglovi [ i ] ) ) ) ) ) - 0.5 ) ) ; if ( fabs ( sek - 60 ) < eps ) { min ++ ; sek = 0 ; } if ( uglovi [ i ] >= 0 ) { if ( min >= 60 ) { ste ++ ; min = 0 ; } } else if ( min >= 60 ) { ste -- ; min = 0 ; } sekf = sek ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , ste , min , sekf ) ; i ++ ; } return 0 ; }"
1457,99,99,0,68,A2016/Z2/Z4/student7823,A2016/Z2/Z4/student7457,"#include <stdio.h> #include <math.h> #define epsilon 0.0005 int provjeridijagonalu ( double matrica [ 100 ] [ 100 ] , int m , int n , int x , int y ) { int i , j ; for ( i = x , j = y ; i < m && j < n ; i ++ , j ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ x ] [ y ] ) > epsilon ) return 0 ; } return 1 ; } int provjericirkularnu ( double matrica [ 100 ] [ 100 ] , int m , int n ) { int i , j , k ; double a ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { for ( k = 0 ; k < n - 1 ; k ++ ) { a = matrica [ i ] [ k ] ; matrica [ i ] [ k ] = matrica [ i ] [ k + 1 ] ; matrica [ i ] [ k + 1 ] = a ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < m ; i ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ 0 ] [ j ] ) > epsilon ) return 1 ; } } return 2 ; } int provjeriteplicovu ( double matrica [ 100 ] [ 100 ] , int m , int n ) { int i , j = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( provjeridijagonalu ( matrica , m , n , i , j ) == 0 ) return 0 ; } for ( i = 0 ; i < n ; i ++ ) { if ( provjeridijagonalu ( matrica , m , n , j , i ) == 0 ) return 0 ; } return provjericirkularnu ( matrica , m , n ) ; } int main ( ) { int i , j , m , n ; double matrica [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } switch ( provjeriteplicovu ( matrica , m , n ) ) { case 0 : printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; break ; case 1 : printf ( ""matrica je teplicova"" ) ; break ; case 2 : printf ( ""matrica je cirkularna"" ) ; break ; } return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0005 int provjeridijagonalu ( double matrica [ 100 ] [ 100 ] , int m , int n , int x , int y ) { int i , j ; for ( i = x , j = y ; i < m && j < n ; i ++ , j ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ x ] [ y ] ) > epsilon ) return 0 ; } return 1 ; } int provjericirkularnu ( double matrica [ 100 ] [ 100 ] , int m , int n ) { int i , j , k ; double a ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { for ( k = 0 ; k < n - 1 ; k ++ ) { a = matrica [ i ] [ k ] ; matrica [ i ] [ k ] = matrica [ i ] [ k + 1 ] ; matrica [ i ] [ k + 1 ] = a ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = 0 ; i < m ; i ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ 0 ] [ j ] ) > epsilon ) return 1 ; } } return 2 ; } int provjeriteplicovu ( double matrica [ 100 ] [ 100 ] , int m , int n ) { int i , j = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( provjeridijagonalu ( matrica , m , n , i , j ) == 0 ) return 0 ; } for ( i = 0 ; i < n ; i ++ ) { if ( provjeridijagonalu ( matrica , m , n , j , i ) == 0 ) return 0 ; } return provjericirkularnu ( matrica , m , n ) ; } int main ( ) { int i , j , m , n ; double matrica [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } switch ( provjeriteplicovu ( matrica , m , n ) ) { case 0 : printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; break ; case 1 : printf ( ""matrica je teplicova"" ) ; break ; case 2 : printf ( ""matrica je cirkularna"" ) ; break ; } return 0 ; }"
1461,98,98,0,45,A2016/Z2/Z4/student1422,A2016/Z2/Z4/student2335,"#include <stdio.h> #include <math.h> #define epsilon 0.0001 int main ( ) { int i = 0 , j = 0 , m = 0 , n = 0 , tep = 1 , cir = 1 ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 100 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; else break ; } while ( 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j == 0 ) { if ( ! ( fabs ( mat [ i ] [ j ] - mat [ i - 1 ] [ n - 1 ] ) < epsilon ) ) cir = 0 ; } else if ( j != 0 ) { if ( ! ( fabs ( mat [ i ] [ j ] - mat [ i - 1 ] [ j - 1 ] ) < epsilon ) ) cir = 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( ! ( fabs ( mat [ i ] [ j ] - mat [ i + 1 ] [ j + 1 ] ) < epsilon ) ) tep = 0 ; } } if ( cir == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( tep == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0001 int main ( ) { int i = 0 , j = 0 , m = 0 , n = 0 , tep = 1 , cir = 1 ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 100 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; else break ; } while ( 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( j == 0 ) { if ( ! ( fabs ( mat [ i ] [ j ] - mat [ i - 1 ] [ n - 1 ] ) < epsilon ) ) cir = 0 ; } else if ( j != 0 ) { if ( ! ( fabs ( mat [ i ] [ j ] - mat [ i - 1 ] [ j - 1 ] ) < epsilon ) ) cir = 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( ! ( fabs ( mat [ i ] [ j ] - mat [ i + 1 ] [ j + 1 ] ) < epsilon ) ) tep = 0 ; } } if ( cir == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( tep == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1463,99,99,0,255,A2016/Z5/Z2/student7802,A2016/Z5/Z2/student9538,"#include <stdio.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 , j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }"
1470,72,72,0,34,A2016/Z2/Z4/student1192,A2016/Z2/Z4/student4824,"#include <stdio.h> #include <math.h> #define epsilon 0.0001 #include <stdlib.h> int main ( ) { int i , t , c , j , m , n ; double a [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m > 100 ) || ( m <= 0 ) || ( n > 100 ) || ( n <= 0 ) ) printf ( ""pogresan unos!\n"" ) ; } while ( ( m > 100 ) || ( m <= 0 ) || ( n > 100 ) || ( n <= 0 ) ) ; printf ( ""unesite elemente matrice: "" ) ; t = 1 ; c = 1 ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & a [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( a [ i ] [ j ] - a [ i + 1 ] [ j + 1 ] ) > epsilon ) { t = 0 ; } } } if ( t == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( fabs ( a [ i ] [ n - 1 ] - a [ i + 1 ] [ 0 ] ) > epsilon ) c = 0 ; } } if ( t == 1 ) { if ( c == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define epsilon 0.0000000001 int main ( ) { double niz [ 100 ] [ 100 ] ; int a , b , m , n , t , c ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( ( m <= 0 ) || ( m > 100 ) ) || ( ( n <= 0 ) || ( n > 100 ) ) ) { printf ( ""pogresan unos!\n"" ) ; } } while ( ( ( m <= 0 ) || ( m > 100 ) ) || ( ( n <= 0 ) || ( n > 100 ) ) ) ; printf ( ""unesite elemente matrice: "" ) ; t = 1 ; c = 1 ; for ( a = 0 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { scanf ( ""%lf"" , & niz [ a ] [ b ] ) ; } } for ( a = 0 ; a < ( m - 1 ) ; a ++ ) { for ( b = 0 ; b < ( n - 1 ) ; b ++ ) { if ( ( fabs ( niz [ a ] [ b ] - niz [ a + 1 ] [ b + 1 ] ) > epsilon ) ) t = 0 ; } } for ( a = 0 ; a < ( m - 1 ) ; a ++ ) { for ( b = 0 ; b < ( n - 1 ) ; b ++ ) { if ( ( fabs ( niz [ a ] [ b ] - niz [ a + 1 ] [ b + 1 ] ) > epsilon ) || ( fabs ( niz [ a ] [ n - 1 ] - niz [ a + 1 ] [ 0 ] ) > epsilon ) ) c = 0 ; } } if ( ( ( t == 1 ) && ( c == 0 ) ) || ( ( m == 100 ) && ( n == 1 ) ) ) { printf ( ""matrica je teplicova"" ) ; } else if ( c == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }"
1471,98,98,0,70,A2016/Z3/Z3/student2126,A2016/Z3/Z3/student2371,"#include <stdio.h> int main ( ) { int m , n , q ; int matrica [ 201 ] [ 201 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n <= 0 || n > 200 || m <= 0 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( n <= 0 || n > 200 || m <= 0 || m > 200 ) ; int i , j ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } while ( 1 ) { int pr ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { q = 1 ; for ( pr = 0 ; pr < m ; pr ++ ) { if ( matrica [ pr ] [ i ] != matrica [ pr ] [ j ] ) { q = 0 ; } } if ( q ) { int a , b ; for ( b = j ; b < n - 1 ; b ++ ) { for ( a = 0 ; a < m ; a ++ ) { matrica [ a ] [ b ] = matrica [ a ] [ b + 1 ] ; } } n -- ; j -- ; } } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { q = 1 ; for ( pr = 0 ; pr < n ; pr ++ ) { if ( matrica [ i ] [ pr ] != matrica [ j ] [ pr ] ) { q = 0 ; } } if ( q ) { int a , b ; for ( b = j ; b < m - 1 ; b ++ ) { for ( a = 0 ; a < n ; a ++ ) { matrica [ b ] [ a ] = matrica [ b + 1 ] [ a ] ; } } m -- ; j -- ; } } } break ; } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int a , b , c ; int mat [ 201 ] [ 201 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 || a > 200 || b <= 0 || b > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( a <= 0 || a > 200 || b <= 0 || b > 200 ) ; int i , j ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } while ( 1 == 1 ) { int p ; for ( i = 0 ; i < b ; i ++ ) { for ( j = i + 1 ; j < b ; j ++ ) { c = 1 ; for ( p = 0 ; p < a ; p ++ ) { if ( mat [ p ] [ i ] != mat [ p ] [ j ] ) { c = 0 ; } } if ( c ) { int x , y ; for ( y = j ; y < b - 1 ; y ++ ) { for ( x = 0 ; x < a ; x ++ ) { mat [ x ] [ y ] = mat [ x ] [ y + 1 ] ; } } b -- ; j -- ; } } } for ( i = 0 ; i < a ; i ++ ) { for ( j = i + 1 ; j < a ; j ++ ) { c = 1 ; for ( p = 0 ; p < b ; p ++ ) { if ( mat [ i ] [ p ] != mat [ j ] [ p ] ) { c = 0 ; } } if ( c ) { int x , y ; for ( y = j ; y < a - 1 ; y ++ ) { for ( x = 0 ; x < b ; x ++ ) { mat [ y ] [ x ] = mat [ y + 1 ] [ x ] ; } } a -- ; j -- ; } } } break ; } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1476,99,99,0,116,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6723,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjecna_ocjena ( int niz [ ] , int vel ) { if ( vel == 0 ) return 0 ; int i ; double prosjek = 5 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; else suma += niz [ i ] ; return suma / vel ; } int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return - 1 ; if ( strcmp ( s1 , s2 ) > 0 ) return 1 ; } int vratiduz ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } return velicina ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; velicina = vratiduz ( studenti , velicina , prosjek ) ; int prvi = - 1 , drugi = - 1 , treci = - 1 ; double najveci = 0 , prosj ; int ispred ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci ) { if ( prosjek > najveci ) { prvi = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ prvi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 1 ) prvi = i ; if ( ispred == 0 ) ispred = uporedi ( studenti [ prvi ] . ime , studenti [ i ] . ime ) ; } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci && i != prvi ) { if ( prosjek > najveci ) { drugi = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ drugi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ drugi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { drugi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci && i != prvi && i != drugi ) { if ( prosjek > najveci ) { treci = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ treci ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ treci ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) treci = i ; } } if ( velicina == 1 ) printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; if ( velicina == 2 ) { printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; return 2 ; } if ( velicina > 2 ) { printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ treci ] . prezime , studenti [ treci ] . ime ) ; } return velicina ; } int main ( ) { struct student studenti [ 10 ] = { { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 7 , 8 , 9 } , 3 } , { ""mujo"" , ""mujic"" , { 10 , 10 , 10 , 10 , 9 } , 5 } , } ; int vel = genijalci ( studenti , 4 , 7 ) ; return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjecna_ocjena ( int niz [ ] , int vel ) { if ( vel == 0 ) return 0 ; int i ; double prosjek = 5 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; else suma += niz [ i ] ; return suma / vel ; } int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return - 1 ; if ( strcmp ( s1 , s2 ) > 0 ) return 1 ; } int vratiduz ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } return velicina ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; velicina = vratiduz ( studenti , velicina , prosjek ) ; int prvi = - 1 , drugi = - 1 , treci = - 1 ; double najveci = 0 , prosj ; int ispred ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci ) { if ( prosjek > najveci ) { prvi = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ prvi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 1 ) prvi = i ; if ( ispred == 0 ) ispred = uporedi ( studenti [ prvi ] . ime , studenti [ i ] . ime ) ; } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci && i != prvi ) { if ( prosjek > najveci ) { drugi = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ drugi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ drugi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { drugi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci && i != prvi && i != drugi ) { if ( prosjek > najveci ) { treci = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ treci ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ treci ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) treci = i ; } } if ( velicina == 1 ) printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; if ( velicina == 2 ) { printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; return 2 ; } if ( velicina > 2 ) { printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ treci ] . prezime , studenti [ treci ] . ime ) ; } return velicina ; } int main ( ) { struct student studenti [ 10 ] = { { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 7 , 8 , 9 } , 3 } , { ""mujo"" , ""mujic"" , { 10 , 10 , 10 , 10 , 9 } , 5 } , } ; int vel = genijalci ( studenti , 4 , 7 ) ; return 0 ; }"
1478,21,21,0,14,A2016/Z4/Z2/student1616,A2016/Z4/Z2/student7180,"#include <stdio.h> void sortiraj ( int * niz , int * sort , int * index ) { int i , j ; int temp ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && index [ i ] > index [ j ] ) { temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } } } } void pretvori ( char * s , char * sifrarnik ) { char * p = s , * kljuc = sifrarnik ; int br ; while ( * p != '\0' ) { br = 0 ; kljuc = sifrarnik ; while ( * kljuc != '\0' ) { if ( * p == * kljuc ++ ) { * p = 126 - br ; break ; } br ++ ; } p ++ ; } } char * kodiraj ( char * s , char * sifrarnik ) { char * p = s , * pok = sifrarnik ; int i ; int niz [ 127 ] ; int sort [ 127 ] ; int index [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; index [ i ] = - 1 ; } else { niz [ i ] = 0 ; index [ i ] = i ; } } while ( * p != '\0' ) { niz [ * p + 0 ] ++ ; p ++ ; } for ( i = 0 ; i < 127 ; i ++ ) sort [ i ] = niz [ i ] ; sortiraj ( niz , sort , index ) ; for ( i = 0 ; i < 127 ; i ++ ) { if ( index [ i ] != - 1 ) { * pok = index [ i ] ; pok ++ ; } } pretvori ( s , sifrarnik ) ; return s ; } char * dekodiraj ( char * s , char * sifrarnik ) { char * p = s ; while ( * p != '\0' ) { * p = sifrarnik [ 126 - * p ] ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""u ovom testu cemo testirati samo kodiranje"" ; char sifrarnik [ 100 ] = """" ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; printf ( ""%s\n"" , sifrarnik ) ; return 0 ; }","#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }"
1486,98,98,0,25,A2016/Z2/Z1/student4824,A2016/Z2/Z1/student3610,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int broj , j , l , k = 0 , m = 0 , z = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( ( broj > 0 ) && ( broj < 10 ) ) { z = 0 ; printf ( ""%d"" , z ) ; return 0 ; } if ( broj < 0 ) { broj = abs ( broj ) ; } for ( ; broj >= 10 ; k ++ ) { j = broj % 10 ; broj = broj / 10 ; l = broj % 10 ; m = abs ( ( j - l ) ) * pow ( 10 , k ) ; z = z + m ; } printf ( ""%d"" , z ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int broj , j , l , k = 0 , m = 0 , z = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( ( broj > 0 ) && ( broj < 10 ) ) { z = 0 ; printf ( ""%d"" , z ) ; return 0 ; } if ( broj < 0 ) { broj = abs ( broj ) ; } for ( ; broj >= 10 ; k ++ ) { j = broj % 10 ; broj = broj / 10 ; l = broj % 10 ; m = abs ( ( j - l ) ) * pow ( 10 , k ) ; z = z + m ; } printf ( ""%d"" , z ) ; return 0 ; }"
1498,99,99,0,89,A2016/Z4/Z3/student2111,A2016/Z4/Z3/student8540,"#include <stdio.h> int ifchange ( char * t , char * r ) { char * b = t ; char * br = r ; int m = 1 ; while ( * t != '\0' && * r != '\0' ) { if ( * t != * r ) m = 0 ; t ++ ; r ++ ; } if ( ( * t != ' ' && * t != '\0' ) || * r != '\0' ) m = 0 ; t = b ; r = br ; return m ; } void change ( char * txt , char * w , char * nw ) { char * tmp = txt ; char * wtmp = w , * ntmp = nw , * c = txt ; int m = 0 , i , cnt = 1 ; while ( * txt != '\0' ) { cnt = 0 ; while ( * txt != '\0' && * txt != * w ) { txt ++ ; } if ( * txt != '\0' && ( txt == tmp || * ( txt - 1 ) == ' ' ) && ifchange ( txt , w ) ) { while ( * nw != '\0' ) { if ( * txt == ' ' || * txt == '\0' ) { c = txt ; while ( * txt != '\0' ) { txt ++ ; } txt ++ ; while ( txt > c ) { * txt = * ( txt - 1 ) ; txt -- ; } } * txt = * nw ; txt ++ ; nw ++ ; } cnt = 1 ; } if ( * txt != ' ' && * txt != '\0' && cnt == 1 ) { c = txt ; while ( * txt != ' ' && * txt != '\0' ) { m ++ ; txt ++ ; } txt = c ; for ( i = 0 ; i < m ; i ++ ) { txt = c ; while ( * txt != '\0' ) { * txt = * ( txt + 1 ) ; txt ++ ; } } txt = c ; } if ( * txt != ' ' && * txt != '\0' ) txt ++ ; w = wtmp ; nw = ntmp ; } txt = tmp ; w = wtmp ; nw = ntmp ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * tmptxt = tekst ; int i ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { tekst = tmptxt ; while ( * tekst != '\0' ) { while ( * tekst != '\0' && * tekst == ' ' ) { tekst ++ ; } if ( ifchange ( tekst , rijeci [ i ] ) ) { change ( tekst , rijeci [ i ] , zamjene [ i ] ) ; } while ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; } } return tmptxt ; } int main ( ) { char * rijeci [ 2 ] = { """" , """" } ; char * zamjene [ 2 ] = { """" , """" } ; char tekst [ 100 ] = """" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }","#include <stdio.h> int ifchange ( char * t , char * r ) { char * b = t ; char * br = r ; int m = 1 ; while ( * t != '\0' && * r != '\0' ) { if ( * t != * r ) m = 0 ; t ++ ; r ++ ; } if ( ( * t != ' ' && * t != '\0' ) || * r != '\0' ) m = 0 ; t = b ; r = br ; return m ; } void change ( char * txt , char * w , char * nw ) { char * tmp = txt ; char * wtmp = w , * ntmp = nw , * c = txt ; int m = 0 , i , cnt = 1 ; while ( * txt != '\0' ) { cnt = 0 ; while ( * txt != '\0' && * txt != * w ) { txt ++ ; } if ( * txt != '\0' && ( txt == tmp || * ( txt - 1 ) == ' ' ) && ifchange ( txt , w ) ) { while ( * nw != '\0' ) { if ( * txt == ' ' || * txt == '\0' ) { c = txt ; while ( * txt != '\0' ) { txt ++ ; } txt ++ ; while ( txt > c ) { * txt = * ( txt - 1 ) ; txt -- ; } } * txt = * nw ; txt ++ ; nw ++ ; } cnt = 1 ; } if ( * txt != ' ' && * txt != '\0' && cnt == 1 ) { c = txt ; while ( * txt != ' ' && * txt != '\0' ) { m ++ ; txt ++ ; } txt = c ; for ( i = 0 ; i < m ; i ++ ) { txt = c ; while ( * txt != '\0' ) { * txt = * ( txt + 1 ) ; txt ++ ; } } txt = c ; } if ( * txt != ' ' && * txt != '\0' ) txt ++ ; w = wtmp ; nw = ntmp ; } txt = tmp ; w = wtmp ; nw = ntmp ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * tmptxt = tekst ; int i ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { tekst = tmptxt ; while ( * tekst != '\0' ) { while ( * tekst != '\0' && * tekst == ' ' ) { tekst ++ ; } if ( ifchange ( tekst , rijeci [ i ] ) ) { change ( tekst , rijeci [ i ] , zamjene [ i ] ) ; } while ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; } } return tmptxt ; } int main ( ) { char * rijeci [ 2 ] = { """" , """" } ; char * zamjene [ 2 ] = { """" , """" } ; char tekst [ 100 ] = """" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }"
1505,20,20,0,21,A2016/Z5/Z1/student1542,A2016/Z5/Z1/student6548,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } float prosjek ( int niz [ ] , int velicina ) { int i , suma = 0 ; float pr ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] == 5 || velicina == 0 ) return 5 ; suma += niz [ i ] ; } pr = ( float ) suma / velicina ; return pr ; } int genijalci ( struct student * niz , int velicina , float pros ) { int i , j , indeks = 0 , indeks2 = 0 , indeks3 = 0 ; float max = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] . br_ocjena == 0 || prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) < pros ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } if ( velicina == 0 ) return 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks ] . ime , niz [ i ] . ime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks ] . prezime , niz [ indeks ] . ime ) ; max = 0 ; indeks2 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; else { indeks2 = i ; break ; } } if ( indeks2 == - 1 ) return velicina ; max = prosjek ( niz [ indeks2 ] . ocjene , niz [ indeks2 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks2 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks2 ] . ime , niz [ i ] . ime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks2 ] . prezime , niz [ indeks2 ] . ime ) ; max = 0 ; indeks3 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; else { indeks3 = i ; break ; } } if ( indeks3 == - 1 ) return velicina ; max = prosjek ( niz [ indeks3 ] . ocjene , niz [ indeks3 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks3 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks3 ] . ime , niz [ i ] . ime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks3 ] . prezime , niz [ indeks3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjecna_ocjena ( int niz [ ] , int vel ) { if ( vel == 0 ) return 0 ; int i ; double prosjek = 5 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } prosjek = suma / vel ; return prosjek ; } int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } int prvi = - 1 , drugi = - 1 , treci = - 1 ; double najveci = 0 , prosj ; int ispred ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { prvi = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ prvi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ prvi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { prvi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci && i != prvi ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { drugi = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ drugi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ drugi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { drugi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci && i != prvi && i != drugi ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { treci = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ treci ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ treci ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { treci = i ; } } } for ( i = 0 ; i < velicina ; i ++ ) if ( i == prvi ) printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; for ( i = 0 ; i < velicina ; i ++ ) if ( i == drugi ) printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; for ( i = 0 ; i < velicina ; i ++ ) if ( i == treci ) printf ( ""%s %s\n"" , studenti [ treci ] . prezime , studenti [ treci ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 10 ] = { { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 7 , 8 , 9 } , 3 } , { ""mujo"" , ""mujic"" , { 10 , 10 , 10 , 10 , 9 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 7 } , 7 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 6 , 6 , 6 , 5 } , 10 } , { ""osman"" , ""osmic"" , { 8 , 6 , 9 , 10 , 9 } , 5 } , { ""pero"" , ""mujic"" , { 10 , 6 , 10 , 10 , 9 } , 5 } , { ""beba"" , ""mujic"" , { 10 , 8 , 7 , 6 , 9 } , 5 } , } ; int vel = genijalci ( studenti , 9 , 7 ) ; return 0 ; }"
1507,17,17,0,58,A2016/Z5/Z3/student6548,A2016/Z5/Z3/student8357,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int vel = velicina ; int i = 0 , k = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel && znak != '\n' ) { niz [ i ] = znak ; i ++ ; k ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void cln ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } void isp ( int vel ) { int x ; int veli = vel / 2 ; for ( x = 0 ; x < veli ; x ++ ) printf ( ""  "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , max = 0 , min = 100 ; int indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       "" ) ; printf ( ""pet       sub\n"" ) ; int mintt = 0 ; int indexpamtimo ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; mintt = raspored [ i ] . kraj . minute ; indexpamtimo = 1 ; } } int x ; int s , dan , n ; if ( mintt == 0 ) max = max - 1 ; int poc = min ; int kraj = max ; int ukupno = broj_casova ; for ( i = poc ; i <= kraj ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%02d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < ukupno ; k ++ ) { if ( max > 0 ) { dan = raspored [ k ] . dan_u_sedmici ; n = raspored [ k ] . kraj . sati ; if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && n >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } } if ( k == ukupno && ukupno > - 1 ) isp ( 10 ) ; } printf ( ""\n"" ) ; } } void pomispis ( int k , char * s , int sat , int min , int sat1 , int min1 ) { printf ( ""\n%d) %s ("" , k ++ , s ) ; printf ( ""%02d:%02d-"" , sat , min ) ; printf ( ""%02d:%02d)"" , sat1 , min1 ) ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i , k = 1 ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int pocs = raspored [ i ] . pocetak . sati ; int pocm = raspored [ i ] . pocetak . minute ; int krajs = raspored [ i ] . kraj . sati ; int krajm = raspored [ i ] . kraj . minute ; pomispis ( k ++ , raspored [ i ] . predmet , pocs , pocm , krajs , krajm ) ; } } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) return 0 ; int nova = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz1 ) ; if ( nova != zapisano ) return 0 ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , j ; int bezzadnjeg = broj_casova - 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < bezzadnjeg ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; return ; break ; } } } } int poredba ( int p , int d ) { if ( p > d ) return 1 ; if ( p < d ) return - 1 ; if ( p == d ) return 0 ; } int poredi ( struct vrijeme t1 , struct vrijeme t2 , int vel ) { int vr = t1 . sati * vel * vel + t1 . minute * vel + t1 . sekunde , vr2 = t2 . sati * vel * vel + t2 . minute * vel + t2 . sekunde ; return poredba ( vr , vr2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int ima = 0 ; int i , prvi ; for ( i = 0 ; i < broj_casova ; i ++ ) { prvi = poredi ( raspored [ i ] . kraj , cas . pocetak , 60 ) ; if ( prvi == 1 && poredi ( cas . kraj , raspored [ i ] . pocetak , 60 ) == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) ima = 1 ; break ; } return ima ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; int ukupno = 19 - trajanje ; for ( i = 0 ; i < 6 ; i ++ ) { for ( j = 9 ; j <= ukupno ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; struct cas cc ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 1 ) continue ; else { raspored [ broj_casova ] = cas ; goto jedan ; } } } return 0 ; jedan : return 1 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } void mjesto ( int br ) { printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija != 4 && opcija != 3 && opcija != 0 && opcija != 1 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; cln ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) mjesto ( br_casova ) ; if ( vr == 1 ) broj_casova ++ ; } if ( opcija != 0 && opcija != 3 && opcija != 2 && opcija != 1 ) { int dan , redni ; printf ( ""unesite dan "" ) ; printf ( ""1=ponedjeljak, 2=utorak...,6=subota: "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova -- ; printf ( ""cas obrisan\n"" ) ; } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija != 4 && opcija != 3 && opcija != 2 && opcija != 0 ) ; ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija != 4 && opcija != 0 && opcija != 2 && opcija != 1 ) { struct cas promjena ; int dan , redni ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota):"" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; cln ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet ; char * p = predmet ; while ( * q ++ = * p ++ ) ; int prvi = broj_casova ; int drugi = dan ; int treci = redni ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . pocetak . sati , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , prvi , drugi , redni , promjena ) ; } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 , k = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; k ++ ; } niz [ k ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) return 0 ; int kap = kapacitet ; int vel = sizeof ( struct cas ) ; int ucitano ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; fclose ( ulaz ) ; return ucitano ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } void ispisss ( ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; } void ispispr ( char * pr ) { printf ( ""%-10s"" , pr ) ; } void ispispraz ( int d ) { printf ( ""          "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; ispisss ( ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { ispispr ( raspored [ k ] . predmet ) ; break ; ispispraz ( 10 ) ; } if ( k == broj_casova ) ispispraz ( 10 ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int sat = raspored [ i ] . pocetak . sati ; int min = raspored [ i ] . pocetak . minute ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( sat < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , sat ) ; if ( min < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , min ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)\n"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 ; int sat1 = t2 . sati * 3600 ; int min = t1 . minute * 60 ; int min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return - 1 ; if ( d1 == d2 ) return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) == 1 && drugi == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } int prazan ( struct cas cas ) { if ( cas . predmet == """" ) return 0 ; else return 1 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; if ( trajanje < 0 || trajanje > 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; int praz = prazan ( cas ) ; struct cas pom = { """" , 0 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) return 0 ; int kap = broj_casova ; int vel = sizeof ( struct cas ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; return 1 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; char predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, "" ) ; printf ( ""2=utorak..., "" ) ; printf ( ""6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""izaberite koji cas zelite promijeniti:  "" ) ; scanf ( ""%d"" , & redni ) ; if ( redni > 100 || redni < 0 ) goto preskok ; printf ( ""naziv predmeta: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; char * q ; if ( opcija != 0 ) q = promjena . predmet ; char * p ; if ( opcija != 0 ) p = predmet ; preskok : strcpy ( q , p ) ; char znak ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( "" cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }"
1522,96,96,0,25,A2016/Z1/Z4/student6790,A2016/Z1/Z4/student2421,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 4 * n - 3 ) ; j ++ ) { if ( j == i || i + j == 2 * n || j - i == 2 * n - 2 || i + j == 4 * n - 2 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= 4 * n - 3 ; j ++ ) { if ( j == i || j + i == 2 * n || j - i == 2 * n - 2 || j + i == 4 * n - 2 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }"
1526,98,98,0,44,A2016/Z2/Z4/student8774,A2016/Z2/Z4/student8753,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define epsilon 0.000001 int main ( ) { double matrica [ 100 ] [ 100 ] ; int i , j , m , n , teplicova = 1 , cirkularna = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d"" , & m ) ; scanf ( ""%d"" , & n ) ; if ( m > 100 || n > 100 || m <= 0 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( teplicova == 0 ) { break ; } for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ i + 1 ] [ j + 1 ] ) > epsilon ) { teplicova = 0 ; cirkularna = 0 ; } } } if ( teplicova == 1 ) { for ( i = 1 ; i < m ; i ++ ) { if ( cirkularna == 0 ) break ; if ( fabs ( matrica [ i ] [ 0 ] - matrica [ i - 1 ] [ n - 1 ] ) > epsilon ) { cirkularna = 0 ; } } } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 && cirkularna == 0 ) { printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define epsilon 0.000001 int main ( ) { double matrica [ 100 ] [ 100 ] ; int i , j , m , n , teplicova = 1 , cirkularna = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d"" , & m ) ; scanf ( ""%d"" , & n ) ; if ( m > 100 || n > 100 || m <= 0 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( teplicova == 0 ) { break ; } for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( matrica [ i ] [ j ] - matrica [ i + 1 ] [ j + 1 ] ) > epsilon ) { teplicova = 0 ; cirkularna = 0 ; } } } if ( teplicova == 1 ) { for ( i = 1 ; i < m ; i ++ ) { if ( cirkularna == 0 ) break ; if ( fabs ( matrica [ i ] [ 0 ] - matrica [ i - 1 ] [ n - 1 ] ) > epsilon ) { cirkularna = 0 ; } } } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 && cirkularna == 0 ) { printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1527,93,93,0,20,A2016/Z1/Z2/student7386,A2016/Z1/Z2/student5867,"printf ( "" unesite a, dimenzijun \n"" ) ; #include <stdio.h>#include <stdio.h> #include <math.h> int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; return 0 ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; return 0 ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
1528,74,74,0,17,A2016/Z1/Z4/student2463,A2016/Z1/Z4/student1639,"#include <stdio.h> int main ( ) { int n , i = 0 , j = 0 ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 1 ; j ++ ) { if ( i == j || i + j - ( n - 1 ) == n - 1 || i == j - 2 * ( n - 1 ) || i + j - 3 * ( n - 1 ) == n - 1 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i = 0 ; int j = 0 ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 1 ; j ++ ) { if ( i == j || i + j == 2 * n - 2 || i == j - 2 * ( n - 1 ) || i + j - 3 * ( n - 1 ) == n - 1 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }"
1531,92,92,0,74,A2016/Z2/Z2/student6594,A2016/Z2/Z2/student7173,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { int i , n , j ; double min [ 500 ] , sek [ 500 ] , stepen [ 500 ] , niz [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( niz [ i ] > 0 ) { niz [ i ] = niz [ i ] * 180 / pi ; stepen [ i ] = ( int ) niz [ i ] ; niz [ i ] = ( niz [ i ] - stepen [ i ] ) ; niz [ i ] *= 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = ( niz [ i ] - min [ i ] ) ; niz [ i ] *= 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { stepen [ i ] ++ ; min [ i ] = 0 ; } } else { niz [ i ] = niz [ i ] * 180 / pi ; stepen [ i ] = ( int ) niz [ i ] ; niz [ i ] = stepen [ i ] - niz [ i ] ; niz [ i ] *= 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = niz [ i ] - min [ i ] ; niz [ i ] *= 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { stepen [ i ] -- ; min [ i ] = 0 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { stepen [ j ] = stepen [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; sek [ j ] = sek [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( ""%g stepeni %g minuta %g sekundi\n"" , stepen [ i ] , min [ i ] , sek [ i ] ) ; return 0 ; }","#include <stdio.h> #define pi 3.1415926 int main ( ) { int i , j , n ; double step [ 500 ] , min [ 500 ] , sek [ 500 ] , niz [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { if ( niz [ i ] > 0 ) { niz [ i ] = niz [ i ] * 180 / pi ; step [ i ] = ( int ) niz [ i ] ; niz [ i ] = niz [ i ] - step [ i ] ; niz [ i ] = niz [ i ] * 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = ( niz [ i ] - min [ i ] ) ; niz [ i ] = niz [ i ] * 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { step [ i ] ++ ; min [ i ] = 0 ; } } else { niz [ i ] = niz [ i ] * 180 / pi ; step [ i ] = ( int ) niz [ i ] ; niz [ i ] = step [ i ] - niz [ i ] ; niz [ i ] = niz [ i ] * 60 ; min [ i ] = ( int ) niz [ i ] ; niz [ i ] = niz [ i ] - min [ i ] ; niz [ i ] = niz [ i ] * 60 ; sek [ i ] = ( int ) ( niz [ i ] + 0.5 ) ; if ( sek [ i ] == 60 ) { min [ i ] ++ ; sek [ i ] = 0 ; } if ( min [ i ] == 60 ) { step [ i ] -- ; min [ i ] = 0 ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { step [ j ] = step [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; sek [ j ] = sek [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:"" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( ""\n%g stepeni %g minuta %g sekundi"" , step [ i ] , min [ i ] , sek [ i ] ) ; return 0 ; }"
1535,98,98,0,72,A2016/Z3/Z2/student3301,A2016/Z3/Z2/student3567,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define brel 10 #define brel2 20 void ubaci ( int * niz , int velicina ) { int i , cifra , broj , broj2 = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { cifra = broj % 10 ; broj2 += cifra ; broj /= 10 ; } broj2 = abs ( broj2 ) ; * ( niz + i ) = broj2 ; broj2 = 0 ; } } } int izbaci ( int * niz , int velicina ) { int i , j , m , prvi = 0 , drugi = 1 , slijedeci ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) slijedeci = j ; else { slijedeci = prvi + drugi ; prvi = drugi ; drugi = slijedeci ; } if ( * ( niz + i ) == slijedeci ) { for ( m = i ; m < velicina - 1 ; m ++ ) { * ( niz + m ) = * ( niz + m + 1 ) ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , brel ) ; n = izbaci ( niz , brel2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < ( n - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define brel 10 #define brel2 20 void ubaci ( int * p , int vel ) { int i , cifra , cifra1 , cifra2 = 0 ; for ( i = vel - 1 ; i >= 0 ; i -- ) { * ( p + 2 * i ) = * ( p + i ) ; } for ( i = 0 ; i < vel * 2 ; i ++ ) { if ( i % 2 == 1 ) { cifra = * ( p + i - 1 ) ; while ( cifra != 0 ) { cifra1 = cifra % 10 ; cifra2 += cifra1 ; cifra /= 10 ; } cifra2 = abs ( cifra2 ) ; * ( p + i ) = cifra2 ; cifra2 = 0 ; } } } int izbaci ( int * p , int vel ) { int i , j , k , a = 0 , b = 1 , c ; for ( i = 0 ; i < vel ; i ++ ) { a = 0 ; b = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) c = j ; else { c = a + b ; a = b ; b = c ; } if ( * ( p + i ) == c ) { for ( k = i ; k < vel - 1 ; k ++ ) { * ( p + k ) = * ( p + k + 1 ) ; } vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int niz [ 20 ] , i , g ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , brel ) ; g = izbaci ( niz , brel2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < g ; i ++ ) { if ( i < ( g - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }"
1537,97,97,0,48,A2016/Z1/Z4/student7735,A2016/Z1/Z4/student8598,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
1543,30,30,0,24,A2016/Z4/Z2/student2351,A2016/Z4/Z2/student9188,"#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> char * kodiraj ( char * tekst , char * tabela ) { char * pom = tekst ; int i , j ; char * temp = tekst ; int br = 0 ; int priv ; int sort [ 95 ] ; int indexi [ 95 ] ; int niz [ 95 ] ; char * help = tabela ; temp ++ ; for ( i = 0 ; i < 95 ; i ++ ) niz [ i ] = 0 ; while ( * pom != '\0' ) { temp = pom ; br = 0 ; while ( * temp != '\0' ) { if ( * pom == * temp ) br ++ ; temp ++ ; } if ( niz [ * pom - 32 ] == 0 ) niz [ * pom - 32 ] = br ; pom ++ ; } br = 0 ; for ( i = 0 ; i < 95 ; i ++ ) { if ( niz [ i ] != 0 ) { sort [ br ] = niz [ i ] ; indexi [ br ] = i ; br ++ ; } } for ( i = 0 ; i < br ; i ++ ) for ( j = i ; j < br ; j ++ ) { if ( sort [ i ] < sort [ j ] ) { priv = sort [ i ] ; sort [ i ] = sort [ j ] ; sort [ j ] = priv ; priv = indexi [ i ] ; indexi [ i ] = indexi [ j ] ; indexi [ j ] = priv ; } if ( sort [ i ] == sort [ j ] && indexi [ i ] > indexi [ j ] ) { priv = indexi [ i ] ; indexi [ i ] = indexi [ j ] ; indexi [ j ] = priv ; } } for ( i = 0 ; i < br ; i ++ ) { * help = indexi [ i ] + 32 ; help ++ ; } for ( i = 0 ; i < 95 ; i ++ ) { if ( niz [ i ] == 0 ) { * help = i + 32 ; help ++ ; } } * help = '\0' ; help = tabela ; pom = tekst ; while ( * pom != '\0' ) { br = 0 ; help = tabela ; while ( * help != '\0' ) { if ( * pom == * help ) { * pom = 126 - br ; break ; } br ++ ; help ++ ; } pom ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * tabela ) { char * pom = tekst ; while ( * pom != '\0' ) { * pom = tabela [ 126 - * pom ] ; pom ++ ; } return tekst ; } int main ( ) { char tekst [ ] = ""jeste li dobro kreirali sifrarnik?"" ; char sifrarnik [ 100 ] = """" ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; printf ( ""%s"" , sifrarnik ) ; return 0 ; }"
1553,81,81,0,54,A2016/Z4/Z2/student2908,A2016/Z4/Z2/student3557,"#include <stdio.h> char * kodiraj ( char * s , char * tablica ) { int maxi = 0 , i , j , brojaci [ 95 ] = { 0 } ; char * x , * tab , * y ; x = s ; y = s ; tab = tablica ; while ( * y != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) if ( * y == i + 32 ) brojaci [ i ] ++ ; y ++ ; } for ( i = 0 ; i < 96 ; i ++ ) { for ( j = 0 ; j < 95 ; j ++ ) if ( brojaci [ j ] > brojaci [ maxi ] ) maxi = j ; * tablica ++ = maxi + 32 ; brojaci [ maxi ] = - 1 ; maxi = 0 ; } * tablica = '\0' ; tablica = tab ; while ( * x != '\0' ) { while ( * x != * tab ) tab ++ ; * x = 126 - ( tab - tablica ) ; tab = tablica ; x ++ ; } return s ; } char * dekodiraj ( char * s , char * tablica ) { int i , j = - 1 ; char * x = s , * tab = tablica ; while ( * x != '\0' ) { i = 126 - * x ; for ( j = 0 ; j < i ; j ++ ) tab ++ ; * x = * tab ; tab = tablica ; x ++ ; } return s ; } int main ( ) { char tekst [ ] = ""ovo cemo sifrirati 2 puta"" ; char sifrarnik [ 100 ] = """" ; char sifrarnik2 [ 100 ] = """" ; int i ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik [ i ] ) ; printf ( ""\n"" ) ; kodiraj ( tekst , sifrarnik2 ) ; printf ( ""%s\n"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik2 [ i ] ) ; printf ( ""\n"" ) ; dekodiraj ( tekst , sifrarnik2 ) ; printf ( ""%s\n"" , tekst ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; return 0 ; }","#include <stdio.h> char * kodiraj ( char * s , char * sifre ) { int i = 0 , j = 0 , max = 0 ; int brojac [ 95 ] = { 0 } ; char * p , * q , * t ; p = s ; q = s ; t = sifre ; while ( * q != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * q == i + 32 ) brojac [ i ] ++ ; } q ++ ; } for ( i = 0 ; i < 96 ; i ++ ) { for ( j = 0 ; j < 95 ; j ++ ) { if ( brojac [ j ] > brojac [ max ] ) max = j ; } * sifre ++ = 32 + max ; brojac [ max ] = - 1 ; max = 0 ; } * sifre = '\0' ; sifre = t ; while ( * p != '\0' ) { while ( * p != * t ) t ++ ; * p = 126 - ( t - sifre ) ; t = sifre ; p ++ ; } return s ; } char * dekodiraj ( char * s , char * sifre ) { int i , d ; char * p = s ; char * t = sifre ; while ( * p != '\0' ) { d = 126 - * p ; for ( i = 0 ; i < d ; i ++ ) t ++ ; * p = * t ; t = sifre ; p ++ ; } return s ; } int main ( ) { printf ( ""zadaca 4, zadatak 2"" ) ; return 0 ; }"
1563,77,77,0,67,A2016/Z3/Z2/student8598,A2016/Z3/Z2/student4934,"#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int * p , * q , i , suma , a , b ; p = q = niz ; for ( i = vel - 1 ; i >= 0 ; i -- ) { * ( q + ( 2 * i ) ) = * ( p + i ) ; } p = niz ; for ( i = 0 ; i < 2 * vel ; i ++ ) { suma = 0 ; a = * ( p + i ) ; a = abs ( a ) ; while ( a != 0 ) { b = a % 10 ; a /= 10 ; suma += b ; } * ( p + i + 1 ) = suma ; i ++ ; } } int fibniz ( int n ) { int x , y , z ; if ( n < 0 ) return 0 ; if ( n == 1 ) return 1 ; x = 1 ; y = 1 ; while ( 1 ) { z = x + y ; if ( n == z ) return 1 ; else if ( z > n ) return 0 ; x = y ; y = z ; } } int izbaci ( int * niz , int vel ) { int i , a , j , * p ; p = niz ; for ( i = 0 ; i < vel ; i ++ ) { a = fibniz ( * ( p + i ) ) ; if ( a == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { * ( p + j ) = * ( p + j + 1 ) ; } vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , vel = 10 , a ; printf ( ""unesite niz od 10 brojeva:"" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; a = izbaci ( niz , 2 * vel ) ; printf ( "" modificirani niz glasi: "" ) ; for ( i = 0 ; i < a - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int velicina ) { int * o ; int * s ; int i ; int zbir ; int x ; int y ; o = s = niz ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( s + ( 2 * i ) ) = * ( o + i ) ; } o = niz ; for ( i = 0 ; i < 2 * velicina ; i ++ ) { zbir = 0 ; x = * ( o + i ) ; x = abs ( x ) ; do { y = x % 10 ; x = x / 10 ; zbir = zbir + y ; } while ( x != 0 ) ; * ( o + 1 + i ) = zbir ; i ++ ; } } int fibonacijev_niz ( int m ) { int a ; int b ; int c ; if ( m < 0 ) return 0 ; if ( m == 1 ) return 1 ; a = 1 ; b = 1 ; while ( 1 ) { c = a + b ; if ( m == c ) return 1 ; else if ( c > m ) return 0 ; a = b ; b = c ; } } int izbaci ( int * niz , int velicina ) { int i ; int x ; int j ; int * o ; o = niz ; for ( i = 0 ; i < velicina ; i ++ ) { x = fibonacijev_niz ( * ( o + i ) ) ; if ( x == 1 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { * ( o + j ) = * ( o + j + 1 ) ; } velicina -- ; i -- ; } } return velicina ; } int main ( ) { int niz [ 20 ] , i , velicina = 10 , x ; printf ( ""unesite niz od 10 brojeva:"" ) ; for ( i = 0 ; i < velicina ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; x = izbaci ( niz , 2 * velicina ) ; printf ( "" modificirani niz glasi: "" ) ; for ( i = 0 ; i < x - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }"
1574,82,82,0,97,A2016/Z4/Z2/student2553,A2016/Z4/Z2/student8540,"#include <stdio.h> char * kodiraj ( char * string , char tablica [ 96 ] ) { int znakovi [ 97 ] = { 0 } , i , max , * p , kraj = 0 , pozicija = 97 ; char * temp = string , * temptab = tablica ; p = znakovi ; while ( * string != '\0' ) { znakovi [ * string - 32 ] ++ ; string ++ ; } while ( kraj == 0 ) { max = 0 ; kraj = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( znakovi [ i ] > max ) { max = znakovi [ i ] ; pozicija = i ; } if ( max != 0 ) { kraj = 0 ; } } znakovi [ pozicija ] = - 1 ; if ( max != 0 ) { * tablica = ( char ) ( pozicija + 32 ) ; tablica ++ ; } } p = znakovi ; for ( i = 0 ; i < 95 ; i ++ ) { if ( * p == 0 ) { * tablica = ( char ) ( i + 32 ) ; tablica ++ ; } p ++ ; } * tablica = '\0' ; tablica = temptab ; string = temp ; pozicija = 0 ; while ( * string != '\0' ) { tablica = temptab ; pozicija = 0 ; while ( * string != * tablica && * tablica != '\0' ) { tablica ++ ; pozicija ++ ; } * string = ( char ) ( 126 - pozicija ) ; string ++ ; } string = temp ; return string ; } char * dekodiraj ( char * string , char * tablica ) { char * temp = string ; char zamijeni = * string ; int max = 0 , i ; int tabela [ 96 ] = { - 1 } ; int checked [ 96 ] = { 0 } ; int x = 1 ; while ( * string != '\0' ) { checked [ * string - 32 ] ++ ; string ++ ; } max = 0 ; do { max = 0 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( checked [ i ] >= max ) max = checked [ i ] ; } for ( i = 95 ; i >= 0 ; i -- ) { if ( checked [ i ] == max ) { zamijeni = i + 32 ; break ; } } tabela [ zamijeni - 32 ] = * tablica ; checked [ zamijeni - 32 ] = 0 ; tablica ++ ; x = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( checked [ i ] != 0 ) x = 0 ; } } while ( x == 0 ) ; string = temp ; while ( * string != '\0' ) { * string = tabela [ * string - 32 ] ; string ++ ; } return temp ; } int main ( ) { char string [ ] = """" ; char kodovoi [ 100 ] = """" ; kodiraj ( string , kodovoi ) ; printf ( ""%s"" , string ) ; printf ( ""\n"" ) ; printf ( ""%s\n"" , kodovoi ) ; dekodiraj ( string , kodovoi ) ; printf ( ""%s"" , string ) ; return 0 ; }","#include <stdio.h> char * kodiraj ( char * s , char tablica [ 96 ] ) { int znakovi [ 97 ] = { 0 } , * d , end = 0 , poz = 97 , max , i = 0 ; char * temp = s ; char * tmptab = tablica ; d = znakovi ; while ( * s != '\0' ) { znakovi [ * s - 32 ] ++ ; s ++ ; } while ( end == 0 ) { max = 0 ; end = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( znakovi [ i ] > max ) { max = znakovi [ i ] ; poz = i ; } if ( max != 0 ) { end = 0 ; } } znakovi [ poz ] = - 1 ; if ( max != 0 ) { * tablica = ( char ) ( poz + 32 ) ; tablica ++ ; } } d = znakovi ; for ( i = 0 ; i < 95 ; i ++ ) { if ( * d == 0 ) { * tablica = ( char ) ( i + 32 ) ; tablica ++ ; } d ++ ; } * tablica = '\0' ; tablica = tmptab ; s = temp ; poz = 0 ; while ( * s != '\0' ) { tablica = tmptab ; poz = 0 ; while ( * s != * tablica && * tablica != '\0' ) { tablica ++ ; poz ++ ; } * s = ( char ) ( 126 - poz ) ; s ++ ; } s = temp ; return s ; } char * dekodiraj ( char * s , char * tablica ) { char * temp = s ; char c = * s ; int i , max = 0 , a = 1 ; int cd [ 96 ] = { 0 } , tbl [ 96 ] = { - 1 } ; while ( * s != '\0' ) { cd [ * s - 32 ] ++ ; s ++ ; } max = 0 ; do { max = 0 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( cd [ i ] >= max ) { max = cd [ i ] ; } } for ( i = 95 ; i >= 0 ; i -- ) { if ( cd [ i ] == max ) { c = i + 32 ; break ; } } tbl [ c - 32 ] = * tablica ; cd [ c - 32 ] = 0 ; tablica ++ ; a = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( cd [ i ] != 0 ) a = 0 ; } } while ( a == 0 ) ; s = temp ; while ( * s != '\0' ) { * s = tbl [ * s - 32 ] ; s ++ ; } return temp ; } int main ( ) { char t [ ] = ""llmlnlnmonm"" ; char b [ 100 ] = """" ; kodiraj ( t , b ) ; printf ( ""%s"" , t ) ; printf ( ""\n"" ) ; printf ( ""%s\n"" , b ) ; dekodiraj ( t , b ) ; printf ( ""%s"" , t ) ; return 0 ; }"
1578,97,97,0,27,A2016/Z2/Z2/student8580,A2016/Z2/Z2/student4852,"#include <stdio.h> #include <stdlib.h> #include<math.h> #define pi 3.1415926 int main ( ) { double uglovi [ 500 ] , sd , md ; int u , i , j , s , m , s ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & i ) ; u = 0 ; do { scanf ( ""%lf"" , & uglovi [ u ] ) ; u ++ ; } while ( u < i ) ; printf ( ""uglovi su:\n"" ) ; for ( j = 0 ; j < i ; j ++ ) { s = ( 180. / pi ) * uglovi [ j ] ; sd = ( 180. / pi ) * uglovi [ j ] ; md = fabs ( ( sd - s ) * 60 ) ; m = abs ( ( sd - s ) * 60 ) ; s = ( md - m ) * 60 + 0.5 ; if ( s == 60 && m >= 59 ) { s = 0 ; m = 0 ; if ( s < 0 ) s -- ; if ( s > 0 ) s ++ ; } if ( s == 60 ) { m ++ ; s = 0 ; } if ( s > 30 && s < 60 ) { for ( u = j ; u < i ; u ++ ) uglovi [ u ] = uglovi [ u + 1 ] ; i -- ; j -- ; continue ; } printf ( ""%d stepeni %d minuta %d sekundi\n"" , s , m , s ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include<math.h> #define pi 3.1415926 int main ( ) { double uglovi [ 500 ] , sd , md ; int u , i , j , s , m , s ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & i ) ; u = 0 ; do { scanf ( ""%lf"" , & uglovi [ u ] ) ; u ++ ; } while ( u < i ) ; printf ( ""uglovi su:\n"" ) ; for ( j = 0 ; j < i ; j ++ ) { s = ( 180. / pi ) * uglovi [ j ] ; sd = ( 180. / pi ) * uglovi [ j ] ; md = fabs ( ( sd - s ) * 60 ) ; m = abs ( ( sd - s ) * 60 ) ; s = ( md - m ) * 60 + 0.5 ; if ( s == 60 && m >= 59 ) { s = 0 ; m = 0 ; if ( s < 0 ) s -- ; if ( s > 0 ) s ++ ; } if ( s == 60 ) { m ++ ; s = 0 ; } if ( s > 30 && s < 60 ) { for ( u = j ; u < i ; u ++ ) uglovi [ u ] = uglovi [ u + 1 ] ; i -- ; j -- ; continue ; } printf ( ""%d stepeni %d minuta %d sekundi\n"" , s , m , s ) ; } return 0 ; }"
1580,94,94,0,71,A2016/Z3/Z3/student7085,A2016/Z3/Z3/student9923,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , l , pret ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m <= 0 || n > 200 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || m <= 0 || n > 200 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ l ] [ j ] = mat [ l + 1 ] [ j ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { pret = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( i = 0 ; i < m ; i ++ ) { mat [ i ] [ l ] = mat [ i ] [ l + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int niz [ 200 ] [ 200 ] ; int i , j , m , n , k , p , q , pret ; do { printf ( ""\nunesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m > 200 || n > 200 || m < 1 || n < 1 ) ) printf ( ""brojevi nisu u trazenom opsegu."" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) pret = 0 ; if ( pret == 1 ) { for ( p = j ; p < m - 1 ; p ++ ) for ( q = 0 ; q < n ; q ++ ) niz [ p ] [ q ] = niz [ p + 1 ] [ q ] ; m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) pret = 0 ; if ( pret == 1 ) { for ( p = j ; p < n - 1 ; p ++ ) for ( q = 0 ; q < m ; q ++ ) niz [ q ] [ p ] = niz [ q ] [ p + 1 ] ; n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1581,70,70,0,176,A2016/Z1/Z1/student4469,A2016/Z1/Z1/student9949,"#include <stdio.h> #include <math.h> #define epsilon 0.001 int main ( ) { float tp , tp1 , tp2 , tz , tu , bp , bp1 , bp2 , bz , bu , mp , mp1 , mp2 , mz , mu , sct , scb , scm ; int oct , ocb , ocm ; int i = 0 ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & tp1 ) ; if ( tp1 < 0 || tp1 > 20 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & tp2 ) ; if ( tp2 < 0 || tp2 > 20 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & tp ) ; if ( tp < 0 || tp > 10 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & tz ) ; if ( tz < 0 || tz > 10 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & tu ) ; if ( tu < 0 || tu > 40 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp1 ) ; if ( bp1 < 0 || bp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp2 ) ; if ( bp2 < 0 || bp2 > 20 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & bp ) ; if ( bp < 0 || bp > 10 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & bz ) ; if ( bz < 0 || bz > 10 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & bu ) ; if ( bu < 0 || bu > 40 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; ; } printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp1 ) ; if ( mp1 < 0 || mp1 > 20 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp2 ) ; if ( mp2 < 0 || mp2 > 20 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & mp ) ; if ( mp < 0 || mp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & mz ) ; if ( mz < 0 || mz > 10 ) { printf ( ""\nneispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & mu ) ; if ( mu < 0 || mu > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } sct = tp1 + tp2 + tp + tz + tu ; scb = bp1 + bp2 + bp + bz + bu ; scm = mp1 + mp2 + mp + mz + mu ; if ( ( ( fabs ( sct - 55 ) ) < epsilon || sct > 55 ) && sct < 65 ) { oct = 6 ; } else if ( ( ( fabs ( sct - 65 ) ) < epsilon || sct > 65 ) && sct < 75 ) { oct = 7 ; } else if ( ( ( fabs ( sct - 75 ) ) < epsilon || sct > 75 ) && sct < 85 ) { oct = 8 ; } else if ( ( ( fabs ( sct - 85 ) ) < epsilon || sct > 85 ) && sct < 92 ) { oct = 9 ; } else if ( ( ( ( fabs ( sct - 92 ) ) < epsilon || sct > 92 ) && sct < 100 ) || fabs ( sct - 100 ) < epsilon ) { oct = 10 ; } else { oct = 5 ; } if ( ( ( fabs ( scb - 55 ) ) < epsilon || scb > 55 ) && scb < 65 ) { ocb = 6 ; } else if ( ( ( fabs ( scb - 65 ) ) < epsilon || scb > 65 ) && scb < 75 ) { ocb = 7 ; } else if ( ( ( fabs ( scb - 75 ) ) < epsilon || scb > 75 ) && scb < 85 ) { ocb = 8 ; } else if ( ( ( fabs ( scb - 85 ) ) < epsilon || scb > 85 ) && scb < 92 ) { ocb = 9 ; } else if ( ( ( ( fabs ( scb - 92 ) ) < epsilon || scb > 92 ) && scb < 100 ) || fabs ( scb - 100 ) < epsilon ) { ocb = 10 ; } else { ocb = 5 ; } if ( ( ( fabs ( scm - 55 ) ) < epsilon || scm > 55 ) && scm < 65 ) { ocm = 6 ; } else if ( ( ( fabs ( scm - 65 ) ) < epsilon || scm > 65 ) && scm < 75 ) { ocm = 7 ; } else if ( ( ( fabs ( scm - 75 ) ) < epsilon || scm > 75 ) && scm < 85 ) { ocm = 8 ; } else if ( ( ( fabs ( scm - 85 ) ) < epsilon || scm > 85 ) && scm < 92 ) { ocm = 9 ; } else if ( ( ( ( fabs ( scm - 92 ) ) < epsilon || scm > 92 ) && scm < 100 ) || fabs ( scm - 100 ) < epsilon ) { ocm = 10 ; } else { ocm = 5 ; } if ( ocb == 5 && oct == 5 && ocm == 5 ) { printf ( ""nijedan student nije polozio."" ) ; } else if ( ( ocb > 5 && oct == 5 && ocm == 5 ) || ( ocb == 5 && oct > 5 && ocm == 5 ) || ( ocb == 5 && oct == 5 && ocm > 5 ) ) { printf ( ""jedan student je polozio."" ) ; } else if ( ( oct > 5 && ocb > 5 && ocm == 5 ) || ( oct == 5 && ocb > 5 && ocm > 5 ) || ( oct > 5 && ocb == 5 && ocm > 5 ) ) { printf ( ""dva studenta su polozila."" ) ; } else if ( oct > 5 && ocb > 5 && ocm > 5 ) { printf ( ""sva tri studenta su polozila."" ) ; } if ( ( oct > 5 && ocb > 5 && ocm > 5 ) && ( fabs ( ocm - ocb ) < epsilon ) && ( fabs ( ocb - oct ) < epsilon ) ) { printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; } else if ( ( oct > 5 && ocb > 5 && ocm > 5 ) && ( ( fabs ( ocb - ocm ) < epsilon ) || ( fabs ( ocb - oct ) < epsilon ) || ( fabs ( oct - ocm ) < epsilon ) ) ) { printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } else if ( ( oct > 5 && ocb > 5 && ocm > 5 ) && ocb != oct && ocb != ocm && oct != ocm ) { printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.001 int main ( ) { float x1 , x2 , x3 , x4 , x5 , y1 , y2 , y3 , y4 , y5 , z1 , z2 , z3 , z4 , z5 , sx , sy , sz ; int ox , oy , oz ; { printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } } { printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & y1 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & y2 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & y3 ) ; if ( y3 < 0 || y3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & y4 ) ; if ( y4 < 0 || y4 > 10 ) { printf ( ""nesipravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & y5 ) ; if ( y5 < 0 || y5 > 40 ) { printf ( ""neisravan broj bodova"" ) ; return 0 ; } } { printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & z1 ) ; if ( z1 < 0 || z1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & z2 ) ; if ( z2 < 0 || z2 > 20 ) { printf ( ""nesipravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & z4 ) ; if ( z4 < 0 || z4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & z5 ) ; if ( z5 < 0 || z5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } } sx = x1 + x2 + x3 + x4 + x5 ; sy = y1 + y2 + y3 + y4 + y5 ; sz = z1 + z2 + z3 + z4 + z5 ; { if ( ( fabs ( sx - 55 ) < e || sx > 55 ) && sx < 65 ) ox = 6 ; else if ( ( fabs ( sx - 65 ) < e || sx > 65 ) && sx < 75 ) ox = 7 ; else if ( ( fabs ( sx - 75 ) < e || sx > 75 ) && sx < 85 ) ox = 8 ; else if ( ( fabs ( sx - 85 ) < e || sx > 85 ) && sx < 92 ) ox = 9 ; else if ( ( fabs ( sx - 92 ) < e || sx > 92 ) && ( fabs ( sx - 100 ) < e || sx < 100 ) ) ox = 10 ; } { if ( ( fabs ( sy - 55 ) < e || sy > 55 ) && sy < 65 ) oy = 6 ; else if ( ( fabs ( sy - 65 ) < e || sy > 65 ) && sy < 75 ) oy = 7 ; else if ( ( fabs ( sy - 75 ) < e || sy > 75 ) && sy < 85 ) oy = 8 ; else if ( ( fabs ( sy - 85 ) < e || sy > 85 ) && sy < 92 ) oy = 9 ; else if ( ( fabs ( sy - 92 ) < e || sy > 92 ) && ( fabs ( sy - 100 ) < e || sy < 100 ) ) oy = 10 ; } { if ( ( fabs ( sz - 55 ) < e || sz > 55 ) && sz < 65 ) oz = 6 ; else if ( ( fabs ( sz - 65 ) < e || sz > 65 ) && sz < 75 ) oz = 7 ; else if ( ( fabs ( sz - 75 ) < e || sz > 75 ) && sz < 85 ) oz = 8 ; else if ( ( fabs ( sz - 85 ) < e || sz > 85 ) && sz < 92 ) oz = 9 ; else if ( ( fabs ( sz - 92 ) < e || sz > 92 ) && ( fabs ( sz - 100 ) < e || sz < 100 ) ) oz = 10 ; } if ( ( ( fabs ( sx - 55 ) < e || sx > 55 ) && sy < 55 && sz < 55 ) || ( ( fabs ( sy - 55 ) < e || sy > 55 ) && sx < 55 && sz < 55 ) || ( ( fabs ( sz - 55 ) < e || sz > 55 ) && sx < 55 && sy < 55 ) ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( sx < 55 && sy < 55 && sz < 55 ) { printf ( ""nijedan student nije polozio.\n"" ) ; } else if ( ( ( fabs ( sx - 55 ) < e || sx > 55 ) && ( fabs ( sy - 55 ) < e || sy > 55 ) && sz < 55 ) || ( ( fabs ( sx - 55 ) < e || sx > 55 ) && sy < 55 && ( fabs ( sz - 55 ) < e || sz > 55 ) ) || ( ( fabs ( sy - 55 ) < e || sy > 55 ) && ( fabs ( sz - 55 ) < e || sz > 55 ) && sx < 55 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; } else if ( ( fabs ( sx - 55 ) < e || sx > 55 ) && ( fabs ( sy - 55 ) < e || sy > 55 ) && ( fabs ( sz - 55 ) < e || sz > 55 ) ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ox == oy && oy == oz ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ox != oy && oy != oz ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } else if ( ( ox == oy && ox != oz ) || ( ox == oz && ox != oy ) || ( oy == oz && oy != ox ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } } return 0 ; }"
1590,87,87,0,41,A2016/Z2/Z3/student8329,A2016/Z2/Z3/student5621,"#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , brtac ; int br ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; while ( ( brtac < 1 ) || ( brtac > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < brtac ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( ( i < 0 ) || ( i > 19 ) || ( j < 0 ) || ( j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bt , n , i , j ; int p , d ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; while ( bt < 1 || bt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < bt ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; while ( p < 0 || p > 19 || d < 0 || d > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; } niz [ d ] [ p ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1594,86,86,0,109,A2016/Z4/Z1/student2464,A2016/Z4/Z1/student7457,"#include <stdio.h> void izbaci ( char * s , int duz ) { while ( * ( s + duz ) ) { * s = * ( s + duz ) ; s ++ ; } * s = * ( s + duz ) ; } char * izbaci_najcescu ( char * s ) { char * maxkraj = s , * poc , * kraj , * p = s , * t , * spoc , * skraj , * tpoc , * q1 , * q2 ; char ch1 , ch2 ; int brmax = 0 , maxduz = 0 , br = 0 , ista , bslova , duz1 , duz2 , bilanerijec ; if ( * p == '\0' ) return s ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { poc = p ; kraj = p ; duz1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { duz1 ++ ; kraj ++ ; } br = 1 ; t = kraj + 1 ; while ( * t != '\0' ) { spoc = t ; while ( ( * spoc < 'a' || ( * spoc > 'z' && * spoc < 'a' ) || * spoc > 'z' ) && * ( spoc + 1 ) != '\0' ) spoc ++ ; skraj = spoc ; duz2 = 1 ; while ( ( ( * ( skraj + 1 ) >= 'a' && * ( skraj + 1 ) <= 'z' ) || ( * ( skraj + 1 ) >= 'a' && * ( skraj + 1 ) <= 'z' ) ) && * ( skraj + 1 ) != '\0' ) { duz2 ++ ; skraj ++ ; } ista = 1 ; bslova = 0 ; tpoc = poc ; if ( duz1 != duz2 ) ista = 0 ; else while ( bslova < duz2 ) { if ( * tpoc >= 'a' && * tpoc <= 'z' ) ch1 = ( * tpoc ) + ( 'a' - 'a' ) ; else ch1 = * tpoc ; if ( * spoc >= 'a' && * spoc <= 'z' ) ch2 = ( * spoc ) + ( 'a' - 'a' ) ; else ch2 = * spoc ; if ( ch1 != ch2 ) ista = 0 ; tpoc ++ ; spoc ++ ; bslova ++ ; } if ( ista ) br ++ ; t = skraj + 1 ; } if ( br > brmax ) { brmax = br ; maxkraj = kraj ; maxduz = duz1 ; } } p = kraj + 1 ; ; } p = t - 1 ; while ( p >= s ) { bilanerijec = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) bilanerijec = 1 ; if ( * p >= 'a' && * p <= 'z' ) ch1 = ( * p ) + ( 'a' - 'a' ) ; else ch1 = * p ; if ( * maxkraj >= 'a' && * maxkraj <= 'z' ) ch2 = ( * maxkraj ) + ( 'a' - 'a' ) ; else ch2 = * maxkraj ; if ( ch1 == ch2 && bilanerijec ) { q2 = p ; q1 = maxkraj ; duz2 = 0 ; ista = 1 ; while ( q2 >= s && ( ( * q2 >= 'a' && * q2 <= 'z' ) || ( * q2 >= 'a' && * q2 <= 'z' ) ) ) { if ( q1 >= s ) { if ( * q1 >= 'a' && * q1 <= 'z' ) ch1 = ( * q1 ) + ( 'a' - 'a' ) ; else ch1 = * q1 ; if ( * q1 >= 'a' && * q1 <= 'z' ) ch2 = ( * q1 ) + ( 'a' - 'a' ) ; else ch2 = * q1 ; if ( ch1 != ch2 ) ista = 0 ; } duz2 ++ ; q2 -- ; q1 -- ; } q2 ++ ; if ( maxduz != duz2 ) ista = 0 ; if ( ista ) { izbaci ( q2 , duz2 ) ; } } p -- ; } return s ; } int main ( ) { char s [ 300 ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * string ) { char * max = string , * p = string , * pocetak , * kraj , * temp , * sljedecipocetak , * sljedecikraj , * temp1 , * p2 , * p3 ; int vel1 , brojrijeci = 0 , vel2 , jednaka , vel3 , maxbrojrijeci = 0 , maxvelicina = 0 , znak ; char znak1 , znak2 ; if ( * p == '\0' ) return string ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } brojrijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljedecipocetak = temp ; while ( ( * sljedecipocetak < 'a' || ( * sljedecipocetak > 'z' && * sljedecipocetak < 'a' ) || * sljedecipocetak > 'z' ) && * ( sljedecipocetak + 1 ) != '\0' ) sljedecipocetak ++ ; sljedecikraj = sljedecipocetak ; vel2 = 1 ; while ( ( ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) || ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) ) && * ( sljedecikraj + 1 ) != '\0' ) { vel2 ++ ; sljedecikraj ++ ; } jednaka = 1 ; vel3 = 0 ; temp1 = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * temp1 >= 'a' && * temp1 <= 'z' ) znak1 = ( * temp1 ) + ( 'a' - 'a' ) ; else znak1 = * temp1 ; if ( * sljedecipocetak >= 'a' && * sljedecipocetak <= 'z' ) znak2 = ( * sljedecipocetak ) + ( 'a' - 'a' ) ; else znak2 = * sljedecipocetak ; if ( znak1 != znak2 ) jednaka = 0 ; temp1 ++ ; sljedecipocetak ++ ; vel3 ++ ; } if ( jednaka ) brojrijeci ++ ; temp = sljedecikraj + 1 ; } if ( brojrijeci > maxbrojrijeci ) { maxbrojrijeci = brojrijeci ; max = kraj ; maxvelicina = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= string ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) znak1 = ( * p ) + ( 'a' - 'a' ) ; else znak1 = * p ; if ( * max >= 'a' && * max <= 'z' ) znak2 = ( * max ) + ( 'a' - 'a' ) ; else znak2 = * max ; if ( znak1 == znak2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= string && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= string ) { if ( * p2 >= 'a' && * p2 <= 'z' ) znak1 = ( * p2 ) + ( 'a' - 'a' ) ; else znak1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) znak2 = ( * p2 ) + ( 'a' - 'a' ) ; else znak2 = * p2 ; if ( znak1 != znak2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvelicina != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return string ; } int main ( ) { char str1ng [ 400 ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }"
1600,86,86,0,43,A2016/Z2/Z2/student4280,A2016/Z2/Z2/student8993,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { int n = 0 , i = 0 , j = 0 , stepeni [ 500 ] , minute [ 500 ] , sekunde [ 500 ] ; double x = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { int neg = 0 ; scanf ( ""%lf"" , & x ) ; x *= 180 / pi ; if ( x < 0 ) { neg = 1 ; x *= - 1 ; } stepeni [ i ] = ( int ) x ; x -= ( int ) x ; minute [ i ] = ( int ) ( x * 60 ) ; x *= 60 ; x -= ( int ) x ; sekunde [ i ] = ( int ) round ( x * 60 ) ; if ( sekunde [ i ] == 60 ) { minute [ i ] ++ ; sekunde [ i ] = 0 ; } if ( minute [ i ] == 60 ) { stepeni [ i ] ++ ; minute [ i ] = 0 ; } if ( neg == 1 ) stepeni [ i ] *= - 1 ; } for ( i = 0 ; i < n ; i ++ ) if ( sekunde [ i ] > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { stepeni [ j ] = stepeni [ j + 1 ] ; minute [ j ] = minute [ j + 1 ] ; sekunde [ j ] = sekunde [ j + 1 ] ; } n -- ; i -- ; } printf ( ""uglovi su: "" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""\n%g stepeni %g minuta %g sekundi"" , stepeni [ i ] , minute [ i ] , sekunde [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int br_uglova = 0 , i = 0 , j = 0 , stepeni [ 500 ] , minute [ 500 ] , sekunde [ 500 ] ; double x = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & br_uglova ) ; if ( br_uglova < 0 || br_uglova > 500 ) return 0 ; for ( i = 0 ; i < br_uglova ; i ++ ) { int a = 0 ; scanf ( ""%lf"" , & x ) ; x *= 180 / pi ; if ( x < 0 ) { a = 1 ; x *= - 1 ; } stepeni [ i ] = ( int ) x ; x = x - ( int ) x ; minute [ i ] = ( int ) ( x * 60 ) ; x *= 60 ; x = x - ( int ) x ; sekunde [ i ] = ( int ) round ( x * 60 ) ; if ( sekunde [ i ] == 60 ) { minute [ i ] ++ ; sekunde [ i ] = 0 ; } if ( minute [ i ] == 60 ) { stepeni [ i ] ++ ; minute [ i ] = 0 ; } if ( a == 1 ) stepeni [ i ] *= - 1 ; } for ( i = 0 ; i < br_uglova ; i ++ ) if ( sekunde [ i ] > 30 ) { for ( j = i ; j < br_uglova - 1 ; j ++ ) { stepeni [ j ] = stepeni [ j + 1 ] ; minute [ j ] = minute [ j + 1 ] ; sekunde [ j ] = sekunde [ j + 1 ] ; } br_uglova -- ; i -- ; } printf ( ""uglovi su: "" ) ; for ( i = 0 ; i < br_uglova ; i ++ ) printf ( ""\n%d stepeni %d minuta %d sekundi"" , stepeni [ i ] , minute [ i ] , sekunde [ i ] ) ; return 0 ; }"
1614,88,88,0,84,A2016/Z3/Z3/student4554,A2016/Z3/Z3/student8419,"#include <stdio.h> int main ( ) { int n , m ; int m [ 100 ] [ 100 ] ; int l , j , i , f , r , kol ; int ind1 = 0 , ind2 = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & m [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( ind1 == 1 ) i -- ; for ( f = i + 1 ; f < m ; f ++ ) { kol = 0 ; while ( kol < n ) { if ( m [ i ] [ kol ] == m [ f ] [ kol ] ) { ind1 = 1 ; } else { ind1 = 0 ; break ; } kol ++ ; } if ( ind1 == 1 ) { for ( j = f ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) { m [ j ] [ l ] = m [ j + 1 ] [ l ] ; } } m -- ; f -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( ind2 == 1 ) { i -- ; } for ( f = i + 1 ; f < n ; f ++ ) { r = 0 ; while ( r < m ) { if ( m [ r ] [ i ] == m [ r ] [ f ] ) { ind2 = 1 ; } else { ind2 = 0 ; break ; } r ++ ; } if ( ind2 == 1 ) { for ( j = f ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) { m [ l ] [ j ] = m [ l ] [ j + 1 ] ; } } n -- ; f -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , m [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 100 ] [ 100 ] , m , n , i , j , k , l , p , c , r , s ; p = 0 ; s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { if ( p == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { c = 0 ; while ( c < n ) { if ( matrica [ i ] [ c ] == matrica [ k ] [ c ] ) p = 1 ; else { p = 0 ; break ; } c ++ ; } if ( p == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { r = 0 ; while ( r < m ) { if ( matrica [ r ] [ i ] == matrica [ r ] [ k ] ) s = 1 ; else { s = 0 ; break ; } r ++ ; } if ( s == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) matrica [ l ] [ j ] == matrica [ l ] [ j + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
1619,92,92,0,76,A2016/Z3/Z3/student1375,A2016/Z3/Z3/student4959,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , e , f , jeste , m , n ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } m = m ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { jeste = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = j ; e < m - 1 ; e ++ ) { for ( f = 0 ; f < n ; f ++ ) { mat [ e ] [ f ] = mat [ e + 1 ] [ f ] ; } } j -- ; m -- ; } } } n = n ; for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { jeste = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ j ] != mat [ k ] [ i ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = i ; e < n - 1 ; e ++ ) { for ( f = 0 ; f < m ; f ++ ) { mat [ f ] [ e ] = mat [ f ] [ e + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , check , a , b , c , x , y ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m < 1 || n > 200 || n < 1 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || m < 1 || n > 200 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } x = m ; for ( i = 0 ; i < x ; i ++ ) { for ( j = i + 1 ; j < x ; j ++ ) { check = 1 ; for ( a = 0 ; a < n ; a ++ ) { if ( mat [ i ] [ a ] != mat [ j ] [ a ] ) { check = 0 ; break ; } } if ( check ) { for ( b = j ; b < x - 1 ; b ++ ) { for ( c = 0 ; c < n ; c ++ ) { mat [ b ] [ c ] = mat [ b + 1 ] [ c ] ; } } j -- ; x -- ; } } } y = n ; for ( j = 0 ; j < y ; j ++ ) { for ( i = j + 1 ; i < y ; i ++ ) { check = 1 ; for ( a = 0 ; a < x ; a ++ ) { if ( mat [ a ] [ i ] != mat [ a ] [ j ] ) { check = 0 ; break ; } } if ( check ) { for ( b = i ; b < y - 1 ; b ++ ) { for ( c = 0 ; c < x ; c ++ ) { mat [ c ] [ b ] = mat [ c ] [ b + 1 ] ; } } i -- ; y -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j < y ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1622,26,26,0,77,A2016/Z5/Z2/student7802,A2016/Z5/Z2/student3776,"#include <stdio.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 , j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } void kompresuj ( char * dat1 , char * dat2 ) { file * ulaz = fopen ( dat1 , ""r"" ) ; file * pomocna = fopen ( dat1 , ""r"" ) ; file * izlaz = fopen ( dat2 , ""w"" ) ; if ( ! ulaz ) { printf ( ""greska pri otvaranju ulazne datoteke"" ) ; return ; } if ( ! izlaz ) { printf ( ""greska pri otvaranju izlazne datoteke"" ) ; return ; } char kompresne [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] , karakter = fgetc ( ulaz ) ; int brojac [ 1000 ] = { 0 } , i , broj_rijeci = 0 , k = 0 , ima , j , kraj = 10 ; while ( karakter != eof ) { k = 0 ; while ( karakter >= 'a' && karakter <= 'z' || karakter >= 'a' && karakter <= 'z' ) { rijec [ k ] = karakter ; karakter = fgetc ( ulaz ) ; k ++ ; } rijec [ k ] = '\0' ; if ( k < 10 && k > 0 ) { ima = 0 ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( uporedi ( kompresne [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { char * q = kompresne [ broj_rijeci ] , * p = rijec ; while ( * q ++ = * p ++ ) ; brojac [ broj_rijeci ] = 1 ; broj_rijeci ++ ; } } karakter = fgetc ( ulaz ) ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( uporedi ( kompresne [ i ] , kompresne [ j ] ) == 1 && brojac [ j ] == brojac [ i ] || brojac [ j ] > brojac [ i ] ) { int zamjena = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = zamjena ; char temp [ 100 ] , * q , * p , * pom ; q = kompresne [ i ] ; p = kompresne [ j ] ; pom = temp ; while ( * pom ++ = * q ++ ) ; q = kompresne [ i ] ; while ( * q ++ = * p ++ ) ; p = kompresne [ j ] ; pom = temp ; while ( * p ++ = * pom ++ ) ; } } } ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( kompresne [ i ] , izlaz ) ; fputc ( '\n' , izlaz ) ; } fputc ( '\n' , izlaz ) ; char c = fgetc ( pomocna ) ; while ( c != eof ) { k = 0 ; while ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) { rijec [ k ] = c ; c = fgetc ( pomocna ) ; k ++ ; } rijec [ k ] = '\0' ; int jest = 0 ; if ( k > 0 && k < 10 ) for ( j = 0 ; j < kraj ; j ++ ) if ( uporedi ( kompresne [ j ] , rijec ) == 0 ) { fputc ( j + 20 , izlaz ) ; fputc ( c , izlaz ) ; jest = 1 ; break ; } if ( ! jest ) { fputs ( rijec , izlaz ) ; fputc ( c , izlaz ) ; } c = fgetc ( pomocna ) ; } printf ( ""datoteka kompresovana. \n"" ) ; fclose ( ulaz ) ; fclose ( pomocna ) ; fclose ( izlaz ) ; } void dekompresuj ( char * dat1 , char * dat2 ) { file * ulaz = fopen ( dat1 , ""r"" ) ; file * pomocna = fopen ( dat1 , ""r"" ) ; file * izlaz = fopen ( dat2 , ""w"" ) ; if ( ! ulaz ) { printf ( ""greska pri otvaranju ulazne datoteke"" ) ; return ; } if ( ! izlaz ) { printf ( ""greska pri otvaranju izlazne datoteke"" ) ; return ; } char kompresne [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] , karakter = fgetc ( ulaz ) , kar ; int broj_rijeci = 0 , k , pom_brojac = 0 , iste = 0 , j ; while ( karakter != eof ) { k = 0 ; iste = 0 ; while ( karakter > 'a' && karakter <= 'z' || karakter >= 'a' && karakter <= 'z' ) { rijec [ k ] = karakter ; karakter = fgetc ( ulaz ) ; k ++ ; } rijec [ k ] = '\0' ; if ( k > 0 && k < 10 ) { char * q = kompresne [ broj_rijeci ] , * p = rijec ; while ( * q ++ = * p ++ ) ; for ( j = 0 ; j < broj_rijeci ; j ++ ) if ( ! uporedi ( kompresne [ j ] , rijec ) ) { iste = 1 ; break ; } if ( iste ) break ; broj_rijeci ++ ; } karakter = fgetc ( ulaz ) ; } kar = fgetc ( pomocna ) ; while ( kar != eof ) { if ( kar == '\n' ) pom_brojac ++ ; if ( pom_brojac == broj_rijeci ) break ; kar = fgetc ( pomocna ) ; } kar = fgetc ( pomocna ) ; while ( kar != eof ) { if ( kar >= 20 && kar <= 30 ) { fputs ( kompresne [ kar - 20 ] , izlaz ) ; kar = fgetc ( pomocna ) ; continue ; } fputc ( kar , izlaz ) ; kar = fgetc ( pomocna ) ; } printf ( ""datoteka dekompresovana. \n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( pomocna ) ; } int main ( ) { int n ; char ulazna [ 1000 ] , izlazna [ 1000 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & n ) ; if ( n == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( ulazna , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( izlazna , 40 ) ; kompresuj ( ulazna , izlazna ) ; } if ( n == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( ulazna , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( izlazna , 40 ) ; dekompresuj ( ulazna , izlazna ) ; } } while ( n != 0 ) ; return 0 ; }"
1623,66,66,0,27,A2016/Z3/Z1/student1422,A2016/Z3/Z1/student8089,"#include <stdio.h> int daj_prost ( ) { static int a = 1 ; int i , prost ; do { a ++ ; prost = 1 ; if ( a == 2 ) break ; else { for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { prost = 0 ; break ; } } } } while ( prost == 0 ) ; return a ; } int main ( ) { int a = 0 , b = 0 , suma = 0 , y = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a > 0 && b > 0 && a < b ) break ; else if ( a < 0 || a == 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a == b || b < a ) printf ( ""a nije manje od b.\n"" ) ; } while ( 1 ) ; while ( 1 ) { y = daj_prost ( ) ; if ( y <= a ) continue ; else if ( y >= b ) break ; else if ( y > a && y < b ) suma += y ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int n = 1 ; int i , prost ; do { n ++ ; prost = 0 ; if ( n == 2 ) break ; else { for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prost = 1 ; break ; } } } } while ( prost == 1 ) ; return n ; } int main ( ) { int m = 0 , n = 0 , suma = 0 , z = 0 ; while ( 1 ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 0 && n > 0 && m < n ) break ; else if ( m <= 0 ) printf ( ""a nije prirodan broj. \n"" ) ; else if ( n <= m ) printf ( ""a nije manje od b. \n"" ) ; } while ( z < n ) { z = daj_prost ( ) ; if ( z > m && z < n ) suma += z ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , m , n , suma ) ; return 0 ; }"
1628,86,86,0,53,A2016/Z3/Z3/student5624,A2016/Z3/Z3/student2210,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , i , j , k , l , m , n , pret , pret1 , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) matrica [ l ] [ p ] = matrica [ l + 1 ] [ p ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { pret1 = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( matrica [ j ] [ i ] != matrica [ j ] [ k ] ) pret1 = 0 ; } if ( pret1 == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) matrica [ p ] [ l ] = matrica [ p ] [ l + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , k , t = 1 , p , q , n , m ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { t = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) t = 0 ; } if ( t == 1 ) { for ( p = j ; p < m - 1 ; p ++ ) for ( q = 0 ; q < n ; q ++ ) mat [ p ] [ q ] = mat [ p + 1 ] [ q ] ; m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { t = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) t = 0 ; } if ( t == 1 ) { for ( p = 0 ; p < m ; p ++ ) for ( q = j ; q < n - 1 ; q ++ ) mat [ p ] [ q ] = mat [ p ] [ q + 1 ] ; n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1634,99,99,0,190,A2016/Z4/Z1/student4804,A2016/Z4/Z1/student2508,"#include <stdio.h> void unesi ( char s [ ] , int n ) { char znak ; int i = 0 ; znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < n - 1 && znak != '\n' ) { s [ i ] = znak ; i ++ ; znak = getchar ( ) ; } s [ i ] = '\0' ; } char * rijec ( char * d ) { char * p ; p = d ; while ( ( * d >= 'a' && * d <= 'z' ) || ( * d >= 'a' && * d <= 'z' ) ) { d ++ ; } * d = '\0' ; return p ; } int duzina ( char * s ) { int br = 0 ; while ( * s != '\0' ) { br ++ ; s ++ ; } return br ; } int broj_ponavljanja ( char * s , char * q ) { int razmak = 1 , br = 0 , jednaki , i ; char * p , * r , * k , rj [ 500 ] , * l ; k = & rj [ 0 ] ; while ( * s != '\0' ) { if ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; p = s ; l = k ; for ( i = 0 ; i < 500 ; i ++ ) rj [ i ] = '\0' ; while ( * p != '\0' ) { * k = * p ; if ( * k >= 'a' && * k <= 'z' ) * k = * k + ( 'a' - 'a' ) ; k ++ ; p ++ ; } r = q ; k = l ; k = rijec ( k ) ; jednaki = 1 ; while ( * k != '\0' ) { if ( * r != * k && * r != * k - 'a' - 'a' ) { jednaki = 0 ; break ; } if ( * r == '\0' ) { jednaki = 0 ; break ; } r ++ ; k ++ ; } if ( jednaki == 1 ) br ++ ; k = l ; } s ++ ; } return br ; } char * izbaci_najcescu ( char * s ) { int razmak = 1 , maximum = 0 , br , i , izbaci = 1 , duz ; char * p , * q , rj [ 500 ] , * l , * k , max [ 500 ] , * m , * g , * r , * h , * v , * z ; q = s ; m = & max [ 0 ] ; r = s ; k = & rj [ 0 ] ; while ( * s != '\0' ) { if ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; p = s ; l = k ; for ( i = 0 ; i < 500 ; i ++ ) rj [ i ] = '\0' ; while ( * p != '\0' ) { * k = * p ; if ( * k >= 'a' && * k <= 'z' ) * k = * k + ( 'a' - 'a' ) ; k ++ ; p ++ ; } k = l ; k = rijec ( k ) ; br = broj_ponavljanja ( q , k ) ; if ( br > maximum ) { maximum = br ; g = m ; for ( i = 0 ; i < 500 ; i ++ ) max [ i ] = '\0' ; while ( * k != '\0' ) { * m = * k ; m ++ ; k ++ ; } k = l ; m = g ; } } s ++ ; } razmak = 1 ; while ( * r != '\0' ) { if ( ! ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; izbaci = 1 ; h = r ; z = h ; v = m ; duz = duzina ( m ) ; m = v ; while ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) { if ( * r != * m && * r != ( * m - ( 'a' - 'a' ) ) ) { izbaci = 0 ; break ; } m ++ ; r ++ ; if ( * m == '\0' && maximum != 1 && duz > 1 && ( ! ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) ) ) { izbaci = 0 ; break ; } } r = h ; m = v ; while ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) { r ++ ; } if ( izbaci == 1 ) { while ( * r != '\0' ) { * h = * r ; r ++ ; h ++ ; } * h = '\0' ; } r = z ; r -- ; } r ++ ; } return q ; } int main ( ) { char rec [ 500 ] ; unesi ( rec , 500 ) ; printf ( ""%s"" , izbaci_najcescu ( rec ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char s [ ] , int n ) { char znak ; int i = 0 ; znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < n - 1 && znak != '\n' ) { s [ i ] = znak ; i ++ ; znak = getchar ( ) ; } s [ i ] = '\0' ; } char * rijec ( char * d ) { char * p ; p = d ; while ( ( * d >= 'a' && * d <= 'z' ) || ( * d >= 'a' && * d <= 'z' ) ) { d ++ ; } * d = '\0' ; return p ; } int duzina ( char * s ) { int br = 0 ; while ( * s != '\0' ) { br ++ ; s ++ ; } return br ; } int broj_ponavljanja ( char * s , char * q ) { int razmak = 1 , br = 0 , jednaki , i ; char * p , * r , * k , rj [ 500 ] , * l ; k = & rj [ 0 ] ; while ( * s != '\0' ) { if ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; p = s ; l = k ; for ( i = 0 ; i < 500 ; i ++ ) rj [ i ] = '\0' ; while ( * p != '\0' ) { * k = * p ; if ( * k >= 'a' && * k <= 'z' ) * k = * k + ( 'a' - 'a' ) ; k ++ ; p ++ ; } r = q ; k = l ; k = rijec ( k ) ; jednaki = 1 ; while ( * k != '\0' ) { if ( * r != * k && * r != * k - 'a' - 'a' ) { jednaki = 0 ; break ; } if ( * r == '\0' ) { jednaki = 0 ; break ; } r ++ ; k ++ ; } if ( jednaki == 1 ) br ++ ; k = l ; } s ++ ; } return br ; } char * izbaci_najcescu ( char * s ) { int razmak = 1 , maximum = 0 , br , i , izbaci = 1 , duz ; char * p , * q , rj [ 500 ] , * l , * k , max [ 500 ] , * m , * g , * r , * h , * v , * z ; q = s ; m = & max [ 0 ] ; r = s ; k = & rj [ 0 ] ; while ( * s != '\0' ) { if ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; p = s ; l = k ; for ( i = 0 ; i < 500 ; i ++ ) rj [ i ] = '\0' ; while ( * p != '\0' ) { * k = * p ; if ( * k >= 'a' && * k <= 'z' ) * k = * k + ( 'a' - 'a' ) ; k ++ ; p ++ ; } k = l ; k = rijec ( k ) ; br = broj_ponavljanja ( q , k ) ; if ( br > maximum ) { maximum = br ; g = m ; for ( i = 0 ; i < 500 ; i ++ ) max [ i ] = '\0' ; while ( * k != '\0' ) { * m = * k ; m ++ ; k ++ ; } k = l ; m = g ; } } s ++ ; } razmak = 1 ; while ( * r != '\0' ) { if ( ! ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; izbaci = 1 ; h = r ; z = h ; v = m ; duz = duzina ( m ) ; m = v ; while ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) { if ( * r != * m && * r != ( * m - ( 'a' - 'a' ) ) ) { izbaci = 0 ; break ; } m ++ ; r ++ ; if ( * m == '\0' && maximum != 1 && duz > 1 && ( ! ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) ) ) { izbaci = 0 ; break ; } } r = h ; m = v ; while ( ( * r >= 'a' && * r <= 'z' ) || ( * r >= 'a' && * r <= 'z' ) ) { r ++ ; } if ( izbaci == 1 ) { while ( * r != '\0' ) { * h = * r ; r ++ ; h ++ ; } * h = '\0' ; } r = z ; r -- ; } r ++ ; } return q ; } int main ( ) { char rec [ 500 ] ; unesi ( rec , 500 ) ; printf ( ""%s"" , izbaci_najcescu ( rec ) ) ; return 0 ; }"
1641,99,99,0,123,A2016/Z4/Z1/student9175,A2016/Z4/Z1/student4495,"#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * str ) { char * max = str , * p = str , * pocetak , * kraj , * temp , * sljpocetak , * sljkraj , * tempoc , * p2 , * p3 ; int vel1 , broj_rijeci = 0 , vel2 , jednaka , vel3 , max_broj_rijeci = 0 , maxvel = 0 , znak ; char c1 , c2 ; if ( * p == '\0' ) return str ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } broj_rijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljpocetak = temp ; while ( ( * sljpocetak < 'a' || ( * sljpocetak > 'z' && * sljpocetak < 'a' ) || * sljpocetak > 'z' ) && * ( sljpocetak + 1 ) != '\0' ) sljpocetak ++ ; sljkraj = sljpocetak ; vel2 = 1 ; while ( ( ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) || ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) ) && * ( sljkraj + 1 ) != '\0' ) { vel2 ++ ; sljkraj ++ ; } jednaka = 1 ; vel3 = 0 ; tempoc = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * tempoc >= 'a' && * tempoc <= 'z' ) c1 = ( * tempoc ) + ( 'a' - 'a' ) ; else c1 = * tempoc ; if ( * sljpocetak >= 'a' && * sljpocetak <= 'z' ) c2 = ( * sljpocetak ) + ( 'a' - 'a' ) ; else c2 = * sljpocetak ; if ( c1 != c2 ) jednaka = 0 ; tempoc ++ ; sljpocetak ++ ; vel3 ++ ; } if ( jednaka ) broj_rijeci ++ ; temp = sljkraj + 1 ; } if ( broj_rijeci > max_broj_rijeci ) { max_broj_rijeci = broj_rijeci ; max = kraj ; maxvel = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= str ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) c1 = ( * p ) + ( 'a' - 'a' ) ; else c1 = * p ; if ( * max >= 'a' && * max <= 'z' ) c2 = ( * max ) + ( 'a' - 'a' ) ; else c2 = * max ; if ( c1 == c2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= str && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= str ) { if ( * p2 >= 'a' && * p2 <= 'z' ) c1 = ( * p2 ) + ( 'a' - 'a' ) ; else c1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) c2 = ( * p2 ) + ( 'a' - 'a' ) ; else c2 = * p2 ; if ( c1 != c2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvel != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return str ; } int main ( ) { char str1ng [ 400 ] = "" zghklkvedza zvezda zdvdwa"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }","#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * str ) { char * max = str , * p = str , * pocetak , * kraj , * temp , * sljpocetak , * sljkraj , * tempoc , * p2 , * p3 ; int vel1 , broj_rijeci = 0 , vel2 , jednaka , vel3 , max_broj_rijeci = 0 , maxvel = 0 , znak ; char c1 , c2 ; if ( * p == '\0' ) return str ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } broj_rijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljpocetak = temp ; while ( ( * sljpocetak < 'a' || ( * sljpocetak > 'z' && * sljpocetak < 'a' ) || * sljpocetak > 'z' ) && * ( sljpocetak + 1 ) != '\0' ) sljpocetak ++ ; sljkraj = sljpocetak ; vel2 = 1 ; while ( ( ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) || ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) ) && * ( sljkraj + 1 ) != '\0' ) { vel2 ++ ; sljkraj ++ ; } jednaka = 1 ; vel3 = 0 ; tempoc = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * tempoc >= 'a' && * tempoc <= 'z' ) c1 = ( * tempoc ) + ( 'a' - 'a' ) ; else c1 = * tempoc ; if ( * sljpocetak >= 'a' && * sljpocetak <= 'z' ) c2 = ( * sljpocetak ) + ( 'a' - 'a' ) ; else c2 = * sljpocetak ; if ( c1 != c2 ) jednaka = 0 ; tempoc ++ ; sljpocetak ++ ; vel3 ++ ; } if ( jednaka ) broj_rijeci ++ ; temp = sljkraj + 1 ; } if ( broj_rijeci > max_broj_rijeci ) { max_broj_rijeci = broj_rijeci ; max = kraj ; maxvel = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= str ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) c1 = ( * p ) + ( 'a' - 'a' ) ; else c1 = * p ; if ( * max >= 'a' && * max <= 'z' ) c2 = ( * max ) + ( 'a' - 'a' ) ; else c2 = * max ; if ( c1 == c2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= str && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= str ) { if ( * p2 >= 'a' && * p2 <= 'z' ) c1 = ( * p2 ) + ( 'a' - 'a' ) ; else c1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) c2 = ( * p2 ) + ( 'a' - 'a' ) ; else c2 = * p2 ; if ( c1 != c2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvel != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return str ; } int main ( ) { char str1ng [ 400 ] = "" zghklkvedza zvezda zdvdwa"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }"
1646,99,99,0,255,A2016/Z5/Z2/student9972,A2016/Z5/Z2/student7802,"#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 , j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }"
1651,98,98,0,34,A2016/Z2/Z3/student8264,A2016/Z2/Z3/student6029,"#include <stdio.h> int main ( ) { int i , j , n = 0 , x = 0 , y = 0 ; char koo [ 20 ] [ 20 ] = { { '0' } , { '0' } } ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { koo [ i ] [ j ] = ' ' ; } } do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 0 && n <= 10 ) break ; printf ( ""pogresan unos\n"" ) ; } while ( 1 ) ; for ( i = 0 ; i < n ; i ++ ) { do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x >= 0 && x < 20 && y >= 0 && y < 20 ) break ; printf ( ""pogresan unos\n"" ) ; } while ( 1 ) ; koo [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , koo [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n = 0 , x = 0 , y = 0 ; char koo [ 20 ] [ 20 ] = { { '0' } , { '0' } } ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { koo [ i ] [ j ] = ' ' ; } } do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 0 && n <= 10 ) break ; printf ( ""pogresan unos\n"" ) ; } while ( 1 ) ; for ( i = 0 ; i < n ; i ++ ) { do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x >= 0 && x < 20 && y >= 0 && y < 20 ) break ; printf ( ""pogresan unos\n"" ) ; } while ( 1 ) ; koo [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , koo [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1654,98,98,0,37,A2016/Z2/Z3/student8224,A2016/Z2/Z3/student9451,"#include <stdio.h> int main ( ) { int i , j , l , m , broj_tacaka ; char mat [ 20 ] [ 20 ] ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; if ( broj_tacaka <= 0 || broj_tacaka > 10 ) { printf ( ""pogresan unos\n"" ) ; } } while ( broj_tacaka <= 0 || broj_tacaka > 10 ) ; for ( i = 0 ; i < broj_tacaka ; i ++ ) { do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & l , & m ) ; if ( l < 0 || l > 19 || m < 0 || m > 19 ) { printf ( ""pogresan unos\n"" ) ; } } while ( l < 0 || l > 19 || m < 0 || m > 19 ) ; mat [ l ] [ m ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int brojtacaka , i , j , x , y ; char koordinatnisistem [ 20 ] [ 20 ] ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { koordinatnisistem [ i ] [ j ] = ' ' ; } } do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brojtacaka ) ; if ( brojtacaka <= 0 || brojtacaka > 10 ) { printf ( ""pogresan unos\n"" ) ; } } while ( brojtacaka <= 0 || brojtacaka > 10 ) ; for ( i = 0 ; i < brojtacaka ; i ++ ) { do { printf ( ""unesite %d. tacku: "" , ( i + 1 ) ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; } } while ( x < 0 || x > 19 || y < 0 || y > 19 ) ; koordinatnisistem [ x ] [ y ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , koordinatnisistem [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1656,98,98,0,38,A2016/Z2/Z4/student7673,A2016/Z2/Z4/student9438,"#include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int m , n , cirk = 1 , i , j ; int tep = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) tep = 0 ; } } if ( tep == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirk = 0 ; } } } if ( tep == 1 ) { if ( cirk == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int m , n , cirk = 1 , i , j ; int tep = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) tep = 0 ; } } if ( tep == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirk = 0 ; } } } if ( tep == 1 ) { if ( cirk == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1657,99,99,0,81,A2016/Z3/Z2/student5263,A2016/Z3/Z2/student2652,"#include <stdio.h> #include <math.h> #include <stdlib.h> int square ( long int x ) { long int k ; k = sqrt ( x ) ; if ( pow ( k , 2 ) == x ) { return 1 ; } else { return 0 ; } } int zbir ( int x ) { int y , s = 0 ; do { y = abs ( x ) % 10 ; x = abs ( x ) / 10 ; s = abs ( y ) + s ; } while ( x > 0 ) ; return s ; } void ubaci ( int * niz , int n ) { int i , j , r ; i = n - 1 ; while ( i >= 0 ) { j = n - 1 ; while ( j >= i ) { * ( niz + j + 1 ) = * ( niz + j ) ; j -- ; } n = n + 1 ; i -- ; } i = 0 ; while ( i < n ) { if ( i % 2 == 1 ) * ( niz + i ) = zbir ( * ( niz + i ) ) ; i ++ ; } } int fibonachi ( long int x ) { long int a = 5 * x * x + 4 ; long int b = 5 * x * x - 4 ; if ( square ( b ) == 1 || square ( a ) == 1 ) { return 1 ; } else { return 0 ; } } int izbaci ( int * niz , int n ) { int i , j ; i = 0 ; while ( i < n ) { if ( fibonachi ( * ( niz + i ) ) == 1 && * ( niz + i ) > 0 ) { j = i ; while ( j < n - 1 ) { * ( niz + j ) = * ( niz + j + 1 ) ; j ++ ; } i = i - 1 ; n = n - 1 ; if ( n == 0 ) break ; } i ++ ; } return n ; } int main ( ) { int niz [ 20 ] , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; i = 0 ; while ( i <= 9 ) { scanf ( ""%d"" , & niz [ i ] ) ; i ++ ; } ubaci ( niz , 10 ) ; int x = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; i = 0 ; while ( i < x ) { printf ( ""%d"" , niz [ i ] ) ; if ( i == ( x - 1 ) ) { printf ( ""."" ) ; } else printf ( "", "" ) ; i ++ ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> int square ( long int x ) { long int k ; k = sqrt ( x ) ; if ( pow ( k , 2 ) == x ) { return 1 ; } else { return 0 ; } } int zbir ( int x ) { int y , s = 0 ; do { y = abs ( x ) % 10 ; x = abs ( x ) / 10 ; s = abs ( y ) + s ; } while ( x > 0 ) ; return s ; } void ubaci ( int * niz , int n ) { int i , j , r ; i = n - 1 ; while ( i >= 0 ) { j = n - 1 ; while ( j >= i ) { * ( niz + j + 1 ) = * ( niz + j ) ; j -- ; } n = n + 1 ; i -- ; } i = 0 ; while ( i < n ) { if ( i % 2 == 1 ) * ( niz + i ) = zbir ( * ( niz + i ) ) ; i ++ ; } } int fibonachi ( long int x ) { long int a = 5 * x * x + 4 ; long int b = 5 * x * x - 4 ; if ( square ( b ) == 1 || square ( a ) == 1 ) { return 1 ; } else { return 0 ; } } int izbaci ( int * niz , int n ) { int i , j ; i = 0 ; while ( i < n ) { if ( fibonachi ( * ( niz + i ) ) == 1 && * ( niz + i ) > 0 ) { j = i ; while ( j < n - 1 ) { * ( niz + j ) = * ( niz + j + 1 ) ; j ++ ; } i = i - 1 ; n = n - 1 ; if ( n == 0 ) break ; } i ++ ; } return n ; } int main ( ) { int niz [ 20 ] , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; i = 0 ; while ( i <= 9 ) { scanf ( ""%d"" , & niz [ i ] ) ; i ++ ; } ubaci ( niz , 10 ) ; int x = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; i = 0 ; while ( i < x ) { printf ( ""%d"" , niz [ i ] ) ; if ( i == ( x - 1 ) ) { printf ( ""."" ) ; } else printf ( "", "" ) ; i ++ ; } return 0 ; }"
1660,35,35,0,30,A2016/Z3/Z2/student8724,A2016/Z3/Z2/student1390,"#include <stdio.h> #include <math.h> int br ( int i ) { int suma = 0 ; while ( i != 0 ) { i = fabs ( i ) ; suma += i % 10 ; i /= 10 ; } return suma ; } int f ( int b ) { int a = 1 , c = 1 , d ; if ( b == 1 ) { return 1 ; } while ( 2 ) { d = a + c ; if ( d == b ) return 1 ; if ( d > b ) return 0 ; a = c ; c = d ; } } int izbaci ( int * n , int v ) { int i , y , j ; for ( i = 0 ; i < v ; i ++ ) { y = f ( n [ i ] ) ; if ( y ) { for ( j = i ; j < v - 1 ; j ++ ) { n [ j ] = n [ j + 1 ] ; } v -- ; i -- ; } } return v ; } void ubaci ( int * niz , int velicina ) { int niz2 [ 20 ] ; int niz3 [ 20 ] ; int i ; for ( i = 0 ; i < velicina ; i ++ ) { niz2 [ i ] = br ( niz [ i ] ) ; } int b = 0 ; for ( i = 0 ; i < 2 * velicina ; i += 2 ) { niz3 [ i ] = niz [ b ] ; niz3 [ i + 1 ] = niz2 [ b ] ; b ++ ; if ( b == velicina ) break ; } for ( i = 0 ; i < 2 * velicina ; i ++ ) { niz [ i ] = niz3 [ i ] ; } } int main ( ) { int niz [ 20 ] ; int i , broj ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < broj ; i ++ ) { printf ( "", %d"" , niz [ i ] ) ; } printf ( ""."" ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int suma ( int a ) { int b ; a = abs ( a ) ; int suma = 0 ; while ( a != 0 ) { b = a % 10 ; a /= 10 ; suma += b ; } return suma ; } int fibonacci ( int broj ) { int a = 1 , b = 1 , c ; if ( broj == 1 ) return 1 ; while ( 5 == 5 ) { c = a + b ; if ( broj == c ) { return 1 ; } else if ( c > broj ) { return 0 ; } a = b ; b = c ; } } int izbaci ( int * niz , int velicina ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } return velicina ; } void ubaci ( int * niz , int velicina ) { int i , a = 0 , mjesto = 0 ; int niz1 [ 10 ] , niz2 [ 10 ] ; for ( i = 0 ; i < velicina ; i ++ ) { niz1 [ i ] = niz [ i ] ; } for ( i = 0 ; i < velicina ; i ++ ) { a = suma ( niz1 [ i ] ) ; niz2 [ i ] = a ; } for ( i = 0 ; i < 2 * velicina ; i += 2 ) { niz [ i ] = niz1 [ mjesto ] ; niz [ i + 1 ] = niz2 [ mjesto ] ; mjesto ++ ; if ( velicina == mjesto ) break ; } } int main ( ) { int niz [ 20 ] ; int i , a ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; a = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; if ( a == 0 ) printf ( ""prazan niz. \n"" ) ; for ( i = 0 ; i < a ; i ++ ) { if ( i != ( a - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d."" , niz [ i ] ) ; } } return 0 ; }"
1662,96,96,0,15,A2016/Z1/Z2/student7485,A2016/Z1/Z2/student4682,"#include <stdio.h> #include <math.h> #define epsilon 0.0001 int main ( ) { float x , y1 , a1 , b1 , a2 , b2 ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y1 = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y1 ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0001 int main ( ) { float a1 , a2 , b1 , b2 , x , y1 ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y1 = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y1 ) ; return 0 ; }"
1665,95,95,0,17,A2016/Z1/Z2/student2477,A2016/Z1/Z2/student9097,"#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su "" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se "" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.001 int main ( ) { float a1 , b1 , a2 , b2 , y , x ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f, %f, %f, %f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
1668,98,98,0,54,A2016/Z3/Z2/student8004,A2016/Z3/Z2/student5468,"#include <stdio.h> #include <stdlib.h> void ubaci ( int niz [ ] , int vel ) { int i , temp [ 100 ] , zbir [ 100 ] = { 0 } , cifra , j = 0 ; for ( i = 0 ; i < vel ; i ++ ) { temp [ i ] = niz [ i ] ; while ( niz [ i ] != 0 ) { cifra = abs ( niz [ i ] % 10 ) ; niz [ i ] = abs ( niz [ i ] / 10 ) ; zbir [ i ] += cifra ; } niz [ i ] = temp [ i ] ; } for ( i = 1 ; i < vel * 2 ; i += 2 ) { for ( ; j < vel ; ) { niz [ i ] = zbir [ j ] ; niz [ i - 1 ] = temp [ j ] ; j ++ ; break ; } } } int izbaci ( int niz [ ] , int vel ) { int i , fibo [ 40 ] , j , k ; fibo [ 0 ] = 1 ; fibo [ 1 ] = 1 ; for ( i = 2 ; i < 40 ; i ++ ) fibo [ i ] = fibo [ i - 2 ] + fibo [ i - 1 ] ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = 0 ; j < 40 ; j ++ ) { if ( niz [ i ] == fibo [ j ] ) { for ( k = i ; k < vel - 1 ; k ++ ) niz [ k ] = niz [ k + 1 ] ; vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int i , niz [ 20 ] , vel ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; vel = i ; ubaci ( niz , vel ) ; vel = vel * 2 ; vel = izbaci ( niz , vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == vel - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> void ubaci ( int niz [ ] , int vel ) { int i , temp [ 100 ] , zbir [ 100 ] = { 0 } , cifra , j = 0 ; for ( i = 0 ; i < vel ; i ++ ) { temp [ i ] = niz [ i ] ; while ( niz [ i ] != 0 ) { cifra = abs ( niz [ i ] % 10 ) ; niz [ i ] = abs ( niz [ i ] / 10 ) ; zbir [ i ] += cifra ; } niz [ i ] = temp [ i ] ; } for ( i = 1 ; i < vel * 2 ; i += 2 ) { for ( ; j < vel ; ) { niz [ i ] = zbir [ j ] ; niz [ i - 1 ] = temp [ j ] ; j ++ ; break ; } } } int izbaci ( int niz [ ] , int vel ) { int i , fibo [ 40 ] , j , k ; fibo [ 0 ] = 1 ; fibo [ 1 ] = 1 ; for ( i = 2 ; i < 40 ; i ++ ) fibo [ i ] = fibo [ i - 2 ] + fibo [ i - 1 ] ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = 0 ; j < 40 ; j ++ ) { if ( niz [ i ] == fibo [ j ] ) { for ( k = i ; k < vel - 1 ; k ++ ) niz [ k ] = niz [ k + 1 ] ; vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int i , niz [ 20 ] , vel ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; vel = i ; ubaci ( niz , vel ) ; vel = vel * 2 ; vel = izbaci ( niz , vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == vel - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }"
1670,98,98,0,30,A2016/Z2/Z3/student7823,A2016/Z2/Z3/student7457,"#include <stdio.h> int main ( ) { int i , j , k , broj , vrijednosta [ 10 ] , vrijednostb [ 10 ] ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj <= 0 || broj > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( broj <= 0 || broj > 10 ) ; for ( i = 0 ; i < broj ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & vrijednosta [ i ] , & vrijednostb [ i ] ) ; if ( vrijednosta [ i ] > 19 || vrijednosta [ i ] < 0 || vrijednostb [ i ] > 19 || vrijednostb [ i ] < 0 ) { i -- ; printf ( ""pogresan unos\n"" ) ; continue ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < broj ; k ++ ) { if ( vrijednosta [ k ] == j && vrijednostb [ k ] == i ) { printf ( ""*"" ) ; j ++ ; } } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , k , broj , vrijednosta [ 10 ] , vrijednostb [ 10 ] ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj <= 0 || broj > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( broj <= 0 || broj > 10 ) ; for ( i = 0 ; i < broj ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & vrijednosta [ i ] , & vrijednostb [ i ] ) ; if ( vrijednosta [ i ] > 19 || vrijednosta [ i ] < 0 || vrijednostb [ i ] > 19 || vrijednostb [ i ] < 0 ) { i -- ; printf ( ""pogresan unos\n"" ) ; continue ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < broj ; k ++ ) { if ( vrijednosta [ k ] == j && vrijednostb [ k ] == i ) { printf ( ""*"" ) ; j ++ ; } } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1672,90,90,0,64,A2016/Z3/Z3/student3329,A2016/Z3/Z3/student4852,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] ; int m , n , i , j , k , m , n , checker ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { checker = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { checker = 0 ; break ; } } if ( checker ) { for ( m = k ; m < m - 1 ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { mat [ m ] [ n ] = mat [ m + 1 ] [ n ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { checker = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) { checker = 0 ; break ; } } if ( checker ) { for ( n = k ; n < n - 1 ; n ++ ) { for ( m = 0 ; m < m ; m ++ ) { mat [ m ] [ n ] = mat [ m ] [ n + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , i , j , k , t , p , s ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m <= 0 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { t = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < m ; p ++ ) { for ( s = 0 ; s < n ; s ++ ) matrica [ p ] [ s ] = matrica [ p + 1 ] [ s ] ; } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { t = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] != matrica [ k ] [ j ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < n ; p ++ ) { for ( s = 0 ; s < m ; s ++ ) matrica [ s ] [ p ] = matrica [ s ] [ p + 1 ] ; } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
1673,96,96,0,37,A2016/Z3/Z1/student7755,A2016/Z3/Z1/student8157,"#include <stdio.h> int daj_prost ( ) { int i , brojac = 0 ; static int x = 1 ; do { x ++ ; brojac = 0 ; for ( i = 1 ; i <= x ; i ++ ) { if ( x % i == 0 ) { brojac ++ ; } } } while ( brojac != 2 ) ; return x ; } int main ( ) { int a , b , sum = 0 , z ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a <= 0 || a >= b ) ; do { z = daj_prost ( ) ; if ( z > a && z < b ) { sum = sum + z ; } } while ( z < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i , brojac = 0 ; static int x = 1 ; do { x ++ ; brojac = 0 ; for ( i = 1 ; i <= x ; i ++ ) { if ( x % i == 0 ) { brojac ++ ; } } } while ( brojac != 2 ) ; return x ; } int main ( ) { int a , b , sum = 0 , z ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a <= 0 || a >= b ) ; do { z = daj_prost ( ) ; if ( z > a && z < b ) { sum = sum + z ; } } while ( z < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }"
1676,11,11,0,31,A2016/Z5/Z3/student1833,A2016/Z5/Z3/student8776,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; return ucitano1 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int vel = sizeof ( struct cas ) ; int ucitano = fwrite ( raspored , vel , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , x , s , min = 100 , max = 0 ; int indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { s = raspored [ k ] . pocetak . sati ; if ( s <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; x = i ; } } if ( k == broj_casova ) for ( x = 0 ; x < 10 ; x ++ ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( cas . pocetak . minute + cas . pocetak . sati * 60 == raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 || raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 == cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . pocetak . minute + cas . pocetak . sati * 60 && raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 > cas . pocetak . minute + cas . pocetak . sati * 60 || cas . pocetak . minute + cas . pocetak . sati * 60 < raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 && cas . kraj . minute + cas . kraj . sati * 60 > raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 || raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . kraj . minute + cas . kraj . sati * 60 && raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 > cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 ; int i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j ; int k = 0 ; int n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , poc , moze = 0 ; struct cas cas ; for ( i = 1 ; i < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { dan = i ; poc = k ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = dan ; cas . pocetak . sati = poc ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; int index = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { index = i ; break ; } } raspored [ index ] = promjena ; } int poziv ( struct cas raspored [ ] , int ucit , char * ime , int br ) { int vr = dodaj_cas ( raspored , ucit , ime , br ) ; return vr ; } struct cas zamj ( struct cas casko , int dan , int sat , int min , int sat1 , int min1 ) { casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; return casko ; } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , rez , dan , cs , zap , m ; char ime [ 100 ] ; for ( m = 0 ; m < kapacitet ; m ++ ) { raspored [ m ] . pocetak . sati = 0 ; raspored [ m ] . kraj . sati = 0 ; raspored [ m ] . dan_u_sedmici = 1 ; raspored [ m ] . pocetak . minute = 0 ; raspored [ m ] . kraj . minute = 0 ; raspored [ m ] . pocetak . sekunde = 0 ; raspored [ m ] . kraj . sekunde = 0 ; } poc : printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; if ( broj == 0 ) return 0 ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; if ( broj == 0 ) return 0 ; rez = poziv ( raspored , ucit , ime , br ) ; if ( rez == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( rez == 1 ) ucit ++ ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; if ( broj == 0 ) return 0 ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; int sat , min ; char z ; int sat1 , min1 ; char z1 ; ispisi_dan ( raspored , ucit , dan ) ; if ( broj == 0 ) return 0 ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko = zamj ( casko , dan , sat , min , sat1 , min1 ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } if ( broj != 0 ) goto poc ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) { return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; fclose ( ulaz ) ; return ucitano ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , pocetak = 9 , kraj = 0 , k , ispisan = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati >= kraj ) { kraj = raspored [ i ] . kraj . sati ; if ( raspored [ i ] . kraj . minute == 0 ) kraj -- ; } if ( raspored [ i ] . pocetak . sati < pocetak ) pocetak = raspored [ i ] . pocetak . sati ; } char dani [ ] [ 4 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; printf ( ""\n"" ) ; for ( i = 0 ; i < 6 ; i ++ ) printf ( ""%10s"" , dani [ i ] ) ; printf ( ""\n"" ) ; for ( i = pocetak ; i <= kraj ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 0 ; j < 6 ; j ++ ) { ispisan = 0 ; for ( k = 0 ; k < broj_casova ; k ++ ) { if ( raspored [ k ] . dan_u_sedmici == j + 1 && raspored [ k ] . pocetak . sati <= i && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; ispisan = 1 ; break ; } } if ( ispisan == 0 ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i = 0 ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int sat = raspored [ i ] . pocetak . sati ; int min = raspored [ i ] . pocetak . minute ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( sat < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , sat ) ; if ( min < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , min ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) { if ( raspored [ i ] . pocetak . sati == cas . pocetak . sati || raspored [ i ] . kraj . sati == cas . kraj . sati ) return 1 ; if ( raspored [ i ] . pocetak . sati == cas . kraj . sati && raspored [ i ] . pocetak . minute < cas . kraj . minute ) return 1 ; if ( raspored [ i ] . kraj . sati == cas . pocetak . sati && raspored [ i ] . kraj . minute > cas . pocetak . minute ) return 1 ; if ( raspored [ i ] . pocetak . sati < cas . pocetak . sati && raspored [ i ] . kraj . sati > cas . kraj . sati ) return 1 ; if ( raspored [ i ] . pocetak . sati > cas . pocetak . sati && raspored [ i ] . kraj . minute < cas . kraj . minute ) return 1 ; if ( raspored [ i ] . pocetak . sati > cas . pocetak . sati && raspored [ i ] . pocetak . sati < cas . kraj . sati ) return 1 ; if ( raspored [ i ] . kraj . sati > cas . pocetak . sati && raspored [ i ] . pocetak . sati < cas . kraj . sati ) return 1 ; } } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) { printf ( ""otvaranje datoteke raspored nije uspjelo."" ) ; return 0 ; } int zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; fclose ( ulaz ) ; if ( zapisano >= 1 ) return 1 ; else return 0 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; if ( dodan == 1 ) broj_casova ++ ; else printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti:  "" ) ; scanf ( ""%d"" , & redni ) ; printf ( ""naziv predmeta: "" ) ; char predmet [ 10 ] ; ocisti ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet , * p = predmet ; while ( * q ++ = * p ++ ) ; char znak ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } } while ( opcija != 0 ) ; return 0 ; }"
1689,82,82,0,35,A2016/Z2/Z3/student8518,A2016/Z2/Z3/student5399,"#include<stdio.h> int main ( ) { int x , y , i , j , n ; int mat [ 20 ] [ 20 ] ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n <= 0 || n > 10 ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x >= 20 || y < 0 || y >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } mat [ y ] [ x ] = 1 ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int br_t , i , j , m , n ; int mat [ 20 ] [ 20 ] ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & br_t ) ; if ( br_t > 10 || br_t <= 0 ) { printf ( ""pogresan unos\n"" ) ; continue ; } break ; } while ( 1 == 1 ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < br_t ; i ++ ) { do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 0 || m > 19 || n < 0 || n > 19 ) { printf ( ""pogresan unos\n"" ) ; continue ; } mat [ n ] [ m ] = 1 ; break ; } while ( 1 == 1 ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 0 ) printf ( "" "" ) ; else printf ( ""*"" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1701,77,77,0,27,A2016/Z2/Z4/student9438,A2016/Z2/Z4/student4973,"#include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int m , n , cirk = 1 , i , j ; int tep = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) tep = 0 ; } } if ( tep == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirk = 0 ; } } } if ( tep == 1 ) { if ( cirk == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j ; double mat [ 100 ] [ 100 ] ; int cirkularna = 0 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } int teplicova = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) teplicova = 0 ; } } if ( teplicova == 1 ) { cirkularna = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) cirkularna = 0 ; } } } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1714,97,97,0,20,A2016/Z2/Z1/student1422,A2016/Z2/Z1/student2335,"#include <stdio.h> #include <math.h> #include <stdlib.h> int main ( ) { int n , a , c , x = 0 , i = 0 , y ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n = abs ( n ) ; else if ( n > - 10 && n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { a = n % 10 ; n /= 10 ; c = abs ( a - ( n % 10 ) ) ; y = pow ( 10 , i ) ; x += c * y ; i ++ ; } while ( n > 9 ) ; printf ( ""%d"" , x ) ; return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> int main ( ) { int n , a , c , x = 0 , i = 0 , y ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n = abs ( n ) ; else if ( n > - 10 && n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { a = n % 10 ; n /= 10 ; c = abs ( a - ( n % 10 ) ) ; y = pow ( 10 , i ) ; x += c * y ; i ++ ; } while ( n > 9 ) ; printf ( ""%d"" , x ) ; return 0 ; }"
1723,95,95,0,68,A2016/Z3/Z1/student6824,A2016/Z3/Z1/student5899,"#include <stdio.h> int daj_prost ( ) { static int s = 1 ; int prost = 1 , i ; while ( 1 ) { s ++ ; for ( i = 2 ; i < s ; i ++ ) { if ( s % i == 0 ) { prost = 0 ; break ; } else { prost = 1 ; } } if ( prost == 1 ) { return s ; } } } int main ( ) { int a , b , suma = 0 , k = daj_prost ( ) ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a >= b || a <= 0 ) ; while ( k < b ) { k = daj_prost ( ) ; if ( k > a && k < b ) { suma = suma + k ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int s = 1 ; int prost = 1 , i ; while ( 1 ) { s ++ ; for ( i = 2 ; i < s ; i ++ ) { if ( s % i == 0 ) { prost = 0 ; break ; } else { prost = 1 ; } } if ( prost == 1 ) { return s ; } } } int main ( ) { int a , b , suma = 0 , k = daj_prost ( ) ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a >= b || a <= 0 ) ; while ( k < b ) { k = daj_prost ( ) ; if ( k > a && k < b ) { suma = suma + k ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
1727,86,86,0,105,A2016/Z4/Z3/student8774,A2016/Z4/Z3/student8631,"#include <stdio.h> int provjera ( char * p , char * q ) { int jesu = 1 ; while ( * q != '\0' ) { if ( * q ++ != * p ++ ) { jesu = 0 ; break ; } if ( * q == '\0' && ( * p != ' ' && * p != '\0' ) ) { jesu = 0 ; break ; } } return jesu ; } void zamjena ( char * rec , char * rijec ) { while ( * rijec != '\0' ) { * rec ++ = * rijec ++ ; } rec ++ ; } int dict ( char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , jesu = 1 ; char * s , * s1 ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { s = rijeci [ i ] ; s1 = zamjene [ i ] ; while ( * s != '\0' || * s1 != '\0' ) { if ( * s ++ != * s1 ) jesu = 0 ; } if ( jesu == 0 ) break ; } return jesu ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * s , * t , * k , * h ; int i , brojac ; if ( dict ( rijeci , zamjene , broj_rijeci ) ) return tekst ; while ( * p != '\0' ) { if ( p == tekst || * ( p - 1 ) == ' ' ) { while ( * p == ' ' ) p ++ ; t = p ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { brojac = 0 ; p = t ; s = rijeci [ i ] ; if ( provjera ( p , s ) ) { k = t ; while ( * p != '\0' && * p != ' ' ) p ++ ; while ( * p != '\0' ) { * k ++ = * p ++ ; } * k = '\0' ; p = t ; s = zamjene [ i ] ; while ( * s != '\0' ) { brojac ++ ; s ++ ; } h = k + brojac ; p -- ; while ( k != p ) { * h -- = * k -- ; } s = zamjene [ i ] ; zamjena ( t , s ) ; } } } p ++ ; } return tekst ; } int main ( ) { char tekst [ 100 ] = ""beli sneg je pokrio beli breg"" ; char * rijeci [ 2 ] = { ""beli"" , ""sneg"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> int jesuisti ( char * p , char * temp ) { int isti = 1 ; while ( * temp != '\0' ) { if ( * temp ++ != * p ++ ) { isti = 0 ; break ; } if ( * temp == '\0' && ( * p != ' ' && * p != '\0' ) ) { isti = 0 ; break ; } } return isti ; } void zamijenirijeci ( char * recenica , char * rijec ) { while ( * rijec != '\0' ) { * recenica ++ = * rijec ++ ; } recenica ++ ; } int rjecnik ( char * * rijeci , char * * zamjene , int broj_rijeci ) { int i , isti = 1 ; char * pom , * pom1 ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { pom = rijeci [ i ] ; pom1 = zamjene [ i ] ; while ( * pom != '\0' || * pom1 != '\0' ) { if ( * pom ++ != * pom1 ++ ) isti = 0 ; } if ( isti == 0 ) break ; } return isti ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * temp , * pt , * kt , * ht ; int i , br ; if ( rjecnik ( rijeci , zamjene , broj_rijeci ) ) return tekst ; while ( * p != '\0' ) { if ( p == tekst || * ( p - 1 ) == ' ' ) { while ( * p == ' ' ) p ++ ; pt = p ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { br = 0 ; p = pt ; temp = rijeci [ i ] ; if ( jesuisti ( p , temp ) ) { kt = pt ; while ( * p != '\0' && * p != ' ' ) p ++ ; while ( * p != '\0' ) { * kt ++ = * p ++ ; } * kt = '\0' ; p = pt ; temp = zamjene [ i ] ; while ( * temp != '\0' ) { br ++ ; temp ++ ; } ht = kt + br ; p -- ; while ( kt != p ) { * ht -- = * kt -- ; } temp = zamjene [ i ] ; zamijenirijeci ( pt , temp ) ; } } } p ++ ; } return tekst ; } int main ( ) { char * rijeci [ 3 ] = { ""proba"" , ""ovo"" , ""je"" } ; char * zamjene [ 3 ] = { """" , """" , """" } ; char tekst [ 100 ] = ""ovo je proba"" ; printf ( ""'%s'"" , zamjena_rijeci ( tekst , rijeci , zamjene , 3 ) ) ; return 0 ; }"
1731,77,77,0,15,A2016/Z1/Z4/student4860,A2016/Z1/Z4/student9923,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos"" ) ; } while ( n <= 0 || n > 50 ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j || j == i + 2 * n - 2 || j == 2 * n - i - 2 || j == 4 * n - i - 4 ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos"" ) ; } while ( n <= 0 || n > 50 ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j || j == i + 2 * n - 2 || j == 2 * n - 2 - i || j == 4 * n - i - 4 ) printf ( ""*"" ) ; else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
1734,94,94,0,21,A2016/Z1/Z2/student9569,A2016/Z1/Z2/student3515,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y , d , r ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( a1 == a2 ) && ( b1 != b2 ) ) { printf ( ""paralelne su"" ) ; } else if ( b1 == b2 ) { printf ( ""poklapaju se"" ) ; } if ( ( a1 != a2 ) && ( b1 != b2 ) ) { d = b2 - b1 ; r = a1 - a2 ; x = d / r ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y , d , r ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( a1 == a2 ) && ( b1 != b2 ) ) { printf ( ""paralelne su"" ) ; } else if ( b1 == b2 ) { printf ( ""poklapaju se"" ) ; } if ( ( a1 != a2 ) && ( b1 != b2 ) ) { d = b2 - b1 ; r = a1 - a2 ; x = d / r ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
1745,61,61,0,26,A2016/Z3/Z1/student1313,A2016/Z3/Z1/student4036,"#include <stdio.h> int daj_prost ( ) { static int br = 2 ; int i ; while ( 1 ) { int prost = 1 ; for ( i = 2 ; i < br ; i ++ ) { if ( br % i == 0 ) { prost = 0 ; } } if ( prost == 0 ) { br ++ ; } else break ; } br ++ ; return br - 1 ; } int main ( ) { int a , b , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else break ; } while ( 1 ) ; while ( 1 ) { int c ; c = daj_prost ( ) ; if ( c > a && c < b ) suma = suma + c ; if ( c >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i ; static int broj = 2 ; while ( 1 ) { int pr = 1 ; for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { pr = 0 ; } } if ( pr == 0 ) { broj ++ ; } else break ; } broj ++ ; return broj - 1 ; } int main ( ) { int a , b ; int suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else break ; } while ( 1 ) ; while ( 1 ) { int temp = daj_prost ( ) ; if ( temp > a && temp < b ) suma += temp ; if ( temp >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
1756,3,3,0,4,A2016/Z5/Z2/student7392,A2016/Z5/Z2/student9823,"#include <stdio.h> #include <stdlib.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( znak == ' ' ) znak = getchar ( ) ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void zamjeni ( char * rijec1 , char * rijec2 ) { int i ; char temp ; for ( i = 0 ; i < 11 ; i ++ ) { temp = rijec1 [ i ] ; rijec1 [ i ] = rijec2 [ i ] ; rijec2 [ i ] = temp ; } } void kompresuj ( char * imeulazne , char * imeizlazne ) { file * ulaz = fopen ( imeulazne , ""r"" ) ; if ( ulaz == null ) return ; file * izlaz = fopen ( imeizlazne , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return ; } int i ; int brojrazl = 0 ; char rijeci [ 1000 ] [ 11 ] ; int koliko [ 1000 ] ; for ( i = 0 ; i < 1000 ; i ++ ) { rijeci [ i ] [ 0 ] = '\0' ; koliko [ i ] = 0 ; } char rijec [ 1000 ] ; int c ; int j ; int duzina = 0 ; int tempint ; do { c = fgetc ( ulaz ) ; if ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) { if ( duzina > 9 ) { duzina ++ ; } else { rijec [ duzina ] = c ; duzina ++ ; rijec [ duzina ] = '\0' ; } } else { if ( duzina > 1 && duzina < 10 ) { for ( i = 0 ; i < brojrazl ; i ++ ) { if ( strcmp ( rijec , rijeci [ i ] ) == 0 ) { koliko [ i ] ++ ; break ; } } if ( i == brojrazl ) { strcpy ( rijeci [ i ] , rijec ) ; koliko [ i ] = 1 ; brojrazl ++ ; } } duzina = 0 ; rijec [ 0 ] = '\0' ; } } while ( c != eof ) ; for ( i = 0 ; i < brojrazl ; i ++ ) { for ( j = i ; j < brojrazl ; j ++ ) { if ( koliko [ i ] < koliko [ j ] ) { tempint = koliko [ i ] ; koliko [ i ] = koliko [ j ] ; koliko [ j ] = tempint ; zamjeni ( rijeci [ i ] , rijeci [ j ] ) ; } else if ( koliko [ i ] == koliko [ j ] ) { if ( strcmp ( rijeci [ i ] , rijeci [ j ] ) > 0 ) { tempint = koliko [ i ] ; koliko [ i ] = koliko [ j ] ; koliko [ j ] = tempint ; zamjeni ( rijeci [ i ] , rijeci [ j ] ) ; } } } } for ( i = 0 ; i < brojrazl ; i ++ ) { if ( i < 10 ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } if ( brojrazl < 10 ) fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; duzina = 0 ; rijec [ 0 ] = '\0' ; ulaz = fopen ( imeulazne , ""r"" ) ; do { c = fgetc ( ulaz ) ; if ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) { if ( duzina > 9 ) { duzina ++ ; fprintf ( izlaz , ""%c"" , c ) ; } else { rijec [ duzina ] = c ; duzina ++ ; rijec [ duzina ] = '\0' ; if ( duzina == 10 ) fprintf ( izlaz , ""%s"" , rijec ) ; } } else { if ( duzina < 10 ) { for ( i = 0 ; i < brojrazl ; i ++ ) { if ( i < 10 && strcmp ( rijec , rijeci [ i ] ) == 0 ) { fprintf ( izlaz , ""%c"" , 20 + i ) ; break ; } } if ( i == brojrazl ) { fprintf ( izlaz , ""%s"" , rijec ) ; } } if ( c != eof ) fprintf ( izlaz , ""%c"" , c ) ; duzina = 0 ; rijec [ 0 ] = '\0' ; } } while ( c != eof ) ; printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; } void dekompresuj ( char * imeulazne , char * imeizlazne ) { file * ulaz = fopen ( imeulazne , ""r"" ) ; if ( ulaz == null ) return ; file * izlaz = fopen ( imeizlazne , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return ; } char top [ 10 ] [ 10 ] ; int c ; int duzina = 0 ; int brojac = 0 ; do { c = fgetc ( ulaz ) ; if ( c == eof ) break ; if ( c != '\n' ) { top [ brojac ] [ duzina ] = c ; duzina ++ ; } else { if ( duzina == 0 ) { break ; } top [ brojac ] [ duzina ] = '\0' ; brojac ++ ; if ( brojac == 10 ) break ; duzina = 0 ; } } while ( c != eof ) ; do { c = fgetc ( ulaz ) ; if ( c == eof ) break ; if ( c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , top [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%c"" , c ) ; } } while ( c != eof ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; } int main ( ) { int a ; char datoteka1 [ 500 ] = ""gg"" ; char datoteka2 [ 500 ] = ""izlaz.txt"" ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & a ) ; if ( a == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( datoteka1 , 500 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( datoteka2 , 500 ) ; kompresuj ( datoteka1 , datoteka2 ) ; } if ( a == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( datoteka1 , 500 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( datoteka2 , 500 ) ; dekompresuj ( datoteka1 , datoteka2 ) ; } } while ( a ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int isslovo ( int c ) { if ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) return 1 ; return 0 ; } void zamjena ( char * s1 , char * s2 ) { char temp [ 1000 ] ; strcpy ( temp , s1 ) ; strcpy ( s1 , s2 ) ; strcpy ( s2 , temp ) ; } void kompresuj ( char * ulazna , char * izlazna ) { char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int velicina ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * ulazp = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { velicina = 0 ; while ( isslovo ( znak ) ) { rijec [ velicina ] = znak ; znak = fgetc ( ulaz ) ; if ( velicina > 10 ) { while ( znak != ' ' ) znak = fgetc ( ulaz ) ; velicina = 0 ; break ; } velicina ++ ; } rijec [ velicina ] = '\0' ; if ( velicina < 10 && velicina != 0 ) { int postoji = 0 ; int k ; for ( k = 0 ; k < broj_rijeci ; k ++ ) { if ( strcmp ( rijeci [ k ] , rijec ) == 0 ) { postoji = 1 ; brojac [ k ] ++ ; break ; } } if ( postoji != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) > 0 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; zamjena ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char pomoc = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( pomoc , izlaz ) ; } char c = fgetc ( ulazp ) ; while ( c != eof ) { velicina = 0 ; while ( isslovo ( c ) ) { rijec [ velicina ] = c ; c = fgetc ( ulazp ) ; velicina ++ ; } rijec [ velicina ] = '\0' ; int pomocna = 0 ; if ( velicina < 10 && velicina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znakic = j + 20 ; pomocna = 1 ; fputc ( znakic , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( pomocna == 0 ) { char * a = rijec ; while ( * a != '\0' ) { fputc ( * a , izlaz ) ; a ++ ; } fputc ( c , izlaz ) ; } c = getc ( ulazp ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulazp ) ; fclose ( izlaz ) ; } void dekompresuj ( char * ulazna , char * izlazna ) { char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int broj_rijeci = 0 , brojaczsk = 0 ; char pomocna [ 1000 ] ; int velicina = 0 ; int pomocnazapamtit = 0 ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * ulazp = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char c = fgetc ( ulaz ) ; while ( c != eof ) { velicina = 0 ; pomocnazapamtit = 0 ; while ( isslovo ( c ) ) { pomocna [ velicina ] = c ; c = fgetc ( ulaz ) ; if ( velicina > 10 ) { while ( c != ' ' ) c = fgetc ( ulaz ) ; velicina = 0 ; break ; } velicina ++ ; } pomocna [ velicina ] = '\0' ; if ( velicina < 10 && velicina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , pomocna ) ; int i ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , pomocna ) == 0 ) { pomocnazapamtit = 1 ; break ; } } if ( pomocnazapamtit == 1 ) break ; broj_rijeci ++ ; } c = fgetc ( ulaz ) ; } brojaczsk = 0 ; char znak = fgetc ( ulazp ) ; while ( znak != eof ) { if ( znak == '\n' ) brojaczsk ++ ; if ( brojaczsk == broj_rijeci ) break ; znak = fgetc ( ulazp ) ; } znak = fgetc ( ulazp ) ; while ( znak != eof ) { int pomozi = 0 ; if ( znak >= 20 && znak <= 30 ) { char * pointer = rijeci [ znak - 20 ] ; pomozi = 1 ; while ( * pointer != '\0' ) { fputc ( * pointer , izlaz ) ; pointer ++ ; } } if ( pomozi == 0 ) fputc ( znak , izlaz ) ; znak = fgetc ( ulazp ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulazp ) ; fclose ( izlaz ) ; } int main ( ) { int opcija ; char string1 [ 100 ] , string2 [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( string1 , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( string2 , 40 ) ; kompresuj ( string1 , string2 ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( string1 , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( string2 , 40 ) ; dekompresuj ( string1 , string2 ) ; break ; } } while ( opcija != 0 ) ; return 0 ; }"
1757,85,85,0,52,A2016/Z3/Z1/student7255,A2016/Z3/Z1/student2526,"#include <stdio.h> int daj_prost ( ) { int p = 0 , i ; static int q = 0 ; while ( 1 ) { q ++ ; if ( q == 2 ) { return q ; } else if ( q == 3 ) { return q ; } else { for ( i = 2 ; i < q ; i ++ ) { if ( q % i == 0 ) { p = 0 ; break ; } } if ( p ) { return q ; } else { p = 1 ; } } } } int main ( ) { int a , b , sum = 0 , q = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( q < b ) { q = daj_prost ( ) ; if ( q > a && q < b ) { sum += q ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int prost = 1 , i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a , b , suma = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( broj < b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
1759,98,98,0,49,A2016/Z3/Z1/student7013,A2016/Z3/Z1/student5222,"#include <stdio.h> int daj_prost ( ) { static int broj = 1 ; int i , j , prost ; for ( i = broj + 1 ; ; i ++ ) { prost = 1 ; for ( j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { prost = 0 ; break ; } } if ( prost == 1 ) { broj = i ; break ; } } return i ; } int main ( ) { int a , b , suma = 0 , i ; for ( ; ; ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a < b ) { if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else { break ; } } else { printf ( ""a nije manje od b.\n"" ) ; } } for ( i = daj_prost ( ) ; ; i = daj_prost ( ) ) { if ( i >= b ) { break ; } else if ( i > a && i < b ) { suma += i ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int broj = 1 ; int i , j , prost ; for ( i = broj + 1 ; ; i ++ ) { prost = 1 ; for ( j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { prost = 0 ; break ; } } if ( prost == 1 ) { broj = i ; break ; } } return i ; } int main ( ) { int a , b , suma = 0 , i ; for ( ; ; ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a < b ) { if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else { break ; } } else { printf ( ""a nije manje od b.\n"" ) ; } } for ( i = daj_prost ( ) ; ; i = daj_prost ( ) ) { if ( i >= b ) { break ; } else if ( i > a && i < b ) { suma += i ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
1764,89,89,0,46,A2016/Z2/Z3/student9296,A2016/Z2/Z3/student7255,"#include <stdio.h> int main ( ) { int i , j , k , brt = 0 ; char smor [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brt ) ; while ( brt <= 0 || brt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { smor [ i ] [ j ] = ' ' ; } } for ( k = 0 ; k < brt ; k ++ ) { printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & i , & j ) ; while ( i < 0 || i > 19 || j < 0 || j > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & i , & j ) ; } smor [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , smor [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bt , n , i , j ; int p , d ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; while ( bt < 1 || bt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < bt ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; while ( p < 0 || p > 19 || d < 0 || d > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; } niz [ d ] [ p ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1771,87,87,0,41,A2016/Z2/Z3/student8329,A2016/Z2/Z3/student7255,"#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , brtac ; int br ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; while ( ( brtac < 1 ) || ( brtac > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < brtac ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( ( i < 0 ) || ( i > 19 ) || ( j < 0 ) || ( j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bt , n , i , j ; int p , d ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; while ( bt < 1 || bt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < bt ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; while ( p < 0 || p > 19 || d < 0 || d > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; } niz [ d ] [ p ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1775,98,98,0,35,A2016/Z2/Z3/student7507,A2016/Z2/Z3/student5162,"#include <stdio.h> int main ( ) { int n , i , j , x , y ; char mat [ 20 ] [ 20 ] ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; continue ; } if ( n <= 10 ) break ; } while ( 1 ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = 32 ; } } for ( i = 0 ; i < n ; i ++ ) { while ( 1 ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x >= 20 || x < 0 || y >= 20 || y < 0 ) { printf ( ""pogresan unos\n"" ) ; continue ; } mat [ y ] [ x ] = 42 ; if ( x <= 20 || x > 0 || y <= 20 || y > 0 ) break ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j , x , y ; char mat [ 20 ] [ 20 ] ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; continue ; } if ( n <= 10 ) break ; } while ( 1 ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = 32 ; } } for ( i = 0 ; i < n ; i ++ ) { while ( 1 ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x >= 20 || x < 0 || y >= 20 || y < 0 ) { printf ( ""pogresan unos\n"" ) ; continue ; } mat [ y ] [ x ] = 42 ; if ( x <= 20 || x > 0 || y <= 20 || y > 0 ) break ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1783,99,99,0,65,A2016/Z3/Z3/student8580,A2016/Z3/Z3/student4852,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , i , j , k , t , p , s ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m <= 0 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { t = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < m ; p ++ ) { for ( s = 0 ; s < n ; s ++ ) matrica [ p ] [ s ] = matrica [ p + 1 ] [ s ] ; } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { t = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] != matrica [ k ] [ j ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < n ; p ++ ) { for ( s = 0 ; s < m ; s ++ ) matrica [ s ] [ p ] = matrica [ s ] [ p + 1 ] ; } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , i , j , k , t , p , s ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m <= 0 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { t = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < m ; p ++ ) { for ( s = 0 ; s < n ; s ++ ) matrica [ p ] [ s ] = matrica [ p + 1 ] [ s ] ; } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { t = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] != matrica [ k ] [ j ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < n ; p ++ ) { for ( s = 0 ; s < m ; s ++ ) matrica [ s ] [ p ] = matrica [ s ] [ p + 1 ] ; } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
1800,44,44,0,34,A2016/Z3/Z2/student5612,A2016/Z3/Z2/student7255,"#include <stdio.h> #include<stdlib.h> #define velicina 10 #define velicina_2 20 void ubaci ( int * niz , int velicina ) { int i , k ; int b1 ; int b2 ; int b3 = 0 ; for ( k = velicina - 1 ; k >= 0 ; k -- ) { niz [ 2 * k ] = niz [ k ] ; } for ( i = 0 ; i < 2 * velicina ; i = i + 2 ) { b1 = abs ( niz [ i ] ) ; if ( b1 < 10 ) b3 = b1 ; else { do { b2 = b1 % 10 ; b3 = b3 + b2 ; b1 = b1 / 10 ; } while ( b1 != 0 ) ; } niz [ i + 1 ] = b3 ; b3 = 0 ; } } int izbaci ( int * niz , int velicina ) { int i ; int k ; int x = 1 ; int y = 1 ; int z ; int u ; for ( i = 0 ; i < velicina ; i ++ ) { x = 1 ; y = 1 ; for ( k = 1 ; k < 10000 ; k ++ ) { if ( k == 1 ) z = 1 ; else { z = x + y ; x = y ; y = z ; } if ( niz [ i ] == z ) { for ( u = i ; u < velicina - 1 ; u ++ ) { niz [ u ] = niz [ u + 1 ] ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 2 * velicina ] ; int i ; int u ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < velicina ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; u = izbaci ( niz , velicina_2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < u ; i ++ ) { if ( i == u - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define duz 10 void ubaci ( int * niz , int vel ) { int s , h = 0 , c , i , j ; for ( j = vel - 1 ; j >= 0 ; j -- ) { niz [ 2 * j ] = niz [ j ] ; } for ( i = 0 ; i < 2 * vel ; i += 2 ) { s = abs ( niz [ i ] ) ; if ( s < 10 ) { h = s ; } else { do { c = s % 10 ; h = h + c ; s /= 10 ; } while ( s != 0 ) ; } niz [ i + 1 ] = h ; h = 0 ; } } int izbaci ( int * niz , int vel ) { int i , j , k , i = 0 , ii = 1 , iii ; for ( i = 0 ; i < vel ; i ++ ) { i = 0 ; ii = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) { iii = j ; } else { iii = i + ii ; i = ii ; ii = iii ; } if ( * ( niz + i ) == iii ) { for ( k = i ; k < vel - 1 ; k ++ ) { * ( niz + k ) = * ( niz + k + 1 ) ; } vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int niz [ 2 * duz ] , i , poziv ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < duz ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , duz ) ; poziv = izbaci ( niz , 2 * duz ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < poziv ; i ++ ) { if ( i < poziv - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d,"" , niz [ i ] ) ; } } } return 0 ; }"
1803,14,14,0,23,A2016/Z5/Z1/student4416,A2016/Z5/Z1/student8480,"#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosj ( int * ocj , int brocj ) { int suma = 0 , i ; for ( i = 0 ; i < brocj ; i ++ ) { if ( ocj [ i ] == 5 ) return 5 ; suma = suma + ocj [ i ] ; } if ( suma == 0 ) return 5 ; return ( float ) suma / brocj ; } int leks ( char * i1 , char * p1 , char * i2 , char * p2 ) { while ( * p1 != 0 && * p2 != 0 ) { if ( * p1 < * p2 ) return 1 ; if ( * p1 > * p2 ) return 2 ; p1 ++ ; p2 ++ ; } if ( * p1 != 0 ) return 2 ; if ( * p2 != 0 ) return 1 ; while ( * i1 != 0 && * i2 != 0 ) { if ( * i1 < * i2 ) return 1 ; if ( * i1 > * i2 ) return 2 ; i1 ++ ; i2 ++ ; } if ( * i1 != 0 ) return 2 ; if ( * i2 != 0 ) return 1 ; return 0 ; } int genijalci ( struct student * niz , int velicina , float prosjek ) { int veci , i , j , max1 = 0 , max2 = 0 , max3 = 0 ; float t , p1 = 0 , p2 = 0 , p3 = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek > prosj ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; velicina -- ; } } for ( i = 0 ; i < velicina ; i ++ ) { t = ( prosj ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) ; if ( t > p1 ) { p3 = p2 ; max3 = max2 ; p2 = p1 ; max2 = max1 ; p1 = t ; max1 = i ; } else if ( t == p1 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max1 ] . ime , niz [ max1 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = p1 ; max2 = max1 ; p1 = t ; max1 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max2 ] . ime , niz [ max2 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 || veci == 0 ) { p3 = t ; max3 = i ; } } } else if ( veci == 0 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } } else if ( t > p2 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( t == p2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max2 ] . ime , niz [ max2 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 ) { p3 = t ; max3 = i ; } } else if ( veci == 0 ) { p3 = t ; max3 = i ; } } else if ( t > p3 ) { p3 = t ; max3 = i ; } else if ( t == p3 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 ) { p3 = t ; max3 = i ; } } } if ( p1 > 0 ) printf ( ""\n%s %s"" , niz [ max1 ] . prezime , niz [ max1 ] . ime ) ; if ( p2 > 0 ) printf ( ""\n%s %s"" , niz [ max2 ] . prezime , niz [ max2 ] . ime ) ; if ( p3 > 0 ) printf ( ""\n%s %s"" , niz [ max3 ] . prezime , niz [ max3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 4 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 4 , 6.5 ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return 1 ; if ( * s1 > * s2 ) return 2 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 2 ; if ( * s2 != '\0' ) return 1 ; return 0 ; } float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { suma += niz [ i ] ; } float prosjek = ( float ) suma / vel ; return prosjek ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( uporedi ( pr . prezime , dr . prezime ) == 1 ) return 1 ; if ( uporedi ( pr . prezime , dr . prezime ) == 2 ) return 0 ; if ( uporedi ( pr . ime , dr . ime ) == 1 ) return 1 ; if ( uporedi ( pr . ime , dr . ime ) == 2 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexmin = 0 , indexprvi , indexdrugi , indextreci ; double min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } int maxprvi = 5 ; switch ( vel ) { case 0 : break ; case 1 : maxprvi = 5 ; indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { int temp_prosjek = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) { indexprvi = i ; maxprvi = temp_prosjek ; } } printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; break ; case 2 : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; break ; default : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) == 1 && i != indexprvi && i != indexdrugi ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }"
1806,42,42,0,11,A2016/Z2/Z1/student1313,A2016/Z2/Z1/student4804,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , br1 , br2 , a , broj = 0 , j = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n = abs ( n ) ; do { br1 = n % 10 ; n = n / 10 ; if ( n == 0 ) break ; br2 = n % 10 ; a = abs ( br1 - br2 ) ; broj = broj + a * j ; j = j * 10 ; } while ( n > 0 ) ; printf ( ""%d"" , broj ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int n , b , c , br = 0 , i = 1 , e , d ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n = abs ( n ) ; do { b = n % 10 ; n = n / 10 ; if ( n == 0 ) break ; c = n % 10 ; d = b - c ; if ( d < 0 ) d = abs ( d ) ; e = i * d ; br = br + e ; i = i * 10 ; } while ( n > 0 ) ; printf ( ""%d"" , br ) ; return 0 ; }"
1811,79,79,0,54,A2016/Z3/Z2/student6877,A2016/Z3/Z2/student8357,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define velniz1 10 #define velniz2 20 void ubaci ( int * niz , int vel1 ) { int i , suma = 0 , zadcifra , broj ; for ( i = vel1 - 1 ; i >= 0 ; i -- ) * ( niz + 2 * i ) = * ( niz + i ) ; for ( i = 0 ; i < vel1 * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { zadcifra = broj % 10 ; suma = suma + zadcifra ; broj = broj / 10 ; } suma = abs ( suma ) ; * ( niz + i ) = suma ; suma = 0 ; } } } int izbaci ( int * niz , int vel2 ) { int i , j , k , prvi , drugi , temp ; for ( i = 0 ; i < vel2 ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 0 ; j < 1000 ; j ++ ) { temp = prvi + drugi ; prvi = drugi ; drugi = temp ; if ( * ( niz + i ) == temp ) { for ( k = i ; k < vel2 - 1 ; k ++ ) { * ( niz + k ) = * ( niz + k + 1 ) ; } vel2 -- ; i -- ; break ; } } } return vel2 ; } int main ( ) { int niz [ 20 ] , i , brclanova ; printf ( ""\nunesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , velniz1 ) ; brclanova = izbaci ( niz , velniz2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < brclanova ; i ++ ) { if ( i < ( brclanova - 1 ) ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d. "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> void ubaci ( int * niz , int velicina ) { int i , cifra , clan , suma = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { clan = * ( niz + i - 1 ) ; while ( clan != 0 ) { cifra = clan % 10 ; suma += cifra ; clan = clan / 10 ; } suma = fabs ( suma ) ; * ( niz + i ) = suma ; suma = 0 ; } } } int izbaci ( int * niz , int velicina ) { int i , j , k , prvi = 0 , drugi = 1 , slijedeci ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) slijedeci = j ; else { slijedeci = prvi + drugi ; prvi = drugi ; drugi = slijedeci ; } if ( * ( niz + i ) == slijedeci ) { for ( k = i ; k < velicina - 1 ; k ++ ) { * ( niz + k ) = * ( niz + k + 1 ) ; } velicina -- ; i -- ; break ; } } } } int main ( ) { int niz [ 20 ] , i , y , velicina1 = 10 , velicina2 = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina1 ) ; y = izbaci ( niz , velicina2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < y ; i ++ ) { if ( i < ( y - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }"
1815,97,97,0,53,A2016/Z2/Z4/student8561,A2016/Z2/Z4/student8419,"#include <stdio.h> #include <math.h> #define e 0.00001 #define g 100 int main ( ) { int a , b , m , n , i , j ; double f [ g ] [ g ] ; a = 1 ; b = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n < 1 || m < 1 || n > 100 || m > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( n < 1 || m < 1 || n > 100 || m > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & f [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( f [ i ] [ j ] - f [ i + 1 ] [ j + 1 ] ) < e ) b = 0 ; else { b = 1 ; goto mm ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( fabs ( f [ i ] [ n - 1 ] - f [ i + 1 ] [ 0 ] ) < e ) a = 0 ; else { a = 1 ; goto mm ; } } mm : if ( m == 1 ) { a = 0 ; b = 0 ; } if ( m == 100 ) { a = 1 ; b = 0 ; } if ( a == 0 && b == 0 ) printf ( ""matrica je cirkularna"" ) ; else if ( a == 1 && b == 0 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.00001 #define g 100 int main ( ) { int a , b , m , n , i , j ; double f [ g ] [ g ] ; a = 1 ; b = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n < 1 || m < 1 || n > 100 || m > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( n < 1 || m < 1 || n > 100 || m > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & f [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( f [ i ] [ j ] - f [ i + 1 ] [ j + 1 ] ) < e ) b = 0 ; else { b = 1 ; goto mm ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( fabs ( f [ i ] [ n - 1 ] - f [ i + 1 ] [ 0 ] ) < e ) a = 0 ; else { a = 1 ; goto mm ; } } mm : if ( m == 1 ) { a = 0 ; b = 0 ; } if ( m == 100 ) { a = 1 ; b = 0 ; } if ( a == 0 && b == 0 ) printf ( ""matrica je cirkularna"" ) ; else if ( a == 1 && b == 0 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1816,83,83,0,30,A2016/Z2/Z4/student9805,A2016/Z2/Z4/student5603,"#include <stdio.h> #include <math.h> int main ( ) { int i , j ; int m , n ; double t [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & t [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( t [ i ] [ j ] != t [ i + 1 ] [ j + 1 ] ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( t [ i ] [ n - 1 ] != t [ i + 1 ] [ 0 ] ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } } printf ( ""matrica je cirkularna"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int i , j , m , n ; int cirk = 0 , tep = 0 ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { tep = 1 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] || mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { cirk = 1 ; } } } if ( m == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( n == 1 ) printf ( ""matrica je teplicova"" ) ; else if ( cirk == 0 && tep == 0 ) printf ( ""matrica je cirkularna"" ) ; else if ( cirk == 0 && tep == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( cirk == 1 && tep == 1 ) printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; else if ( tep == 0 && cirk == 1 ) printf ( ""matrica je teplicova"" ) ; return 0 ; }"
1826,99,99,0,70,A2016/Z1/Z3/student9175,A2016/Z1/Z3/student4495,"#include <stdio.h> int main ( ) { char ba ; float ub = 0 , bc = 0 , bb = 0 , bs = 0 , bv = 0 , bp = 0 , bpop = 0 ; double pst ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & ba ) ; if ( ba != 'c' & ba != 'c' & ba != 'b' & ba != 'b' & ba != 's' & ba != 's' & ba != 'v' & ba != 'v' & ba != 'p' & ba != 'p' & ba != 'k' & ba != 'k' ) printf ( ""neispravan unos\n"" ) ; else if ( ba == 'k' || ba == 'k' ) break ; else { if ( ba == 'c' || ba == 'c' ) bc ++ ; else if ( ba == 'b' || ba == 'b' ) bb ++ ; else if ( ba == 's' || ba == 's' ) bs ++ ; else if ( ba == 'v' || ba == 'v' ) bv ++ ; else if ( ba == 'p' || ba == 'p' ) bp ++ ; ub ++ ; } } while ( ba != 'k' && ba != 'k' ) ; bpop = bp ; if ( bpop <= bv ) bpop = bv ; if ( bpop <= bs ) bpop = bs ; if ( bpop <= bb ) bpop = bb ; if ( bpop <= bc ) bpop = bc ; if ( ub == 0.0 ) pst = 0.0 ; else pst = ( bpop / ub ) * 100 ; printf ( ""ukupno evidentirano %g vozila.\n"" , ub ) ; if ( bpop == bc ) printf ( ""najpopularnija boja je crna (%.2f%%)."" , pst ) ; else if ( bpop == bb ) printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pst ) ; else if ( bpop == bs ) printf ( ""najpopularnija boja je siva (%.2f%%)."" , pst ) ; else if ( bpop == bv ) printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pst ) ; else printf ( ""najpopularnija boja je plava (%.2f%%)."" , pst ) ; return 0 ; }","#include <stdio.h> int main ( ) { char ba ; float ub = 0 , bc = 0 , bb = 0 , bs = 0 , bv = 0 , bp = 0 , bpop = 0 ; double pst ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & ba ) ; if ( ba != 'c' & ba != 'c' & ba != 'b' & ba != 'b' & ba != 's' & ba != 's' & ba != 'v' & ba != 'v' & ba != 'p' & ba != 'p' & ba != 'k' & ba != 'k' ) printf ( ""neispravan unos\n"" ) ; else if ( ba == 'k' || ba == 'k' ) break ; else { if ( ba == 'c' || ba == 'c' ) bc ++ ; else if ( ba == 'b' || ba == 'b' ) bb ++ ; else if ( ba == 's' || ba == 's' ) bs ++ ; else if ( ba == 'v' || ba == 'v' ) bv ++ ; else if ( ba == 'p' || ba == 'p' ) bp ++ ; ub ++ ; } } while ( ba != 'k' && ba != 'k' ) ; bpop = bp ; if ( bpop <= bv ) bpop = bv ; if ( bpop <= bs ) bpop = bs ; if ( bpop <= bb ) bpop = bb ; if ( bpop <= bc ) bpop = bc ; if ( ub == 0.0 ) pst = 0.0 ; else pst = ( bpop / ub ) * 100 ; printf ( ""ukupno evidentirano %g vozila.\n"" , ub ) ; if ( bpop == bc ) printf ( ""najpopularnija boja je crna (%.2f%%)."" , pst ) ; else if ( bpop == bb ) printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pst ) ; else if ( bpop == bs ) printf ( ""najpopularnija boja je siva (%.2f%%)."" , pst ) ; else if ( bpop == bv ) printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pst ) ; else printf ( ""najpopularnija boja je plava (%.2f%%)."" , pst ) ; return 0 ; }"
1839,36,36,0,57,A2016/Z5/Z1/student2574,A2016/Z5/Z1/student4416,"#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int * niz , int velicina ) { float * q = niz ; double prosjekx = 0 ; double suma = 0 ; while ( niz < q + velicina ) { if ( velicina == 0 ) { prosjekx = 5.0 ; return prosjekx ; } if ( * niz == 5 ) { prosjekx = 5.0 ; return prosjekx ; } suma += * niz ; niz ++ ; } prosjekx = ( double ) suma / velicina ; return prosjekx ; } int uporedi ( char * p1 , char * p2 , char * i1 , char * i2 ) { while ( * p1 != '\0' && * p2 != '\0' ) { if ( * p1 < * p2 ) return - 1 ; if ( * p1 > * p2 ) return 1 ; p1 ++ ; p2 ++ ; } if ( * p1 != '\0' ) return 1 ; if ( * p2 != '\0' ) return - 1 ; while ( * i1 != '\0' && * i2 != '\0' ) { if ( * i1 < * i2 ) return - 1 ; if ( * i1 > * i2 ) return 1 ; i1 ++ ; i2 ++ ; } if ( * i1 != '\0' ) return 1 ; if ( * i2 != '\0' ) return - 1 ; return 0 ; } int genijalci ( struct student * niz , int velicina , float a ) { int poredak = 0 , index1 = 0 , index2 = 0 , index3 = 0 , i = 0 , j = 0 , k = 0 , x = velicina , max1 = 0 , max2 = 0 , max3 = 0 ; double prosjekstudenata = 0 ; for ( k = 0 ; k < x ; k ++ ) { prosjekstudenata = prosjek ( niz [ k ] . ocjene , niz [ k ] . br_ocjena ) ; if ( prosjekstudenata < a || prosjekstudenata <= 5.0 ) { for ( j = k ; j < x - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } x -- ; k -- ; } } for ( k = 0 ; k < x ; k ++ ) { prosjekstudenata = prosjek ( niz [ k ] . ocjene , niz [ k ] . br_ocjena ) ; if ( prosjekstudenata > max1 ) { max3 = max2 ; index3 = index2 ; max2 = max1 ; index2 = index1 ; max1 = prosjekstudenata ; index1 = k ; } else if ( prosjekstudenata == max1 ) { poredak = uporedi ( niz [ k ] . prezime , niz [ max1 ] . prezime , niz [ k ] . ime , niz [ max1 ] . ime ) ; if ( poredak == - 1 ) { if ( prosjekstudenata > max2 ) { max3 = max2 ; index3 = index2 ; } else if ( prosjekstudenata == max2 ) { poredak = uporedi ( niz [ k ] . prezime , niz [ max2 ] . prezime , niz [ k ] . ime , niz [ max2 ] . ime ) ; if ( poredak == - 1 ) { if ( prosjekstudenata > max3 ) { max3 = k ; } poredak = uporedi ( niz [ k ] . prezime , niz [ max3 ] . prezime , niz [ k ] . ime , niz [ max3 ] . ime ) ; if ( poredak == 1 ) { max3 = prosjekstudenata ; index3 = k ; } } else if ( poredak == 1 ) { max3 = max2 ; index3 = index2 ; max2 = prosjekstudenata ; index2 = k ; max1 = max3 ; index1 = index3 ; } } } if ( poredak == 1 ) { poredak = uporedi ( niz [ max1 ] . prezime , niz [ max2 ] . prezime , niz [ max1 ] . ime , niz [ max2 ] . ime ) ; if ( poredak == - 1 ) { poredak = uporedi ( niz [ max1 ] . prezime , niz [ max3 ] . prezime , niz [ max1 ] . ime , niz [ max3 ] . ime ) ; if ( poredak == - 1 ) { poredak = uporedi ( niz [ max2 ] . prezime , niz [ max3 ] . prezime , niz [ max2 ] . ime , niz [ max3 ] . ime ) ; if ( poredak == - 1 ) { poredak = uporedi ( niz [ k ] . prezime , niz [ max3 ] . prezime , niz [ k ] . ime , niz [ max3 ] . ime ) ; if ( poredak == - 1 ) { max3 = max2 ; index3 = index2 ; max2 = prosjekstudenata ; index2 = k ; max1 = max3 ; index1 = index3 ; } else if ( poredak == 1 ) { max1 = prosjekstudenata ; index1 = k ; max3 = max2 ; index3 = index2 ; max2 = max3 ; index2 = index3 ; } } } } } } } for ( i = 0 ; i < x ; ++ i ) { printf ( ""%s %s\n"" , niz [ i ] . prezime , niz [ i ] . ime ) ; } return x ; } int main ( ) { int i = 0 , x = 0 ; int velicina = 20 ; int broj_genijalaca = 0 ; struct student studenti [ 20 ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""neko"" , ""nekic"" , { 10 , 10 , 5 , 10 , 10 , 10 , 10 } , 7 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""beba"" , ""bebic"" , { } , 0 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 } , 29 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 7 , 6 } , 29 } , } ; double prosjek = 0 ; printf ( ""prosjek: "" ) ; scanf ( ""%lf"" , & prosjek ) ; x = genijalci ( studenti , velicina , prosjek ) ; printf ( ""%d\n"" , x ) ; for ( i = 0 ; i < x ; ++ i ) { printf ( ""%s %s \n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosj ( int * ocj , int brocj ) { int suma = 0 , i ; for ( i = 0 ; i < brocj ; i ++ ) { if ( ocj [ i ] == 5 ) return 5 ; suma = suma + ocj [ i ] ; } if ( suma == 0 ) return 5 ; return ( float ) suma / brocj ; } int leks ( char * i1 , char * p1 , char * i2 , char * p2 ) { while ( * p1 != 0 && * p2 != 0 ) { if ( * p1 < * p2 ) return 1 ; if ( * p1 > * p2 ) return 2 ; p1 ++ ; p2 ++ ; } if ( * p1 != 0 ) return 2 ; if ( * p2 != 0 ) return 1 ; while ( * i1 != 0 && * i2 != 0 ) { if ( * i1 < * i2 ) return 1 ; if ( * i1 > * i2 ) return 2 ; i1 ++ ; i2 ++ ; } if ( * i1 != 0 ) return 2 ; if ( * i2 != 0 ) return 1 ; return 0 ; } int genijalci ( struct student * niz , int velicina , float prosjek ) { int veci , i , j , max1 = 0 , max2 = 0 , max3 = 0 ; float t , p1 = 0 , p2 = 0 , p3 = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek > prosj ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; velicina -- ; } } for ( i = 0 ; i < velicina ; i ++ ) { t = ( prosj ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) ; if ( t > p1 ) { p3 = p2 ; max3 = max2 ; p2 = p1 ; max2 = max1 ; p1 = t ; max1 = i ; } else if ( t == p1 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max1 ] . ime , niz [ max1 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = p1 ; max2 = max1 ; p1 = t ; max1 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max2 ] . ime , niz [ max2 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 || veci == 0 ) { p3 = t ; max3 = i ; } } } else if ( veci == 0 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } } else if ( t > p2 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( t == p2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max2 ] . ime , niz [ max2 ] . prezime ) ; if ( veci == 1 ) { p3 = p2 ; max3 = max2 ; p2 = t ; max2 = i ; } else if ( veci == 2 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 ) { p3 = t ; max3 = i ; } } else if ( veci == 0 ) { p3 = t ; max3 = i ; } } else if ( t > p3 ) { p3 = t ; max3 = i ; } else if ( t == p3 ) { veci = leks ( niz [ i ] . ime , niz [ i ] . prezime , niz [ max3 ] . ime , niz [ max3 ] . prezime ) ; if ( veci == 1 ) { p3 = t ; max3 = i ; } } } if ( p1 > 0 ) printf ( ""\n%s %s"" , niz [ max1 ] . prezime , niz [ max1 ] . ime ) ; if ( p2 > 0 ) printf ( ""\n%s %s"" , niz [ max2 ] . prezime , niz [ max2 ] . ime ) ; if ( p3 > 0 ) printf ( ""\n%s %s"" , niz [ max3 ] . prezime , niz [ max3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 4 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 4 , 6.5 ) ; return 0 ; }"
1845,83,83,0,42,A2016/Z2/Z3/student8329,A2016/Z2/Z3/student3421,"#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , brtac ; int br ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; while ( ( brtac < 1 ) || ( brtac > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < brtac ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( ( i < 0 ) || ( i > 19 ) || ( j < 0 ) || ( j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int broj_tacaka , brojac , n , m ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; while ( broj_tacaka < 1 || broj_tacaka > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { niz [ n ] [ m ] = ' ' ; } } for ( brojac = 0 ; brojac < broj_tacaka ; brojac ++ ) { printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; while ( n < 0 || m < 0 || n > 19 || m > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; } niz [ n ] [ m ] = '*' ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { printf ( ""%c"" , niz [ m ] [ n ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1852,63,63,0,35,A2016/Z2/Z2/student6547,A2016/Z2/Z2/student4419,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { int n , i , step , min , sek , j ; float x , niz [ 500 ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } printf ( ""uglovi su:"" ) ; for ( i = 0 ; i < n ; i ++ ) { x = fabs ( niz [ i ] ) ; x = x * 180 / pi ; step = ( int ) x ; min = ( int ) ( ( x - step ) * 3600 ) / 60 ; sek = ( int ) ( ( x - step ) * 3600 + 0.5 ) / 60 ; if ( sek == 60 ) { min ++ ; } sek = ( int ) ( ( x - step ) * 3600 + 0.5 ) % 60 ; if ( min == 60 ) { step ++ ; min = min % 60 ; } if ( sek > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] == niz [ j + 1 ] ; } } else { if ( niz [ i ] < 0 ) printf ( ""\n%d stepeni %d minuta %d sekundi"" , ( - 1 ) * step , min , sek ) ; else printf ( ""\n%d stepeni %d minuta %d sekundi"" , step , min , sek ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int n , i , j ; double niz [ 500 ] ; int stepeni , minute2 , sekunde2 ; double x , minute1 , sekunde1 ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { x = fabs ( niz [ i ] ) ; x = x * 180 / pi ; stepeni = ( int ) x ; minute1 = ( x - stepeni ) * 60 ; minute2 = ( int ) minute1 ; sekunde1 = ( minute1 - minute2 ) * 60 ; sekunde2 = ( int ) ( sekunde1 + 0.5 ) ; if ( sekunde2 == 60 ) { minute2 ++ ; } sekunde2 = ( int ) ( ( x - stepeni ) * 3600 + 0.5 ) % 60 ; if ( minute2 == 60 ) { stepeni ++ ; minute2 = minute2 % 60 ; } if ( sekunde2 > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } else { if ( niz [ i ] < 0 ) printf ( ""%d stepeni %d minuta %d sekundi\n"" , ( - 1 ) * stepeni , minute2 , sekunde2 ) ; else printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepeni , minute2 , sekunde2 ) ; } } return 0 ; }"
1862,89,89,0,47,A2016/Z2/Z4/student5261,A2016/Z2/Z4/student6723,"#include <stdio.h> #define visina 100 #define sirina 100 int main ( ) { int m , n , i , j , cirkularna = 1 , teplica = 1 ; double mat [ visina ] [ sirina ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 100 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 100 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] || mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; } break ; } } if ( n == 1 && m != 1 ) cirkularna = 0 ; if ( cirkularna ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplica = 0 ; } break ; } } if ( teplica ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #define sirina 100 int main ( ) { int i , j , m , n , teplicova = 1 , cirkularna = 1 ; double mat [ sirina ] [ sirina ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] || mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; break ; } } if ( cirkularna == 0 ) break ; } if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else { for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; break ; } } if ( teplicova == 0 ) break ; } if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; } if ( teplicova == 0 && cirkularna == 0 ) printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
1866,99,99,0,149,A2016/Z4/Z3/student3900,A2016/Z4/Z3/student7802,"#include <stdio.h> #include <stdlib.h> int broj_slova ( char * rijec ) { int brojac = 0 ; while ( ( * rijec >= 'a' && * rijec <= 'z' ) || ( * rijec >= 'a' && * rijec <= 'z' ) ) { brojac ++ ; rijec ++ ; } return brojac ; } int provjera_rijeci ( char * rijec , char * rijec_izbacujemo ) { while ( * rijec == * rijec_izbacujemo ) { rijec ++ ; rijec_izbacujemo ++ ; if ( ( ! ( ( * rijec >= 'a' && * rijec <= 'z' ) || ( * rijec >= 'a' && * rijec <= 'z' ) ) ) ) break ; } if ( ! ( ( * rijec_izbacujemo >= 'a' && * rijec_izbacujemo <= 'z' ) || ( * rijec_izbacujemo >= 'a' && * rijec_izbacujemo <= 'z' ) ) && ( ! ( ( * rijec >= 'a' && * rijec <= 'z' ) || ( * rijec >= 'a' && * rijec <= 'z' ) ) ) ) return 1 ; return 0 ; } char * ubacujemo_rijec ( char * pocetak_rijeci , int brojslova , char * ubacujemo ) { char * pocetak = pocetak_rijeci ; char * kraj ; kraj = pocetak_rijeci ; if ( brojslova < 0 ) { while ( ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) || ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) ) { * pocetak_rijeci = * ubacujemo ; pocetak_rijeci ++ ; ubacujemo ++ ; } * ( pocetak + 1 ) = '\0' ; } else { while ( * kraj != '\0' ) { kraj ++ ; } while ( kraj > pocetak_rijeci ) { * ( kraj + brojslova ) = * kraj ; kraj -- ; } while ( ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) || ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) ) { * pocetak_rijeci = * ubacujemo ; pocetak_rijeci ++ ; ubacujemo ++ ; } } return pocetak ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * q = tekst ; char * izbacujemo ; char * ubacujemo ; char * kizbacujemo ; char * kraj ; int i = 0 , k = 0 , s = 0 , kizbac = 0 ; int brojslova ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { izbacujemo = rijeci [ i ] ; ubacujemo = zamjene [ i ] ; q = p ; kizbac = 0 ; kizbacujemo = izbacujemo ; while ( ( * kizbacujemo >= 'a' && * kizbacujemo <= 'z' ) || ( * kizbacujemo >= 'a' && * kizbacujemo <= 'z' ) ) { kizbac ++ ; kizbacujemo ++ ; } while ( * q != '\0' ) { while ( * q != * izbacujemo ) { q ++ ; if ( * q == '\0' ) break ; } if ( * q == '\0' ) break ; k = 0 ; if ( s == 0 ) { k = provjera_rijeci ( q , izbacujemo ) ; } else { if ( ( * ( q - 1 ) >= 'a' && * ( q - 1 ) <= 'z' ) || ( * ( q - 1 ) >= 'a' && * ( q - 1 ) <= 'z' ) ) ; else k = provjera_rijeci ( q , izbacujemo ) ; } s ++ ; if ( k == 1 ) { brojslova = ( broj_slova ( ubacujemo ) - kizbac ) ; kraj = q ; q = ubacujemo_rijec ( kraj , brojslova , ubacujemo ) ; } q ++ ; } } return p ; } void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int main ( ) { char * rijeci [ 2 ] = { ""prijestolonasljednikovica"" } ; char * zamjene [ 2 ] = { ""c"" } ; char tekst [ 100 ] ; printf ( ""unesite neki tekst: "" ) ; unesi ( tekst , 100 ) ; zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int broj_slova ( char * rijec ) { int brojac = 0 ; while ( ( * rijec >= 'a' && * rijec <= 'z' ) || ( * rijec >= 'a' && * rijec <= 'z' ) ) { brojac ++ ; rijec ++ ; } return brojac ; } int provjera_rijeci ( char * rijec , char * rijec_izbacujemo ) { while ( * rijec == * rijec_izbacujemo ) { rijec ++ ; rijec_izbacujemo ++ ; if ( ( ! ( ( * rijec >= 'a' && * rijec <= 'z' ) || ( * rijec >= 'a' && * rijec <= 'z' ) ) ) ) break ; } if ( ! ( ( * rijec_izbacujemo >= 'a' && * rijec_izbacujemo <= 'z' ) || ( * rijec_izbacujemo >= 'a' && * rijec_izbacujemo <= 'z' ) ) && ( ! ( ( * rijec >= 'a' && * rijec <= 'z' ) || ( * rijec >= 'a' && * rijec <= 'z' ) ) ) ) return 1 ; return 0 ; } char * ubacujemo_rijec ( char * pocetak_rijeci , int brojslova , char * ubacujemo ) { char * pocetak = pocetak_rijeci ; char * kraj ; kraj = pocetak_rijeci ; if ( brojslova < 0 ) { while ( ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) || ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) ) { * pocetak_rijeci = * ubacujemo ; pocetak_rijeci ++ ; ubacujemo ++ ; } * ( pocetak + 1 ) = '\0' ; } else { while ( * kraj != '\0' ) { kraj ++ ; } while ( kraj > pocetak_rijeci ) { * ( kraj + brojslova ) = * kraj ; kraj -- ; } while ( ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) || ( * ubacujemo >= 'a' && * ubacujemo <= 'z' ) ) { * pocetak_rijeci = * ubacujemo ; pocetak_rijeci ++ ; ubacujemo ++ ; } } return pocetak ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * q = tekst ; char * izbacujemo ; char * ubacujemo ; char * kizbacujemo ; char * kraj ; int i = 0 , k = 0 , s = 0 , kizbac = 0 ; int brojslova ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { izbacujemo = rijeci [ i ] ; ubacujemo = zamjene [ i ] ; q = p ; kizbac = 0 ; kizbacujemo = izbacujemo ; while ( ( * kizbacujemo >= 'a' && * kizbacujemo <= 'z' ) || ( * kizbacujemo >= 'a' && * kizbacujemo <= 'z' ) ) { kizbac ++ ; kizbacujemo ++ ; } while ( * q != '\0' ) { while ( * q != * izbacujemo ) { q ++ ; if ( * q == '\0' ) break ; } if ( * q == '\0' ) break ; k = 0 ; if ( s == 0 ) { k = provjera_rijeci ( q , izbacujemo ) ; } else { if ( ( * ( q - 1 ) >= 'a' && * ( q - 1 ) <= 'z' ) || ( * ( q - 1 ) >= 'a' && * ( q - 1 ) <= 'z' ) ) ; else k = provjera_rijeci ( q , izbacujemo ) ; } s ++ ; if ( k == 1 ) { brojslova = ( broj_slova ( ubacujemo ) - kizbac ) ; kraj = q ; q = ubacujemo_rijec ( kraj , brojslova , ubacujemo ) ; } q ++ ; } } return p ; } void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int main ( ) { char * rijeci [ 2 ] = { ""prijestolonasljednikovica"" } ; char * zamjene [ 2 ] = { ""c"" } ; char tekst [ 100 ] ; printf ( ""unesite neki tekst: "" ) ; unesi ( tekst , 100 ) ; zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ) ; return 0 ; }"
1872,59,59,0,59,A2016/Z3/Z2/student1029,A2016/Z3/Z2/student7891,"#include <stdio.h> int cifre ( int n ) { int suma = 0 ; if ( n < 0 ) n = - n ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int n ) { int niz2 [ 100 ] ; int i = 0 ; for ( i = 0 ; i < n ; i ++ ) { niz2 [ i * 2 ] = niz [ i ] ; niz2 [ i * 2 + 1 ] = cifre ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * n ; i ++ ) niz [ i ] = niz2 [ i ] ; } int fibonacijev ( int n ) { int a [ 100 ] = { 1 , 1 , 2 } ; int i = 2 ; do { i ++ ; a [ i ] = a [ i - 1 ] + a [ i - 2 ] ; } while ( a [ i ] > 0 ) ; for ( ; i >= 0 ; i -- ) { if ( n == a [ i ] ) return 1 ; } return 0 ; } int izbaci ( int * niz , int n ) { int niz2 [ 100 ] ; int i = 0 , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( fibonacijev ( niz [ i ] ) == 0 ) niz2 [ j ++ ] = niz [ i ] ; } for ( i = 0 ; i < j ; i ++ ) { niz [ i ] = niz2 [ i ] ; } return j ; } int main ( ) { int niz [ 100 ] ; int i ; int n = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) printf ( ""prazan niz.\n"" ) ; else { printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < n ; i ++ ) { printf ( "", %d"" , niz [ i ] ) ; } printf ( ""."" ) ; } return 0 ; }","#include <stdio.h> int sumacifara ( int n ) { int s = 0 ; if ( n < 0 ) n = - n ; while ( n > 0 ) { s = s + n % 10 ; n = n / 10 ; } return s ; } void ubaci ( int * niz , int n ) { int nizb [ 100 ] , i = 0 ; for ( i = 0 ; i < n ; i ++ ) { nizb [ 2 * i ] = niz [ i ] ; nizb [ 2 * i + 1 ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * n ; i ++ ) { niz [ i ] = nizb [ i ] ; } } int fib ( int n ) { int i = 2 , niz1 [ 100 ] = { 1 , 1 , 2 } , j ; do { i ++ ; niz1 [ i ] = niz1 [ i - 1 ] + niz1 [ i - 2 ] ; } while ( niz1 [ i ] > 0 ) ; for ( j = i ; j >= 0 ; j -- ) { if ( n == niz1 [ j ] ) return 1 ; } return 0 ; } int izbaci ( int * niz , int n ) { int nizb [ 100 ] , povrvr = 0 , i = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( fib ( niz [ i ] ) == 0 ) nizb [ povrvr ++ ] = niz [ i ] ; } for ( i = 0 ; i < povrvr ; i ++ ) { niz [ i ] = nizb [ i ] ; } return povrvr ; } int main ( ) { int niz [ 100 ] , i , n = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) printf ( ""prazan niz."" ) ; else { printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i != n - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else if ( i == n - 1 ) printf ( ""%d."" , niz [ n - 1 ] ) ; } } return 0 ; }"
1874,21,21,0,24,A2016/Z5/Z1/student3301,A2016/Z5/Z1/student6723,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjekstudenta ( int * niz , int brojocjena ) { if ( brojocjena == 0 ) return 5 ; int i , suma = 0 ; double prosjek1 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; else suma += niz [ i ] ; } prosjek1 = ( float ) suma / brojocjena ; return prosjek1 ; } int genijalci ( struct student * niz , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } int max1 = 0 , max2 = 0 , max3 = 0 ; double prosjek1 = 0 , prosjek2 = 0 , prosjek3 = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) >= prosjek && prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > prosjek1 ) { max1 = i ; prosjek1 = prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) >= prosjek && i != max1 && prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > prosjek2 ) { max2 = i ; prosjek2 = prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ) >= prosjek && i != max1 && i != max2 && prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > prosjek3 ) { max3 = i ; prosjek3 = prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } int tmp ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == prosjek1 && i != max1 ) { if ( strcmp ( niz [ max1 ] . prezime , niz [ i ] . prezime ) > 0 ) { tmp = max1 ; max1 = i ; } if ( max2 == max1 ) max2 = tmp ; if ( max3 == max1 ) max3 = tmp ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == prosjek2 && i != max2 && i != max1 ) { if ( strcmp ( niz [ max2 ] . prezime , niz [ i ] . prezime ) > 0 ) { tmp = max2 ; max2 = i ; } if ( max3 == max2 ) max3 = tmp ; } } for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjekstudenta ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == prosjek3 && i != max3 && i != max1 && i != max2 ) { if ( strcmp ( niz [ max3 ] . prezime , niz [ i ] . prezime ) > 0 ) max3 = i ; } } if ( prosjek1 != 0 ) printf ( ""%s %s \n"" , niz [ max1 ] . prezime , niz [ max1 ] . ime ) ; if ( prosjek2 != 0 ) printf ( ""%s %s \n"" , niz [ max2 ] . prezime , niz [ max2 ] . ime ) ; if ( prosjek3 != 0 ) printf ( ""%s %s \n"" , niz [ max3 ] . prezime , niz [ max3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 4 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 4 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjecna_ocjena ( int niz [ ] , int vel ) { if ( vel == 0 ) return 0 ; int i ; double prosjek = 5 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; else suma += niz [ i ] ; return suma / vel ; } int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return - 1 ; if ( strcmp ( s1 , s2 ) > 0 ) return 1 ; } int vratiduz ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } return velicina ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; velicina = vratiduz ( studenti , velicina , prosjek ) ; int prvi = - 1 , drugi = - 1 , treci = - 1 ; double najveci = 0 , prosj ; int ispred ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci ) { if ( prosjek > najveci ) { prvi = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ prvi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 1 ) prvi = i ; if ( ispred == 0 ) ispred = uporedi ( studenti [ prvi ] . ime , studenti [ i ] . ime ) ; } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci && i != prvi ) { if ( prosjek > najveci ) { drugi = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ drugi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ drugi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { drugi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { double prosjek = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek >= najveci && i != prvi && i != drugi ) { if ( prosjek > najveci ) { treci = i ; najveci = prosjek ; } najveci = prosjek ; ispred = uporedi ( studenti [ treci ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ treci ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) treci = i ; } } if ( velicina == 1 ) printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; if ( velicina == 2 ) { printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; return 2 ; } if ( velicina > 2 ) { printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; printf ( ""%s %s\n"" , studenti [ treci ] . prezime , studenti [ treci ] . ime ) ; } return velicina ; } int main ( ) { struct student studenti [ 10 ] = { { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 7 , 8 , 9 } , 3 } , { ""mujo"" , ""mujic"" , { 10 , 10 , 10 , 10 , 9 } , 5 } , } ; int vel = genijalci ( studenti , 4 , 7 ) ; return 0 ; }"
1880,90,90,0,55,A2016/Z3/Z1/student3301,A2016/Z3/Z1/student9946,"#include <stdio.h> int daj_prost ( ) { int prost = 1 , i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a , b , suma = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( broj < b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int prost = 1 ; int i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a ; int b ; int suma = 0 ; int broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( broj < b ) { broj = daj_prost ( ) ; if ( broj < b && broj > a ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
1882,99,99,0,99,A2016/Z5/Z1/student9972,A2016/Z5/Z1/student9538,"#include <string.h> #include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return 1 ; else return 2 ; } float prosjek ( int niz [ ] , int vel ) { if ( vel == 0 ) return 5 ; int i = 0 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) suma = suma + niz [ i ] ; return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { float prosjekprvog = prosjek ( pr . ocjene , pr . br_ocjena ) ; float prosjekdrugog = prosjek ( dr . ocjene , dr . br_ocjena ) ; int sta_je_vratila_f = uporedi ( pr . prezime , dr . prezime ) ; if ( prosjekprvog > prosjekdrugog ) return 1 ; if ( prosjekprvog < prosjekdrugog ) return 0 ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; int nesto = uporedi ( pr . ime , dr . ime ) ; if ( nesto == 1 ) return 1 ; if ( nesto == 2 ) return 0 ; else return 1 ; } int izbacivanj ( struct student niz [ ] , int vel , double prosjekk ) { int i ; int j ; int izmjena = 0 ; for ( i = 0 ; i < vel ; i ++ ) { izmjena = 0 ; if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) izmjena = 1 ; if ( izmjena == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } return vel ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double min = 10 ; vel = izbacivanj ( niz , vel , prosjekk ) ; if ( vel == 0 ) return 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } indexprvi = indexmin ; indexdrugi = indexmin ; indextreci = indexmin ; if ( vel == 1 ) { printf ( ""\n%s %s"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; return 1 ; } if ( vel == 2 ) { for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; return 2 ; } else { for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) == 1 && i != indexprvi && i != indexdrugi ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } } ; genijalci ( studenti , 3 , 6.5 ) ; return 0 ; }","#include <string.h> #include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) == 0 ) return 0 ; if ( strcmp ( s1 , s2 ) < 0 ) return 1 ; else return 2 ; } float prosjek ( int niz [ ] , int vel ) { if ( vel == 0 ) return 5 ; int i = 0 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) suma = suma + niz [ i ] ; return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { float prosjekprvog = prosjek ( pr . ocjene , pr . br_ocjena ) ; float prosjekdrugog = prosjek ( dr . ocjene , dr . br_ocjena ) ; int sta_je_vratila_f = uporedi ( pr . prezime , dr . prezime ) ; if ( prosjekprvog > prosjekdrugog ) return 1 ; if ( prosjekprvog < prosjekdrugog ) return 0 ; if ( sta_je_vratila_f == 1 ) return 1 ; if ( sta_je_vratila_f == 2 ) return 0 ; int nesto = uporedi ( pr . ime , dr . ime ) ; if ( nesto == 1 ) return 1 ; if ( nesto == 2 ) return 0 ; else return 1 ; } int izbacivanj ( struct student niz [ ] , int vel , double prosjekk ) { int i ; int j ; int izmjena = 0 ; for ( i = 0 ; i < vel ; i ++ ) { izmjena = 0 ; if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) izmjena = 1 ; if ( izmjena == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } return vel ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double min = 10 ; vel = izbacivanj ( niz , vel , prosjekk ) ; if ( vel == 0 ) return 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } indexprvi = indexmin ; indexdrugi = indexmin ; indextreci = indexmin ; if ( vel == 1 ) { printf ( ""\n%s %s"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; return 1 ; } if ( vel == 2 ) { for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; return 2 ; } else { for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) == 1 && i != indexprvi && i != indexdrugi ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } } ; genijalci ( studenti , 3 , 6.5 ) ; return 0 ; }"
1885,99,99,0,108,A2016/Z3/Z3/student4824,A2016/Z3/Z3/student3610,"#include <stdio.h> int main ( ) { int m , n , i , j , z ; int r = 0 , q = 0 , s = 0 , mat [ 200 ] [ 200 ] = { { 0 } } ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 ) || ( m > 200 ) || ( n <= 0 ) || ( n > 200 ) ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( ( m <= 0 ) || ( m > 200 ) || ( n <= 0 ) || ( n > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d "" , & mat [ i ] [ j ] ) ; } } for ( z = 0 ; z < ( m - 1 ) ; z ++ ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( z == ( i + 1 ) ) ; else if ( mat [ z ] [ j ] == mat [ i + 1 ] [ j ] ) r = 1 ; else { r = 0 ; break ; } } if ( r == 1 ) { for ( q = i ; q < ( m - 2 ) ; q ++ ) { for ( s = 0 ; s < n ; s ++ ) { mat [ q + 1 ] [ s ] = mat [ q + 2 ] [ s ] ; } } m -- ; } } } for ( z = 0 ; z < ( n - 1 ) ; z ++ ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( z == ( i + 1 ) ) ; else if ( mat [ j ] [ z ] == mat [ j ] [ i + 1 ] ) r = 1 ; else { r = 0 ; break ; } } if ( r == 1 ) { for ( q = 0 ; q < m ; q ++ ) { for ( s = i ; s < ( n - 2 ) ; s ++ ) { mat [ q ] [ s + 1 ] = mat [ q ] [ s + 2 ] ; } } n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , z ; int r = 0 , q = 0 , s = 0 , mat [ 200 ] [ 200 ] = { { 0 } } ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 ) || ( m > 200 ) || ( n <= 0 ) || ( n > 200 ) ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( ( m <= 0 ) || ( m > 200 ) || ( n <= 0 ) || ( n > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d "" , & mat [ i ] [ j ] ) ; } } for ( z = 0 ; z < ( m - 1 ) ; z ++ ) { for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( z == ( i + 1 ) ) ; else if ( mat [ z ] [ j ] == mat [ i + 1 ] [ j ] ) r = 1 ; else { r = 0 ; break ; } } if ( r == 1 ) { for ( q = i ; q < ( m - 2 ) ; q ++ ) { for ( s = 0 ; s < n ; s ++ ) { mat [ q + 1 ] [ s ] = mat [ q + 2 ] [ s ] ; } } m -- ; } } } for ( z = 0 ; z < ( n - 1 ) ; z ++ ) { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( z == ( i + 1 ) ) ; else if ( mat [ j ] [ z ] == mat [ j ] [ i + 1 ] ) r = 1 ; else { r = 0 ; break ; } } if ( r == 1 ) { for ( q = 0 ; q < m ; q ++ ) { for ( s = i ; s < ( n - 2 ) ; s ++ ) { mat [ q ] [ s + 1 ] = mat [ q ] [ s + 2 ] ; } } n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1896,92,92,0,34,A2016/Z1/Z4/student9160,A2016/Z1/Z4/student3421,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int a , b , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( a = 0 ; a < n ; a ++ ) { for ( b = 0 ; b < 4 * n - 3 ; b ++ ) { if ( a == b || 2 * n - 2 - a == b || 2 * n - 2 + a == b || 4 * n - 4 - a == b ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
1897,98,98,0,70,A2016/Z2/Z2/student6824,A2016/Z2/Z2/student5899,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define  gr 500 #define pi 3.1415926 int main ( ) { int i , br_ugl , ukstep , ukmin , sekunde , j ; double selma [ gr ] = { 0 } ; long double uksek = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & br_ugl ) ; for ( i = 0 ; i < br_ugl ; i ++ ) { scanf ( ""%lf"" , & selma [ i ] ) ; } for ( i = 0 ; i < br_ugl ; i ++ ) { uksek = ( float ) ( fabs ( selma [ i ] * 180 / pi ) * 3600 ) ; uksek = ( int ) ( uksek + 0.5 ) ; ukstep = ( uksek / 3600 ) ; ukmin = abs ( ( uksek - ukstep * 3600 ) / 60 ) ; sekunde = abs ( ( uksek - ukstep * 3600 - ukmin * 60 ) ) ; if ( sekunde > 30 ) { for ( j = i ; j < br_ugl - 1 ; j ++ ) { selma [ j ] = selma [ j + 1 ] ; } br_ugl -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < br_ugl ; i ++ ) { uksek = ( float ) ( fabs ( selma [ i ] * 180 / pi ) * 3600 ) ; uksek = ( ( int ) ( uksek + 0.5 ) ) ; ukstep = ( uksek / 3600 ) ; ukmin = abs ( ( uksek - ukstep * 3600 ) / 60 ) ; sekunde = abs ( ( uksek - ukstep * 3600 - ukmin * 60 ) ) ; if ( sekunde >= 60 ) { ukmin = ukmin + 1 ; sekunde = sekunde - 60 ; } if ( ukmin >= 60 ) { ukstep = ukstep + 1 ; ukmin = ukmin - 60 ; } if ( selma [ i ] < 0 ) { printf ( ""-%d stepeni %d minuta %d sekundi\n"" , ukstep , ukmin , sekunde ) ; } else { printf ( ""%d stepeni %d minuta %d sekundi\n"" , ukstep , ukmin , sekunde ) ; } } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define  gr 500 #define pi 3.1415926 int main ( ) { int i , br_ugl , ukstep , ukmin , sekunde , j ; double selma [ gr ] = { 0 } ; long double uksek = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & br_ugl ) ; for ( i = 0 ; i < br_ugl ; i ++ ) { scanf ( ""%lf"" , & selma [ i ] ) ; } for ( i = 0 ; i < br_ugl ; i ++ ) { uksek = ( float ) ( fabs ( selma [ i ] * 180 / pi ) * 3600 ) ; uksek = ( int ) ( uksek + 0.5 ) ; ukstep = ( uksek / 3600 ) ; ukmin = abs ( ( uksek - ukstep * 3600 ) / 60 ) ; sekunde = abs ( ( uksek - ukstep * 3600 - ukmin * 60 ) ) ; if ( sekunde > 30 ) { for ( j = i ; j < br_ugl - 1 ; j ++ ) { selma [ j ] = selma [ j + 1 ] ; } br_ugl -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < br_ugl ; i ++ ) { uksek = ( float ) ( fabs ( selma [ i ] * 180 / pi ) * 3600 ) ; uksek = ( ( int ) ( uksek + 0.5 ) ) ; ukstep = ( uksek / 3600 ) ; ukmin = abs ( ( uksek - ukstep * 3600 ) / 60 ) ; sekunde = abs ( ( uksek - ukstep * 3600 - ukmin * 60 ) ) ; if ( sekunde >= 60 ) { ukmin = ukmin + 1 ; sekunde = sekunde - 60 ; } if ( ukmin >= 60 ) { ukstep = ukstep + 1 ; ukmin = ukmin - 60 ; } if ( selma [ i ] < 0 ) { printf ( ""-%d stepeni %d minuta %d sekundi\n"" , ukstep , ukmin , sekunde ) ; } else { printf ( ""%d stepeni %d minuta %d sekundi\n"" , ukstep , ukmin , sekunde ) ; } } return 0 ; }"
1898,88,88,0,116,A2016/Z3/Z3/student5298,A2016/Z3/Z3/student9175,"#include <stdio.h> #include <stdlib.h> void uzmired ( int mat [ 200 ] [ 200 ] , int niz [ ] , int vel , int red ) { int i ; for ( i = 0 ; i < vel ; i ++ ) niz [ i ] = mat [ red ] [ i ] ; } int porediredkolonu ( int niz1 [ ] , int niz2 [ ] , int vel ) { int isti = 1 , i ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz1 [ i ] != niz2 [ i ] ) { isti = 0 ; break ; } } return isti ; } void izbacired ( int mat [ 200 ] [ 200 ] , int brredova , int brkolona , int red ) { int i , j ; for ( i = red ; i < brredova - 1 ; i ++ ) { for ( j = 0 ; j < brkolona ; j ++ ) { mat [ i ] [ j ] = mat [ i + 1 ] [ j ] ; } } } void uzmikolonu ( int mat [ 200 ] [ 200 ] , int niz [ ] , int vel , int kolona ) { int i ; for ( i = 0 ; i < vel ; i ++ ) niz [ i ] = mat [ i ] [ kolona ] ; } void izbacikolonu ( int mat [ 200 ] [ 200 ] , int brredova , int brkolona , int kolona ) { int i , j ; for ( i = 0 ; i < brredova ; i ++ ) { for ( j = kolona ; j < brkolona - 1 ; j ++ ) { mat [ i ] [ j ] = mat [ i ] [ j + 1 ] ; } } } int main ( ) { int i , j , brredova , brkolona ; int red1 [ 200 ] = { 0 } , red2 [ 200 ] = { 0 } ; int mat [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & brredova , & brkolona ) ; if ( brredova <= 0 || brredova > 200 || brkolona <= 0 || brkolona > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( brredova <= 0 || brredova > 200 || brkolona <= 0 || brkolona > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < brredova ; i ++ ) { for ( j = 0 ; j < brkolona ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < brredova ; i ++ ) { for ( j = 0 ; j < brredova ; j ++ ) { if ( i == j ) continue ; else { uzmired ( mat , red1 , brkolona , i ) ; uzmired ( mat , red2 , brkolona , j ) ; if ( porediredkolonu ( red1 , red2 , brkolona ) == 1 ) { izbacired ( mat , brredova , brkolona , j ) ; j -- ; brredova -- ; } } } } for ( i = 0 ; i < brkolona ; i ++ ) { for ( j = 0 ; j < brkolona ; j ++ ) { if ( i == j ) continue ; else { uzmikolonu ( mat , red1 , brredova , i ) ; uzmikolonu ( mat , red2 , brredova , j ) ; if ( porediredkolonu ( red1 , red2 , brredova ) == 1 ) { izbacikolonu ( mat , brredova , brkolona , j ) ; j -- ; brkolona -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < brredova ; i ++ ) { for ( j = 0 ; j < brkolona ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> void f1 ( int mat [ 200 ] [ 200 ] , int * niz , int velicina , int m ) { int i ; for ( i = 0 ; i < velicina ; i ++ ) { niz [ i ] = mat [ m ] [ i ] ; } } int f2 ( int * n1 , int * n2 , int velicina ) { int i ; int jednak = 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( n1 [ i ] != n2 [ i ] ) { jednak = 0 ; break ; } } return jednak ; } void f3 ( int mat [ 200 ] [ 200 ] , int brr , int brk , int m ) { int i , j ; for ( i = m ; i < brr - 1 ; i ++ ) { for ( j = 0 ; j < brk ; j ++ ) { mat [ i ] [ j ] = mat [ i + 1 ] [ j ] ; } } } void f4 ( int mat [ 200 ] [ 200 ] , int * niz , int velicina , int n ) { int i ; for ( i = 0 ; i < velicina ; i ++ ) { niz [ i ] = mat [ i ] [ n ] ; } } void f5 ( int mat [ 200 ] [ 200 ] , int brr , int brk , int n ) { int i , j ; for ( i = 0 ; i < brr ; i ++ ) { for ( j = n ; j < brk - 1 ; j ++ ) { mat [ i ] [ j ] = mat [ i ] [ j + 1 ] ; } } } int main ( ) { int m , n , i , j ; int r [ 200 ] = { 0 } ; int k [ 200 ] = { 0 } ; int mat [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < m ; j ++ ) { if ( i == j ) continue ; else { f1 ( mat , r , n , i ) ; f1 ( mat , k , n , j ) ; if ( f2 ( r , k , n ) == 1 ) { f3 ( mat , m , n , j ) ; j -- ; m -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( i == j ) continue ; else { f4 ( mat , r , m , i ) ; f4 ( mat , k , m , j ) ; if ( f2 ( r , k , m ) == 1 ) { f5 ( mat , m , n , j ) ; j -- ; n -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] >= 0 && mat [ i ] [ j ] <= 9 ) { printf ( ""    %d"" , mat [ i ] [ j ] ) ; } else { printf ( ""   %d"" , mat [ i ] [ j ] ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
1908,90,90,0,64,A2016/Z3/Z3/student9931,A2016/Z3/Z3/student4852,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , p , z , l , w ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { w = 1 ; for ( p = 0 ; p < n ; p ++ ) { if ( mat [ i ] [ p ] != mat [ j ] [ p ] ) { w = 0 ; break ; } } if ( w ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( l = 0 ; l < n ; l ++ ) { mat [ z ] [ l ] = mat [ z + 1 ] [ l ] ; } } j -- ; m -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { w = 1 ; for ( p = 0 ; p < m ; p ++ ) { if ( mat [ p ] [ j ] != mat [ p ] [ i ] ) { w = 0 ; break ; } } if ( w ) { for ( z = i ; z < n - 1 ; z ++ ) { for ( l = 0 ; l < m ; l ++ ) { mat [ l ] [ z ] = mat [ l ] [ z + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , i , j , k , t , p , s ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m <= 0 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { t = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < m ; p ++ ) { for ( s = 0 ; s < n ; s ++ ) matrica [ p ] [ s ] = matrica [ p + 1 ] [ s ] ; } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { t = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] != matrica [ k ] [ j ] ) { t = 0 ; break ; } } if ( t ) { for ( p = j ; p < n ; p ++ ) { for ( s = 0 ; s < m ; s ++ ) matrica [ s ] [ p ] = matrica [ s ] [ p + 1 ] ; } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
1909,99,99,0,120,A2016/Z1/Z1/student8393,A2016/Z1/Z1/student3288,"#include <stdio.h> int main ( ) { double p1 , p2 , p , z , zi , ub , p11 , p21 , p1 , z1 , zi1 , ub1 , p12 , p22 , p2 , z2 , zi2 , ub2 ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 < 0 || p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 < 0 || p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p < 0 || p > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z < 0 || z > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi < 0 || zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p11 ) ; if ( p11 < 0 || p11 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p21 ) ; if ( p21 < 0 || p21 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 < 0 || p1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi1 ) ; if ( zi1 < 0 || zi1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p12 ) ; if ( p12 < 0 || p12 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p22 ) ; if ( p22 < 0 || p22 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 < 0 || p2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi2 ) ; if ( zi2 < 0 || zi2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } ub = p1 + p2 + p + z + zi ; ub1 = p11 + p21 + p1 + z1 + zi1 ; ub2 = p12 + p22 + p2 + z2 + zi2 ; if ( ub < 55 && ub1 < 55 && ub2 < 55 ) { printf ( ""nijedan student nije polozio. "" ) ; return 0 ; } else if ( ( ub >= 55 && ub1 < 55 && ub2 < 55 ) || ( ub < 55 && ub1 >= 55 && ub2 < 55 ) || ( ub < 55 && ub1 < 55 && ub2 >= 55 ) ) { printf ( ""jedan student je polozio. "" ) ; return 0 ; } else if ( ( ub >= 55 && ub1 >= 55 && ub2 < 55 ) || ( ub >= 55 && ub1 < 55 && ub2 >= 55 ) || ( ub < 55 && ub1 >= 55 && ub2 >= 55 ) ) { printf ( ""dva studenta su polozila. "" ) ; return 0 ; } else if ( ub >= 55 && ub1 >= 55 && ub2 >= 55 ) { printf ( ""sva tri studenta su polozila. "" ) ; } if ( ( ( ub >= 55 && ub <= 65 ) && ( ub1 >= 55 ) && ( ub1 <= 65 ) && ub2 > 65 ) || ( ( ub >= 65 && ub < 75 ) && ( ub1 >= 65 ) && ( ub1 < 75 ) && ( ub2 > 75 || ub2 < 65 ) ) || ( ( ub >= 75 && ub < 85 ) && ( ub1 >= 75 ) && ( ub1 < 85 ) && ( ub2 >= 85 || ub2 < 75 ) ) || ( ( ub >= 85 && ub < 92 ) && ( ub1 >= 85 ) && ( ub1 < 92 ) && ( ub2 >= 92 || ub2 < 85 ) ) || ( ( ub >= 92 && ub <= 100 ) && ( ub1 >= 92 ) && ( ub1 <= 100 ) && ( ub2 < 92 ) ) ) { printf ( ""\ndva od tri studenta imaju istu ocjenu. "" ) ; } else if ( ub == ub1 && ub1 == ub2 ) { printf ( ""\nsva tri studenta imaju istu ocjenu. "" ) ; } else if ( ub != ub1 && ub != ub2 && ub1 != ub2 ) { printf ( ""\nsvaki student ima razlicitu ocjenu. "" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { double p1 , p2 , p , z , zi , ub , p11 , p21 , p1 , z1 , zi1 , ub1 , p12 , p22 , p2 , z2 , zi2 , ub2 ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 < 0 || p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 < 0 || p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p < 0 || p > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z < 0 || z > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi < 0 || zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p11 ) ; if ( p11 < 0 || p11 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p21 ) ; if ( p21 < 0 || p21 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 < 0 || p1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi1 ) ; if ( zi1 < 0 || zi1 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p12 ) ; if ( p12 < 0 || p12 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p22 ) ; if ( p22 < 0 || p22 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 < 0 || p2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi2 ) ; if ( zi2 < 0 || zi2 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } ub = p1 + p2 + p + z + zi ; ub1 = p11 + p21 + p1 + z1 + zi1 ; ub2 = p12 + p22 + p2 + z2 + zi2 ; if ( ub < 55 && ub1 < 55 && ub2 < 55 ) { printf ( ""nijedan student nije polozio. "" ) ; return 0 ; } else if ( ( ub >= 55 && ub1 < 55 && ub2 < 55 ) || ( ub < 55 && ub1 >= 55 && ub2 < 55 ) || ( ub < 55 && ub1 < 55 && ub2 >= 55 ) ) { printf ( ""jedan student je polozio. "" ) ; return 0 ; } else if ( ( ub >= 55 && ub1 >= 55 && ub2 < 55 ) || ( ub >= 55 && ub1 < 55 && ub2 >= 55 ) || ( ub < 55 && ub1 >= 55 && ub2 >= 55 ) ) { printf ( ""dva studenta su polozila. "" ) ; return 0 ; } else if ( ub >= 55 && ub1 >= 55 && ub2 >= 55 ) { printf ( ""sva tri studenta su polozila. "" ) ; } if ( ( ( ub >= 55 && ub <= 65 ) && ( ub1 >= 55 ) && ( ub1 <= 65 ) && ub2 > 65 ) || ( ( ub >= 65 && ub < 75 ) && ( ub1 >= 65 ) && ( ub1 < 75 ) && ( ub2 > 75 || ub2 < 65 ) ) || ( ( ub >= 75 && ub < 85 ) && ( ub1 >= 75 ) && ( ub1 < 85 ) && ( ub2 >= 85 || ub2 < 75 ) ) || ( ( ub >= 85 && ub < 92 ) && ( ub1 >= 85 ) && ( ub1 < 92 ) && ( ub2 >= 92 || ub2 < 85 ) ) || ( ( ub >= 92 && ub <= 100 ) && ( ub1 >= 92 ) && ( ub1 <= 100 ) && ( ub2 < 92 ) ) ) { printf ( ""\ndva od tri studenta imaju istu ocjenu. "" ) ; } else if ( ub == ub1 && ub1 == ub2 ) { printf ( ""\nsva tri studenta imaju istu ocjenu. "" ) ; } else if ( ub != ub1 && ub != ub2 && ub1 != ub2 ) { printf ( ""\nsvaki student ima razlicitu ocjenu. "" ) ; } return 0 ; }"
1910,81,81,0,38,A2016/Z3/Z1/student8957,A2016/Z3/Z1/student4860,"#include <stdio.h> int dalijeprost ( int a ) { int b = 1 , i ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { a = 0 ; break ; } } return a ; } int daj_prost ( ) { static int x = 1 ; while ( 1 ) { if ( dalijeprost ( ++ x ) ) return x ; } } int main ( ) { int a , b , i , suma = 0 , broj , c , d ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a <= 0 || a >= b ) ; c = a ; d = b ; for ( ; ; ) { broj = daj_prost ( ) ; if ( broj >= d ) break ; else if ( broj > c ) suma += broj ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int dalijeprost ( int n ) { int i ; for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { n = 0 ; break ; } } return n ; } int daj_prost ( ) { static int a = 1 ; while ( 1 ) { if ( dalijeprost ( ++ a ) ) return a ; } } int main ( ) { int m , n , s = 0 , br , c , d , i ; do { printf ( ""unesite brojeve a i b:"" ) ; scanf ( ""%d%d"" , & n , & m ) ; if ( n <= 0 ) printf ( "" a nije prirodan broj.\n"" ) ; else if ( n >= m ) printf ( "" a nije manje od b.\n"" ) ; } while ( n <= 0 || n >= m ) ; c = n ; d = m ; for ( ; ; ) { br = daj_prost ( ) ; if ( br >= d ) break ; else if ( br > c ) s = s + br ; } printf ( "" suma prostih brojeva izmedju %d i %d je %d."" , n , m , s ) ; return 0 ; }"
1913,99,99,0,144,A2016/Z5/Z1/student2755,A2016/Z5/Z1/student9340,"#include <stdio.h> #define kapacitet 100 void unesi ( char * s , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { * s = znak ; s ++ ; znak = getchar ( ) ; } * s = '\0' ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; struct student unos_studenta ( ) { struct student student ; int i ; printf ( ""unesite ime studenta: "" ) ; unesi ( student . ime , 20 ) ; printf ( ""unesite prezime studenta: "" ) ; unesi ( student . prezime , 20 ) ; printf ( ""unesite broj ocjena: "" ) ; scanf ( ""%d"" , & student . br_ocjena ) ; printf ( ""unesite ocjene: "" ) ; for ( i = 0 ; i < student . br_ocjena ; i ++ ) { scanf ( ""%d"" , & student . ocjene [ i ] ) ; } return student ; } float prosjek_ocjena ( int * niz , int velicina ) { float suma = 0 , prosjek ; int i ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] == 5 ) { prosjek = 5 ; break ; } else { suma += niz [ i ] ; } } prosjek = suma / velicina ; return prosjek ; } int genijalci ( struct student * niz_st , int velicina , float prosjek ) { int i , j , max1 , preostali = velicina ; struct student temp ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) < prosjek || niz_st [ i ] . br_ocjena == 0 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz_st [ j ] = niz_st [ j + 1 ] ; } velicina -- ; i -- ; preostali -- ; } } switch ( preostali ) { case 1 : for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) >= prosjek ) { max1 = i ; for ( j = i + 1 ; j < velicina ; j ++ ) { if ( prosjek_ocjena ( niz_st [ j ] . ocjene , niz_st [ j ] . br_ocjena ) > prosjek_ocjena ( niz_st [ max1 ] . ocjene , niz_st [ max1 ] . br_ocjena ) ) { max1 = j ; } } temp = niz_st [ i ] ; niz_st [ i ] = niz_st [ max1 ] ; niz_st [ max1 ] = temp ; } else return 0 ; } for ( i = 0 ; i < preostali ; i ++ ) printf ( ""%s %s\n"" , niz_st [ i ] . prezime , niz_st [ i ] . ime ) ; break ; case 2 : for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) >= prosjek ) { max1 = i ; for ( j = i + 1 ; j < velicina ; j ++ ) { if ( prosjek_ocjena ( niz_st [ j ] . ocjene , niz_st [ j ] . br_ocjena ) > prosjek_ocjena ( niz_st [ max1 ] . ocjene , niz_st [ max1 ] . br_ocjena ) ) { max1 = j ; } } temp = niz_st [ i ] ; niz_st [ i ] = niz_st [ max1 ] ; niz_st [ max1 ] = temp ; } else return 0 ; } for ( i = 0 ; i < preostali ; i ++ ) printf ( ""%s %s\n"" , niz_st [ i ] . prezime , niz_st [ i ] . ime ) ; break ; case 3 : for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) >= prosjek ) { max1 = i ; for ( j = i + 1 ; j < velicina ; j ++ ) { if ( prosjek_ocjena ( niz_st [ j ] . ocjene , niz_st [ j ] . br_ocjena ) > prosjek_ocjena ( niz_st [ max1 ] . ocjene , niz_st [ max1 ] . br_ocjena ) ) { max1 = j ; } } temp = niz_st [ i ] ; niz_st [ i ] = niz_st [ max1 ] ; niz_st [ max1 ] = temp ; } else return 0 ; } for ( i = 0 ; i < preostali ; i ++ ) printf ( ""%s %s\n"" , niz_st [ i ] . prezime , niz_st [ i ] . ime ) ; break ; case 0 : break ; default : break ; } return preostali ; } int main ( ) { struct student niz_studenata [ kapacitet ] ; int i , ukupno_studenata ; float zeljeni_prosjek ; printf ( ""unesite broj studenata: "" ) ; scanf ( ""%d"" , & ukupno_studenata ) ; for ( i = 0 ; i < ukupno_studenata ; i ++ ) { niz_studenata [ i ] = unos_studenta ( ) ; } printf ( ""unesite zeljeni prosjek: "" ) ; scanf ( ""%f"" , & zeljeni_prosjek ) ; return 0 ; }","#include <stdio.h> #define kapacitet 100 void unesi ( char * s , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { * s = znak ; s ++ ; znak = getchar ( ) ; } * s = '\0' ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; struct student unos_studenta ( ) { struct student student ; int i ; printf ( ""unesite ime studenta: "" ) ; unesi ( student . ime , 20 ) ; printf ( ""unesite prezime studenta: "" ) ; unesi ( student . prezime , 20 ) ; printf ( ""unesite broj ocjena: "" ) ; scanf ( ""%d"" , & student . br_ocjena ) ; printf ( ""unesite ocjene: "" ) ; for ( i = 0 ; i < student . br_ocjena ; i ++ ) { scanf ( ""%d"" , & student . ocjene [ i ] ) ; } return student ; } float prosjek_ocjena ( int * niz , int velicina ) { float suma = 0 , prosjek ; int i ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] == 5 ) { prosjek = 5 ; break ; } else { suma += niz [ i ] ; } } prosjek = suma / velicina ; return prosjek ; } int genijalci ( struct student * niz_st , int velicina , float prosjek ) { int i , j , max1 , preostali = velicina ; struct student temp ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) < prosjek || niz_st [ i ] . br_ocjena == 0 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz_st [ j ] = niz_st [ j + 1 ] ; } velicina -- ; i -- ; preostali -- ; } } switch ( preostali ) { case 1 : for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) >= prosjek ) { max1 = i ; for ( j = i + 1 ; j < velicina ; j ++ ) { if ( prosjek_ocjena ( niz_st [ j ] . ocjene , niz_st [ j ] . br_ocjena ) > prosjek_ocjena ( niz_st [ max1 ] . ocjene , niz_st [ max1 ] . br_ocjena ) ) { max1 = j ; } } temp = niz_st [ i ] ; niz_st [ i ] = niz_st [ max1 ] ; niz_st [ max1 ] = temp ; } else return 0 ; } for ( i = 0 ; i < preostali ; i ++ ) printf ( ""%s %s\n"" , niz_st [ i ] . prezime , niz_st [ i ] . ime ) ; break ; case 2 : for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) >= prosjek ) { max1 = i ; for ( j = i + 1 ; j < velicina ; j ++ ) { if ( prosjek_ocjena ( niz_st [ j ] . ocjene , niz_st [ j ] . br_ocjena ) > prosjek_ocjena ( niz_st [ max1 ] . ocjene , niz_st [ max1 ] . br_ocjena ) ) { max1 = j ; } } temp = niz_st [ i ] ; niz_st [ i ] = niz_st [ max1 ] ; niz_st [ max1 ] = temp ; } else return 0 ; } for ( i = 0 ; i < preostali ; i ++ ) printf ( ""%s %s\n"" , niz_st [ i ] . prezime , niz_st [ i ] . ime ) ; break ; case 3 : for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek_ocjena ( niz_st [ i ] . ocjene , niz_st [ i ] . br_ocjena ) >= prosjek ) { max1 = i ; for ( j = i + 1 ; j < velicina ; j ++ ) { if ( prosjek_ocjena ( niz_st [ j ] . ocjene , niz_st [ j ] . br_ocjena ) > prosjek_ocjena ( niz_st [ max1 ] . ocjene , niz_st [ max1 ] . br_ocjena ) ) { max1 = j ; } } temp = niz_st [ i ] ; niz_st [ i ] = niz_st [ max1 ] ; niz_st [ max1 ] = temp ; } else return 0 ; } for ( i = 0 ; i < preostali ; i ++ ) printf ( ""%s %s\n"" , niz_st [ i ] . prezime , niz_st [ i ] . ime ) ; break ; case 0 : break ; default : break ; } return preostali ; } int main ( ) { struct student niz_studenata [ kapacitet ] ; int i , ukupno_studenata ; float zeljeni_prosjek ; printf ( ""unesite broj studenata: "" ) ; scanf ( ""%d"" , & ukupno_studenata ) ; for ( i = 0 ; i < ukupno_studenata ; i ++ ) { niz_studenata [ i ] = unos_studenta ( ) ; } printf ( ""unesite zeljeni prosjek: "" ) ; scanf ( ""%f"" , & zeljeni_prosjek ) ; return 0 ; }"
1916,69,69,0,15,A2016/Z2/Z1/student2437,A2016/Z2/Z1/student8846,"#include <stdio.h> #include <stdlib.h> int main ( ) { int brojac = 0 , n , i , x = 1 , broj1 , rezultat = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; broj1 = n ; while ( broj1 != 0 ) { broj1 = broj1 / 10 ; brojac ++ ; } for ( i = 0 ; i < brojac - 1 ; i ++ ) { rezultat = rezultat + x * ( abs ( ( n % 10 ) - ( ( n / 10 ) % 10 ) ) ) ; x = 10 * x ; n = n / 10 ; } printf ( ""%d"" , rezultat ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int n , br1 , brojac = 0 , rezultat = 0 , x = 1 , i ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; br1 = n ; while ( br1 != 0 ) { br1 = br1 / 10 ; brojac ++ ; } for ( i = 0 ; i < brojac - 1 ; i ++ ) { rezultat = rezultat + x * ( abs ( ( n % 10 ) - ( ( n / 10 ) % 10 ) ) ) ; x = 10 * x ; n = n / 10 ; } printf ( ""%d"" , rezultat ) ; return 0 ; }"
1919,98,98,0,62,A2016/Z1/Z3/student7956,A2016/Z1/Z3/student7090,"#include <stdio.h> int main ( ) { char z ; int i , crna = 0 , bijela = 0 , siva = 0 , crvena = 0 , plava = 0 , najpop_boja = 0 ; float procenat_boja ; printf ( ""unesite vozila: "" ) ; for ( i = 0 ; ; i ++ ) { scanf ( ""%c"" , & z ) ; if ( z == 'k' || z == 'k' ) break ; else if ( z == ' ' ) { printf ( ""neispravan unos\n"" ) ; i -- ; } else if ( z != 'c' && z != 'c' && z != 'b' && z != 'b' && z != 's' && z != 's' && z != 'v' && z != 'v' && z != 'p' && z != 'p' ) { printf ( ""neispravan unos\n"" ) ; i -- ; continue ; } else if ( z == 'c' || z == 'c' ) { crna ++ ; if ( crna > najpop_boja ) najpop_boja = crna ; } else if ( z == 'b' || z == 'b' ) { bijela ++ ; if ( bijela > najpop_boja ) najpop_boja = bijela ; } else if ( z == 's' || z == 's' ) { siva ++ ; if ( siva > najpop_boja ) najpop_boja = siva ; } else if ( z == 'v' || z == 'v' ) { crvena ++ ; if ( crvena > najpop_boja ) najpop_boja = crvena ; } else if ( z == 'p' || z == 'p' ) { plava ++ ; if ( plava > najpop_boja ) najpop_boja = plava ; } } if ( i == 0 ) procenat_boja = 0 ; else procenat_boja = ( float ) ( najpop_boja * 100 ) / i ; if ( crna == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je crna (%.2f%%)."" , i , procenat_boja ) ; else if ( bijela == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je bijela (%.2f%%)."" , i , procenat_boja ) ; else if ( siva == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je siva (%.2f%%)."" , i , procenat_boja ) ; else if ( crvena == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je crvena (%.2f%%)."" , i , procenat_boja ) ; else if ( plava == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je plava (%.2f%%)."" , i , procenat_boja ) ; return 0 ; }","#include <stdio.h> int main ( ) { char z ; int i , crna = 0 , bijela = 0 , siva = 0 , crvena = 0 , plava = 0 , najpop_boja = 0 ; float procenat_boja ; printf ( ""unesite vozila: "" ) ; for ( i = 0 ; ; i ++ ) { scanf ( ""%c"" , & z ) ; if ( z == 'k' || z == 'k' ) break ; else if ( z == ' ' ) { printf ( ""neispravan unos\n"" ) ; i -- ; } else if ( z != 'c' && z != 'c' && z != 'b' && z != 'b' && z != 's' && z != 's' && z != 'v' && z != 'v' && z != 'p' && z != 'p' ) { printf ( ""neispravan unos\n"" ) ; i -- ; continue ; } else if ( z == 'c' || z == 'c' ) { crna ++ ; if ( crna > najpop_boja ) najpop_boja = crna ; } else if ( z == 'b' || z == 'b' ) { bijela ++ ; if ( bijela > najpop_boja ) najpop_boja = bijela ; } else if ( z == 's' || z == 's' ) { siva ++ ; if ( siva > najpop_boja ) najpop_boja = siva ; } else if ( z == 'v' || z == 'v' ) { crvena ++ ; if ( crvena > najpop_boja ) najpop_boja = crvena ; } else if ( z == 'p' || z == 'p' ) { plava ++ ; if ( plava > najpop_boja ) najpop_boja = plava ; } } if ( i == 0 ) procenat_boja = 0 ; else procenat_boja = ( float ) ( najpop_boja * 100 ) / i ; if ( crna == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je crna (%.2f%%)."" , i , procenat_boja ) ; else if ( bijela == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je bijela (%.2f%%)."" , i , procenat_boja ) ; else if ( siva == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je siva (%.2f%%)."" , i , procenat_boja ) ; else if ( crvena == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je crvena (%.2f%%)."" , i , procenat_boja ) ; else if ( plava == najpop_boja ) printf ( ""ukupno evidentirano %d vozila.\nnajpopularnija boja je plava (%.2f%%)."" , i , procenat_boja ) ; return 0 ; }"
1924,99,99,0,34,A2016/Z1/Z4/student6547,A2016/Z1/Z4/student8317,"#include <stdio.h> int main ( ) { int n = 0 , i , j , d ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n > 50 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { d = 4 * n - 3 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < d ; j ++ ) { if ( j == i || ( j == 2 * n - 2 - i ) || ( j == 2 * n - 2 + i ) || ( j == 4 * n - 4 - i ) ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n = 0 , i , j , d ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n > 50 || n <= 0 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { d = 4 * n - 3 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < d ; j ++ ) { if ( j == i || ( j == 2 * n - 2 - i ) || ( j == 2 * n - 2 + i ) || ( j == 4 * n - 4 - i ) ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } } return 0 ; }"
1939,98,98,0,40,A2016/Z2/Z3/student2645,A2016/Z2/Z3/student8576,"#include <stdio.h> int main ( ) { int n ; int i , j , x , y ; char zvjezdice [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 10 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { zvjezdice [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; while ( ( x < 0 || x > 19 ) || ( y < 0 || y > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; } zvjezdice [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( zvjezdice [ i ] [ j ] != '*' ) zvjezdice [ i ] [ j ] = ' ' ; printf ( ""%c"" , zvjezdice [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n ; int i , j , x , y ; char zvjezdice [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 10 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { zvjezdice [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; while ( ( x < 0 || x > 19 ) || ( y < 0 || y > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; } zvjezdice [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( zvjezdice [ i ] [ j ] != '*' ) zvjezdice [ i ] [ j ] = ' ' ; printf ( ""%c"" , zvjezdice [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1940,77,77,0,98,A2016/Z4/Z1/student3315,A2016/Z4/Z1/student6877,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int poredjenje ( char * prva_rijec , char * druga_rijec , int vel1 , int vel2 ) { int k ; char * p1 = prva_rijec , * p2 = druga_rijec ; if ( vel1 != vel2 ) return 0 ; for ( k = 0 ; k < vel1 - 1 ; k ++ ) { if ( * ( p2 + k ) >= 'a' && * ( p2 + k ) <= 'z' ) { if ( * ( p1 + k ) != * ( p2 + k ) + 32 ) return 0 ; continue ; } if ( * ( p2 + k ) >= 'a' && * ( p2 + k ) <= 'z' && * ( p1 + k ) >= 'a' && * ( p1 + k ) <= 'z' ) { if ( * ( p1 + k ) + 32 != * ( p2 + k ) + 32 ) return 0 ; continue ; } if ( * ( p1 + k ) >= 'a' && * ( p1 + k ) <= 'z' ) { if ( * ( p1 + k ) + 32 != * ( p2 + k ) ) return 0 ; continue ; } if ( * ( p1 + k ) != * ( p2 + k ) ) return 0 ; } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pok [ 500 ] ; int i = 0 , j = 0 , brojac [ 500 ] = { 0 } , brojac_rijeci = 1 , najcesca [ 500 ] = { 0 } ; p = s ; pok [ j ] = p ; if ( * p == '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = p ; continue ; } brojac [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( poredjenje ( pok [ i ] , pok [ j ] , brojac [ i ] , brojac [ j ] ) ) najcesca [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( najcesca [ i ] > najcesca [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( poredjenje ( pok [ max ] , pok [ i ] , brojac [ max ] , brojac [ i ] ) ) { p = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * ( p + brojac [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pok [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac [ i ] ; } } } p = pok [ max ] ; while ( * p != '\0' ) { * p = * ( p + brojac [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ 10000 ] ; printf ( ""unesite tekst: "" ) ; unesi ( tekst , 10000 ) ; printf ( ""%s"" , izbaci_najcescu ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak ; int i = 0 ; znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * string1 , char * string2 , int velicina1 , int velicina2 ) { char * p1 = string1 ; char * p2 = string2 ; int i ; if ( velicina1 != velicina2 ) return 0 ; else { for ( i = 0 ; i < velicina1 - 1 ; i ++ ) { if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p2 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pokazivac [ 100 ] ; int i = 0 , j = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 100 ] = { 0 } ; p = s ; pokazivac [ j ] = p ; if ( * p != '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; i ++ ; j ++ ; pokazivac [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pokazivac [ i ] , pokazivac [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pokazivac [ max ] , pokazivac [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pokazivac [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * p ( brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pokazivac [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pokazivac [ j ] -= brojac_slova [ i ] ; } } } p = pokazivac [ max ] ; while ( * p != '\0' ) { * p = * p ( brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""asd ddd asd  ddd asd trzhrth"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }"
1941,83,83,0,47,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student8796,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 #define eps 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , bruglova , sekf , ste , min ; double niz [ 500 ] = { 0 } , sek ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & bruglova ) ; for ( i = 0 ; i < bruglova ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] *= 180. / pi ; } for ( i = 0 ; i < bruglova ; i ++ ) { sek = fabs ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) ; sek += 0.5 ; sekf = sek ; if ( sekf == 60 ) sekf = 0 ; if ( sekf > 30 ) { for ( j = i ; j < bruglova ; j ++ ) niz [ j ] = niz [ j + 1 ] ; bruglova -- ; i -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < bruglova ; i ++ ) { ste = niz [ i ] ; min = abs ( ( 60 * ( niz [ i ] - ( int ) niz [ i ] ) ) ) ; if ( niz [ i ] >= 0 ) sek = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) + 0.5 ) ) ; else sek = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) - 0.5 ) ) ; if ( fabs ( sek - 60 ) < eps ) { min ++ ; sek = 0 ; } if ( niz [ i ] >= 0 ) { if ( min >= 60 ) { ste ++ ; min = 0 ; } } else if ( min >= 60 ) { ste -- ; min = 0 ; } sekf = sek ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , ste , min , sekf ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #define pi 3.1415925 #include <math.h> #define g 0.0000000000000000000000000000000000000000000001 int main ( ) { int i , j , n , sec , st , min ; double niz [ 500 ] = { 0 } , sekunda , m , b = 0.5 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] *= 180. / pi ; } for ( i = 0 ; i < n ; i ++ ) { m = ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ; sekunda = fabs ( 60 * m ) ; sekunda += b ; sec = sekunda ; if ( sec == 60 ) { sec = 0 ; } if ( sec > 30 ) { for ( j = i ; j < n ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { st = niz [ i ] ; min = abs ( ( 60 * ( niz [ i ] - ( int ) niz [ i ] ) ) ) ; if ( niz [ i ] >= 0 ) { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) + b ) ) ; } else { sekunda = fabs ( ( int ) ( ( 60 * ( ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) - ( int ) ( 60 * ( niz [ i ] - ( int ) ( niz [ i ] ) ) ) ) ) - b ) ) ; } if ( fabs ( sekunda - 60 ) < g ) { min ++ ; sekunda = 0 ; } if ( niz [ i ] >= 0 ) { if ( min >= 60 ) { st ++ ; min = 0 ; } } else { if ( min >= 60 ) { st -- ; min = 0 ; } } sec = sekunda ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , st , min , sec ) ; } return 0 ; }"
1946,96,96,0,17,A2016/Z1/Z2/student6547,A2016/Z1/Z2/student8317,"#include <stdio.h> int main ( ) { double a1 , b1 , a2 , b2 ; float x , y1 ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%lf, %lf, %lf, %lf"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su "" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se "" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y1 = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y1 ) ; } return 0 ; }","#include <stdio.h> int main ( ) { double a1 , b1 , a2 , b2 ; float x , y1 ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%lf, %lf, %lf, %lf"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su "" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se "" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y1 = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y1 ) ; } return 0 ; }"
1952,69,69,0,28,A2016/Z1/Z4/student6776,A2016/Z1/Z4/student2464,"#include <stdio.h> int main ( ) { int n , i , j , k , l , s ; unos : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; goto unos ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( l = 0 ; l < n - 1 ; l ++ ) { if ( i == l + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( s = 0 ; s <= n ; s ++ ) { if ( i + s == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n ; int l , u , c , a , s ; alvaro_morata : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; goto alvaro_morata ; } for ( l = 0 ; l < n ; l ++ ) { for ( u = 0 ; u < n - 1 ; u ++ ) { if ( l == u ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( c = 0 ; c < n - 1 ; c ++ ) { if ( l + c == n - 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( a = 0 ; a < n - 1 ; a ++ ) { if ( l == a ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( s = 0 ; s < n ; s ++ ) { if ( l + s == n - 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1974,23,23,0,27,A2016/Z5/Z1/student1192,A2016/Z5/Z1/student7258,"#include <stdio.h> #define epsilon 0.0001 #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( strcmp ( pr . prezime , dr . prezime ) > 0 ) return 0 ; else if ( strcmp ( pr . prezime , dr . prezime ) < 0 ) return 1 ; if ( strcmp ( pr . ime , dr . ime ) > 0 ) return 0 ; else if ( strcmp ( pr . ime , dr . ime ) < 0 ) return 1 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { float temp = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp > epsilon ) { min = temp ; indexmin = i ; } } float max = 5 ; if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { int vr = dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ; if ( vr == 1 ) indexprvi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ; if ( vr == 1 ) indexdrugi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indextreci ] ) ; if ( vr == 1 ) indextreci = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""eso"" , ""esic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }","#include <stdio.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjecna_ocjena ( int ocjene [ ] , int vel ) { int i ; float prosjek , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( ocjene [ i ] == 5 ) return 5 ; suma = suma + ocjene [ i ] ; } prosjek = suma / vel ; return prosjek ; } int leksikografski ( struct student student1 , struct student student2 ) { char * prezime1 = student1 . prezime , * ime1 = student1 . ime , * prezime2 = student2 . prezime , * ime2 = student2 . ime ; while ( ( * prezime1 != '\0' ) && ( * prezime2 != '\0' ) ) { if ( * prezime1 > * prezime2 ) return 1 ; if ( * prezime2 > * prezime1 ) return 0 ; prezime1 ++ ; prezime2 ++ ; } if ( ( * prezime1 == '\0' ) && ( * prezime2 == '\0' ) ) { while ( ( * ime1 != '\0' ) && ( * ime2 != '\0' ) ) { if ( * ime1 > * ime2 ) return 1 ; else if ( * ime2 > * ime1 ) return 0 ; ime1 ++ ; ime2 ++ ; } if ( * ime1 != '\0' ) return 0 ; else if ( * ime2 != '\0' ) return 1 ; } else if ( * prezime1 != '\0' ) return 0 ; else if ( * prezime2 != '\0' ) return 1 ; return 1 ; } void najbolji ( struct student studenti [ ] , int velicina ) { int i ; struct student * jedan = null , * dva = null , * tri = null , * max = null ; if ( velicina != 0 ) { max = & studenti [ 0 ] ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( ( * max ) . ocjene , ( * max ) . br_ocjena ) < prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) max = & studenti [ i ] ; else if ( ( prosjecna_ocjena ( ( * max ) . ocjene , ( * max ) . br_ocjena ) ) == prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) { if ( leksikografski ( * max , studenti [ i ] ) ) max = & studenti [ i ] ; } } jedan = max ; } if ( velicina > 1 ) { max = & studenti [ 0 ] ; if ( max == jedan ) max ++ ; for ( i = 0 ; i < velicina ; i ++ ) { if ( jedan == & studenti [ i ] ) continue ; else if ( prosjecna_ocjena ( ( * max ) . ocjene , ( * max ) . br_ocjena ) < prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) max = & studenti [ i ] ; else if ( ( prosjecna_ocjena ( ( * max ) . ocjene , ( * max ) . br_ocjena ) ) == prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) { if ( leksikografski ( * max , studenti [ i ] ) ) max = & studenti [ i ] ; } } dva = max ; } if ( velicina > 2 ) { max = & studenti [ 0 ] ; while ( max == jedan || max == dva ) max ++ ; for ( i = 0 ; i < velicina ; i ++ ) { if ( ( jedan == & studenti [ i ] ) || ( dva == & studenti [ i ] ) ) continue ; else if ( prosjecna_ocjena ( ( * max ) . ocjene , ( * max ) . br_ocjena ) < prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) max = & studenti [ i ] ; else if ( ( prosjecna_ocjena ( ( * max ) . ocjene , ( * max ) . br_ocjena ) ) == prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ) { if ( leksikografski ( * max , studenti [ i ] ) ) max = & studenti [ i ] ; } } tri = max ; } if ( jedan != null ) printf ( ""%s %s\n"" , ( * jedan ) . prezime , ( * jedan ) . ime ) ; if ( dva != null ) printf ( ""%s %s\n"" , ( * dva ) . prezime , ( * dva ) . ime ) ; if ( tri != null ) printf ( ""%s %s\n"" , ( * tri ) . prezime , ( * tri ) . ime ) ; } int genijalci ( struct student studenti [ ] , int velicina , float prosjek ) { int i , j , nova_velicina ; for ( i = 0 ; i < velicina ; i ++ ) { if ( studenti [ i ] . br_ocjena == 0 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } } if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina -- ; } } nova_velicina = velicina ; najbolji ( studenti , nova_velicina ) ; return nova_velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }"
1975,98,98,0,55,A2016/Z1/Z3/student9945,A2016/Z1/Z3/student3678,"#include <stdio.h> #define ch character int main ( ) { int ch , brojautomobila = 0 , c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , max = - 1 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & ch ) ; if ( ( ch == ""c"" ) || ( ch == ""c"" ) ) { c ++ ; brojautomobila ++ ; if ( ( c >= b ) && ( c >= s ) && ( c >= v ) && ( c >= p ) ) max = 1 ; } else if ( ( ch == ""b"" ) || ( ch == ""b"" ) ) { b ++ ; brojautomobila ++ ; if ( ( b > c ) && ( b >= s ) && ( b >= v ) && ( b >= p ) ) max = 2 ; } else if ( ( ch == ""s"" ) || ( ch == ""s"" ) ) { s ++ ; brojautomobila ++ ; if ( ( s > c ) && ( s > b ) && ( s >= v ) && ( s >= p ) ) max = 3 ; } else if ( ( ch == ""v"" ) || ( ch == ""v"" ) ) { v ++ ; brojautomobila ++ ; if ( ( v > c ) && ( v > b ) && ( v > s ) && ( v >= p ) ) max = 4 ; } else if ( ( ch == ""p"" ) || ch == ""p"" ) { p ++ ; brojautomobila ++ ; if ( ( p > c ) && ( p > b ) && ( p > s ) && ( p > v ) ) max = 5 ; } else if ( ( ch != ""k"" ) && ( ch != ""k"" ) ) printf ( ""neispravan unos\n"" ) ; } while ( ( ch != ""k"" ) && ( ch != ""k"" ) ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , brojautomobila ) ; printf ( ""najpopularnija boja je "" ) ; switch ( max ) { case 1 : printf ( ""crna(%2lf%%)"" , ( ( double ) c / brojautomobila ) * 100 ) ; break ; case 2 : printf ( ""bijela(%2lf%%)"" , ( ( double ) b / brojautomobila ) * 100 ) ; break ; case 3 : printf ( ""siva(%2lf%%)"" , ( ( double ) s / brojautomobila ) * 100 ) ; break ; case 4 : printf ( ""crvena(%2lf%%)"" , ( ( double ) c / brojautomobila ) * 100 ) ; break ; case 5 : printf ( ""plava(%2lf%%)"" , ( ( double ) p / brojautomobila ) * 100 ) ; break ; default : printf ( ""niste unijeli nijedan automobil"" ) ; break ; } return 0 ; }","#include <stdio.h> #define ch character int main ( ) { int ch , brojautomobila = 0 , c = 0 , b = 0 , s = 0 , v = 0 , p = 0 , max = - 1 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & ch ) ; if ( ( ch == ""c"" ) || ( ch == ""c"" ) ) { c ++ ; brojautomobila ++ ; if ( ( c >= b ) && ( c >= s ) && ( c >= v ) && ( c >= p ) ) max = 1 ; } else if ( ( ch == ""b"" ) || ( ch == ""b"" ) ) { b ++ ; brojautomobila ++ ; if ( ( b > c ) && ( b >= s ) && ( b >= v ) && ( b >= p ) ) max = 2 ; } else if ( ( ch == ""s"" ) || ( ch == ""s"" ) ) { s ++ ; brojautomobila ++ ; if ( ( s > c ) && ( s > b ) && ( s >= v ) && ( s >= p ) ) max = 3 ; } else if ( ( ch == ""v"" ) || ( ch == ""v"" ) ) { v ++ ; brojautomobila ++ ; if ( ( v > c ) && ( v > b ) && ( v > s ) && ( v >= p ) ) max = 4 ; } else if ( ( ch == ""p"" ) || ch == ""p"" ) { p ++ ; brojautomobila ++ ; if ( ( p > c ) && ( p > b ) && ( p > s ) && ( p > v ) ) max = 5 ; } else if ( ( ch != ""k"" ) && ( ch != ""k"" ) ) printf ( ""neispravan unos\n"" ) ; } while ( ( ch != ""k"" ) && ( ch != ""k"" ) ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , brojautomobila ) ; printf ( ""najpopularnija boja je "" ) ; switch ( max ) { case 1 : printf ( ""crna(%2lf%%)"" , ( ( double ) c / brojautomobila ) * 100 ) ; break ; case 2 : printf ( ""bijela(%2lf%%)"" , ( ( double ) b / brojautomobila ) * 100 ) ; break ; case 3 : printf ( ""siva(%2lf%%)"" , ( ( double ) s / brojautomobila ) * 100 ) ; break ; case 4 : printf ( ""crvena(%2lf%%)"" , ( ( double ) c / brojautomobila ) * 100 ) ; break ; case 5 : printf ( ""plava(%2lf%%)"" , ( ( double ) p / brojautomobila ) * 100 ) ; break ; default : printf ( ""niste unijeli nijedan automobil"" ) ; break ; } return 0 ; }"
1978,96,96,0,34,A2016/Z3/Z1/student4639,A2016/Z3/Z1/student4416,"#include <stdio.h> int daj_prost ( ) { static int i = 1 ; int j , prost ; do { prost = 1 ; i ++ ; for ( j = 2 ; j < i ; j ++ ) if ( i % j == 0 ) { prost = 0 ; break ; } } while ( prost == 0 ) ; return i ; } int main ( ) { int suma = 0 , x , k , j , a , b ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a < 1 || a >= b ) ; do { x = daj_prost ( ) ; for ( j = a + 1 ; j < b ; j ++ ) { if ( j == x ) suma = suma + j ; } } while ( x < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int i = 1 ; int j , prost ; do { prost = 1 ; i ++ ; for ( j = 2 ; j < i ; j ++ ) if ( i % j == 0 ) { prost = 0 ; break ; } } while ( prost == 0 ) ; return i ; } int main ( ) { int suma = 0 , x , k , j , a , b ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a < 1 || a >= b ) ; do { x = daj_prost ( ) ; for ( j = a + 1 ; j < b ; j ++ ) { if ( j == x ) suma = suma + j ; } } while ( x < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
1988,68,68,0,80,A2016/Z4/Z2/student6877,A2016/Z4/Z2/student5170,"#include <stdio.h> char * kodiraj ( char * string , char tablica [ 96 ] ) { int znakovi [ 97 ] = { 0 } , i , max , * p , kraj = 0 , pozicija = 97 ; char * temp = string , * temptab = tablica ; p = znakovi ; while ( * string != '\0' ) { znakovi [ * string - 32 ] ++ ; string ++ ; } while ( kraj == 0 ) { max = 0 ; kraj = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( znakovi [ i ] > max ) { max = znakovi [ i ] ; pozicija = i ; } if ( max != 0 ) kraj = 0 ; } znakovi [ pozicija ] = - 1 ; if ( max != 0 ) { * tablica = ( char ) ( pozicija + 32 ) ; tablica ++ ; } } p = znakovi ; for ( i = 0 ; i < 95 ; i ++ ) { if ( * p == 0 ) { * tablica = ( char ) ( i + 32 ) ; tablica ++ ; } p ++ ; } * tablica = '\0' ; tablica = temptab ; string = temp ; pozicija = 0 ; while ( * string != '\0' ) { tablica = temptab ; pozicija = 0 ; while ( * string != * tablica && * tablica != '\0' ) { tablica ++ ; pozicija ++ ; } * string = ( char ) ( 126 + pozicija ) ; string ++ ; } string = temp ; return string ; } char * dekodiraj ( char * string , char * tablica ) { char * temp = string ; char zamjeni = * string ; int max = 0 , i ; int tabela [ 96 ] = { - 1 } ; int checked [ 96 ] = { 0 } ; int x = 1 ; while ( * string != '\0' ) { checked [ * string - 32 ] ++ ; string ++ ; } max = 0 ; do { max = 0 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( checked [ i ] >= max ) max = checked [ i ] ; } for ( i = 95 ; i <= 0 ; i -- ) { if ( checked [ i ] == max ) { zamjeni = i + 32 ; break ; } } tabela [ zamjeni - 32 ] = * tablica ; checked [ zamjeni - 32 ] = 0 ; tablica ++ ; x = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( checked [ i ] != 0 ) x = 0 ; } } while ( x == 0 ) ; string = temp ; while ( * string != '\0' ) { * string = tabela [ * string - 32 ] ; string ++ ; } return temp ; } int main ( ) { char string [ ] = """" ; char kodovi [ 100 ] = """" ; kodiraj ( string , kodovi ) ; printf ( ""%s"" , string ) ; printf ( ""\n"" ) ; printf ( ""%s"" , kodovi ) ; dekodiraj ( string , kodovi ) ; printf ( ""%s"" , string ) ; return 0 ; }","#include <stdio.h> char * kodiraj ( char * tekst , char string [ 96 ] ) { char * rst = tekst , * reset = string ; int kr = 0 , znak [ 97 ] = { 0 } , mjesto = 97 , * a , maxi , i = 0 ; a = znak ; while ( * tekst != '\0' ) { znak [ * tekst - 32 ] ++ ; tekst ++ ; } while ( kr == 0 ) { maxi = 0 ; kr = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( znak [ i ] > maxi ) { maxi = znak [ i ] ; mjesto = i ; } if ( maxi != 0 ) kr = 0 ; } znak [ mjesto ] = - 1 ; if ( maxi != 0 ) { * string = ( char ) ( mjesto + 32 ) ; string ++ ; } } a = znak ; for ( i = 0 ; i < 95 ; i ++ ) { if ( * a == 0 ) { * string = ( char ) ( i + 32 ) ; string ++ ; } a ++ ; } * string = '\0' ; string = reset ; tekst = rst ; mjesto = 0 ; while ( * tekst != '\0' ) { string = reset ; mjesto = 0 ; while ( * string != '\0' && * tekst != * string ) { string ++ ; mjesto ++ ; } * tekst = ( char ) ( 126 - mjesto ) ; tekst ++ ; } tekst = rst ; return tekst ; } char * dekodiraj ( char * tekst , char * string ) { int p = 1 , provjereno [ 96 ] = { 0 } , tablica [ 96 ] = { - 1 } , maxi = 0 , i = 0 ; char promjeni = * tekst ; char * rst = tekst ; while ( * tekst != '\0' ) { provjereno [ * tekst - 32 ] ++ ; tekst ++ ; } maxi = 0 ; do { maxi = 0 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( provjereno [ i ] >= maxi ) maxi = provjereno [ i ] ; } for ( i = 95 ; i >= 0 ; i -- ) { if ( provjereno [ i ] == maxi ) { promjeni = i + 32 ; break ; } } tablica [ promjeni - 32 ] = * string ; provjereno [ promjeni - 32 ] = 0 ; string ++ ; p = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( provjereno [ i ] != 0 ) p = 0 ; } } while ( p == 0 ) ; tekst = rst ; while ( * tekst != '\0' ) { * tekst = tablica [ * tekst - 32 ] ; tekst ++ ; } return rst ; } int main ( ) { char tekst [ ] = """" ; char sifrarnik [ 100 ] = """" ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; return 0 ; }"
1996,70,70,0,56,A2016/Z3/Z2/student5612,A2016/Z3/Z2/student9160,"#include <stdio.h> #include<stdlib.h> #define velicina 10 #define velicina_2 20 void ubaci ( int * niz , int velicina ) { int i , k ; int b1 ; int b2 ; int b3 = 0 ; for ( k = velicina - 1 ; k >= 0 ; k -- ) { niz [ 2 * k ] = niz [ k ] ; } for ( i = 0 ; i < 2 * velicina ; i = i + 2 ) { b1 = abs ( niz [ i ] ) ; if ( b1 < 10 ) b3 = b1 ; else { do { b2 = b1 % 10 ; b3 = b3 + b2 ; b1 = b1 / 10 ; } while ( b1 != 0 ) ; } niz [ i + 1 ] = b3 ; b3 = 0 ; } } int izbaci ( int * niz , int velicina ) { int i ; int k ; int x = 1 ; int y = 1 ; int z ; int u ; for ( i = 0 ; i < velicina ; i ++ ) { x = 1 ; y = 1 ; for ( k = 1 ; k < 10000 ; k ++ ) { if ( k == 1 ) z = 1 ; else { z = x + y ; x = y ; y = z ; } if ( niz [ i ] == z ) { for ( u = i ; u < velicina - 1 ; u ++ ) { niz [ u ] = niz [ u + 1 ] ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 2 * velicina ] ; int i ; int u ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < velicina ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; u = izbaci ( niz , velicina_2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < u ; i ++ ) { if ( i == u - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include<math.h> #include<stdlib.h> #define duzina 10 void ubaci ( int * niz , int velicina ) { int broj , broj2 = 0 , cifra , i , j ; for ( j = velicina - 1 ; j >= 0 ; j -- ) niz [ 2 * j ] = niz [ j ] ; for ( i = 0 ; i < 2 * velicina ; i += 2 ) { broj = abs ( niz [ i ] ) ; if ( broj < 10 ) broj2 = broj ; else { do { cifra = broj % 10 ; broj2 += cifra ; broj /= 10 ; } while ( broj != 0 ) ; } niz [ i + 1 ] = broj2 ; broj2 = 0 ; } } int izbaci ( int * niz , int velicina ) { int j , prvi = 0 , drugi = 1 , treci , i ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) treci = 1 ; else { treci = prvi + drugi ; prvi = drugi ; drugi = treci ; } if ( niz [ i ] == treci ) { int k ; for ( k = i ; k < velicina - 1 ; k ++ ) niz [ k ] = niz [ k + 1 ] ; velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 2 * duzina ] , i , pozivanje ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < duzina ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , duzina ) ; pozivanje = izbaci ( niz , 2 * duzina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < pozivanje ; i ++ ) if ( i == pozivanje - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; return 0 ; }"
1998,99,99,0,25,A2016/Z2/Z3/student3900,A2016/Z2/Z3/student7802,"#include <stdio.h> int main ( ) { int mat [ 20 ] [ 20 ] = { 0 } , i , x , y , n , k = 1 , t , u ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n < 1 ) printf ( ""pogresan unos\n"" ) ; } while ( n > 10 || n < 1 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , k ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || y < 0 || x >= 20 || y >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { k ++ ; mat [ x ] [ y ] = 1 ; } } for ( u = 0 ; u < 20 ; u ++ ) { for ( t = 0 ; t < 20 ; t ++ ) { if ( mat [ t ] [ u ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 20 ] [ 20 ] = { 0 } , i , x , y , n , k = 1 , t , u ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n < 1 ) printf ( ""pogresan unos\n"" ) ; } while ( n > 10 || n < 1 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , k ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || y < 0 || x >= 20 || y >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { k ++ ; mat [ x ] [ y ] = 1 ; } } for ( u = 0 ; u < 20 ; u ++ ) { for ( t = 0 ; t < 20 ; t ++ ) { if ( mat [ t ] [ u ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2002,94,94,0,205,A2016/Z1/Z1/student5573,A2016/Z1/Z1/student7496,"#include <stdio.h> #include <stdlib.h> int main ( ) { float tp1 , tp2 , tp , tz , tza , bp1 , bp2 , bp , bz , bza , mp1 , mp2 , mp , mz , mza , ocjena1 , ocjena2 , ocjena3 ; scanf ( ""%f"" , & tp1 ) ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; if ( tp1 < 0 || tp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & tp2 ) ; if ( tp2 < 0 || tp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & tp ) ; if ( tp < 0 || tp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & tz ) ; if ( tz < 0 || tz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & tza ) ; if ( tza < 0 || tza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp1 ) ; if ( bp1 < 0 || bp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp2 ) ; if ( bp2 < 0 || bp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & bp ) ; if ( bp < 0 || bp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & bz ) ; if ( bz < 0 || bz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & bza ) ; if ( bza < 0 || bza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp1 ) ; if ( mp1 < 0 || mp1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp2 ) ; if ( mp2 < 0 || mp2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & mp ) ; if ( mp < 0 || mp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & mz ) ; if ( mz < 0 || mz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & mza ) ; if ( mza < 0 || mza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; ocjena1 = tp1 + tp2 + tza + tz + tp ; ocjena2 = bp1 + bp2 + bza + bz + bp ; ocjena3 = mp1 + mp2 + mza + mz + mp ; if ( ocjena1 < 55 ) { ocjena1 = 5 ; } if ( ocjena1 >= 55 && ocjena1 < 65 ) { ocjena1 = 6 ; } if ( ocjena1 >= 65 && ocjena1 < 75 ) { ocjena1 = 7 ; } if ( ocjena1 >= 75 && ocjena1 < 85 ) { ocjena1 = 8 ; } if ( ocjena1 >= 85 && ocjena1 < 92 ) { ocjena1 = 9 ; } if ( ocjena1 >= 92 && ocjena1 <= 100 ) { ocjena1 = 10 ; } if ( ocjena2 < 55 ) { ocjena2 = 5 ; } if ( ocjena2 >= 55 && ocjena2 < 65 ) { ocjena2 = 6 ; } if ( ocjena2 >= 65 && ocjena2 < 75 ) { ocjena2 = 7 ; } if ( ocjena2 >= 75 && ocjena2 < 85 ) { ocjena2 = 8 ; } if ( ocjena2 >= 85 && ocjena2 < 92 ) { ocjena2 = 9 ; } if ( ocjena2 >= 92 && ocjena2 <= 100 ) { ocjena2 = 10 ; } if ( ocjena3 < 55 ) { ocjena3 = 5 ; } if ( ocjena3 >= 55 && ocjena3 < 65 ) { ocjena3 = 6 ; } if ( ocjena3 >= 65 && ocjena3 < 75 ) { ocjena3 = 7 ; } if ( ocjena3 >= 75 && ocjena3 < 85 ) { ocjena3 = 8 ; } if ( ocjena3 >= 85 && ocjena3 < 92 ) { ocjena3 = 9 ; } if ( ocjena3 >= 92 && ocjena3 <= 100 ) { ocjena3 = 10 ; } if ( ocjena1 > 5 && ocjena2 > 5 && ocjena3 > 5 ) { printf ( ""sva tri studenta su polozila. \n"" ) ; } if ( ocjena1 <= 5 && ocjena2 <= 5 && ocjena3 <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( ( ocjena1 >= 5 && ocjena2 <= 5 && ocjena3 <= 5 ) || ( ocjena1 <= 5 && ocjena2 >= 5 && ocjena3 <= 5 ) || ( ocjena1 <= 5 && ocjena2 <= 5 && ocjena3 >= 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( ( ocjena1 >= 5 && ocjena2 >= 5 && ocjena3 <= 5 ) || ( ocjena1 <= 5 && ocjena2 >= 5 && ocjena3 >= 5 ) || ( ocjena1 >= 5 && ocjena2 <= 5 && ocjena3 >= 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( ocjena1 == ocjena2 && ocjena2 == ocjena3 ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } if ( ocjena1 != ocjena2 && ocjena2 != ocjena3 ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } if ( ( ocjena1 == ocjena2 && ocjena2 != ocjena3 ) || ( ocjena1 != ocjena2 && ocjena2 == ocjena3 ) || ( ocjena1 == ocjena3 && ocjena2 != ocjena3 ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { float a , b , c , x1 , x2 , x3 , x4 , x5 , y1 , y2 , y3 , y4 , y5 , z1 , z2 , z3 , z4 , z5 ; int x , y , z ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & y1 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & y2 ) ; if ( y2 < 0 || y2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & y3 ) ; if ( y3 < 0 || y3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & y4 ) ; if ( y4 < 0 || y4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & y5 ) ; if ( y5 < 0 || y5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & z1 ) ; if ( z1 < 0 || z1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & z2 ) ; if ( z2 < 0 || z2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & z4 ) ; if ( z4 < 0 || z4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & z5 ) ; if ( z5 < 0 || z5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; a = x1 + x2 + x3 + x4 + x5 ; b = y1 + y2 + y3 + y4 + y5 ; c = z1 + z2 + z3 + z4 + z5 ; x = a ; y = b ; z = c ; if ( x < 55 ) { x = 5 ; } if ( x >= 55 && x < 65 ) { x = 6 ; } if ( x >= 65 && x < 75 ) { x = 7 ; } if ( x >= 75 && x < 85 ) { x = 8 ; } if ( x >= 85 && x < 92 ) { x = 9 ; } if ( x >= 92 && x < 100 ) { x = 10 ; } if ( y < 55 ) { y = 5 ; } if ( y >= 55 && y < 65 ) { y = 6 ; } if ( y >= 65 && y < 75 ) { y = 7 ; } if ( y >= 75 && y < 85 ) { y = 8 ; } if ( y >= 85 && y < 92 ) { y = 9 ; } if ( y >= 92 && y < 100 ) { y = 10 ; } if ( z < 55 ) { z = 5 ; } if ( z >= 55 && z < 65 ) { z = 6 ; } if ( z >= 65 && z < 75 ) { z = 7 ; } if ( z >= 75 && z < 85 ) { z = 8 ; } if ( z >= 85 && z < 92 ) { z = 9 ; } if ( z >= 92 && z < 100 ) { z = 10 ; } if ( x > 5 && y > 5 && z > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; return 0 ; } if ( x <= 5 && y <= 5 && z <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y <= 5 && z <= 5 ) || ( x <= 5 && y > 5 && z <= 5 ) || ( x <= 5 && y <= 5 && z > 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y > 5 && z <= 5 ) || ( x <= 5 && y > 5 && z > 5 ) || ( x > 5 && y <= 5 && z > 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( x == y && y == z ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } if ( x != y && y != z ) { printf ( ""sva tri studenta imaju razlicitu ocjenu.\n"" ) ; return 0 ; } if ( ( x == y && y != z ) || ( x != y && y == z ) || ( x == y && y != z ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } return 0 ; }"
2003,99,99,0,61,A2016/Z3/Z2/student1422,A2016/Z3/Z2/student2335,"#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int i , a = ( 2 * vel ) - 2 , suma = 0 , x ; for ( i = vel - 1 ; i >= 0 ; i -- ) { niz [ a ] = niz [ i ] ; a -= 2 ; } for ( i = 0 ; i < vel * 2 ; i += 2 ) { suma = 0 ; x = abs ( niz [ i ] ) ; do { suma += x % 10 ; x /= 10 ; } while ( x > 0 ) ; niz [ i + 1 ] = suma ; } } int izbaci ( int * niz , int vel ) { int i , j , fib , a , b ; for ( i = 0 ; i < vel ; i ++ ) { fib = 1 ; a = 1 ; b = 1 ; while ( fib < niz [ i ] ) { fib = a + b ; a = b ; b = fib ; } if ( fib == niz [ i ] ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , nvel ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; nvel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < nvel ; i ++ ) printf ( "", %d"" , niz [ i ] ) ; printf ( ""."" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int i , a = ( 2 * vel ) - 2 , suma = 0 , x ; for ( i = vel - 1 ; i >= 0 ; i -- ) { niz [ a ] = niz [ i ] ; a -= 2 ; } for ( i = 0 ; i < vel * 2 ; i += 2 ) { suma = 0 ; x = abs ( niz [ i ] ) ; do { suma += x % 10 ; x /= 10 ; } while ( x > 0 ) ; niz [ i + 1 ] = suma ; } } int izbaci ( int * niz , int vel ) { int i , j , fib , a , b ; for ( i = 0 ; i < vel ; i ++ ) { fib = 1 ; a = 1 ; b = 1 ; while ( fib < niz [ i ] ) { fib = a + b ; a = b ; b = fib ; } if ( fib == niz [ i ] ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , nvel ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; nvel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < nvel ; i ++ ) printf ( "", %d"" , niz [ i ] ) ; printf ( ""."" ) ; return 0 ; }"
2004,58,58,0,19,A2016/Z3/Z1/student6255,A2016/Z3/Z1/student6706,"#include <stdio.h> int daj_prost ( ) { static int x = 2 ; int i ; for ( i = 2 ; i < x ; i ++ ) { if ( x % i == 0 ) { x ++ ; i = 2 ; } } if ( i == x ) return x ++ ; } int main ( ) { int a , b , i ; unsigned long int suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } else if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } } while ( a >= b || a <= 0 ) ; for ( i = 0 ; i <= b ; i ++ ) { int x = daj_prost ( ) ; if ( a < x && b > x ) suma = suma + x ; } printf ( ""suma prostih brojeva izmedju %d i %d je %lu."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int x = 2 ; int i ; for ( ; ; ) { for ( i = 2 ; i < x ; i ++ ) { if ( x % i == 0 ) { x ++ ; break ; } } if ( i == x ) return x ++ ; } } int main ( ) { int a , b , i ; unsigned long int sum = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( b <= 0 ) printf ( ""b nije prirodan broj.\n"" ) ; } while ( a <= 0 || a >= b || b <= 0 ) ; for ( i = 0 ; i <= b ; i ++ ) { int x = daj_prost ( ) ; if ( a < x && x < b ) { sum = sum + x ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %lu."" , a , b , sum ) ; return 0 ; }"
2005,54,54,0,25,A2016/Z3/Z1/student9463,A2016/Z3/Z1/student7085,"#include <stdio.h> int daj_prost ( ) { int i , prost ; static int num = 1 ; do { prost = 1 ; num ++ ; if ( num == 2 ) continue ; for ( i = 2 ; i < num ; i ++ ) { if ( num % i == 0 ) { prost = 0 ; break ; } } } while ( prost == 0 ) ; return num ; } int main ( ) { int a , b , i , suma = 0 , temp ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a >= b || a < 1 || b < 1 ) ; do { temp = daj_prost ( ) ; if ( temp > a && temp < b ) suma = temp ; } while ( temp <= a ) ; for ( i = 1 ; i > 0 ; i ++ ) { temp = daj_prost ( ) ; if ( temp < b ) suma += temp ; else break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i , prost ; static int n = 1 ; do { prost = 1 ; n ++ ; if ( n == 2 ) continue ; for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prost = 0 ; } } } while ( prost == 0 ) ; return n ; } int main ( ) { int a , b , suma = 0 , temp ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a <= 0 || b <= 0 || a >= b ) ; do { temp = daj_prost ( ) ; if ( temp > a ) break ; } while ( temp <= a ) ; while ( temp < b ) { suma += temp ; temp = daj_prost ( ) ; if ( temp >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2007,93,93,0,56,A2016/Z3/Z1/student2526,A2016/Z3/Z1/student2086,"#include <stdio.h> int daj_prost ( ) { int prost = 1 , i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a , b , suma = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( broj < b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include<stdio.h> int daj_prost ( ) { int prost = 1 , n ; static int br = 1 ; while ( 1 ) { br ++ ; if ( br == 2 ) { return br ; } else { for ( n = 2 ; n < br ; n ++ ) { if ( br % n == 0 ) { prost = 0 ; break ; } } if ( prost ) { return br ; } else { prost = 1 ; } } } } int main ( ) { int x , y , zbir = 0 , br = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & x , & y ) ; if ( x < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( x >= y ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( x < 1 || x >= y || y <= 0 ) ; while ( br < y ) { br = daj_prost ( ) ; if ( br > x && br < y ) { zbir += br ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , x , y , zbir ) ; return 0 ; }"
2018,19,19,0,19,A2016/Z5/Z1/student1192,A2016/Z5/Z1/student1624,"#include <stdio.h> #define epsilon 0.0001 #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( strcmp ( pr . prezime , dr . prezime ) > 0 ) return 0 ; else if ( strcmp ( pr . prezime , dr . prezime ) < 0 ) return 1 ; if ( strcmp ( pr . ime , dr . ime ) > 0 ) return 0 ; else if ( strcmp ( pr . ime , dr . ime ) < 0 ) return 1 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { float temp = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp > epsilon ) { min = temp ; indexmin = i ; } } float max = 5 ; if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { int vr = dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ; if ( vr == 1 ) indexprvi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ; if ( vr == 1 ) indexdrugi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indextreci ] ) ; if ( vr == 1 ) indextreci = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""eso"" , ""esic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define eps 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int summa ( int niz [ ] , int vel ) { int i , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return - 100 ; else suma += niz [ i ] ; return suma ; } int uporedi ( char * s1 , char * s2 ) { if ( strcmp ( s1 , s2 ) < 0 ) return 1 ; if ( strcmp ( s1 , s2 ) > 0 ) return 2 ; } float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma ; suma = summa ( niz , vel ) ; if ( vel == 0 || suma < 0 ) return 5 ; return ( float ) suma / vel ; } int poredidouble ( double d1 , double d2 ) { if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return 0 ; else return 5 ; } int izbaci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > eps ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int dalijeveci ( struct student pr , struct student dr ) { int vr = poredidouble ( prosjek ( pr . ocjene , pr . br_ocjena ) , prosjek ( dr . ocjene , dr . br_ocjena ) ) ; if ( vr == 1 || vr == 5 && uporedi ( pr . prezime , dr . prezime ) == 1 ) return 1 ; if ( vr == 0 || vr == 5 && uporedi ( pr . prezime , dr . prezime ) == 2 ) return 0 ; if ( vr == 5 ) { if ( uporedi ( pr . ime , dr . ime ) == 1 ) return 1 ; if ( uporedi ( pr . ime , dr . ime ) == 2 ) return 0 ; } return 1 ; } int vratimin ( struct student niz [ ] , int vel , double prosjekk ) { int i , j ; double min = 10 ; int indexmin = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( min - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > eps ) { min = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indexmin = i ; } } return indexmin ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci ; double min = 10 ; vel = izbaci ( niz , vel , prosjekk ) ; int indexmin = vratimin ( niz , vel , prosjekk ) ; int bilo = 0 ; switch ( vel ) { case 1 : indexprvi = indexmin ; printf ( ""\n%s %s"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; return vel ; case 0 : return 0 ; case 2 : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 && i != indexprvi ) { indexdrugi = i ; } } printf ( ""%s %s\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; return 2 ; default : indexprvi = indexmin ; indexdrugi = indexmin ; indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) == 1 ) indexprvi = i ; } for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) == 1 ) { indexdrugi = i ; } } for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexdrugi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) == 1 && i != indexprvi ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; return vel ; } } int main ( ) { struct student studenti [ 5 ] = { { ""amra"" , ""djelmo"" , { 7 , 10 , 10 , 10 , 10 } , 5 } , { ""aske"" , ""askelov"" , { 10 , 10 , 10 , 10 , 10 } , 5 } , } ; genijalci ( studenti , 2 , 6.5 ) ; return 0 ; }"
2026,99,99,0,104,A2016/Z4/Z4/student9163,A2016/Z4/Z4/student7193,"#include <stdio.h> #define eps 0.0001 int da_li_je_broj ( int broj ) { return broj >= '0' && broj <= '9' ; } char * obuhvat ( char * koordinate , double x1 , double y1 , double x2 , double y2 ) { char * pom = koordinate , * pocetak , * kraj ; double x , y , predznakx , predznaky , decimala ; int f ; while ( * koordinate != 0 ) { if ( * koordinate == '(' ) { x = y = decimala = 0 ; predznakx = predznaky = 1 ; f = 10 ; koordinate ++ ; if ( * koordinate == '.' || * koordinate == ',' || * koordinate == '(' ) return null ; if ( * koordinate == '-' ) { predznakx = - 1 ; koordinate ++ ; } while ( da_li_je_broj ( * koordinate ) ) { x *= 10 ; x += * koordinate - 48 ; koordinate ++ ; } if ( * koordinate == '.' ) { koordinate ++ ; while ( da_li_je_broj ( * koordinate ) ) { decimala += ( double ) ( * koordinate - 48 ) / f ; f *= 10 ; koordinate ++ ; } } else if ( * koordinate != ',' ) return null ; x += decimala ; x *= predznakx ; f = 10 ; decimala = 0 ; if ( * koordinate == ',' ) { koordinate ++ ; if ( * koordinate == '.' || * koordinate == ')' ) return null ; if ( * koordinate == '-' ) { predznaky = - 1 ; koordinate ++ ; } while ( da_li_je_broj ( * koordinate ) ) { y *= 10 ; y += * koordinate - 48 ; koordinate ++ ; } if ( * koordinate == '.' ) { koordinate ++ ; while ( da_li_je_broj ( * koordinate ) ) { decimala += ( double ) ( * koordinate - 48 ) / f ; f /= 10 ; koordinate ++ ; } } if ( * koordinate != ')' ) return null ; y += decimala ; y *= predznaky ; koordinate ++ ; if ( * koordinate == ')' || ( * koordinate == ',' && * ( koordinate + 1 ) != '(' ) ) return null ; } else return null ; if ( ( x < x1 || x > x2 || y < y1 || y > y2 ) ) { if ( * koordinate == 0 ) { koordinate -- ; while ( * ( koordinate + 1 ) != '(' && koordinate != pom ) koordinate -- ; * koordinate = 0 ; } else { kraj = koordinate + 2 ; while ( * ( koordinate - 1 ) != '(' ) koordinate -- ; pocetak = koordinate ; if ( koordinate - 1 == pom ) koordinate -- ; else koordinate -= 2 ; while ( * kraj != '\0' ) { * pocetak = * kraj ; pocetak ++ ; kraj ++ ; } * pocetak = 0 ; } } } else return null ; if ( koordinate != pom && * koordinate != 0 ) { koordinate ++ ; } } return pom ; } int main ( ) { char koordinate [ 1000 ] = ""(1.1,5.5),(1.2,5.5),(1.3,5.5),(1.4,5.5),(1.5,5.5)"" ; printf ( ""%s\n"" , obuhvat ( koordinate , 1.2 , 5.499 , 1.4 , 5.501 ) ) ; return 0 ; }","#include <stdio.h> #define eps 0.0001 int da_li_je_broj ( int broj ) { return broj >= '0' && broj <= '9' ; } char * obuhvat ( char * koordinate , double x1 , double y1 , double x2 , double y2 ) { char * pom = koordinate , * pocetak , * kraj ; double x , y , predznakx , predznaky , decimala ; int f ; while ( * koordinate != 0 ) { if ( * koordinate == '(' ) { x = y = decimala = 0 ; predznakx = predznaky = 1 ; f = 10 ; koordinate ++ ; if ( * koordinate == '.' || * koordinate == ',' || * koordinate == '(' ) return null ; if ( * koordinate == '-' ) { predznakx = - 1 ; koordinate ++ ; } while ( da_li_je_broj ( * koordinate ) ) { x *= 10 ; x += * koordinate - 48 ; koordinate ++ ; } if ( * koordinate == '.' ) { koordinate ++ ; while ( da_li_je_broj ( * koordinate ) ) { decimala += ( double ) ( * koordinate - 48 ) / f ; f *= 10 ; koordinate ++ ; } } else if ( * koordinate != ',' ) return null ; x += decimala ; x *= predznakx ; f = 10 ; decimala = 0 ; if ( * koordinate == ',' ) { koordinate ++ ; if ( * koordinate == '.' || * koordinate == ')' ) return null ; if ( * koordinate == '-' ) { predznaky = - 1 ; koordinate ++ ; } while ( da_li_je_broj ( * koordinate ) ) { y *= 10 ; y += * koordinate - 48 ; koordinate ++ ; } if ( * koordinate == '.' ) { koordinate ++ ; while ( da_li_je_broj ( * koordinate ) ) { decimala += ( double ) ( * koordinate - 48 ) / f ; f /= 10 ; koordinate ++ ; } } if ( * koordinate != ')' ) return null ; y += decimala ; y *= predznaky ; koordinate ++ ; if ( * koordinate == ')' || ( * koordinate == ',' && * ( koordinate + 1 ) != '(' ) ) return null ; } else return null ; if ( ( x < x1 || x > x2 || y < y1 || y > y2 ) ) { if ( * koordinate == 0 ) { koordinate -- ; while ( * ( koordinate + 1 ) != '(' && koordinate != pom ) koordinate -- ; * koordinate = 0 ; } else { kraj = koordinate + 2 ; while ( * ( koordinate - 1 ) != '(' ) koordinate -- ; pocetak = koordinate ; if ( koordinate - 1 == pom ) koordinate -- ; else koordinate -= 2 ; while ( * kraj != '\0' ) { * pocetak = * kraj ; pocetak ++ ; kraj ++ ; } * pocetak = 0 ; } } } else return null ; if ( koordinate != pom && * koordinate != 0 ) { koordinate ++ ; } } return pom ; } int main ( ) { char koordinate [ 1000 ] = ""(1.1,5.5),(1.2,5.5),(1.3,5.5),(1.4,5.5),(1.5,5.5)"" ; printf ( ""%s\n"" , obuhvat ( koordinate , 1.2 , 5.499 , 1.4 , 5.501 ) ) ; return 0 ; }"
2039,94,94,0,20,A2016/Z2/Z1/student4082,A2016/Z2/Z1/student7597,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int n , x , y , broj = 0 , k = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) { n = abs ( n ) ; } if ( n % 10 == n ) { printf ( ""0"" ) ; return 0 ; } while ( n >= 10 ) { x = n % 10 ; n /= 10 ; y = n % 10 ; broj += abs ( x - y ) * k ; k = k * 10 ; } printf ( ""%d"" , broj ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int n , x , y , broj = 0 , k = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) { n = abs ( n ) ; } if ( n % 10 == n ) { printf ( ""0"" ) ; return 0 ; } while ( n >= 10 ) { x = n % 10 ; n /= 10 ; y = n % 10 ; broj += abs ( x - y ) * k ; k = k * 10 ; } printf ( ""%d"" , broj ) ; return 0 ; }"
2041,98,98,0,36,A2016/Z2/Z3/student2142,A2016/Z2/Z3/student5961,"#include <stdio.h> int main ( ) { int niz1 [ 100 ] , niz2 [ 100 ] , i , j , n , k = 0 , brojac = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 10 ) ; i = 0 ; do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & niz1 [ i ] , & niz2 [ i ] ) ; if ( niz1 [ i ] < 0 || niz1 [ i ] >= 20 || niz2 [ i ] < 0 || niz2 [ i ] >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } i ++ ; } while ( i < n ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( niz1 [ k ] == j && niz2 [ k ] == i ) { brojac ++ ; break ; } } if ( brojac > 0 ) printf ( ""*"" ) ; else printf ( "" "" ) ; brojac = 0 ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int niz1 [ 100 ] , niz2 [ 100 ] , i , j , n , k = 0 , brojac = 0 ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 10 ) ; i = 0 ; do { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & niz1 [ i ] , & niz2 [ i ] ) ; if ( niz1 [ i ] < 0 || niz1 [ i ] >= 20 || niz2 [ i ] < 0 || niz2 [ i ] >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } i ++ ; } while ( i < n ) ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( niz1 [ k ] == j && niz2 [ k ] == i ) { brojac ++ ; break ; } } if ( brojac > 0 ) printf ( ""*"" ) ; else printf ( "" "" ) ; brojac = 0 ; } printf ( ""\n"" ) ; } return 0 ; }"
2045,99,99,0,89,A2016/Z1/Z3/student7232,A2016/Z1/Z3/student2086,"#include <stdio.h> int main ( ) { int c , b , s , v , p , br ; float maksimal , postotak ; char x ; br = 0 ; c = b = s = v = p = 0 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & x ) ; if ( x == 'c' || x == 'c' ) { c += 1 ; } else if ( x == 'b' || x == 'b' ) { b += 1 ; } else if ( x == 's' || x == 's' ) { s += 1 ; } else if ( x == 'v' || x == 'v' ) { v += 1 ; } else if ( x == 'p' || x == 'p' ) { p += 1 ; } else if ( x == '\n' || x == 'k' || x == 'k' ) { } else { printf ( ""neispravan unos\n"" ) ; } } while ( x != 'k' && x != 'k' ) ; br = c + b + s + v + p ; printf ( ""ukupno evidentirano %d vozila.\n"" , br ) ; if ( br == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } maksimal = c ; if ( b > maksimal ) { maksimal = b ; } if ( s > maksimal ) { maksimal = s ; } if ( v > maksimal ) { maksimal = v ; } if ( p > maksimal ) { maksimal = p ; } postotak = maksimal / br * 100 ; if ( c == maksimal ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , postotak ) ; return 0 ; } else if ( b == maksimal ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , postotak ) ; } else if ( s == maksimal ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , postotak ) ; } else if ( v == maksimal ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , postotak ) ; } else { printf ( ""najpopularnija boja je plava (%.2f%%)."" , postotak ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c , b , s , v , p , br ; float maksimal , postotak ; char x ; br = 0 ; c = b = s = v = p = 0 ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & x ) ; if ( x == 'c' || x == 'c' ) { c += 1 ; } else if ( x == 'b' || x == 'b' ) { b += 1 ; } else if ( x == 's' || x == 's' ) { s += 1 ; } else if ( x == 'v' || x == 'v' ) { v += 1 ; } else if ( x == 'p' || x == 'p' ) { p += 1 ; } else if ( x == '\n' || x == 'k' || x == 'k' ) { } else { printf ( ""neispravan unos\n"" ) ; } } while ( x != 'k' && x != 'k' ) ; br = c + b + s + v + p ; printf ( ""ukupno evidentirano %d vozila.\n"" , br ) ; if ( br == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } maksimal = c ; if ( b > maksimal ) { maksimal = b ; } if ( s > maksimal ) { maksimal = s ; } if ( v > maksimal ) { maksimal = v ; } if ( p > maksimal ) { maksimal = p ; } postotak = maksimal / br * 100 ; if ( c == maksimal ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , postotak ) ; return 0 ; } else if ( b == maksimal ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , postotak ) ; } else if ( s == maksimal ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , postotak ) ; } else if ( v == maksimal ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , postotak ) ; } else { printf ( ""najpopularnija boja je plava (%.2f%%)."" , postotak ) ; } return 0 ; }"
2048,48,48,0,40,A2016/Z3/Z1/student6053,A2016/Z3/Z1/student4471,"#include <stdio.h> int daj_prost ( ) { static int a = 1 ; int i , prost_br = 0 ; a ++ ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { prost_br = 1 ; break ; } } if ( prost_br == 0 ) { return a ; } else { return daj_prost ( ) ; } } int main ( ) { int a ; int b ; int i ; int suma = 0 ; int br ; int element ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; element = a ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( b <= 0 ) { printf ( ""a nije manje od b.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a >= b || a <= 0 || b <= 0 ) ; while ( 1 ) { br = daj_prost ( ) ; if ( br > a && br < b ) suma += br ; if ( br >= b ) break ; i ++ ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , element , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i , prost = 1 ; static int broj = 1 ; broj ++ ; for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost == 1 ) { return broj ; } else { return daj_prost ( ) ; } } int main ( ) { int a , b , suma = 0 , i , clan ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } else if ( ( a <= 0 && b <= 0 ) || a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( b <= 0 ) { printf ( ""b nije prirodan broj.\n"" ) ; } } while ( a >= b || a <= 0 || b <= 0 ) ; while ( 1 ) { clan = daj_prost ( ) ; if ( clan > a && clan < b ) { suma += clan ; } if ( clan >= b ) { break ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2053,31,31,0,78,A2016/Z5/Z3/student9972,A2016/Z5/Z3/student6548,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { int ima = 0 ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } void ispisreda ( ) { printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       pet       sub"" ) ; printf ( ""\n"" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , max = 0 , min = 100 ; int indexmaxa = 0 ; ispisreda ( ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; int x ; int s , dan , n ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { s = raspored [ k ] . pocetak . sati ; dan = raspored [ k ] . dan_u_sedmici ; n = raspored [ k ] . kraj . sati ; if ( s <= i && dan == j && n >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) for ( x = 0 ; x < 10 ; x ++ ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:%02d)"" , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; } } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j , brojac = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; brojac ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; if ( brojac > 0 ) break ; } } } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 && cas . kraj . minute + cas . kraj . sati * 60 > minkraj1 || raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . kraj . minute + cas . kraj . sati * 60 && minkraj1 > cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; struct cas cc ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } if ( preklop == 1 ) continue ; } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; int broj = opcija ; switch ( opcija ) { case 0 : { zapisi_datoteku ( raspored , broj_casova ) ; break ; } case 1 : { if ( broj != 0 ) ispis_rasporeda ( raspored , broj_casova ) ; break ; } case 2 : if ( broj != 0 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; if ( broj != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; if ( vr == 1 ) broj_casova ++ ; break ; } case 4 : if ( broj != 0 ) { int dan , redni ; int br = broj_casova ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , br , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , br , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } case 3 : if ( broj != 0 ) { struct cas promjena ; int dan , redni ; char * q , * p ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; ocisti ( unesi ( predmet , 10 ) ) ; q = promjena . predmet ; p = predmet ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . pocetak . sati , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; break ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int vel = velicina ; int i = 0 , k = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel && znak != '\n' ) { niz [ i ] = znak ; i ++ ; k ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void cln ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } void isp ( int vel ) { int x ; int veli = vel / 2 ; for ( x = 0 ; x < veli ; x ++ ) printf ( ""  "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , max = 0 , min = 100 ; int indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       "" ) ; printf ( ""pet       sub\n"" ) ; int mintt = 0 ; int indexpamtimo ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; mintt = raspored [ i ] . kraj . minute ; indexpamtimo = 1 ; } } int x ; int s , dan , n ; if ( mintt == 0 ) max = max - 1 ; int poc = min ; int kraj = max ; int ukupno = broj_casova ; for ( i = poc ; i <= kraj ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%02d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < ukupno ; k ++ ) { if ( max > 0 ) { dan = raspored [ k ] . dan_u_sedmici ; n = raspored [ k ] . kraj . sati ; if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && n >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } } if ( k == ukupno && ukupno > - 1 ) isp ( 10 ) ; } printf ( ""\n"" ) ; } } void pomispis ( int k , char * s , int sat , int min , int sat1 , int min1 ) { printf ( ""\n%d) %s ("" , k ++ , s ) ; printf ( ""%02d:%02d-"" , sat , min ) ; printf ( ""%02d:%02d)"" , sat1 , min1 ) ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i , k = 1 ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int pocs = raspored [ i ] . pocetak . sati ; int pocm = raspored [ i ] . pocetak . minute ; int krajs = raspored [ i ] . kraj . sati ; int krajm = raspored [ i ] . kraj . minute ; pomispis ( k ++ , raspored [ i ] . predmet , pocs , pocm , krajs , krajm ) ; } } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) return 0 ; int nova = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz1 ) ; if ( nova != zapisano ) return 0 ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , j ; int bezzadnjeg = broj_casova - 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < bezzadnjeg ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; return ; break ; } } } } int poredba ( int p , int d ) { if ( p > d ) return 1 ; if ( p < d ) return - 1 ; if ( p == d ) return 0 ; } int poredi ( struct vrijeme t1 , struct vrijeme t2 , int vel ) { int vr = t1 . sati * vel * vel + t1 . minute * vel + t1 . sekunde , vr2 = t2 . sati * vel * vel + t2 . minute * vel + t2 . sekunde ; return poredba ( vr , vr2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int ima = 0 ; int i , prvi ; for ( i = 0 ; i < broj_casova ; i ++ ) { prvi = poredi ( raspored [ i ] . kraj , cas . pocetak , 60 ) ; if ( prvi == 1 && poredi ( cas . kraj , raspored [ i ] . pocetak , 60 ) == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) ima = 1 ; break ; } return ima ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; int ukupno = 19 - trajanje ; for ( i = 0 ; i < 6 ; i ++ ) { for ( j = 9 ; j <= ukupno ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; struct cas cc ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 1 ) continue ; else { raspored [ broj_casova ] = cas ; goto jedan ; } } } return 0 ; jedan : return 1 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } void mjesto ( int br ) { printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija != 4 && opcija != 3 && opcija != 0 && opcija != 1 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; cln ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) mjesto ( br_casova ) ; if ( vr == 1 ) broj_casova ++ ; } if ( opcija != 0 && opcija != 3 && opcija != 2 && opcija != 1 ) { int dan , redni ; printf ( ""unesite dan "" ) ; printf ( ""1=ponedjeljak, 2=utorak...,6=subota: "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova -- ; printf ( ""cas obrisan\n"" ) ; } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija != 4 && opcija != 3 && opcija != 2 && opcija != 0 ) ; ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija != 4 && opcija != 0 && opcija != 2 && opcija != 1 ) { struct cas promjena ; int dan , redni ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota):"" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; cln ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet ; char * p = predmet ; while ( * q ++ = * p ++ ) ; int prvi = broj_casova ; int drugi = dan ; int treci = redni ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . pocetak . sati , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , prvi , drugi , redni , promjena ) ; } } while ( opcija != 0 ) ; return 0 ; }"
2055,98,98,0,32,A2016/Z2/Z4/student4473,A2016/Z2/Z4/student6516,"#include <stdio.h> int main ( ) { int m , n , i , j , temp = 1 , cir = 1 ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m <= 0 || m >= 101 || n <= 0 || n >= 101 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m >= 101 || n <= 0 || n >= 101 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } { for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) temp = 0 ; } } if ( temp == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) cir = 0 ; } } } if ( temp == 0 ) cir = 0 ; if ( cir == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( temp == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int a , b , i , j , t = 1 , c = 1 ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a <= 0 || a >= 101 || b <= 0 || b >= 101 ) printf ( ""pogresan unos!\n"" ) ; } while ( a <= 0 || a >= 101 || b <= 0 || b >= 101 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } { for ( i = 0 ; i < a - 1 ; i ++ ) { for ( j = 0 ; j < b - 1 ; j ++ ) if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) t = 0 ; } } if ( t == 1 ) { for ( i = 0 ; i < a - 1 ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { if ( mat [ i ] [ b - 1 ] != mat [ i + 1 ] [ 0 ] ) c = 0 ; } } } if ( t == 0 ) c = 0 ; if ( c == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( t == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
2060,98,98,0,134,A2016/Z3/Z2/student3900,A2016/Z3/Z2/student7802,"#include <stdio.h> #include <stdlib.h> int sum ( int p ) { int suma = 0 , broj , zadnji_broj ; broj = p ; if ( broj == 0 ) { suma = 0 ; } else { if ( broj < 0 ) broj = abs ( broj ) ; while ( broj != 0 ) { zadnji_broj = ( broj ) % 10 ; suma = suma + zadnji_broj ; broj = ( broj ) / 10 ; } } return suma ; } int fibonacci ( int a ) { int prvi = 0 , drugi = 1 , sljedeci , i ; for ( i = 0 ; i < a ; i ++ ) { sljedeci = prvi + drugi ; prvi = drugi ; drugi = sljedeci ; if ( sljedeci == a ) { return 1 ; } } return 0 ; } void ubaci ( int * p , int n ) { int * pok , * q , * zadnji , * reset = p ; int i ; pok = p ; pok = p + n - 1 ; zadnji = p + 2 * n - 2 ; for ( i = 0 ; i < n ; i ++ ) { * zadnji = * pok ; zadnji = zadnji - 2 ; pok -- ; } pok = p ; q = p ; for ( i = 0 ; i < 2 * n ; i ++ ) { q = pok - 1 ; if ( i % 2 != 0 ) * pok = sum ( * q ) ; pok ++ ; } } int izbaci ( int * p , int velicina ) { int i , j , niz [ 20 ] , * q = p ; for ( i = 0 ; i < velicina ; i ++ ) { niz [ i ] = * p ; p ++ ; } for ( i = 0 ; i < velicina ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } p = q ; for ( i = 0 ; i < velicina ; i ++ ) { * p = niz [ i ] ; p ++ ; } return velicina ; } int main ( ) { int k , n = 10 , niz [ 20 ] , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; k = izbaci ( niz , 2 * n ) ; if ( k == 0 ) { printf ( ""prazan niz"" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < k ; i ++ ) { if ( i == k - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int p ) { int suma = 0 , broj , zadnji_broj ; broj = p ; if ( broj == 0 ) { suma = 0 ; } else { if ( broj < 0 ) broj = abs ( broj ) ; while ( broj != 0 ) { zadnji_broj = ( broj ) % 10 ; suma = suma + zadnji_broj ; broj = ( broj ) / 10 ; } } return suma ; } int fibonacci ( int a ) { int prvi = 0 , drugi = 1 , sljedeci , i ; for ( i = 0 ; i < a ; i ++ ) { sljedeci = prvi + drugi ; prvi = drugi ; drugi = sljedeci ; if ( sljedeci == a ) { return 1 ; } } return 0 ; } void ubaci ( int * p , int n ) { int * pok , * q , * zadnji , * reset = p ; int i ; pok = p ; pok = p + n - 1 ; zadnji = p + 2 * n - 2 ; for ( i = 0 ; i < n ; i ++ ) { * zadnji = * pok ; zadnji = zadnji - 2 ; pok -- ; } pok = p ; q = p ; for ( i = 0 ; i < 2 * n ; i ++ ) { q = pok - 1 ; if ( i % 2 != 0 ) * pok = sum ( * q ) ; pok ++ ; } } int izbaci ( int * p , int velicina ) { int i , j , niz [ 20 ] , * q = p ; for ( i = 0 ; i < velicina ; i ++ ) { niz [ i ] = * p ; p ++ ; } for ( i = 0 ; i < velicina ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } p = q ; for ( i = 0 ; i < velicina ; i ++ ) { * p = niz [ i ] ; p ++ ; } return velicina ; } int main ( ) { int k , n = 10 , niz [ 20 ] , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; k = izbaci ( niz , 2 * n ) ; if ( k == 0 ) { printf ( ""prazan niz"" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < k ; i ++ ) { if ( i == k - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }"
2064,61,61,0,68,A2016/Z3/Z2/student8797,A2016/Z3/Z2/student4495,"#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * p , int duzina ) { int * pomp = p ; int * pomp2 ; int clan = 0 ; int k = 0 ; int broj ; while ( pomp < p + 2 * duzina ) { broj = abs ( * pomp ) ; while ( broj ) { clan = clan + broj % 10 ; broj = broj / 10 ; } for ( pomp2 = p + ( duzina + k ) ; pomp2 > pomp ; pomp2 -- ) { * pomp2 = * ( pomp2 - 1 ) ; } k ++ ; pomp ++ ; * pomp = clan ; clan = 0 ; pomp ++ ; } } int fibonaccijeve ( int broj ) { int niz [ 1000 ] ; niz [ 0 ] = 1 ; niz [ 1 ] = 1 ; if ( broj == 1 ) return 1 ; int * pomp1 = niz ; int * pomp2 = niz + 1 ; int * pomp3 = niz + 2 ; while ( 1 ) { * pomp3 = * pomp2 + * pomp1 ; if ( * pomp3 == broj ) return 1 ; if ( * pomp3 > broj ) { return 0 ; } pomp1 ++ ; pomp2 ++ ; pomp3 ++ ; } } int izbaci ( int * p , int duzina ) { int * pomp = p ; int * pomp2 ; int broj ; while ( pomp < p + duzina ) { broj = * pomp ; broj = fibonaccijeve ( broj ) ; if ( broj == 1 ) { for ( pomp2 = pomp ; pomp2 < p + duzina - 1 ; pomp2 ++ ) { * pomp2 = * ( pomp2 + 1 ) ; } duzina -- ; pomp -- ; } pomp ++ ; } return duzina ; } int main ( ) { int i , n ; int niz [ 100 ] ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == n - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int * clan ; clan = niz ; while ( clan < niz + vel ) { int suma_c = 0 ; int clan_niza = abs ( * clan ) ; while ( clan_niza != 0 ) { suma_c = suma_c + ( clan_niza % 10 ) ; clan_niza = clan_niza / 10 ; } int * temp_p ; temp_p = niz + vel ; while ( temp_p > clan ) { * temp_p = * ( temp_p - 1 ) ; temp_p -- ; } * ( clan + 1 ) = suma_c ; clan = clan + 2 ; vel ++ ; } } int fibonacci ( int br ) { int niz [ 1000 ] ; niz [ 0 ] = 1 ; niz [ 1 ] = 1 ; if ( br == 1 ) return 1 ; int * p1 = niz ; int * p2 = niz + 1 ; int * p3 = niz + 2 ; while ( 1 ) { * p3 = * p2 + * p1 ; if ( * p3 == br ) return 1 ; if ( * p3 > br ) return 0 ; p1 ++ ; p2 ++ ; p3 ++ ; } } int izbaci ( int * p , int vel ) { int * niz = p ; int br ; int * temp_p ; while ( niz < p + vel ) { br = * niz ; br = fibonacci ( br ) ; if ( br == 1 ) { for ( temp_p = niz ; temp_p < p + vel - 1 ; temp_p ++ ) { * temp_p = * ( temp_p + 1 ) ; } vel -- ; niz -- ; } niz ++ ; } return vel ; } int main ( ) { int niz [ 100 ] , i , izbaceni ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; izbaceni = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izbaceni ; i ++ ) { if ( i < izbaceni - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }"
2066,89,89,0,51,A2016/Z3/Z3/student7425,A2016/Z3/Z3/student5624,"#include <stdio.h> int main ( ) { int m , n , matrix [ 200 ] [ 200 ] , i , j , k , l , z , br = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrix [ i ] [ j ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { br = 1 ; for ( j = 0 ; j < n ; j ++ ) if ( matrix [ i ] [ j ] != matrix [ k ] [ j ] ) br = 0 ; if ( br == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) for ( z = 0 ; z < n ; z ++ ) matrix [ l ] [ z ] = matrix [ l + 1 ] [ z ] ; m -- ; k -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { br = 1 ; for ( j = 0 ; j < m ; j ++ ) if ( matrix [ j ] [ i ] != matrix [ j ] [ k ] ) br = 0 ; if ( br == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) for ( z = 0 ; z < m ; z ++ ) matrix [ z ] [ l ] = matrix [ z ] [ l + 1 ] ; n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrix [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , i , j , k , l , m , n , pret , pret1 , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) matrica [ l ] [ p ] = matrica [ l + 1 ] [ p ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { pret1 = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( matrica [ j ] [ i ] != matrica [ j ] [ k ] ) pret1 = 0 ; } if ( pret1 == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) matrica [ p ] [ l ] = matrica [ p ] [ l + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
2069,99,99,0,136,A2016/Z1/Z1/student2886,A2016/Z1/Z1/student2197,"#include <stdio.h> int main ( ) { double ppi1 , ppi2 , ppi3 , dpi1 , dpi2 , dpi3 , p1 , p2 , p3 , z1 , z2 , z3 , zi1 , zi2 , zi3 , ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ppi1 ) ; if ( ppi1 < 0 || ppi1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dpi1 ) ; } if ( dpi1 < 0 || dpi1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p1 ) ; } if ( p1 < 0 || p1 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z1 ) ; } if ( z1 < 0 || z1 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi1 ) ; } if ( zi1 < 0 || zi1 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ppi2 ) ; if ( ppi2 < 0 || ppi2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dpi2 ) ; } if ( dpi2 < 0 || dpi2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p2 ) ; } if ( p2 < 0 || p2 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z2 ) ; } if ( z2 < 0 || z2 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi2 ) ; } if ( zi2 < 0 || zi2 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ppi3 ) ; if ( ppi3 < 0 || ppi3 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dpi3 ) ; } if ( dpi3 < 0 || dpi3 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p3 ) ; } if ( p3 < 0 || p3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z3 ) ; } if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi3 ) ; } if ( zi3 < 0 || zi3 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi1 + dpi1 + p1 + z1 + zi1 < 65 ) { ot = 6 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 65 && ppi1 + dpi1 + p1 + z1 + zi1 < 75 ) { ot = 7 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 75 && ppi1 + dpi1 + p1 + z1 + zi1 < 85 ) { ot = 8 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 85 && ppi1 + dpi1 + p1 + z1 + zi1 < 92 ) { ot = 9 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 92 && ppi1 + dpi1 + p1 + z1 + zi1 <= 100 ) { ot = 10 ; } if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 65 ) { ob = 6 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 65 && ppi2 + dpi2 + p2 + z2 + zi2 < 75 ) { ob = 7 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 75 && ppi2 + dpi2 + p2 + z2 + zi2 < 85 ) { ob = 8 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 85 && ppi2 + dpi2 + p2 + z2 + zi2 < 92 ) { ob = 9 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 92 && ppi2 + dpi2 + p2 + z2 + zi2 <= 100 ) { ob = 10 ; } if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 65 ) { om = 6 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 65 && ppi3 + dpi3 + p3 + z3 + zi3 < 75 ) { om = 7 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 75 && ppi3 + dpi3 + p3 + z3 + zi3 < 85 ) { om = 8 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 85 && ppi3 + dpi3 + p3 + z3 + zi3 < 92 ) { om = 9 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 92 && ppi3 + dpi3 + p3 + z3 + zi3 <= 100 ) { om = 10 ; } if ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) printf ( ""nijedan student nije polozio.\n"" ) ; else if ( ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) ) printf ( ""jedan student je polozio.\n"" ) ; else if ( ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) ) printf ( ""dva studenta su polozila.\n"" ) ; else if ( ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) ) printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) { if ( ot == ob && ob == om ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( ot == ob && ot != om ) || ( ob == om && ob != ot ) || ( ot == om && om != ob ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( ot != ob && ot != om && ob != om ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } return 0 ; } }","#include <stdio.h> int main ( ) { double ppi1 , ppi2 , ppi3 , dpi1 , dpi2 , dpi3 , p1 , p2 , p3 , z1 , z2 , z3 , zi1 , zi2 , zi3 , ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ppi1 ) ; if ( ppi1 < 0 || ppi1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dpi1 ) ; } if ( dpi1 < 0 || dpi1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p1 ) ; } if ( p1 < 0 || p1 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z1 ) ; } if ( z1 < 0 || z1 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi1 ) ; } if ( zi1 < 0 || zi1 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ppi2 ) ; if ( ppi2 < 0 || ppi2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dpi2 ) ; } if ( dpi2 < 0 || dpi2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p2 ) ; } if ( p2 < 0 || p2 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z2 ) ; } if ( z2 < 0 || z2 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi2 ) ; } if ( zi2 < 0 || zi2 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ppi3 ) ; if ( ppi3 < 0 || ppi3 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & dpi3 ) ; } if ( dpi3 < 0 || dpi3 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p3 ) ; } if ( p3 < 0 || p3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z3 ) ; } if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } else { printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi3 ) ; } if ( zi3 < 0 || zi3 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi1 + dpi1 + p1 + z1 + zi1 < 65 ) { ot = 6 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 65 && ppi1 + dpi1 + p1 + z1 + zi1 < 75 ) { ot = 7 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 75 && ppi1 + dpi1 + p1 + z1 + zi1 < 85 ) { ot = 8 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 85 && ppi1 + dpi1 + p1 + z1 + zi1 < 92 ) { ot = 9 ; } else if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 92 && ppi1 + dpi1 + p1 + z1 + zi1 <= 100 ) { ot = 10 ; } if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 65 ) { ob = 6 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 65 && ppi2 + dpi2 + p2 + z2 + zi2 < 75 ) { ob = 7 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 75 && ppi2 + dpi2 + p2 + z2 + zi2 < 85 ) { ob = 8 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 85 && ppi2 + dpi2 + p2 + z2 + zi2 < 92 ) { ob = 9 ; } else if ( ppi2 + dpi2 + p2 + z2 + zi2 >= 92 && ppi2 + dpi2 + p2 + z2 + zi2 <= 100 ) { ob = 10 ; } if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 65 ) { om = 6 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 65 && ppi3 + dpi3 + p3 + z3 + zi3 < 75 ) { om = 7 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 75 && ppi3 + dpi3 + p3 + z3 + zi3 < 85 ) { om = 8 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 85 && ppi3 + dpi3 + p3 + z3 + zi3 < 92 ) { om = 9 ; } else if ( ppi3 + dpi3 + p3 + z3 + zi3 >= 92 && ppi3 + dpi3 + p3 + z3 + zi3 <= 100 ) { om = 10 ; } if ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) printf ( ""nijedan student nije polozio.\n"" ) ; else if ( ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) ) printf ( ""jedan student je polozio.\n"" ) ; else if ( ( ppi1 + dpi1 + p1 + z1 + zi1 < 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 < 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) || ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 < 55 ) ) printf ( ""dva studenta su polozila.\n"" ) ; else if ( ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) ) printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ppi1 + dpi1 + p1 + z1 + zi1 >= 55 && ppi2 + dpi2 + p2 + z2 + zi2 >= 55 && ppi3 + dpi3 + p3 + z3 + zi3 >= 55 ) { if ( ot == ob && ob == om ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( ot == ob && ot != om ) || ( ob == om && ob != ot ) || ( ot == om && om != ob ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( ot != ob && ot != om && ob != om ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } return 0 ; } }"
2077,99,99,0,130,A2016/Z4/Z2/student2351,A2016/Z4/Z2/student7180,"#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }","#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }"
2080,92,92,0,16,A2016/Z2/Z1/student1476,A2016/Z2/Z1/student5496,"#include <stdio.h> #include <math.h> int main ( ) { int n , c1 , c2 ; int k = 1 ; int s = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = fabs ( n ) ; while ( n >= 10 ) { c1 = n % 10 ; c2 = ( n / 10 ) % 10 ; s += fabs ( ( c1 - c2 ) * k ) ; k *= 10 ; n /= 10 ; } printf ( ""%d"" , s ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { int n , c1 , c2 ; int k = 1 ; int s = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = fabs ( n ) ; while ( n >= 10 ) { c1 = n % 10 ; c2 = ( n / 10 ) % 10 ; s += fabs ( ( c1 - c2 ) * k ) ; k *= 10 ; n /= 10 ; } printf ( ""%d"" , s ) ; return 0 ; }"
2082,99,99,0,89,A2016/Z5/Z1/student8004,A2016/Z5/Z1/student5468,"#include <stdio.h> #include <string.h> #define epsilon 0.00001 void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\0' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int genijalci ( struct student * studenti , int vel , float prosjek ) { int i , j , suma_ocjena = 0 , logicki_prosjek , broj_studenta [ 3 ] = { 0 } ; float pojedinacni_prosjek = 5.0 , max [ 3 ] = { 0 } ; for ( i = 0 ; i < vel ; i ++ ) { suma_ocjena = 0 ; logicki_prosjek = 1 ; if ( studenti [ i ] . br_ocjena == 0 ) { pojedinacni_prosjek = 5.0 ; logicki_prosjek = 0 ; } for ( j = 0 ; j < studenti [ i ] . br_ocjena ; j ++ ) { if ( studenti [ i ] . ocjene [ j ] == 5 ) { logicki_prosjek = 0 ; pojedinacni_prosjek = 5.0 ; break ; } else suma_ocjena += studenti [ i ] . ocjene [ j ] ; } if ( logicki_prosjek ) pojedinacni_prosjek = ( float ) suma_ocjena / studenti [ i ] . br_ocjena ; if ( pojedinacni_prosjek < prosjek ) { for ( j = i ; j < vel - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } vel -- ; i -- ; continue ; } if ( pojedinacni_prosjek > max [ 0 ] || ( pojedinacni_prosjek == max [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 0 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 0 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 0 ] ] . ime ) < 0 ) ) { max [ 2 ] = max [ 1 ] ; max [ 1 ] = max [ 0 ] ; max [ 0 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = broj_studenta [ 1 ] ; broj_studenta [ 1 ] = broj_studenta [ 0 ] ; broj_studenta [ 0 ] = i ; } else if ( pojedinacni_prosjek > max [ 1 ] || ( pojedinacni_prosjek == max [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 1 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 1 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 1 ] ] . ime ) < 0 ) ) { max [ 2 ] = max [ 1 ] ; max [ 1 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = broj_studenta [ 1 ] ; broj_studenta [ 1 ] = i ; } else if ( pojedinacni_prosjek > max [ 2 ] || ( pojedinacni_prosjek == max [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 2 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 2 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 2 ] ] . ime ) < 0 ) ) { max [ 2 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = i ; } } if ( max [ 0 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 0 ] ] . prezime , studenti [ broj_studenta [ 0 ] ] . ime ) ; if ( max [ 1 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 1 ] ] . prezime , studenti [ broj_studenta [ 1 ] ] . ime ) ; if ( max [ 2 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 2 ] ] . prezime , studenti [ broj_studenta [ 2 ] ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ 100 ] ; int i = 0 , prekid ; do { printf ( ""unesite ime i prezime studenta %d: "" , i + 1 ) ; unesi ( studenti [ i ] . ime , 20 ) ; unesi ( studenti [ i ] . prezime , 20 ) ; i ++ ; printf ( ""ako ste zavrsili sa unosom studenata pritisnite 0, ako ne onda 1."" ) ; scanf ( ""%d"" , & prekid ) ; } while ( i < 100 && prekid ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define epsilon 0.00001 void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\0' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int genijalci ( struct student * studenti , int vel , float prosjek ) { int i , j , suma_ocjena = 0 , logicki_prosjek , broj_studenta [ 3 ] = { 0 } ; float pojedinacni_prosjek = 5.0 , max [ 3 ] = { 0 } ; for ( i = 0 ; i < vel ; i ++ ) { suma_ocjena = 0 ; logicki_prosjek = 1 ; if ( studenti [ i ] . br_ocjena == 0 ) { pojedinacni_prosjek = 5.0 ; logicki_prosjek = 0 ; } for ( j = 0 ; j < studenti [ i ] . br_ocjena ; j ++ ) { if ( studenti [ i ] . ocjene [ j ] == 5 ) { logicki_prosjek = 0 ; pojedinacni_prosjek = 5.0 ; break ; } else suma_ocjena += studenti [ i ] . ocjene [ j ] ; } if ( logicki_prosjek ) pojedinacni_prosjek = ( float ) suma_ocjena / studenti [ i ] . br_ocjena ; if ( pojedinacni_prosjek < prosjek ) { for ( j = i ; j < vel - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } vel -- ; i -- ; continue ; } if ( pojedinacni_prosjek > max [ 0 ] || ( pojedinacni_prosjek == max [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 0 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 0 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 0 ] ] . ime ) < 0 ) ) { max [ 2 ] = max [ 1 ] ; max [ 1 ] = max [ 0 ] ; max [ 0 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = broj_studenta [ 1 ] ; broj_studenta [ 1 ] = broj_studenta [ 0 ] ; broj_studenta [ 0 ] = i ; } else if ( pojedinacni_prosjek > max [ 1 ] || ( pojedinacni_prosjek == max [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 1 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 1 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 1 ] ] . ime ) < 0 ) ) { max [ 2 ] = max [ 1 ] ; max [ 1 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = broj_studenta [ 1 ] ; broj_studenta [ 1 ] = i ; } else if ( pojedinacni_prosjek > max [ 2 ] || ( pojedinacni_prosjek == max [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 2 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 2 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 2 ] ] . ime ) < 0 ) ) { max [ 2 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = i ; } } if ( max [ 0 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 0 ] ] . prezime , studenti [ broj_studenta [ 0 ] ] . ime ) ; if ( max [ 1 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 1 ] ] . prezime , studenti [ broj_studenta [ 1 ] ] . ime ) ; if ( max [ 2 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 2 ] ] . prezime , studenti [ broj_studenta [ 2 ] ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ 100 ] ; int i = 0 , prekid ; do { printf ( ""unesite ime i prezime studenta %d: "" , i + 1 ) ; unesi ( studenti [ i ] . ime , 20 ) ; unesi ( studenti [ i ] . prezime , 20 ) ; i ++ ; printf ( ""ako ste zavrsili sa unosom studenata pritisnite 0, ako ne onda 1."" ) ; scanf ( ""%d"" , & prekid ) ; } while ( i < 100 && prekid ) ; return 0 ; }"
2084,99,99,0,108,A2016/Z4/Z1/student5744,A2016/Z4/Z1/student2675,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int broj [ 1000 ] = { 0 } , i = 0 , j , k , l , t , broj_rijeci , max , maxi ; char rijeci [ 1000 ] [ 1000 ] = { { 0 } } ; char * pom = s ; char * poc ; char * kraj ; while ( * s != '\0' ) { while ( ( * s < 'a' || ( * s > 'z' && * s < 'a' ) || * s > 'z' ) && * s != '\0' ) { s ++ ; } j = 0 ; while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) { rijeci [ i ] [ j ] = * s ; j ++ ; s ++ ; } rijeci [ i ] [ j ] = '\0' ; i ++ ; if ( * s != '\0' ) s ++ ; } broj_rijeci = i ; s = pom ; for ( i = 0 ; i < broj_rijeci - 1 ; i ++ ) { for ( k = i + 1 ; k < broj_rijeci ; k ++ ) { t = 1 ; for ( j = 0 ; rijeci [ k ] [ j ] != '\0' && rijeci [ i ] [ j ] != '\0' ; j ++ ) { if ( rijeci [ k ] [ j ] != rijeci [ i ] [ j ] && rijeci [ k ] [ j ] != rijeci [ i ] [ j ] + 32 && rijeci [ k ] [ j ] != rijeci [ i ] [ j ] - 32 ) { t = 0 ; break ; } } if ( rijeci [ i ] [ j ] != '\0' || rijeci [ k ] [ j ] != '\0' ) t = 0 ; if ( t ) { broj [ i ] ++ ; for ( l = k ; l < broj_rijeci ; l ++ ) { for ( j = 0 ; rijeci [ l + 1 ] [ j ] != '\0' ; j ++ ) { rijeci [ l ] [ j ] = rijeci [ l + 1 ] [ j ] ; } rijeci [ l ] [ j ] = '\0' ; } broj_rijeci -- ; k -- ; } } } maxi = 0 ; max = broj [ 0 ] ; for ( i = 1 ; i < broj_rijeci ; i ++ ) { if ( broj [ i ] > max ) { max = broj [ i ] ; maxi = i ; } } s = pom ; while ( * s != '\0' ) { while ( ( * s < 'a' || ( * s > 'z' && * s < 'a' ) || * s > 'z' ) && * s != '\0' ) { s ++ ; } j = 0 ; t = 1 ; poc = s ; kraj = s ; for ( j = 0 ; rijeci [ maxi ] [ j ] != '\0' && ( ( * kraj >= 'a' && * kraj <= 'z' ) || ( * kraj >= 'a' && * kraj <= 'z' ) ) ; j ++ , kraj ++ ) { if ( rijeci [ maxi ] [ j ] != * kraj && rijeci [ maxi ] [ j ] != ( * kraj ) + 32 && rijeci [ maxi ] [ j ] != ( * kraj ) - 32 ) { t = 0 ; } } if ( rijeci [ maxi ] [ j ] != '\0' ) t = 0 ; if ( ( * kraj >= 'a' && * kraj <= 'z' ) || ( * kraj >= 'a' && * kraj <= 'z' ) ) t = 0 ; if ( t ) { while ( * kraj != '\0' ) { * ( poc ++ ) = * ( kraj ++ ) ; } * poc = '\0' ; } while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) s ++ ; } return pom ; } int main ( ) { char t [ ] = ""ss ss ss ss s s s s s s s s "" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }","#include <stdio.h> char * izbaci_najcescu ( char * s ) { int broj [ 1000 ] = { 0 } , i = 0 , j , k , l , t , broj_rijeci , max , maxi ; char rijeci [ 1000 ] [ 1000 ] = { { 0 } } ; char * pom = s ; char * poc ; char * kraj ; while ( * s != '\0' ) { while ( ( * s < 'a' || ( * s > 'z' && * s < 'a' ) || * s > 'z' ) && * s != '\0' ) { s ++ ; } j = 0 ; while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) { rijeci [ i ] [ j ] = * s ; j ++ ; s ++ ; } rijeci [ i ] [ j ] = '\0' ; i ++ ; if ( * s != '\0' ) s ++ ; } broj_rijeci = i ; s = pom ; for ( i = 0 ; i < broj_rijeci - 1 ; i ++ ) { for ( k = i + 1 ; k < broj_rijeci ; k ++ ) { t = 1 ; for ( j = 0 ; rijeci [ k ] [ j ] != '\0' && rijeci [ i ] [ j ] != '\0' ; j ++ ) { if ( rijeci [ k ] [ j ] != rijeci [ i ] [ j ] && rijeci [ k ] [ j ] != rijeci [ i ] [ j ] + 32 && rijeci [ k ] [ j ] != rijeci [ i ] [ j ] - 32 ) { t = 0 ; break ; } } if ( rijeci [ i ] [ j ] != '\0' || rijeci [ k ] [ j ] != '\0' ) t = 0 ; if ( t ) { broj [ i ] ++ ; for ( l = k ; l < broj_rijeci ; l ++ ) { for ( j = 0 ; rijeci [ l + 1 ] [ j ] != '\0' ; j ++ ) { rijeci [ l ] [ j ] = rijeci [ l + 1 ] [ j ] ; } rijeci [ l ] [ j ] = '\0' ; } broj_rijeci -- ; k -- ; } } } maxi = 0 ; max = broj [ 0 ] ; for ( i = 1 ; i < broj_rijeci ; i ++ ) { if ( broj [ i ] > max ) { max = broj [ i ] ; maxi = i ; } } s = pom ; while ( * s != '\0' ) { while ( ( * s < 'a' || ( * s > 'z' && * s < 'a' ) || * s > 'z' ) && * s != '\0' ) { s ++ ; } j = 0 ; t = 1 ; poc = s ; kraj = s ; for ( j = 0 ; rijeci [ maxi ] [ j ] != '\0' && ( ( * kraj >= 'a' && * kraj <= 'z' ) || ( * kraj >= 'a' && * kraj <= 'z' ) ) ; j ++ , kraj ++ ) { if ( rijeci [ maxi ] [ j ] != * kraj && rijeci [ maxi ] [ j ] != ( * kraj ) + 32 && rijeci [ maxi ] [ j ] != ( * kraj ) - 32 ) { t = 0 ; } } if ( rijeci [ maxi ] [ j ] != '\0' ) t = 0 ; if ( ( * kraj >= 'a' && * kraj <= 'z' ) || ( * kraj >= 'a' && * kraj <= 'z' ) ) t = 0 ; if ( t ) { while ( * kraj != '\0' ) { * ( poc ++ ) = * ( kraj ++ ) ; } * poc = '\0' ; } while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) s ++ ; } return pom ; } int main ( ) { char t [ ] = ""ss ss ss ss s s s s s s s s "" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
2085,26,26,0,24,A2016/Z5/Z1/student1542,A2016/Z5/Z1/student8357,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } float prosjek ( int niz [ ] , int velicina ) { int i , suma = 0 ; float pr ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] == 5 || velicina == 0 ) return 5 ; suma += niz [ i ] ; } pr = ( float ) suma / velicina ; return pr ; } int genijalci ( struct student * niz , int velicina , float pros ) { int i , j , indeks = 0 , indeks2 = 0 , indeks3 = 0 ; float max = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( niz [ i ] . br_ocjena == 0 || prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) < pros ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } if ( velicina == 0 ) return 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks ] . ime , niz [ i ] . ime ) > 0 ) { indeks = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks ] . prezime , niz [ indeks ] . ime ) ; max = 0 ; indeks2 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; else { indeks2 = i ; break ; } } if ( indeks2 == - 1 ) return velicina ; max = prosjek ( niz [ indeks2 ] . ocjene , niz [ indeks2 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks2 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks2 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks2 ] . ime , niz [ i ] . ime ) > 0 ) { indeks2 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks2 ] . prezime , niz [ indeks2 ] . ime ) ; max = 0 ; indeks3 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; else { indeks3 = i ; break ; } } if ( indeks3 == - 1 ) return velicina ; max = prosjek ( niz [ indeks3 ] . ocjene , niz [ indeks3 ] . br_ocjena ) ; for ( i = 0 ; i < velicina ; i ++ ) { if ( i == indeks || i == indeks2 ) continue ; if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > max ) { max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; indeks3 = i ; } else if ( prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) == max ) { if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } else if ( strcmp ( niz [ indeks3 ] . prezime , niz [ i ] . prezime ) == 0 && strcmp ( niz [ indeks3 ] . ime , niz [ i ] . ime ) > 0 ) { indeks3 = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } } } printf ( ""%s %s\n"" , niz [ indeks3 ] . prezime , niz [ indeks3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } return ( float ) suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( strcmp ( pr . prezime , dr . prezime ) > 0 ) return 0 ; else if ( strcmp ( pr . prezime , dr . prezime ) < 0 ) return 1 ; if ( strcmp ( pr . ime , dr . ime ) > 0 ) return 0 ; else if ( strcmp ( pr . ime , dr . ime ) < 0 ) return 1 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { float temp = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp > epsilon ) { min = temp ; indexmin = i ; } } float max = 5 ; if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { int vr = dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ; if ( vr == 1 ) indexprvi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ; if ( vr == 1 ) indexdrugi = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; int vr = dalijeveci ( niz [ i ] , niz [ indextreci ] ) ; if ( vr == 1 ) indextreci = i ; max = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; } if ( i > 0 ) printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""eso"" , ""esic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }"
2087,99,99,0,77,A2016/Z3/Z3/student2111,A2016/Z3/Z3/student7165,"#include <stdio.h> int main ( ) { int nesto = 0 ; int isti = 1 ; int matrica [ 20 ] [ 20 ] ; int broj_redova , broj_kolona ; int j , k , l , m ; int i = 0 ; do { if ( i == 0 ) { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & broj_redova , & broj_kolona ) ; i = 5 ; } else { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & broj_redova , & broj_kolona ) ; } } while ( broj_redova <= 0 || broj_kolona <= 0 || broj_kolona > 200 || broj_redova > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < broj_redova ; i ++ ) { for ( j = 0 ; j < broj_kolona ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < broj_redova ; i ++ ) { for ( k = i + 1 ; k < broj_redova ; k ++ ) { isti = 1 ; for ( j = 0 ; j < broj_kolona ; j ++ ) { if ( ( matrica [ i ] [ j ] ) != ( matrica [ k ] [ j ] ) ) { isti = 0 ; } } if ( isti == 1 ) { for ( j = k ; j < broj_redova ; j ++ ) { for ( l = 0 ; l < broj_kolona ; l ++ ) { matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } } k -- ; broj_redova -- ; } } } for ( i = 0 ; i < broj_kolona - 1 ; i ++ ) { for ( j = i + 1 ; j < broj_kolona ; j ++ ) { isti = 1 ; for ( k = 0 ; k < broj_redova ; k ++ ) { if ( ( matrica [ k ] [ i ] ) != ( matrica [ k ] [ j ] ) ) { isti = 0 ; } } if ( isti == 1 ) { for ( m = j ; m < broj_kolona ; m ++ ) { for ( l = 0 ; l < broj_redova ; l ++ ) { matrica [ l ] [ m ] = matrica [ l ] [ m + 1 ] ; } } j -- ; broj_kolona -- ; } } } for ( i = 0 ; i < broj_redova ; i ++ ) { for ( j = 0 ; j < broj_kolona ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int nesto = 0 ; int isti = 1 ; int matrica [ 20 ] [ 20 ] ; int broj_redova , broj_kolona ; int j , k , l , m ; int i = 0 ; do { if ( i == 0 ) { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & broj_redova , & broj_kolona ) ; i = 5 ; } else { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & broj_redova , & broj_kolona ) ; } } while ( broj_redova <= 0 || broj_kolona <= 0 || broj_kolona > 200 || broj_redova > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < broj_redova ; i ++ ) { for ( j = 0 ; j < broj_kolona ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < broj_redova ; i ++ ) { for ( k = i + 1 ; k < broj_redova ; k ++ ) { isti = 1 ; for ( j = 0 ; j < broj_kolona ; j ++ ) { if ( ( matrica [ i ] [ j ] ) != ( matrica [ k ] [ j ] ) ) { isti = 0 ; } } if ( isti == 1 ) { for ( j = k ; j < broj_redova ; j ++ ) { for ( l = 0 ; l < broj_kolona ; l ++ ) { matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } } k -- ; broj_redova -- ; } } } for ( i = 0 ; i < broj_kolona - 1 ; i ++ ) { for ( j = i + 1 ; j < broj_kolona ; j ++ ) { isti = 1 ; for ( k = 0 ; k < broj_redova ; k ++ ) { if ( ( matrica [ k ] [ i ] ) != ( matrica [ k ] [ j ] ) ) { isti = 0 ; } } if ( isti == 1 ) { for ( m = j ; m < broj_kolona ; m ++ ) { for ( l = 0 ; l < broj_redova ; l ++ ) { matrica [ l ] [ m ] = matrica [ l ] [ m + 1 ] ; } } j -- ; broj_kolona -- ; } } } for ( i = 0 ; i < broj_redova ; i ++ ) { for ( j = 0 ; j < broj_kolona ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2092,98,98,0,46,A2016/Z1/Z4/student3900,A2016/Z1/Z4/student2117,"#include <stdio.h> int main ( ) { float a , a1 , b , c , d , e , f , g , h , i , j , k , l , m , n , o , p , r ; printf ( ""unesite broj n:"" ) ; scanf ( ""%f"" , & a ) ; if ( a <= 0 || a > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n:"" ) ; } while ( a <= 0 || a > 50 ) ; if ( a >= 1 && a <= 50 ) { b = 1 ; k = 1 ; n = 2 * a - 5 ; e = 1 ; m = 2 * a - 5 ; n = a ; printf ( "" "" ) ; for ( a1 = 1 ; a1 <= k ; a1 ++ ) { printf ( ""*"" ) ; } for ( d = 1 ; d <= 2 * a - 3 ; d ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( p = 0 ; p < 2 * a - 3 ; p ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; printf ( ""\n"" ) ; for ( j = 0 ; j < a - 2 ; j ++ ) { for ( f = 0 ; f <= j ; f ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; c = c - 2 ; for ( g = 0 ; g < 2 * g + 1 ; g ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( o = 0 ; o < m ; o ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; } m = m - 2 ; printf ( ""*"" ) ; b ++ ; e ++ ; printf ( ""\n"" ) ; } if ( a > 1 ) { for ( p = 1 ; p < r ; p ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( r = 1 ; r <= 2 * a - 3 ; r ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a , a1 , b , c , d , e , f , g , h , i , j , k , l , m , n , o , p , r ; printf ( ""unesite broj n:"" ) ; scanf ( ""%f"" , & a ) ; if ( a <= 0 || a > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n:"" ) ; } while ( a <= 0 || a > 50 ) ; if ( a >= 1 && a <= 50 ) { b = 1 ; k = 1 ; n = 2 * a - 5 ; e = 1 ; m = 2 * a - 5 ; n = a ; printf ( "" "" ) ; for ( a1 = 1 ; a1 <= k ; a1 ++ ) { printf ( ""*"" ) ; } for ( d = 1 ; d <= 2 * a - 3 ; d ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( p = 0 ; p < 2 * a - 3 ; p ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; printf ( ""\n"" ) ; for ( j = 0 ; j < a - 2 ; j ++ ) { for ( f = 0 ; f <= j ; f ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; c = c - 2 ; for ( g = 0 ; g < 2 * g + 1 ; g ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( o = 0 ; o < m ; o ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; } m = m - 2 ; printf ( ""*"" ) ; b ++ ; e ++ ; printf ( ""\n"" ) ; } if ( a > 1 ) { for ( p = 1 ; p < r ; p ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( r = 1 ; r <= 2 * a - 3 ; r ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; } return 0 ; }"
2097,99,99,0,71,A2016/Z4/Z2/student5957,A2016/Z4/Z2/student6550,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * kodiraj ( char * s , char * sifra ) { char * a , tekst [ 100 ] = """" ; int pomocna = 0 , i = 0 , max = - 1 , j = 0 , k = 0 ; int niz [ 158 ] = { 0 } ; a = s ; while ( * s != '\0' ) { tekst [ k ] = * s ; pomocna = * s ; niz [ pomocna ] ++ ; s ++ ; k ++ ; } for ( k = 0 ; k < 96 ; k ++ ) { for ( i = 32 ; i < 127 ; i ++ ) { if ( niz [ i ] > max ) { max = niz [ i ] ; j = i ; } } if ( max > - 1 ) niz [ j ] = - 1 ; sifra [ k ] = j ; j = 0 ; max = - 1 ; } for ( i = 0 ; tekst [ i ] != '\0' ; i ++ ) { for ( k = 0 ; sifra [ k ] != '\0' ; k ++ ) { if ( sifra [ k ] == tekst [ i ] ) a [ i ] = 126 - k ; } } return a ; } char * dekodiraj ( char * s , char * sifra ) { char tekst [ 100 ] = """" , * a ; int i = 0 , k = 0 ; a = s ; while ( * s != '\0' ) { tekst [ k ] = * s ; s ++ ; k ++ ; } for ( i = 0 ; tekst [ i ] != '\0' ; i ++ ) { for ( k = 0 ; sifra [ k ] != '\0' ; k ++ ) { if ( sifra [ 126 - tekst [ i ] ] == sifra [ k ] ) a [ i ] = sifra [ k ] ; } } return a ; } int main ( ) { char tekst [ 100 ] , sifrarnik [ 96 ] = """" ; unesi ( tekst , 100 ) ; kodiraj ( tekst , sifrarnik ) ; dekodiraj ( tekst , sifrarnik ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * kodiraj ( char * s , char * sifra ) { char * a , tekst [ 100 ] = """" ; int pomocna = 0 , i = 0 , max = - 1 , j = 0 , k = 0 ; int niz [ 158 ] = { 0 } ; a = s ; while ( * s != '\0' ) { tekst [ k ] = * s ; pomocna = * s ; niz [ pomocna ] ++ ; s ++ ; k ++ ; } for ( k = 0 ; k < 96 ; k ++ ) { for ( i = 32 ; i < 127 ; i ++ ) { if ( niz [ i ] > max ) { max = niz [ i ] ; j = i ; } } if ( max > - 1 ) niz [ j ] = - 1 ; sifra [ k ] = j ; j = 0 ; max = - 1 ; } for ( i = 0 ; tekst [ i ] != '\0' ; i ++ ) { for ( k = 0 ; sifra [ k ] != '\0' ; k ++ ) { if ( sifra [ k ] == tekst [ i ] ) a [ i ] = 126 - k ; } } return a ; } char * dekodiraj ( char * s , char * sifra ) { char tekst [ 100 ] = """" , * a ; int i = 0 , k = 0 ; a = s ; while ( * s != '\0' ) { tekst [ k ] = * s ; s ++ ; k ++ ; } for ( i = 0 ; tekst [ i ] != '\0' ; i ++ ) { for ( k = 0 ; sifra [ k ] != '\0' ; k ++ ) { if ( sifra [ 126 - tekst [ i ] ] == sifra [ k ] ) a [ i ] = sifra [ k ] ; } } return a ; } int main ( ) { char tekst [ 100 ] , sifrarnik [ 96 ] = """" ; unesi ( tekst , 100 ) ; kodiraj ( tekst , sifrarnik ) ; dekodiraj ( tekst , sifrarnik ) ; return 0 ; }"
2100,61,61,0,26,A2016/Z3/Z1/student2900,A2016/Z3/Z1/student1313,"#include <stdio.h> int daj_prost ( ) { int i ; static int broj = 2 ; while ( 1 ) { int pr = 1 ; for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { pr = 0 ; } } if ( pr == 0 ) { broj ++ ; } else break ; } broj ++ ; return broj - 1 ; } int main ( ) { int a , b ; int suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else break ; } while ( 1 ) ; while ( 1 ) { int temp = daj_prost ( ) ; if ( temp > a && temp < b ) suma += temp ; if ( temp >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int br = 2 ; int i ; while ( 1 ) { int prost = 1 ; for ( i = 2 ; i < br ; i ++ ) { if ( br % i == 0 ) { prost = 0 ; } } if ( prost == 0 ) { br ++ ; } else break ; } br ++ ; return br - 1 ; } int main ( ) { int a , b , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else break ; } while ( 1 ) ; while ( 1 ) { int c ; c = daj_prost ( ) ; if ( c > a && c < b ) suma = suma + c ; if ( c >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2103,77,77,0,39,A2016/Z3/Z1/student7232,A2016/Z3/Z1/student4770,"#include<stdio.h> int daj_prost ( ) { int prost = 1 , n ; static int br = 1 ; while ( 1 ) { br ++ ; if ( br == 2 ) { return br ; } else { for ( n = 2 ; n < br ; n ++ ) { if ( br % n == 0 ) { prost = 0 ; break ; } } if ( prost ) { return br ; } else { prost = 1 ; } } } } int main ( ) { int x , y , zbir = 0 , br = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & x , & y ) ; if ( x < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( x >= y ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( x < 1 || x >= y || y <= 0 ) ; while ( br < y ) { br = daj_prost ( ) ; if ( br > x && br < y ) { zbir += br ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , x , y , zbir ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int prost = 1 ; int i ; static int n = 1 ; while ( 1 ) { n ++ ; if ( n == 2 ) return n ; else { for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prost = 0 ; break ; } } } if ( prost ) return n ; else prost = 1 ; } } int main ( ) { int a , b , suma = 0 , n = 0 ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b."" ) ; if ( a < 1 ) printf ( ""a nije prirodan broj."" ) ; } while ( a >= b || a <= 0 ) ; while ( n < b ) { n = daj_prost ( ) ; if ( n > a && n < b ) { suma += n ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2106,90,90,0,65,A2016/Z3/Z1/student4888,A2016/Z3/Z1/student6995,"#include <stdio.h> int daj_prost ( ) { int i , b = 1 , j ; static int g = 1 ; i = g ; i ++ ; for ( ; b > 0 ; i ++ ) { b = 0 ; for ( j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) b ++ ; } } i -- ; g = i ; return i ; } int main ( ) { int a , b , c = 0 , suma = 0 ; unos : { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( ( int ) a != a || a <= 0 ) { printf ( ""a nije prirodan broj. "" ) ; goto unos ; } if ( a >= b ) { printf ( ""a nije manje od b. "" ) ; goto unos ; } if ( ( int ) b != b || b <= 0 ) { printf ( ""b nije prirodan broj. "" ) ; goto unos ; } } do { suma += c ; do { c = daj_prost ( ) ; } while ( c <= a ) ; } while ( c < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int k , a , e = 1 ; static int r = 1 ; k = r ; k ++ ; for ( ; e > 0 ; k ++ ) { e = 0 ; for ( a = 2 ; a < k ; a ++ ) { if ( k % a == 0 ) e ++ ; } } k -- ; r = k ; return k ; } int main ( ) { int e , f , g = 0 , suma = 0 ; unos : { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d"" , & e ) ; scanf ( ""%d"" , & f ) ; if ( ( int ) e != e || e <= 0 ) { printf ( ""a nije prirodan broj. "" ) ; goto unos ; } if ( e >= f ) { printf ( ""a nije manje od b. "" ) ; goto unos ; } if ( ( int ) f != f || f <= 0 ) { printf ( ""b nije prirodan broj. "" ) ; goto unos ; } } do { suma += g ; do { g = daj_prost ( ) ; } while ( g <= e ) ; } while ( g < f ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , e , f , suma ) ; return 0 ; }"
2118,96,96,0,13,A2016/Z1/Z2/student4903,A2016/Z1/Z2/student5713,"#include <stdio.h> #define epsilon 0.0001 #include <math.h> float a1 , a2 , b1 , b2 , x , y ; int main ( ) { printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( fabs ( a1 - a2 ) < epsilon ) && ( fabs ( b1 - b2 ) < epsilon ) ) { printf ( ""poklapaju se"" ) ; return 0 ; } else if ( fabs ( a1 - a2 ) < epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #define epsilon 0.0001 #include <math.h> float a1 , a2 , b1 , b2 , x , y ; int main ( ) { printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( fabs ( a1 - a2 ) < epsilon ) && ( fabs ( b1 - b2 ) < epsilon ) ) { printf ( ""poklapaju se"" ) ; return 0 ; } else if ( fabs ( a1 - a2 ) < epsilon ) { printf ( ""paralelne su"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
2122,90,90,0,68,A2016/Z3/Z3/student7232,A2016/Z3/Z3/student6999,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , n , m , m , n , x , y , p = 0 , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( n = 0 ; n < m ; n ++ ) { for ( m = 0 ; m < n ; m ++ ) { scanf ( ""%d"" , & mat [ n ] [ m ] ) ; } } for ( n = 0 ; n < m ; n ++ ) { for ( m = n + 1 ; m < m ; m ++ ) { brojac = 0 ; for ( p = 0 ; p < n ; p ++ ) { if ( mat [ n ] [ p ] == mat [ m ] [ p ] ) { brojac ++ ; } if ( brojac == n ) { for ( y = m + 1 ; y < m ; y ++ ) { for ( x = 0 ; x < n ; x ++ ) { temp = mat [ y - 1 ] [ x ] ; mat [ y - 1 ] [ x ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = temp ; } } m -- ; m -- ; } } } } for ( n = 0 ; n < n ; n ++ ) { for ( m = n + 1 ; m < n ; m ++ ) { brojac = 0 ; for ( p = 0 ; p < m ; p ++ ) { if ( mat [ p ] [ n ] == mat [ p ] [ m ] ) { brojac ++ ; } if ( brojac == m ) { for ( y = m + 1 ; y < n ; y ++ ) { for ( x = 0 ; x < m ; x ++ ) { temp = mat [ x ] [ y - 1 ] ; mat [ x ] [ y - 1 ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = temp ; } } n -- ; m -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( n = 0 ; n < m ; n ++ ) { for ( m = 0 ; m < n ; m ++ ) { printf ( ""%5d"" , mat [ n ] [ m ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , m , n , brojac = 0 , k = 0 , x , y , privremena ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( x = j + 1 ; x < m ; x ++ ) { for ( y = 0 ; y < n ; y ++ ) { privremena = mat [ x - 1 ] [ y ] ; mat [ x - 1 ] [ y ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = privremena ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( x = j + 1 ; x < n ; x ++ ) { for ( y = 0 ; y < m ; y ++ ) { privremena = mat [ y ] [ x - 1 ] ; mat [ y ] [ x - 1 ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = privremena ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2123,97,97,0,22,A2016/Z2/Z1/student6151,A2016/Z2/Z1/student9538,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , c , b , broj = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; int k = 1 ; while ( n != 0 ) { c = abs ( n ) % 10 ; n = abs ( n ) / 10 ; if ( n == 0 ) break ; b = abs ( n ) % 10 ; broj = broj + ( abs ( c - b ) * k ) ; k = k * 10 ; } printf ( ""%d"" , broj ) ; return 0 ; }","#include <stdio.h> #include<stdlib.h> int main ( ) { int n , varijabla1 , varijabla2 , br = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; int w = 1 ; while ( n != 0 ) { varijabla1 = abs ( n ) % 10 ; n = abs ( n ) / 10 ; if ( n == 0 ) break ; varijabla2 = abs ( n ) % 10 ; br = br + ( abs ( varijabla1 - varijabla2 ) * w ) ; w = w * 10 ; } printf ( ""%d"" , br ) ; return 0 ; }"
2126,88,88,0,55,A2016/Z3/Z2/student3567,A2016/Z3/Z2/student8357,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define brel 10 #define brel2 20 void ubaci ( int * p , int vel ) { int i , cifra , cifra1 , cifra2 = 0 ; for ( i = vel - 1 ; i >= 0 ; i -- ) { * ( p + 2 * i ) = * ( p + i ) ; } for ( i = 0 ; i < vel * 2 ; i ++ ) { if ( i % 2 == 1 ) { cifra = * ( p + i - 1 ) ; while ( cifra != 0 ) { cifra1 = cifra % 10 ; cifra2 += cifra1 ; cifra /= 10 ; } cifra2 = abs ( cifra2 ) ; * ( p + i ) = cifra2 ; cifra2 = 0 ; } } } int izbaci ( int * p , int vel ) { int i , j , k , a = 0 , b = 1 , c ; for ( i = 0 ; i < vel ; i ++ ) { a = 0 ; b = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) c = j ; else { c = a + b ; a = b ; b = c ; } if ( * ( p + i ) == c ) { for ( k = i ; k < vel - 1 ; k ++ ) { * ( p + k ) = * ( p + k + 1 ) ; } vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int niz [ 20 ] , i , g ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , brel ) ; g = izbaci ( niz , brel2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < g ; i ++ ) { if ( i < ( g - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> void ubaci ( int * niz , int velicina ) { int i , cifra , clan , suma = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { clan = * ( niz + i - 1 ) ; while ( clan != 0 ) { cifra = clan % 10 ; suma += cifra ; clan = clan / 10 ; } suma = fabs ( suma ) ; * ( niz + i ) = suma ; suma = 0 ; } } } int izbaci ( int * niz , int velicina ) { int i , j , k , prvi = 0 , drugi = 1 , slijedeci ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) slijedeci = j ; else { slijedeci = prvi + drugi ; prvi = drugi ; drugi = slijedeci ; } if ( * ( niz + i ) == slijedeci ) { for ( k = i ; k < velicina - 1 ; k ++ ) { * ( niz + k ) = * ( niz + k + 1 ) ; } velicina -- ; i -- ; break ; } } } } int main ( ) { int niz [ 20 ] , i , y , velicina1 = 10 , velicina2 = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina1 ) ; y = izbaci ( niz , velicina2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < y ; i ++ ) { if ( i < ( y - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }"
2136,74,74,0,37,A2016/Z3/Z1/student1422,A2016/Z3/Z1/student8753,"#include <stdio.h> int daj_prost ( ) { static int a = 1 ; int i , prost ; do { a ++ ; prost = 1 ; if ( a == 2 ) break ; else { for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { prost = 0 ; break ; } } } } while ( prost == 0 ) ; return a ; } int main ( ) { int a = 0 , b = 0 , suma = 0 , y = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a > 0 && b > 0 && a < b ) break ; else if ( a < 0 || a == 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a == b || b < a ) printf ( ""a nije manje od b.\n"" ) ; } while ( 1 ) ; while ( 1 ) { y = daj_prost ( ) ; if ( y <= a ) continue ; else if ( y >= b ) break ; else if ( y > a && y < b ) suma += y ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int x = 1 ; int i , prost ; do { x ++ ; prost = 1 ; if ( x == 2 ) break ; else { for ( i = 2 ; i < x ; i ++ ) { if ( x % i == 0 ) { prost = 0 ; break ; } } } } while ( prost == 0 ) ; return x ; } int main ( ) { int x , y , zbir = 0 , t = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x > 0 && y > 0 && x < y ) break ; else if ( x < 0 || x == 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( x == y || y < x ) printf ( ""a nije manje od b.\n"" ) ; } while ( 1 ) ; while ( t < y ) { t = daj_prost ( ) ; if ( t > x && t < y ) zbir = zbir + t ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , x , y , zbir ) ; return 0 ; }"
2146,99,99,0,228,A2016/Z1/Z1/student7735,A2016/Z1/Z1/student9498,"#include <stdio.h> int main ( ) { double tpp , tdp , tp , tz , tza , bpp , bdp , bp , bz , bza , mpp , mdp , mp , mz , mza , tuk , muk , buk , to , mo , bo ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & tpp ) ; if ( tpp < 0 || tpp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & tdp ) ; if ( tdp < 0 || tdp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & tp ) ; if ( tp < 0 || tp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & tz ) ; if ( tz < 0 || tz > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & tza ) ; if ( tza < 0 || tza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bpp ) ; if ( bpp < 0 || bpp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bdp ) ; if ( bdp < 0 || bdp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp < 0 || bp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bz ) ; if ( bz < 0 || bz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bza ) ; if ( bza < 0 || bza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mpp ) ; if ( mpp < 0 || mpp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mdp ) ; if ( mdp < 0 || mdp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp < 0 || mp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mz ) ; if ( mz < 0 || mz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mza ) ; if ( mza < 0 || mza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tuk = tpp + tdp + tz + tp + tza ; muk = mpp + mdp + mz + mp + mza ; buk = bpp + bdp + bz + bp + bza ; if ( tuk < 55 ) { to = 5 ; } if ( tuk >= 55 && tuk < 65 ) { to = 6 ; } if ( tuk >= 65 && tuk < 75 ) { to = 7 ; } if ( tuk >= 75 && tuk < 85 ) { to = 8 ; } if ( tuk >= 85 && tuk < 92 ) { to = 9 ; } if ( tuk >= 92 && tuk < 100 ) { to = 10 ; } if ( tuk < 55 ) { to = 5 ; } if ( muk >= 55 && muk < 65 ) { mo = 6 ; } if ( muk >= 65 && muk < 75 ) { mo = 7 ; } if ( muk >= 75 && muk < 85 ) { mo = 8 ; } if ( muk >= 85 && muk < 92 ) { mo = 9 ; } if ( muk >= 92 && muk < 100 ) { mo = 10 ; } if ( buk < 55 ) { bo = 5 ; } if ( buk >= 55 && buk < 65 ) { bo = 6 ; } if ( buk >= 65 && buk < 75 ) { bo = 7 ; } if ( buk >= 75 && buk < 85 ) { bo = 8 ; } if ( buk >= 85 && buk < 92 ) { bo = 9 ; } if ( buk >= 92 && buk < 100 ) { bo = 10 ; } if ( ( muk < 55 ) && ( buk < 55 ) && ( tuk < 55 ) ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } else if ( ( muk < 55 ) && ( buk >= 55 ) && ( tuk < 55 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( ( muk >= 55 ) && ( buk < 55 ) && ( tuk < 55 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( ( muk < 55 ) && ( buk < 55 ) && ( tuk >= 55 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( ( muk >= 55 ) && ( buk >= 55 ) && ( tuk < 55 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( ( muk >= 55 ) && ( buk < 55 ) && ( tuk >= 55 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( ( muk < 55 ) && ( buk >= 55 ) && ( tuk >= 55 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( ( tuk >= 55 ) && ( muk >= 55 ) && ( buk >= 55 ) ) { printf ( ""sva tri studenta su polozila.\n"" ) ; } if ( ( mo == bo ) && ( mo == to ) ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( mo == bo ) && ( mo != to ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( mo == to ) && ( mo != bo ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( to == bo ) && ( to != mo ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( to != bo && mo != bo && mo != to ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; return 0 ; } return 0 ; }","#include <stdio.h> int main ( ) { double tpp , tdp , tp , tz , tza , bpp , bdp , bp , bz , bza , mpp , mdp , mp , mz , mza , tuk , muk , buk , to , mo , bo ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & tpp ) ; if ( tpp < 0 || tpp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & tdp ) ; if ( tdp < 0 || tdp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & tp ) ; if ( tp < 0 || tp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & tz ) ; if ( tz < 0 || tz > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & tza ) ; if ( tza < 0 || tza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bpp ) ; if ( bpp < 0 || bpp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bdp ) ; if ( bdp < 0 || bdp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp < 0 || bp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bz ) ; if ( bz < 0 || bz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bza ) ; if ( bza < 0 || bza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mpp ) ; if ( mpp < 0 || mpp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mdp ) ; if ( mdp < 0 || mdp > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp < 0 || mp > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mz ) ; if ( mz < 0 || mz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mza ) ; if ( mza < 0 || mza > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tuk = tpp + tdp + tz + tp + tza ; muk = mpp + mdp + mz + mp + mza ; buk = bpp + bdp + bz + bp + bza ; if ( tuk < 55 ) { to = 5 ; } if ( tuk >= 55 && tuk < 65 ) { to = 6 ; } if ( tuk >= 65 && tuk < 75 ) { to = 7 ; } if ( tuk >= 75 && tuk < 85 ) { to = 8 ; } if ( tuk >= 85 && tuk < 92 ) { to = 9 ; } if ( tuk >= 92 && tuk < 100 ) { to = 10 ; } if ( tuk < 55 ) { to = 5 ; } if ( muk >= 55 && muk < 65 ) { mo = 6 ; } if ( muk >= 65 && muk < 75 ) { mo = 7 ; } if ( muk >= 75 && muk < 85 ) { mo = 8 ; } if ( muk >= 85 && muk < 92 ) { mo = 9 ; } if ( muk >= 92 && muk < 100 ) { mo = 10 ; } if ( buk < 55 ) { bo = 5 ; } if ( buk >= 55 && buk < 65 ) { bo = 6 ; } if ( buk >= 65 && buk < 75 ) { bo = 7 ; } if ( buk >= 75 && buk < 85 ) { bo = 8 ; } if ( buk >= 85 && buk < 92 ) { bo = 9 ; } if ( buk >= 92 && buk < 100 ) { bo = 10 ; } if ( ( muk < 55 ) && ( buk < 55 ) && ( tuk < 55 ) ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } else if ( ( muk < 55 ) && ( buk >= 55 ) && ( tuk < 55 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( ( muk >= 55 ) && ( buk < 55 ) && ( tuk < 55 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( ( muk < 55 ) && ( buk < 55 ) && ( tuk >= 55 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } else if ( ( muk >= 55 ) && ( buk >= 55 ) && ( tuk < 55 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( ( muk >= 55 ) && ( buk < 55 ) && ( tuk >= 55 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( ( muk < 55 ) && ( buk >= 55 ) && ( tuk >= 55 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } else if ( ( tuk >= 55 ) && ( muk >= 55 ) && ( buk >= 55 ) ) { printf ( ""sva tri studenta su polozila.\n"" ) ; } if ( ( mo == bo ) && ( mo == to ) ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( mo == bo ) && ( mo != to ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( mo == to ) && ( mo != bo ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( to == bo ) && ( to != mo ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( to != bo && mo != bo && mo != to ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; return 0 ; } return 0 ; }"
2149,85,85,0,116,A2016/Z2/Z2/student5789,A2016/Z2/Z2/student2585,"#include <stdio.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int stepen = 0 , minuta = 0 , sekunde = 0 ; int i , j , n = 0 ; double radijan , a = 0 , sekunda1 = 0 , sekunda2 = 0 , c = 0 ; radijan = ( float ) 180 / pi ; double niz [ 500 ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] = niz [ i ] * radijan ; } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( niz [ i ] >= 0 ) { a = niz [ i ] ; stepen = ( int ) a ; c = ( a - stepen ) * 60 ; minuta = ( int ) c ; sekunda1 = ( c - minuta ) * 60 ; sekunda2 = ( sekunda1 - ( int ) sekunda1 ) * 10 ; if ( sekunda2 >= 5 ) { sekunde = ( int ) sekunda1 + 1 ; } else { sekunde = ( int ) sekunda1 ; } if ( sekunde == 60 ) { sekunde = 0 ; minuta ++ ; if ( minuta == 60 ) { minuta = 0 ; stepen ++ ; } } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; continue ; } printf ( ""%d stepeni %d minuta %d sekundi \n"" , stepen , minuta , sekunde ) ; } if ( niz [ i ] < 0 ) { a = niz [ i ] ; stepen = ( int ) a ; c = ( a - stepen ) * ( - 1 ) * 60 ; minuta = ( int ) c ; sekunda1 = ( c - minuta ) * 60 ; sekunda2 = ( sekunda1 - ( int ) sekunda1 ) * 10 ; if ( sekunda2 >= 5 ) { sekunde = ( int ) sekunda1 + 1 ; } else { sekunde = ( int ) sekunda1 ; } if ( sekunde == 60 ) { sekunde = 0 ; minuta ++ ; if ( minuta == 60 ) { minuta = 0 ; stepen -- ; } } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; continue ; } printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepen , minuta , sekunde ) ; } } return 0 ; }","#include <stdio.h> #define pi 3.1415926 int main ( ) { int n = 0 , i , j , stepen = 0 , minuta = 0 , sekunde = 0 ; double rad , a = 0 , sekunda = 0 , sekunda1 = 0 , c = 0 ; rad = ( double ) 180 / pi ; double niz [ 500 ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; niz [ i ] = niz [ i ] * rad ; } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( niz [ i ] >= 0 ) { a = niz [ i ] ; stepen = ( int ) a ; c = ( a - stepen ) * 60 ; minuta = ( int ) c ; sekunda = ( c - minuta ) * 60 ; sekunda1 = ( sekunda - ( int ) sekunda ) * 10 ; if ( sekunda1 >= 5 ) { sekunde = ( int ) sekunda + 1 ; } else { sekunde = ( int ) sekunda ; } if ( sekunde == 60 ) { sekunde = 0 ; minuta ++ ; if ( minuta == 60 ) { minuta = 0 ; stepen ++ ; } } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; continue ; } printf ( ""%d stepeni %d minuta %d sekundi \n"" , stepen , minuta , sekunde ) ; } if ( niz [ i ] < 0 ) { a = niz [ i ] ; stepen = ( int ) a ; c = ( a - stepen ) * ( - 1 ) * 60 ; minuta = ( int ) c ; sekunda = ( c - minuta ) * 60 ; sekunda1 = ( sekunda - ( int ) sekunda ) * 10 ; if ( sekunda1 >= 5 ) { sekunde = ( int ) sekunda + 1 ; } else { sekunde = ( int ) sekunda ; } if ( sekunde == 60 ) { sekunde = 0 ; minuta ++ ; if ( minuta == 60 ) { minuta = 0 ; stepen -- ; } } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; continue ; } printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepen , minuta , sekunde ) ; } } return 0 ; }"
2175,22,22,0,60,A2016/Z5/Z3/student8357,A2016/Z5/Z3/student9538,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 , k = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; k ++ ; } niz [ k ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) return 0 ; int kap = kapacitet ; int vel = sizeof ( struct cas ) ; int ucitano ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; fclose ( ulaz ) ; return ucitano ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } void ispisss ( ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; } void ispispr ( char * pr ) { printf ( ""%-10s"" , pr ) ; } void ispispraz ( int d ) { printf ( ""          "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; ispisss ( ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { ispispr ( raspored [ k ] . predmet ) ; break ; ispispraz ( 10 ) ; } if ( k == broj_casova ) ispispraz ( 10 ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int sat = raspored [ i ] . pocetak . sati ; int min = raspored [ i ] . pocetak . minute ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( sat < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , sat ) ; if ( min < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , min ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)\n"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 ; int sat1 = t2 . sati * 3600 ; int min = t1 . minute * 60 ; int min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return - 1 ; if ( d1 == d2 ) return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) == 1 && drugi == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } int prazan ( struct cas cas ) { if ( cas . predmet == """" ) return 0 ; else return 1 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; if ( trajanje < 0 || trajanje > 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; int praz = prazan ( cas ) ; struct cas pom = { """" , 0 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) return 0 ; int kap = broj_casova ; int vel = sizeof ( struct cas ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; return 1 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; char predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, "" ) ; printf ( ""2=utorak..., "" ) ; printf ( ""6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""izaberite koji cas zelite promijeniti:  "" ) ; scanf ( ""%d"" , & redni ) ; if ( redni > 100 || redni < 0 ) goto preskok ; printf ( ""naziv predmeta: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; char * q ; if ( opcija != 0 ) q = promjena . predmet ; char * p ; if ( opcija != 0 ) p = predmet ; preskok : strcpy ( q , p ) ; char znak ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( "" cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { int ima = 0 ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } void ispisreda ( ) { printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       pet       sub"" ) ; printf ( ""\n"" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , max = 0 , min = 100 ; int indexmaxa = 0 ; ispisreda ( ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; int x ; int s , dan , n ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { s = raspored [ k ] . pocetak . sati ; dan = raspored [ k ] . dan_u_sedmici ; n = raspored [ k ] . kraj . sati ; if ( s <= i && dan == j && n >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) for ( x = 0 ; x < 10 ; x ++ ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:%02d)"" , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; } } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j , brojac = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; brojac ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; if ( brojac > 0 ) break ; } } } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 && cas . kraj . minute + cas . kraj . sati * 60 > minkraj1 || raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . kraj . minute + cas . kraj . sati * 60 && minkraj1 > cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; struct cas cc ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } if ( preklop == 1 ) continue ; } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; int broj = opcija ; switch ( opcija ) { case 0 : { zapisi_datoteku ( raspored , broj_casova ) ; break ; } case 1 : { if ( broj != 0 ) ispis_rasporeda ( raspored , broj_casova ) ; break ; } case 2 : if ( broj != 0 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; if ( broj != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; if ( vr == 1 ) broj_casova ++ ; break ; } case 4 : if ( broj != 0 ) { int dan , redni ; int br = broj_casova ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , br , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , br , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } case 3 : if ( broj != 0 ) { struct cas promjena ; int dan , redni ; char * q , * p ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; ocisti ( unesi ( predmet , 10 ) ) ; q = promjena . predmet ; p = predmet ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . pocetak . sati , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; break ; } } } while ( opcija != 0 ) ; return 0 ; }"
2190,89,89,0,72,A2016/Z3/Z3/student7085,A2016/Z3/Z3/student5420,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , l , pret ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m <= 0 || n > 200 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || m <= 0 || n > 200 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ l ] [ j ] = mat [ l + 1 ] [ j ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { pret = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( i = 0 ; i < m ; i ++ ) { mat [ i ] [ l ] = mat [ i ] [ l + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , l , pret ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & mat [ i ] [ j ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret ) { for ( l = k ; l < m ; l ++ ) { for ( j = 0 ; j < n ; j ++ ) mat [ l ] [ j ] = mat [ l + 1 ] [ j ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { pret = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( mat [ j ] [ i ] != mat [ j ] [ k ] ) pret = 0 ; if ( pret ) { for ( l = k ; l < n ; l ++ ) { for ( j = 0 ; j < m ; j ++ ) mat [ j ] [ l ] = mat [ j ] [ l + 1 ] ; } n -- ; k -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2195,90,90,0,60,A2016/Z3/Z3/student3219,A2016/Z3/Z3/student3071,"#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , k , s , counter = 0 , mat [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m < 1 || n > 200 || n < 1 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m > 200 || m < 1 || n > 200 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { counter = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { counter = 0 ; break ; } } if ( counter == 1 ) { for ( s = k ; s < m - 1 ; s ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ s ] [ j ] = mat [ s + 1 ] [ j ] ; } } m -- ; if ( i != 0 || m == 2 ) i -- ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { counter = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) { counter = 0 ; break ; } } if ( counter == 1 ) { for ( s = k ; s < n - 1 ; s ++ ) { for ( i = 0 ; i < m ; i ++ ) { mat [ i ] [ s ] = mat [ i ] [ s + 1 ] ; } } n -- ; if ( j != 0 || n == 2 ) j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2196,99,99,0,56,A2016/Z2/Z2/student8069,A2016/Z2/Z2/student3217,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int st = 0 , m = 0 , s = 0 , n , i , j ; double niz [ 500 ] , us = 0 ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; us = fabs ( niz [ i ] * 180 / pi ) * 3600 ; us = abs ( ( int ) ( us + 0.5 ) ) ; st = ( us / 3600 ) ; m = abs ( ( us - st * 3600 ) / 60 ) ; s = abs ( ( us - st * 3600 - m * 60 ) ) ; if ( s >= 60 ) { m += 1 ; s -= 60 ; } if ( m >= 60 ) { st += 1 ; m -= 60 ; } if ( s > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; n -- ; i -- ; } } else if ( niz [ i ] < 0 ) printf ( ""-%d stepeni %d minuta %d sekundi\n"" , st , m , s ) ; else printf ( ""%d stepeni %d minuta %d sekundi \n"" , st , m , s ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int st = 0 , m = 0 , s = 0 , n , i , j ; double niz [ 500 ] , us = 0 ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; us = fabs ( niz [ i ] * 180 / pi ) * 3600 ; us = abs ( ( int ) ( us + 0.5 ) ) ; st = ( us / 3600 ) ; m = abs ( ( us - st * 3600 ) / 60 ) ; s = abs ( ( us - st * 3600 - m * 60 ) ) ; if ( s >= 60 ) { m += 1 ; s -= 60 ; } if ( m >= 60 ) { st += 1 ; m -= 60 ; } if ( s > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; n -- ; i -- ; } } else if ( niz [ i ] < 0 ) printf ( ""-%d stepeni %d minuta %d sekundi\n"" , st , m , s ) ; else printf ( ""%d stepeni %d minuta %d sekundi \n"" , st , m , s ) ; } return 0 ; }"
2197,97,97,0,37,A2016/Z3/Z1/student2831,A2016/Z3/Z1/student3943,"#include <stdio.h> int daj_prost ( ) { int i ; static int a = 1 ; a ++ ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { a ++ ; i = 2 ; } } return a ; } int main ( ) { int a , b ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else { if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( b <= 0 ) printf ( ""b nije prirodan broj.\n"" ) ; } } while ( ! ( a < b && ( a > 0 && b > 0 ) ) ) ; int suma = 0 , i , prost ; for ( i = 0 ; i < b ; i ++ ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) suma = suma + prost ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i ; static int a = 1 ; a ++ ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { a ++ ; i = 2 ; } } return a ; } int main ( ) { int a , b ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else { if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( b <= 0 ) printf ( ""b nije prirodan broj.\n"" ) ; } } while ( ! ( a < b && ( a > 0 && b > 0 ) ) ) ; int suma = 0 , i , prost ; for ( i = 0 ; i < b ; i ++ ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) suma = suma + prost ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2198,40,40,0,23,A2016/Z3/Z1/student8067,A2016/Z3/Z1/student1639,"#include <stdio.h> int prost ( int i ) { int j , br = 0 ; for ( j = 1 ; j <= i ; j ++ ) { if ( i % j == 0 ) br ++ ; } if ( br == 2 ) return 1 ; else return 0 ; } int daj_prost ( ) { static int i = 1 ; again : i ++ ; if ( prost ( i ) ) return i ; else goto again ; } int main ( ) { int a , b , suma = 0 , x ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a == 0 || a < 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a > b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a == b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a > 0 && b <= 0 ) printf ( ""a nije manje od b.\n"" ) ; } while ( a > b || a == 0 || a < 0 || a == b ) ; do { x = daj_prost ( ) ; if ( x > a && x < b ) suma = suma + x ; } while ( x < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int prost ( int i ) { int j , br = 0 ; for ( j = 1 ; j <= i ; j ++ ) { if ( i % j == 0 ) br ++ ; } if ( br == 2 ) return 1 ; else return 0 ; } int daj_prost ( ) { static int i = 1 ; tu : i ++ ; if ( prost ( i ) ) return i ; else goto tu ; } int main ( ) { int a = 0 , b = 0 , suma = 0 , x = 0 ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b."" ) ; else if ( a <= 0 ) printf ( ""a nije prirodan broj."" ) ; } while ( a >= b || a <= 0 || b <= 0 ) ; printf ( ""suma prostih brojeva izmedju %d i %d je "" , a , b ) ; do { x = daj_prost ( ) ; if ( x > a && x < b ) suma = suma + x ; } while ( x < b ) ; printf ( ""%d."" , suma ) ; return 0 ; }"
2201,42,42,0,165,A2016/Z5/Z3/student7802,A2016/Z5/Z3/student8357,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; if ( sat + min + t1 . sekunde > sat1 + min1 + t2 . sekunde ) return 1 ; if ( sat + min + t1 . sekunde < sat1 + min1 + t2 . sekunde ) return - 1 ; if ( sat + min + t1 . sekunde == sat1 + min1 + t2 . sekunde ) return 0 ; } int prvi ( struct cas raspored [ ] , int casova ) { int i , j = 25 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < j ) j = raspored [ i ] . pocetak . sati ; } return j ; } int zadnji ( struct cas raspored [ ] , int casova ) { int i , j = 0 , index = 0 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati > j ) j = raspored [ i ] . kraj . sati ; index = i ; } if ( raspored [ index ] . kraj . minute == 0 ) j -- ; return j ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , flag2 = 1 , index_min = - 1 ; int last = zadnji ( raspored , broj_casova ) ; int first = prvi ( raspored , broj_casova ) ; char sedmica [ ] [ 7 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; char sati [ ] [ 25 ] = { ""0:00"" , ""1:00"" , ""2:00"" , ""3:00"" , ""4:00"" , ""5:00"" , ""6:00"" , ""7:00"" , ""8:00"" , ""9:00"" , ""10:00"" , ""11:00"" , ""12:00"" , ""13:00"" , ""14:00"" , ""15:00"" , ""16:00"" , ""17:00"" , ""18:00"" , ""19:00"" , ""20:00"" , ""21:00"" , ""22:00"" , ""23:00"" } ; printf ( ""\n"" ) ; printf ( ""%-7s"" , "" "" ) ; for ( i = 0 ; i < 6 ; i ++ ) { printf ( ""%-10s"" , sedmica [ i ] ) ; } printf ( ""\n"" ) ; for ( i = first ; i - 1 < last ; i ++ ) { printf ( ""%-7s"" , sati [ i ] ) ; for ( k = 1 ; k < 7 ; k ++ ) { index_min = - 1 ; flag2 = 1 ; for ( j = 0 ; j < broj_casova ; j ++ ) { if ( raspored [ j ] . dan_u_sedmici == k ) { if ( ( raspored [ j ] . pocetak . sati <= i ) && ( raspored [ j ] . kraj . sati >= i ) && ! ( raspored [ j ] . kraj . sati == i && raspored [ j ] . kraj . minute == 0 ) ) { if ( flag2 ) { index_min = j ; flag2 = 0 ; } else if ( poredivrj ( raspored [ j ] . pocetak , raspored [ index_min ] . pocetak ) == - 1 ) { index_min = j ; } } } } if ( index_min == - 1 ) { printf ( ""%-10s"" , "" "" ) ; } else if ( index_min != - 1 ) { printf ( ""%-10s"" , raspored [ index_min ] . predmet ) ; } } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n"" ) ; printf ( ""%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; printf ( ""%02d:"" , raspored [ i ] . pocetak . sati ) ; printf ( ""%02d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:"" , raspored [ i ] . kraj . sati ) ; printf ( ""%02d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int minute ( int min , int sati ) { return min + sati * 60 ; } int prekl ( int minpoc1 , int minkraj1 , int minpoc2 , int minkraj2 ) { return ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int vr = prekl ( minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) , minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) , minute ( cas . pocetak . minute , cas . pocetak . sati ) , minute ( cas . kraj . minute , cas . kraj . sati ) ) ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minute ( cas . pocetak . minute , cas . pocetak . sati ) == minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) || minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) == minute ( cas . kraj . minute , cas . kraj . sati ) ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && vr == 1 ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & redni ) ; printf ( ""naziv predmeta: "" ) ; char predmet [ 10 ] ; if ( opcija != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet , * p = predmet ; char znak ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & promjena . pocetak . sati ) ; scanf ( ""%c"" , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . kraj . sati , & znak ) ; scanf ( ""%d"" , & promjena . kraj . minute ) ; if ( opcija != 0 ) promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( ""cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 , k = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; k ++ ; } niz [ k ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) return 0 ; int kap = kapacitet ; int vel = sizeof ( struct cas ) ; int ucitano ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; fclose ( ulaz ) ; return ucitano ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } void ispisss ( ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; } void ispispr ( char * pr ) { printf ( ""%-10s"" , pr ) ; } void ispispraz ( int d ) { printf ( ""          "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; ispisss ( ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { ispispr ( raspored [ k ] . predmet ) ; break ; ispispraz ( 10 ) ; } if ( k == broj_casova ) ispispraz ( 10 ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int sat = raspored [ i ] . pocetak . sati ; int min = raspored [ i ] . pocetak . minute ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( sat < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , sat ) ; if ( min < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , min ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)\n"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 ; int sat1 = t2 . sati * 3600 ; int min = t1 . minute * 60 ; int min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return - 1 ; if ( d1 == d2 ) return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) == 1 && drugi == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } int prazan ( struct cas cas ) { if ( cas . predmet == """" ) return 0 ; else return 1 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; if ( trajanje < 0 || trajanje > 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; int praz = prazan ( cas ) ; struct cas pom = { """" , 0 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) return 0 ; int kap = broj_casova ; int vel = sizeof ( struct cas ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; return 1 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; char predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, "" ) ; printf ( ""2=utorak..., "" ) ; printf ( ""6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""izaberite koji cas zelite promijeniti:  "" ) ; scanf ( ""%d"" , & redni ) ; if ( redni > 100 || redni < 0 ) goto preskok ; printf ( ""naziv predmeta: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; char * q ; if ( opcija != 0 ) q = promjena . predmet ; char * p ; if ( opcija != 0 ) p = predmet ; preskok : strcpy ( q , p ) ; char znak ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( "" cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }"
2213,98,98,0,113,A2016/Z1/Z3/student6824,A2016/Z1/Z3/student5899,"#include <stdio.h> #define crna c #define bijela b #define crvena v #define siva s #define plava p int main ( ) { char colour ; float postotak , ukupno ; int crna = 0 , bijela = 0 , siva = 0 , crvena = 0 , plava = 0 ; int max ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & colour ) ; if ( colour == 'c' || colour == 'c' || colour == 'b' || colour == 'b' || colour == 's' || colour == 's' || colour == 'v' || colour == 'v' || colour == 'p' || colour == 'p' || colour == 'k' || colour == 'k' ) { if ( colour == 'c' || colour == 'c' ) { crna += 1 ; } else if ( colour == 'b' || colour == 'b' ) { bijela += 1 ; } else if ( colour == 's' || colour == 's' ) { siva += 1 ; } else if ( colour == 'v' || colour == 'v' ) { crvena += 1 ; } else if ( colour == 'p' || colour == 'p' ) { plava += 1 ; } else if ( colour == 'k' || colour == 'k' ) { break ; } } else if ( colour != 'c' || colour != 'c' || colour != 'b' || colour != 'b' || colour != 's' || colour != 's' || colour != 'v' || colour != 'v' || colour != 'p' || colour != 'p' || colour != 'k' || colour != 'k' ) { printf ( ""neispravan unos\n"" ) ; } } while ( colour != 'k' || colour != 'k' ) ; ukupno = crna + bijela + siva + crvena + plava ; printf ( ""ukupno evidentirano %g vozila.\n"" , ukupno ) ; if ( crna >= bijela && crna >= siva && crna >= crvena && crna >= plava ) { max = crna ; } if ( bijela >= crna && bijela >= siva && bijela >= crvena && bijela >= plava ) { max = bijela ; } if ( siva >= crna && siva >= bijela && siva >= crvena && siva >= plava ) { max = siva ; } if ( crvena >= crna && crvena >= bijela && crvena >= siva && crvena >= plava ) { max = crvena ; } if ( plava >= crna && plava >= bijela && plava >= siva && plava >= crvena ) { max = plava ; } if ( ukupno == 0 ) { postotak = 0.0 ; } else { postotak = ( max * 100 ) / ukupno ; } if ( max == crna ) { printf ( ""najpopularnija boja je crna (%.2f%%).\n"" , postotak ) ; } else if ( max == bijela ) { printf ( ""najpopularnija boja je bijela (%.2f%%).\n"" , postotak ) ; } else if ( max == siva ) { printf ( ""najpopularnija boja je siva (%.2f%%).\n"" , postotak ) ; } else if ( max == crvena ) { printf ( ""najpopularnija boja je crvena (%.2f%%).\n"" , postotak ) ; } else if ( max == plava ) { printf ( ""najpopularnija boja je plava (%.2f%%).\n"" , postotak ) ; } return 0 ; }","#include <stdio.h> #define crna c #define bijela b #define crvena v #define siva s #define plava p int main ( ) { char colour ; float postotak , ukupno ; int crna = 0 , bijela = 0 , siva = 0 , crvena = 0 , plava = 0 ; int max ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & colour ) ; if ( colour == 'c' || colour == 'c' || colour == 'b' || colour == 'b' || colour == 's' || colour == 's' || colour == 'v' || colour == 'v' || colour == 'p' || colour == 'p' || colour == 'k' || colour == 'k' ) { if ( colour == 'c' || colour == 'c' ) { crna += 1 ; } else if ( colour == 'b' || colour == 'b' ) { bijela += 1 ; } else if ( colour == 's' || colour == 's' ) { siva += 1 ; } else if ( colour == 'v' || colour == 'v' ) { crvena += 1 ; } else if ( colour == 'p' || colour == 'p' ) { plava += 1 ; } else if ( colour == 'k' || colour == 'k' ) { break ; } } else if ( colour != 'c' || colour != 'c' || colour != 'b' || colour != 'b' || colour != 's' || colour != 's' || colour != 'v' || colour != 'v' || colour != 'p' || colour != 'p' || colour != 'k' || colour != 'k' ) { printf ( ""neispravan unos\n"" ) ; } } while ( colour != 'k' || colour != 'k' ) ; ukupno = crna + bijela + siva + crvena + plava ; printf ( ""ukupno evidentirano %g vozila.\n"" , ukupno ) ; if ( crna >= bijela && crna >= siva && crna >= crvena && crna >= plava ) { max = crna ; } if ( bijela >= crna && bijela >= siva && bijela >= crvena && bijela >= plava ) { max = bijela ; } if ( siva >= crna && siva >= bijela && siva >= crvena && siva >= plava ) { max = siva ; } if ( crvena >= crna && crvena >= bijela && crvena >= siva && crvena >= plava ) { max = crvena ; } if ( plava >= crna && plava >= bijela && plava >= siva && plava >= crvena ) { max = plava ; } if ( ukupno == 0 ) { postotak = 0.0 ; } else { postotak = ( max * 100 ) / ukupno ; } if ( max == crna ) { printf ( ""najpopularnija boja je crna (%.2f%%).\n"" , postotak ) ; } else if ( max == bijela ) { printf ( ""najpopularnija boja je bijela (%.2f%%).\n"" , postotak ) ; } else if ( max == siva ) { printf ( ""najpopularnija boja je siva (%.2f%%).\n"" , postotak ) ; } else if ( max == crvena ) { printf ( ""najpopularnija boja je crvena (%.2f%%).\n"" , postotak ) ; } else if ( max == plava ) { printf ( ""najpopularnija boja je plava (%.2f%%).\n"" , postotak ) ; } return 0 ; }"
2214,24,24,0,86,A2016/Z5/Z3/student7802,A2016/Z5/Z3/student9538,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; if ( sat + min + t1 . sekunde > sat1 + min1 + t2 . sekunde ) return 1 ; if ( sat + min + t1 . sekunde < sat1 + min1 + t2 . sekunde ) return - 1 ; if ( sat + min + t1 . sekunde == sat1 + min1 + t2 . sekunde ) return 0 ; } int prvi ( struct cas raspored [ ] , int casova ) { int i , j = 25 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < j ) j = raspored [ i ] . pocetak . sati ; } return j ; } int zadnji ( struct cas raspored [ ] , int casova ) { int i , j = 0 , index = 0 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati > j ) j = raspored [ i ] . kraj . sati ; index = i ; } if ( raspored [ index ] . kraj . minute == 0 ) j -- ; return j ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , flag2 = 1 , index_min = - 1 ; int last = zadnji ( raspored , broj_casova ) ; int first = prvi ( raspored , broj_casova ) ; char sedmica [ ] [ 7 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; char sati [ ] [ 25 ] = { ""0:00"" , ""1:00"" , ""2:00"" , ""3:00"" , ""4:00"" , ""5:00"" , ""6:00"" , ""7:00"" , ""8:00"" , ""9:00"" , ""10:00"" , ""11:00"" , ""12:00"" , ""13:00"" , ""14:00"" , ""15:00"" , ""16:00"" , ""17:00"" , ""18:00"" , ""19:00"" , ""20:00"" , ""21:00"" , ""22:00"" , ""23:00"" } ; printf ( ""\n"" ) ; printf ( ""%-7s"" , "" "" ) ; for ( i = 0 ; i < 6 ; i ++ ) { printf ( ""%-10s"" , sedmica [ i ] ) ; } printf ( ""\n"" ) ; for ( i = first ; i - 1 < last ; i ++ ) { printf ( ""%-7s"" , sati [ i ] ) ; for ( k = 1 ; k < 7 ; k ++ ) { index_min = - 1 ; flag2 = 1 ; for ( j = 0 ; j < broj_casova ; j ++ ) { if ( raspored [ j ] . dan_u_sedmici == k ) { if ( ( raspored [ j ] . pocetak . sati <= i ) && ( raspored [ j ] . kraj . sati >= i ) && ! ( raspored [ j ] . kraj . sati == i && raspored [ j ] . kraj . minute == 0 ) ) { if ( flag2 ) { index_min = j ; flag2 = 0 ; } else if ( poredivrj ( raspored [ j ] . pocetak , raspored [ index_min ] . pocetak ) == - 1 ) { index_min = j ; } } } } if ( index_min == - 1 ) { printf ( ""%-10s"" , "" "" ) ; } else if ( index_min != - 1 ) { printf ( ""%-10s"" , raspored [ index_min ] . predmet ) ; } } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n"" ) ; printf ( ""%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; printf ( ""%02d:"" , raspored [ i ] . pocetak . sati ) ; printf ( ""%02d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:"" , raspored [ i ] . kraj . sati ) ; printf ( ""%02d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int minute ( int min , int sati ) { return min + sati * 60 ; } int prekl ( int minpoc1 , int minkraj1 , int minpoc2 , int minkraj2 ) { return ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int vr = prekl ( minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) , minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) , minute ( cas . pocetak . minute , cas . pocetak . sati ) , minute ( cas . kraj . minute , cas . kraj . sati ) ) ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minute ( cas . pocetak . minute , cas . pocetak . sati ) == minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) || minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) == minute ( cas . kraj . minute , cas . kraj . sati ) ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && vr == 1 ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & redni ) ; printf ( ""naziv predmeta: "" ) ; char predmet [ 10 ] ; if ( opcija != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet , * p = predmet ; char znak ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & promjena . pocetak . sati ) ; scanf ( ""%c"" , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . kraj . sati , & znak ) ; scanf ( ""%d"" , & promjena . kraj . minute ) ; if ( opcija != 0 ) promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( ""cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { int ima = 0 ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } void ispisreda ( ) { printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       pet       sub"" ) ; printf ( ""\n"" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , max = 0 , min = 100 ; int indexmaxa = 0 ; ispisreda ( ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; int x ; int s , dan , n ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { s = raspored [ k ] . pocetak . sati ; dan = raspored [ k ] . dan_u_sedmici ; n = raspored [ k ] . kraj . sati ; if ( s <= i && dan == j && n >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) for ( x = 0 ; x < 10 ; x ++ ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:%02d)"" , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; } } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j , brojac = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; brojac ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; if ( brojac > 0 ) break ; } } } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 && cas . kraj . minute + cas . kraj . sati * 60 > minkraj1 || raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . kraj . minute + cas . kraj . sati * 60 && minkraj1 > cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; struct cas cc ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } if ( preklop == 1 ) continue ; } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; int broj = opcija ; switch ( opcija ) { case 0 : { zapisi_datoteku ( raspored , broj_casova ) ; break ; } case 1 : { if ( broj != 0 ) ispis_rasporeda ( raspored , broj_casova ) ; break ; } case 2 : if ( broj != 0 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; if ( broj != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; if ( vr == 1 ) broj_casova ++ ; break ; } case 4 : if ( broj != 0 ) { int dan , redni ; int br = broj_casova ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , br , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , br , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } case 3 : if ( broj != 0 ) { struct cas promjena ; int dan , redni ; char * q , * p ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; ocisti ( unesi ( predmet , 10 ) ) ; q = promjena . predmet ; p = predmet ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . pocetak . sati , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; break ; } } } while ( opcija != 0 ) ; return 0 ; }"
2226,98,98,0,59,A2016/Z3/Z2/student8363,A2016/Z3/Z2/student1938,"#include <stdio.h> #include <math.h> void ubaci ( int niz [ ] , int n ) { int i , tmp , suma = 0 ; for ( i = n - 1 ; i > 0 ; i -- ) { niz [ 2 * i ] = niz [ i ] ; } for ( i = 0 ; i < 2 * n - 1 ; i += 2 ) { suma = 0 ; tmp = niz [ i ] ; while ( tmp != 0 ) { suma += ( tmp % 10 ) ; tmp = tmp / 10 ; } if ( suma < 0 ) suma *= - 1 ; niz [ i + 1 ] = suma ; } } int fib ( int a ) { int i = 1 , j = 0 ; while ( i <= a ) { i += j ; j = i - j ; if ( a == i ) return 1 ; } return 0 ; } int izbaci ( int niz [ ] , int n ) { int i , j , v = n ; for ( i = 0 ; i < v - 1 ; i ++ ) { if ( fib ( niz [ i ] ) ) { for ( j = i ; j < v - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; v -- ; } } if ( fib ( niz [ i ] ) ) v -- ; return v ; } int main ( ) { int i , niz [ 2000 ] , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi:"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == n - 1 ) printf ( "" %d."" , niz [ i ] ) ; else printf ( "" %d,"" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> void ubaci ( int niz [ ] , int n ) { int i , tmp , suma = 0 ; for ( i = n - 1 ; i > 0 ; i -- ) { niz [ 2 * i ] = niz [ i ] ; } for ( i = 0 ; i < 2 * n - 1 ; i += 2 ) { suma = 0 ; tmp = niz [ i ] ; while ( tmp != 0 ) { suma += ( tmp % 10 ) ; tmp = tmp / 10 ; } if ( suma < 0 ) suma *= - 1 ; niz [ i + 1 ] = suma ; } } int fib ( int a ) { int i = 1 , j = 0 ; while ( i <= a ) { i += j ; j = i - j ; if ( a == i ) return 1 ; } return 0 ; } int izbaci ( int niz [ ] , int n ) { int i , j , v = n ; for ( i = 0 ; i < v - 1 ; i ++ ) { if ( fib ( niz [ i ] ) ) { for ( j = i ; j < v - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; v -- ; } } if ( fib ( niz [ i ] ) ) v -- ; return v ; } int main ( ) { int i , niz [ 2000 ] , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi:"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i == n - 1 ) printf ( "" %d."" , niz [ i ] ) ; else printf ( "" %d,"" , niz [ i ] ) ; } return 0 ; }"
2232,97,97,0,46,A2016/Z1/Z4/student1483,A2016/Z1/Z4/student3610,"#include <stdio.h> int main ( ) { int n ; unos : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; goto unos ; } int i , j , k , l , s ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( l = 0 ; l < n - 1 ; l ++ ) { if ( i == l + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( s = 0 ; s <= n ; s ++ ) { if ( i + s == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n ; unos : printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( ( n < 1 ) || ( n > 50 ) ) { printf ( ""pogresan unos"" ) ; goto unos ; } int i , j , k , z , q ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( z = 0 ; z < n - 1 ; z ++ ) { if ( i == z + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( q = 0 ; q <= n ; q ++ ) { if ( i + q == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2242,85,85,0,52,A2016/Z3/Z1/student3301,A2016/Z3/Z1/student7255,"#include <stdio.h> int daj_prost ( ) { int prost = 1 , i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a , b , suma = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( broj < b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int p = 0 , i ; static int q = 0 ; while ( 1 ) { q ++ ; if ( q == 2 ) { return q ; } else if ( q == 3 ) { return q ; } else { for ( i = 2 ; i < q ; i ++ ) { if ( q % i == 0 ) { p = 0 ; break ; } } if ( p ) { return q ; } else { p = 1 ; } } } } int main ( ) { int a , b , sum = 0 , q = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( q < b ) { q = daj_prost ( ) ; if ( q > a && q < b ) { sum += q ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }"
2243,99,99,0,123,A2016/Z1/Z1/student8580,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
2245,98,98,0,28,A2016/Z1/Z4/student3856,A2016/Z1/Z4/student9113,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n != 1 ) for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || i == n - 1 - j + n - 1 || i == - 2 * n + 2 * 1 + j || i == n - 1 - j + 3 * n - 3 * 1 ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } else { printf ( ""***"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( "" \nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n != 1 ) for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || i == n - 1 - j + n - 1 || i == - 2 * n + 2 * 1 + j || i == n - 1 - j + 3 * n - 3 * 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } else { printf ( ""***"" ) ; } return 0 ; }"
2249,97,97,0,48,A2016/Z1/Z4/student7735,A2016/Z1/Z4/student9498,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
2266,99,99,0,269,A2016/Z5/Z3/student2351,A2016/Z5/Z3/student1477,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; int manjeod ( const struct vrijeme prvo , const struct vrijeme drugo ) { if ( prvo . sati == drugo . sati && prvo . minute == drugo . minute && prvo . sekunde == drugo . sekunde ) return 0 ; if ( prvo . sati < drugo . sati ) return 1 ; else if ( prvo . sati == drugo . sati && prvo . minute < drugo . minute ) return 1 ; else if ( prvo . sati == drugo . sati && prvo . minute == drugo . minute && prvo . sekunde < drugo . sekunde ) return 1 ; return - 1 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas predmet ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( predmet . dan_u_sedmici == raspored [ i ] . dan_u_sedmici && ! ( manjeod ( raspored [ i ] . kraj , predmet . pocetak ) == 1 || manjeod ( raspored [ i ] . kraj , predmet . pocetak ) == 0 || manjeod ( predmet . kraj , raspored [ i ] . pocetak ) == 1 || manjeod ( predmet . kraj , raspored [ i ] . pocetak ) == 0 ) ) { return 1 ; } } return 0 ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { int broj_casova ; file * upis = fopen ( ""raspored.dat"" , ""rb"" ) ; fread ( & broj_casova , sizeof ( int ) , 1 , upis ) ; fread ( raspored , sizeof ( struct cas ) , broj_casova , upis ) ; fclose ( upis ) ; return broj_casova ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ispis = fopen ( ""raspored.dat"" , ""wb"" ) ; if ( ispis == null ) return 0 ; if ( broj_casova > 200 ) broj_casova = 200 ; fwrite ( & broj_casova , sizeof ( int ) , 1 , ispis ) ; fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ispis ) ; fclose ( ispis ) ; return 1 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , k ; struct cas pr ; strcpy ( pr . predmet , predmet ) ; pr . pocetak . sati = 0 , pr . pocetak . minute = 0 , pr . pocetak . sekunde = 0 ; pr . kraj . sati = 0 , pr . kraj . minute = 0 , pr . kraj . sekunde = 0 ; for ( i = 1 ; i <= 6 ; i ++ ) { pr . dan_u_sedmici = i ; for ( j = 0 ; j <= 10 - trajanje ; j ++ ) { pr . pocetak . sati = 9 + j ; pr . kraj . sati = 9 + j + trajanje ; k = preklapanje ( raspored , broj_casova , pr ) ; if ( k == 0 ) { strcpy ( raspored [ broj_casova ] . predmet , predmet ) ; raspored [ broj_casova ] . pocetak = pr . pocetak ; raspored [ broj_casova ] . kraj = pr . kraj ; raspored [ broj_casova ] . dan_u_sedmici = pr . dan_u_sedmici ; return 1 ; } } } return 0 ; } int roundnadole ( struct vrijeme vr ) { if ( vr . minute == 0 && vr . sekunde == 0 ) return vr . sati ; return vr . sati + 1 ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int minsat = 24 , maxsat = 0 , i , j , k ; struct vrijeme poc = { 0 , 0 , 0 } , kraj = { 0 , 0 , 0 } ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < minsat ) minsat = raspored [ i ] . pocetak . sati ; if ( roundnadole ( raspored [ i ] . kraj ) > maxsat ) maxsat = roundnadole ( raspored [ i ] . kraj ) ; } printf ( ""       "" ) ; printf ( ""%-10s%-10s%-10s%-10s%-10s%-10s\n"" , ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" ) ; for ( j = minsat ; j < maxsat ; j ++ ) { poc . sati = j ; kraj . sati = j + 1 ; printf ( ""%d:00  "" , j ) ; if ( j < 10 ) printf ( "" "" ) ; for ( i = 1 ; i <= 6 ; i ++ ) { int found = 0 ; for ( k = 0 ; k < broj_casova ; k ++ ) { if ( ! ( manjeod ( raspored [ k ] . kraj , poc ) == 1 || manjeod ( raspored [ k ] . kraj , poc ) == 0 || manjeod ( kraj , raspored [ k ] . pocetak ) == 1 || manjeod ( kraj , raspored [ k ] . pocetak ) == 0 ) && raspored [ k ] . dan_u_sedmici == i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; found = 1 ; } } if ( found == 0 ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i , counter = 1 ; printf ( ""uneseni su casovi: \n"" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""%d) %s ("" , counter , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)\n"" , raspored [ i ] . kraj . minute ) ; counter ++ ; } } } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , counter = 0 , uspjeh ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( dan == raspored [ i ] . dan_u_sedmici ) { counter ++ ; if ( counter == redni_broj ) { struct vrijeme poc , kraj ; poc = raspored [ i ] . pocetak ; kraj = raspored [ i ] . kraj ; raspored [ i ] . pocetak . sati = 0 ; raspored [ i ] . kraj . sati = 0 ; strcpy ( raspored [ i ] . predmet , promjena . predmet ) ; raspored [ i ] . pocetak = promjena . pocetak ; raspored [ i ] . kraj = promjena . kraj ; return ; } } } } int temp_promjeni ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , counter = 0 , uspjeh ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( dan == raspored [ i ] . dan_u_sedmici ) { counter ++ ; if ( counter == redni_broj ) { struct vrijeme poc , kraj ; poc = raspored [ i ] . pocetak ; kraj = raspored [ i ] . kraj ; raspored [ i ] . pocetak . sati = 0 ; raspored [ i ] . kraj . sati = 0 ; promjena . dan_u_sedmici = dan ; uspjeh = preklapanje ( raspored , broj_casova , promjena ) ; raspored [ i ] . pocetak = poc ; raspored [ i ] . kraj = kraj ; return uspjeh ; } } } return - 1 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , counter = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( dan == raspored [ i ] . dan_u_sedmici ) { counter ++ ; if ( counter == redni_broj && i != broj_casova - 1 ) { raspored [ i ] = raspored [ broj_casova - 1 ] ; return ; } } } } void unosnaziva ( char * pok ) { int i = 0 ; char c ; while ( 1 ) { c = getchar ( ) ; if ( c == '\n' && i == 0 ) c = getchar ( ) ; if ( c == '\n' ) break ; if ( i < 9 ) { pok [ i ] = c ; i ++ ; } } pok [ i ] = '\0' ; } int main ( ) { struct cas raspored [ kapacitet ] ; char predmet [ 10 ] ; int izbor , broj_casova = 0 , trajanje , uspjeh , dan , promjena ; struct cas pomocni = { ""x"" , 0 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; while ( 1 ) { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & izbor ) ; if ( izbor == 1 ) { printf ( ""\n"" ) ; ispis_rasporeda ( raspored , broj_casova ) ; } else if ( izbor == 2 ) { printf ( ""unesite naziv predmeta: "" ) ; unosnaziva ( predmet ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & trajanje ) ; uspjeh = dodaj_cas ( raspored , broj_casova , predmet , trajanje ) ; broj_casova += uspjeh ; if ( uspjeh == 0 ) { printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , trajanje ) ; } } else if ( izbor == 3 ) { while ( 1 ) { printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & promjena ) ; printf ( ""naziv predmeta: "" ) ; unosnaziva ( pomocni . predmet ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d:%d"" , & pomocni . pocetak . sati , & pomocni . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d:%d"" , & pomocni . kraj . sati , & pomocni . kraj . minute ) ; uspjeh = temp_promjeni ( raspored , broj_casova , dan , promjena , pomocni ) ; if ( uspjeh == 0 ) { promijeni_cas ( raspored , broj_casova , dan , promjena , pomocni ) ; break ; } else { printf ( ""promjena nije moguca jer dovodi do preklapanja\n"" ) ; } } } else if ( izbor == 4 ) { printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & promjena ) ; obrisi_cas ( raspored , broj_casova , dan , promjena ) ; printf ( ""cas obrisan\n"" ) ; broj_casova -- ; } else if ( izbor == 0 ) { zapisi_datoteku ( raspored , broj_casova ) ; break ; } } return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; int manjeod ( const struct vrijeme prvo , const struct vrijeme drugo ) { if ( prvo . sati == drugo . sati && prvo . minute == drugo . minute && prvo . sekunde == drugo . sekunde ) return 0 ; if ( prvo . sati < drugo . sati ) return 1 ; else if ( prvo . sati == drugo . sati && prvo . minute < drugo . minute ) return 1 ; else if ( prvo . sati == drugo . sati && prvo . minute == drugo . minute && prvo . sekunde < drugo . sekunde ) return 1 ; return - 1 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas predmet ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( predmet . dan_u_sedmici == raspored [ i ] . dan_u_sedmici && ! ( manjeod ( raspored [ i ] . kraj , predmet . pocetak ) == 1 || manjeod ( raspored [ i ] . kraj , predmet . pocetak ) == 0 || manjeod ( predmet . kraj , raspored [ i ] . pocetak ) == 1 || manjeod ( predmet . kraj , raspored [ i ] . pocetak ) == 0 ) ) { return 1 ; } } return 0 ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { int broj_casova ; file * upis = fopen ( ""raspored.dat"" , ""rb"" ) ; fread ( & broj_casova , sizeof ( int ) , 1 , upis ) ; fread ( raspored , sizeof ( struct cas ) , broj_casova , upis ) ; fclose ( upis ) ; return broj_casova ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ispis = fopen ( ""raspored.dat"" , ""wb"" ) ; if ( ispis == null ) return 0 ; if ( broj_casova > 200 ) broj_casova = 200 ; fwrite ( & broj_casova , sizeof ( int ) , 1 , ispis ) ; fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ispis ) ; fclose ( ispis ) ; return 1 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , k ; struct cas pr ; strcpy ( pr . predmet , predmet ) ; pr . pocetak . sati = 0 , pr . pocetak . minute = 0 , pr . pocetak . sekunde = 0 ; pr . kraj . sati = 0 , pr . kraj . minute = 0 , pr . kraj . sekunde = 0 ; for ( i = 1 ; i <= 6 ; i ++ ) { pr . dan_u_sedmici = i ; for ( j = 0 ; j <= 10 - trajanje ; j ++ ) { pr . pocetak . sati = 9 + j ; pr . kraj . sati = 9 + j + trajanje ; k = preklapanje ( raspored , broj_casova , pr ) ; if ( k == 0 ) { strcpy ( raspored [ broj_casova ] . predmet , predmet ) ; raspored [ broj_casova ] . pocetak = pr . pocetak ; raspored [ broj_casova ] . kraj = pr . kraj ; raspored [ broj_casova ] . dan_u_sedmici = pr . dan_u_sedmici ; return 1 ; } } } return 0 ; } int roundnadole ( struct vrijeme vr ) { if ( vr . minute == 0 && vr . sekunde == 0 ) return vr . sati ; return vr . sati + 1 ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int minsat = 24 , maxsat = 0 , i , j , k ; struct vrijeme poc = { 0 , 0 , 0 } , kraj = { 0 , 0 , 0 } ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < minsat ) minsat = raspored [ i ] . pocetak . sati ; if ( roundnadole ( raspored [ i ] . kraj ) > maxsat ) maxsat = roundnadole ( raspored [ i ] . kraj ) ; } printf ( ""       "" ) ; printf ( ""%-10s%-10s%-10s%-10s%-10s%-10s\n"" , ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" ) ; for ( j = minsat ; j < maxsat ; j ++ ) { poc . sati = j ; kraj . sati = j + 1 ; printf ( ""%d:00  "" , j ) ; if ( j < 10 ) printf ( "" "" ) ; for ( i = 1 ; i <= 6 ; i ++ ) { int found = 0 ; for ( k = 0 ; k < broj_casova ; k ++ ) { if ( ! ( manjeod ( raspored [ k ] . kraj , poc ) == 1 || manjeod ( raspored [ k ] . kraj , poc ) == 0 || manjeod ( kraj , raspored [ k ] . pocetak ) == 1 || manjeod ( kraj , raspored [ k ] . pocetak ) == 0 ) && raspored [ k ] . dan_u_sedmici == i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; found = 1 ; } } if ( found == 0 ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i , counter = 1 ; printf ( ""uneseni su casovi: \n"" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""%d) %s ("" , counter , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)\n"" , raspored [ i ] . kraj . minute ) ; counter ++ ; } } } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , counter = 0 , uspjeh ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( dan == raspored [ i ] . dan_u_sedmici ) { counter ++ ; if ( counter == redni_broj ) { struct vrijeme poc , kraj ; poc = raspored [ i ] . pocetak ; kraj = raspored [ i ] . kraj ; raspored [ i ] . pocetak . sati = 0 ; raspored [ i ] . kraj . sati = 0 ; strcpy ( raspored [ i ] . predmet , promjena . predmet ) ; raspored [ i ] . pocetak = promjena . pocetak ; raspored [ i ] . kraj = promjena . kraj ; return ; } } } } int temp_promjeni ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , counter = 0 , uspjeh ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( dan == raspored [ i ] . dan_u_sedmici ) { counter ++ ; if ( counter == redni_broj ) { struct vrijeme poc , kraj ; poc = raspored [ i ] . pocetak ; kraj = raspored [ i ] . kraj ; raspored [ i ] . pocetak . sati = 0 ; raspored [ i ] . kraj . sati = 0 ; promjena . dan_u_sedmici = dan ; uspjeh = preklapanje ( raspored , broj_casova , promjena ) ; raspored [ i ] . pocetak = poc ; raspored [ i ] . kraj = kraj ; return uspjeh ; } } } return - 1 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , counter = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( dan == raspored [ i ] . dan_u_sedmici ) { counter ++ ; if ( counter == redni_broj && i != broj_casova - 1 ) { raspored [ i ] = raspored [ broj_casova - 1 ] ; return ; } } } } void unosnaziva ( char * pok ) { int i = 0 ; char c ; while ( 1 ) { c = getchar ( ) ; if ( c == '\n' && i == 0 ) c = getchar ( ) ; if ( c == '\n' ) break ; if ( i < 9 ) { pok [ i ] = c ; i ++ ; } } pok [ i ] = '\0' ; } int main ( ) { struct cas raspored [ kapacitet ] ; char predmet [ 10 ] ; int izbor , broj_casova = 0 , trajanje , uspjeh , dan , promjena ; struct cas pomocni = { ""x"" , 0 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; while ( 1 ) { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & izbor ) ; if ( izbor == 1 ) { printf ( ""\n"" ) ; ispis_rasporeda ( raspored , broj_casova ) ; } else if ( izbor == 2 ) { printf ( ""unesite naziv predmeta: "" ) ; unosnaziva ( predmet ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & trajanje ) ; uspjeh = dodaj_cas ( raspored , broj_casova , predmet , trajanje ) ; broj_casova += uspjeh ; if ( uspjeh == 0 ) { printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , trajanje ) ; } } else if ( izbor == 3 ) { while ( 1 ) { printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & promjena ) ; printf ( ""naziv predmeta: "" ) ; unosnaziva ( pomocni . predmet ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d:%d"" , & pomocni . pocetak . sati , & pomocni . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d:%d"" , & pomocni . kraj . sati , & pomocni . kraj . minute ) ; uspjeh = temp_promjeni ( raspored , broj_casova , dan , promjena , pomocni ) ; if ( uspjeh == 0 ) { promijeni_cas ( raspored , broj_casova , dan , promjena , pomocni ) ; break ; } else { printf ( ""promjena nije moguca jer dovodi do preklapanja\n"" ) ; } } } else if ( izbor == 4 ) { printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & promjena ) ; obrisi_cas ( raspored , broj_casova , dan , promjena ) ; printf ( ""cas obrisan\n"" ) ; broj_casova -- ; } else if ( izbor == 0 ) { zapisi_datoteku ( raspored , broj_casova ) ; break ; } } return 0 ; }"
2277,97,97,0,46,A2016/Z1/Z4/student4824,A2016/Z1/Z4/student8357,"#include <stdio.h> int main ( ) { int n ; unos : printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( ( n < 1 ) || ( n > 50 ) ) { printf ( ""pogresan unos"" ) ; goto unos ; } int i , j , k , z , q ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( z = 0 ; z < n - 1 ; z ++ ) { if ( i == z + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( q = 0 ; q <= n ; q ++ ) { if ( i + q == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n ; unos : printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; goto unos ; } int i , j , k , l , s ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( n == 1 ) printf ( ""**"" ) ; if ( i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( k = 0 ; k < n - 1 ; k ++ ) { if ( i + k == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( l = 0 ; l < n - 1 ; l ++ ) { if ( i == l + 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } for ( s = 0 ; s <= n ; s ++ ) { if ( i + s == n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2285,99,99,0,89,A2016/Z3/Z3/student2160,A2016/Z3/Z3/student8189,"#include <stdio.h> #define a 201 #define b 201 int main ( ) { int m , n , i , j , k , g , h , p , r , s , t , l ; int mat [ a ] [ b ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m < 1 || n > 200 || n < 1 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || m < 1 || n > 200 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } if ( m > 1 ) { for ( i = 0 ; i <= m - 1 ; i ++ ) { int brojkolona = n ; for ( j = i + 1 ; j <= m - 1 ; j ++ ) { int provjera = 1 ; for ( k = 0 ; k <= brojkolona - 1 ; k ++ ) { int red = i ; int reddrugi = j ; int kolona = k ; if ( mat [ red ] [ kolona ] != mat [ reddrugi ] [ kolona ] ) provjera = 0 ; } if ( provjera == 1 ) { for ( g = j ; g < m - 1 ; g ++ ) { for ( h = 0 ; h < brojkolona ; h ++ ) { int red = g ; int kolona = h ; int sljedecired = red + 1 ; mat [ red ] [ kolona ] = mat [ sljedecired ] [ kolona ] ; } } if ( m > 1 ) { m -- ; j -- ; } } } } } if ( n > 1 ) { int brojredova = m ; for ( p = 0 ; p <= n - 1 ; p ++ ) { for ( r = p + 1 ; r <= n - 1 ; r ++ ) { int provjera = 1 ; for ( s = 0 ; s <= brojredova - 1 ; s ++ ) { int red = s ; int kolona = p ; int drugakolona = r ; if ( mat [ red ] [ kolona ] != mat [ red ] [ drugakolona ] ) provjera = 0 ; } if ( provjera == 1 ) { for ( t = r ; t < n - 1 ; t ++ ) { for ( l = 0 ; l < brojredova ; l ++ ) { mat [ l ] [ t ] = mat [ l ] [ t + 1 ] ; } } if ( n > 1 ) { n -- ; r -- ; } } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #define a 201 #define b 201 int main ( ) { int m , n , i , j , k , g , h , p , r , s , t , l ; int mat [ a ] [ b ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m < 1 || n > 200 || n < 1 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || m < 1 || n > 200 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } if ( m > 1 ) { for ( i = 0 ; i <= m - 1 ; i ++ ) { int brojkolona = n ; for ( j = i + 1 ; j <= m - 1 ; j ++ ) { int provjera = 1 ; for ( k = 0 ; k <= brojkolona - 1 ; k ++ ) { int red = i ; int reddrugi = j ; int kolona = k ; if ( mat [ red ] [ kolona ] != mat [ reddrugi ] [ kolona ] ) provjera = 0 ; } if ( provjera == 1 ) { for ( g = j ; g < m - 1 ; g ++ ) { for ( h = 0 ; h < brojkolona ; h ++ ) { int red = g ; int kolona = h ; int sljedecired = red + 1 ; mat [ red ] [ kolona ] = mat [ sljedecired ] [ kolona ] ; } } if ( m > 1 ) { m -- ; j -- ; } } } } } if ( n > 1 ) { int brojredova = m ; for ( p = 0 ; p <= n - 1 ; p ++ ) { for ( r = p + 1 ; r <= n - 1 ; r ++ ) { int provjera = 1 ; for ( s = 0 ; s <= brojredova - 1 ; s ++ ) { int red = s ; int kolona = p ; int drugakolona = r ; if ( mat [ red ] [ kolona ] != mat [ red ] [ drugakolona ] ) provjera = 0 ; } if ( provjera == 1 ) { for ( t = r ; t < n - 1 ; t ++ ) { for ( l = 0 ; l < brojredova ; l ++ ) { mat [ l ] [ t ] = mat [ l ] [ t + 1 ] ; } } if ( n > 1 ) { n -- ; r -- ; } } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2288,99,99,0,46,A2016/Z2/Z4/student1772,A2016/Z2/Z4/student6913,"#include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int i , j , m , n , c = 1 , t = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( ( n > 100 || n <= 0 ) || ( m > 100 || m <= 0 ) ) { printf ( ""pogresan unos!\n"" ) ; } } while ( n > 100 || n <= 0 || m > 100 || m <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { c = 0 ; break ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { t = 0 ; break ; } } } if ( m > 1 && n == 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } if ( t == 1 ) { if ( c == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int i , j , m , n , c = 1 , t = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( ( n > 100 || n <= 0 ) || ( m > 100 || m <= 0 ) ) { printf ( ""pogresan unos!\n"" ) ; } } while ( n > 100 || n <= 0 || m > 100 || m <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { c = 0 ; break ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { t = 0 ; break ; } } } if ( m > 1 && n == 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } if ( t == 1 ) { if ( c == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
2295,83,83,0,68,A2016/Z3/Z3/student2821,A2016/Z3/Z3/student8133,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] = { 0 } ; int m , n , brojac , temp ; int i , j , r , k , m ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || m > 200 || n <= 0 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n > 200 || m > 200 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( r = 0 ; r < n ; r ++ ) { if ( mat [ i ] [ r ] == mat [ j ] [ r ] ) brojac ++ ; if ( brojac == n ) { for ( m = j ; m < m ; m ++ ) { for ( k = 0 ; k < n ; k ++ ) { temp = mat [ m ] [ k ] ; mat [ m ] [ k ] = mat [ m + 1 ] [ k ] ; mat [ m + 1 ] [ k ] = temp ; } } j -- ; m -- ; } } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { brojac = 0 ; for ( r = 0 ; r < m ; r ++ ) { if ( mat [ r ] [ i ] == mat [ r ] [ j ] ) brojac ++ ; if ( brojac == m ) { for ( m = i ; m < n ; m ++ ) { for ( k = 0 ; k < n ; k ++ ) { temp = mat [ k ] [ m ] ; mat [ k ] [ m ] = mat [ k ] [ m + 1 ] ; mat [ k ] [ m + 1 ] = temp ; } } i -- ; n -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , k , l , m , temp , b , temp1 , b1 ; double mat [ 200 ] [ 200 ] = { { 0 } } ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m >= 201 || n <= 0 || n >= 201 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m >= 201 || n <= 0 || n >= 201 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { b = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) b ++ ; } if ( b == n ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( m = 0 ; m < n ; m ++ ) { temp = mat [ l ] [ m ] ; mat [ l ] [ m ] = mat [ l + 1 ] [ m ] ; mat [ l + 1 ] [ m ] = temp ; } } m -- ; j -- ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { b1 = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] == mat [ i ] [ k ] ) b1 ++ ; } if ( b1 == m ) { for ( l = 0 ; l < m ; l ++ ) { for ( m = k ; m < n - 1 ; m ++ ) { temp1 = mat [ l ] [ m ] ; mat [ l ] [ m ] = mat [ l ] [ m + 1 ] ; mat [ l ] [ m + 1 ] = temp1 ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5g"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2306,98,98,0,58,A2016/Z3/Z3/student4473,A2016/Z3/Z3/student6534,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , brojac , k , z , s , p ; printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; while ( m > 200 || n > 200 || m < 1 || n < 1 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } for ( s = 0 ; s < m ; s ++ ) { for ( i = s + 1 ; i < m ; i ++ ) { brojac = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ s ] [ j ] != mat [ i ] [ j ] ) { brojac = 0 ; break ; } } if ( brojac ) { for ( z = i + 1 ; z < m ; z ++ ) { for ( k = 0 ; k < n ; k ++ ) mat [ z - 1 ] [ k ] = mat [ z ] [ k ] ; } i -- ; m -- ; } } } for ( s = 0 ; s < n ; s ++ ) { for ( i = s + 1 ; i < n ; i ++ ) { brojac = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( mat [ j ] [ s ] != mat [ j ] [ i ] ) { brojac = 0 ; break ; } } if ( brojac ) { for ( z = i + 1 ; z < n ; z ++ ) { for ( k = 0 ; k < m ; k ++ ) mat [ k ] [ z - 1 ] = mat [ k ] [ z ] ; } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%4d "" , mat [ i ] [ j ] ) ; printf ( ""\n"" ) ; printf ( "" "" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , brojac , k , z , s , p ; printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; while ( m > 200 || n > 200 || m < 1 || n < 1 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } for ( s = 0 ; s < m ; s ++ ) { for ( i = s + 1 ; i < m ; i ++ ) { brojac = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ s ] [ j ] != mat [ i ] [ j ] ) { brojac = 0 ; break ; } } if ( brojac ) { for ( z = i + 1 ; z < m ; z ++ ) { for ( k = 0 ; k < n ; k ++ ) mat [ z - 1 ] [ k ] = mat [ z ] [ k ] ; } i -- ; m -- ; } } } for ( s = 0 ; s < n ; s ++ ) { for ( i = s + 1 ; i < n ; i ++ ) { brojac = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( mat [ j ] [ s ] != mat [ j ] [ i ] ) { brojac = 0 ; break ; } } if ( brojac ) { for ( z = i + 1 ; z < n ; z ++ ) { for ( k = 0 ; k < m ; k ++ ) mat [ k ] [ z - 1 ] = mat [ k ] [ z ] ; } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%4d "" , mat [ i ] [ j ] ) ; printf ( ""\n"" ) ; printf ( "" "" ) ; } return 0 ; }"
2328,96,96,0,16,A2016/Z1/Z2/student1266,A2016/Z1/Z2/student5961,"#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( ( fabs ( a1 - a2 ) ) < e && ( fabs ( b1 - b2 ) > e ) ) { printf ( ""paralelne su"" ) ; return 0 ; } if ( ( fabs ( a1 - a2 ) < e ) && ( fabs ( b1 - b2 ) < e ) ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; return 0 ; } if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
2335,97,97,0,142,A2016/Z4/Z3/student1192,A2016/Z4/Z3/student4473,"#include <stdio.h> int uporedi ( char * prva , char * druga , int duzina ) { char * p = prva , * d = druga ; int brojac = 0 ; while ( * d != '\0' ) { if ( * p != * d ) return 0 ; p ++ ; d ++ ; brojac ++ ; } if ( * d == '\0' && brojac != duzina ) return 0 ; return 1 ; } char * prepisi ( char * tekst , char * prva , char * druga , int duzina , int brojac ) { int i ; char * d = druga , * kraj = tekst , * p = prva ; if ( brojac == 0 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = prva ; while ( pok != kraj - duzina ) { * pok = * ( pok + duzina ) ; pok ++ ; } * pok = '\0' ; return tekst ; } if ( brojac != duzina ) { if ( brojac == 1 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = prva + 1 ; while ( pok != kraj - duzina + 1 ) { * pok = * ( pok + duzina - 1 ) ; pok ++ ; } * pok = '\0' ; * prva = * druga ; return tekst ; } while ( * kraj != '\0' ) kraj ++ ; if ( brojac > duzina ) { while ( kraj != p ) { * ( kraj + brojac - duzina ) = * kraj ; kraj -- ; } } if ( brojac < duzina ) { char * oduzima = p + duzina - brojac - 1 ; while ( oduzima != kraj - ( duzina - brojac ) ) { * oduzima = * ( oduzima + duzina - brojac ) ; oduzima ++ ; } * oduzima = '\0' ; } } for ( i = 0 ; i < brojac ; i ++ ) * ( p + i ) = * ( d + i ) ; return tekst ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , j = 0 , k , z , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , zamjena_velicina [ 50 ] = { 0 } ; char * p , * pok [ 100 ] , * p_rijec [ 100 ] , * p_zamjena [ 100 ] ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_zamjena [ i ] = zamjene [ i ] ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { char * z = p_zamjena [ i ] ; while ( * z != '\0' ) { zamjena_velicina [ i ] ++ ; z ++ ; } } for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_rijec [ i ] = rijeci [ i ] ; } p = tekst ; pok [ j ] = p ; i = 0 ; while ( * p != '\0' ) { if ( * p == ' ' ) { brojac_rijeci ++ ; do { p ++ ; } while ( * p == ' ' ) ; i ++ ; j ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , p_rijec [ j ] , brojac_slova [ i ] ) ) { tekst = prepisi ( tekst , pok [ i ] , p_zamjena [ j ] , brojac_slova [ i ] , zamjena_velicina [ j ] ) ; int z ; if ( zamjena_velicina [ j ] > brojac_slova [ i ] ) { for ( k = 0 ; k < zamjena_velicina [ j ] - brojac_slova [ i ] ; k ++ ) { for ( z = i ; z < brojac_rijeci ; z ++ ) pok [ z + 1 ] ++ ; } } if ( zamjena_velicina [ j ] < brojac_slova [ i ] ) { for ( k = 0 ; k < - zamjena_velicina [ j ] + brojac_slova [ i ] ; k ++ ) { for ( z = i ; z < brojac_rijeci ; z ++ ) pok [ z + 1 ] -- ; } } } } } return tekst ; } int main ( ) { char * rijeci [ 3 ] = { ""realno"" , ""ovo"" , ""nije"" } ; char * zamjena [ 3 ] = { ""zix"" , ""zax"" , ""zex"" } ; char tekst [ 100 ] = ""ovo nije realno"" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjena , 3 ) ) ; return 0 ; }","#include <stdio.h> int uporedi ( char * prva , char * druga , int duzina ) { char * p = prva , * d = druga ; int brojac = 0 ; while ( * d != '\0' ) { if ( * p != * d ) return 0 ; p ++ ; d ++ ; brojac ++ ; } if ( * d == '\0' && brojac != duzina ) return 0 ; return 1 ; } char * prepisi ( char * tekst , char * prva , char * druga , int duzina , int brojac ) { int i ; char * d = druga , * kraj = tekst , * p = prva ; if ( brojac == 0 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = prva ; while ( pok != kraj - duzina ) { * pok = * ( pok + duzina ) ; pok ++ ; } * pok = '\0' ; return tekst ; } if ( brojac != duzina ) { if ( brojac == 1 ) { while ( * kraj != '\0' ) kraj ++ ; char * pok = prva + 1 ; while ( pok != kraj - duzina + 1 ) { * pok = * ( pok + duzina - 1 ) ; pok ++ ; } * pok = '\0' ; * prva = * druga ; return tekst ; } while ( * kraj != '\0' ) kraj ++ ; if ( brojac > duzina ) { while ( kraj != p ) { * ( kraj + brojac - duzina ) = * kraj ; kraj -- ; } } if ( brojac < duzina ) { char * oduzima = p + duzina - brojac - 1 ; while ( oduzima != kraj - ( duzina - brojac ) ) { * oduzima = * ( oduzima + duzina - brojac ) ; oduzima ++ ; } * oduzima = '\0' ; } } for ( i = 0 ; i < brojac ; i ++ ) * ( p + i ) = * ( d + i ) ; return tekst ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , j = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , zamjena_velicina [ 50 ] = { 0 } ; char * p , * pok [ 100 ] , * p_rijec [ 100 ] , * p_zamjena [ 100 ] ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_zamjena [ i ] = zamjene [ i ] ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { char * z = p_zamjena [ i ] ; while ( * z != '\0' ) { zamjena_velicina [ i ] ++ ; z ++ ; } } for ( i = 0 ; i < broj_rijeci ; i ++ ) { p_rijec [ i ] = rijeci [ i ] ; } p = tekst ; pok [ j ] = p ; i = 0 ; while ( * p != '\0' ) { if ( * p == ' ' ) { brojac_rijeci ++ ; do { p ++ ; } while ( * p == ' ' ) ; i ++ ; j ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } int k , z ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , p_rijec [ j ] , brojac_slova [ i ] ) ) { tekst = prepisi ( tekst , pok [ i ] , p_zamjena [ j ] , brojac_slova [ i ] , zamjena_velicina [ j ] ) ; int z ; if ( zamjena_velicina [ j ] > brojac_slova [ i ] ) { for ( k = 0 ; k < zamjena_velicina [ j ] - brojac_slova [ i ] ; k ++ ) { for ( z = i ; z < brojac_rijeci ; z ++ ) pok [ z + 1 ] ++ ; } } if ( zamjena_velicina [ j ] < brojac_slova [ i ] ) { for ( k = 0 ; k < - zamjena_velicina [ j ] + brojac_slova [ i ] ; k ++ ) { for ( z = i ; z < brojac_rijeci ; z ++ ) pok [ z + 1 ] -- ; } } } } } return tekst ; } int main ( ) { char * rijeci [ 3 ] = { ""proba"" , ""ovo"" , ""je"" } ; char * zamjene [ 3 ] = { ""a"" , ""a"" , ""a"" } ; char tekst [ 100 ] = ""ovo je proba"" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 3 ) ) ; return 0 ; }"
2336,86,86,0,46,A2016/Z2/Z3/student8670,A2016/Z2/Z3/student4343,"#include <stdio.h> int main ( ) { int m , i , j , l , c , d ; char niz [ 20 ] [ 20 ] ; while ( 1 ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & m ) ; if ( m <= 10 && m > 0 ) break ; else printf ( ""pogresan unos \n"" ) ; } for ( j = 0 ; j < 20 ; j ++ ) { for ( l = 0 ; l < 20 ; l ++ ) { niz [ j ] [ l ] = ' ' ; } } for ( i = 1 ; i <= m ; i ++ ) { printf ( ""unesite %d. tacku: "" , i ) ; scanf ( ""%d %d"" , & c , & d ) ; if ( c < 0 || c > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else if ( d < 0 || d > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { for ( j = 0 ; j < 20 ; j ++ ) { for ( l = 0 ; l < 20 ; l ++ ) { if ( j == d && l == c ) niz [ j ] [ l ] = '*' ; } } } } for ( j = 0 ; j < 20 ; j ++ ) { for ( l = 0 ; l < 20 ; l ++ ) { printf ( ""%c"" , niz [ j ] [ l ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i = 0 , j = 0 , k = 0 , a , b ; char niz [ 20 ] [ 20 ] ; while ( 1 ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 10 && n > 0 ) break ; else printf ( ""pogresan unos\n"" ) ; } for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < 20 ; k ++ ) { niz [ j ] [ k ] = ' ' ; } } for ( i = 1 ; i <= n ; i ++ ) { printf ( ""unesite %i. tacku: "" , i ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 0 || a > 19 || b < 0 || b > 19 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < 20 ; k ++ ) { if ( j == b && k == a ) niz [ j ] [ k ] = '*' ; } } } } for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < 20 ; k ++ ) { printf ( ""%c"" , niz [ j ] [ k ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2341,95,95,0,21,A2016/Z1/Z2/student2965,A2016/Z1/Z2/student7980,"#include <stdio.h> #include <math.h> #define epsilon 0.0001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include<math.h> #define epsilon 0.0001 int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a2 * x + b2 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
2383,12,12,0,15,A2016/Z4/Z3/student6877,A2016/Z4/Z3/student5660,"#include <stdio.h> int slovo ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int mjenjati ( char * tekst , char * rijec ) { char * pocetak = tekst ; char * pocetakrijeci = rijec ; int isto = 1 ; while ( * tekst != '\0' && * rijec != '\0' ) { if ( * tekst != * rijec ) isto = 0 ; tekst ++ ; rijec ++ ; } if ( ( * tekst != '\0' && * tekst != ' ' ) || ( * rijec != '\0' ) ) isto = 0 ; tekst = pocetak ; rijec = pocetakrijeci ; return isto ; } void zamjeni ( char * tekst , char * rijec , char * novarijec ) { char * temp = tekst , * a = tekst , * rijtemp = rijec , * novatemp = novarijec ; int visak = 0 , i , nastavi = 1 ; while ( * tekst != '\0' ) { nastavi = 0 ; while ( * tekst != * rijec && * tekst != '\0' ) { tekst ++ ; } if ( * tekst != '\0' && ( tekst == temp || * ( tekst - 1 ) == ' ' ) && mjenjati ( tekst , rijec ) ) { while ( * novarijec != '\0' ) { if ( * tekst == ' ' || * tekst == '\0' ) { a = tekst ; while ( * tekst != '\0' ) tekst ++ ; tekst ++ ; while ( tekst > a ) { * tekst = * ( tekst - 1 ) ; tekst -- ; } } * tekst = * novarijec ; tekst ++ ; novarijec ++ ; } nastavi = 1 ; } if ( * tekst != ' ' && * tekst != '\0' && nastavi == 1 ) { a = tekst ; while ( * tekst != ' ' && * tekst != '\0' ) { visak ++ ; tekst ++ ; } tekst = a ; for ( i = 0 ; i < visak ; i ++ ) { tekst = a ; while ( * tekst != '\0' ) { * tekst = * ( tekst + 1 ) ; tekst ++ ; } } tekst = a ; } if ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; rijec = rijtemp ; novarijec = novatemp ; } tekst = temp ; rijec = rijtemp ; novarijec = novatemp ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijec ) { char * temptekst = tekst ; int i ; for ( i = 0 ; i < broj_rijec ; i ++ ) { tekst = temptekst ; while ( * tekst != '\0' ) { while ( * tekst == ' ' && * tekst != '\0' ) tekst ++ ; if ( mjenjati ( tekst , rijeci [ i ] ) ) { zamjeni ( tekst , rijeci [ i ] , zamjene [ i ] ) ; } while ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; } } return temptekst ; } int main ( ) { char * rijeci [ 2 ] = { """" , """" } ; char * zamjene [ 2 ] = { """" , """" } ; char tekst [ 100 ] = """" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }","#include <stdio.h> int dalijeznak ( char s ) { if ( s < 'a' || ( s > 'z' && s < 'a' ) || s > 'z' ) return 1 ; return 0 ; } int dajbrojslovaurijeci ( char * rijec ) { int brojac = 0 ; while ( * rijec != '\0' ) { brojac ++ ; rijec ++ ; } return brojac ; } int dalisujednake ( char * prva , char * druga ) { while ( * prva != ' ' && * prva == * druga && * prva != '\0' ) { prva ++ ; druga ++ ; } if ( ( * prva == ' ' || * prva == '\0' ) && * druga == '\0' ) return 1 ; return 0 ; } void izbaci ( char * trenutna ) { char * pocetak , * kraj ; pocetak = trenutna ; while ( * trenutna != ' ' && * trenutna != '\0' ) trenutna ++ ; kraj = trenutna ; while ( * kraj != '\0' ) * pocetak ++ = * kraj ++ ; while ( * pocetak != '\0' ) * pocetak ++ = '\0' ; } void ubaci ( char * trenutna , char * ubaca ) { char * kraj = trenutna ; int brojslova = dajbrojslovaurijeci ( ubaca ) ; while ( * kraj != '\0' ) kraj ++ ; while ( kraj > trenutna ) * ( kraj + brojslova ) = * kraj -- ; * ( kraj + brojslova ) = * kraj ; if ( * kraj != '\0' ) * kraj = ' ' ; while ( * ubaca != '\0' ) * trenutna ++ = * ubaca ++ ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { int i ; char * pocetakteksta = tekst , * trenutna ; while ( * tekst != '\0' ) { while ( * tekst == ' ' && * tekst != '\0' ) tekst ++ ; if ( * tekst == '\0' ) break ; trenutna = tekst ; for ( i = 0 ; i < broj_rijeci ; i ++ ) if ( dalisujednake ( trenutna , rijeci [ i ] ) ) { izbaci ( trenutna ) ; ubaci ( trenutna , zamjene [ i ] ) ; } if ( * tekst != ' ' ) { while ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; } else tekst ++ ; } return pocetakteksta ; } int main ( ) { char * rijeci [ 2 ] = { ""beli"" , ""sneg"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; char tekst [ 100 ] = ""beli sneg je pokrio beli breg"" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }"
2385,91,91,0,84,A2016/Z3/Z3/student3978,A2016/Z3/Z3/student8051,"#include <stdio.h> int main ( ) { int m , n , i , j , k , q , x [ 200 ] [ 200 ] , s ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n <= 0 || m <= 0 || n > 200 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( n <= 0 || m <= 0 || n > 200 || m > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & x [ i ] [ j ] ) ; } } s = 0 ; for ( i = 1 ; i < m ; i ++ ) { for ( j = 0 ; j < i ; j ++ ) { s = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( x [ i ] [ k ] != x [ j ] [ k ] ) { s = 1 ; break ; } } if ( s == 0 ) { for ( q = i ; q < m - 1 ; q ++ ) { for ( k = 0 ; k < n ; k ++ ) { x [ q ] [ k ] = x [ q + 1 ] [ k ] ; } } m -- ; i -- ; } } } for ( k = 1 ; k < n ; k ++ ) { for ( j = 0 ; j < k ; j ++ ) { s = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( x [ i ] [ k ] != x [ i ] [ j ] ) { s = 1 ; break ; } } if ( s == 0 ) { for ( q = k ; q < n - 1 ; q ++ ) { for ( i = 0 ; i < m ; i ++ ) { x [ i ] [ q ] = x [ i ] [ q + 1 ] ; } } k -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { printf ( "" "" ) ; for ( j = 0 ; j < n ; j ++ ) { printf ( ""%4d "" , x [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int a [ 200 ] [ 200 ] , m , n , i , j ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n <= 0 || n > 200 || m <= 0 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( n <= 0 || n > 200 || m <= 0 || m > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & a [ i ] [ j ] ) ; int logik = 0 , k , q ; for ( i = 1 ; i < m ; i ++ ) { for ( k = 0 ; k < i ; k ++ ) { logik = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( a [ i ] [ j ] != a [ k ] [ j ] ) { logik = 1 ; break ; } } if ( logik == 0 ) { for ( q = i ; q < m - 1 ; q ++ ) { for ( j = 0 ; j < n ; j ++ ) { a [ q ] [ j ] = a [ q + 1 ] [ j ] ; } } m -- ; i -- ; } } } for ( j = 1 ; j < n ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { logik = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( a [ i ] [ j ] != a [ i ] [ k ] ) { logik = 1 ; break ; } } if ( logik == 0 ) { for ( q = j ; q < n - 1 ; q ++ ) { for ( i = 0 ; i < m ; i ++ ) a [ i ] [ q ] = a [ i ] [ q + 1 ] ; } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { printf ( "" "" ) ; for ( j = 0 ; j < n ; j ++ ) { printf ( ""%4d "" , a [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2387,71,71,0,43,A2016/Z4/Z3/student2908,A2016/Z4/Z3/student2210,"#include <stdio.h> char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { int i , j = 0 , k = 0 , h = 0 , x ; char * p = tekst , * t = tekst ; char * kraj = p ; if ( tekst == null || broj_rijeci <= 0 ) return t ; while ( * tekst != '\0' ) { for ( i = 0 ; i < broj_rijeci ; i ++ ) { while ( * tekst != ' ' && * tekst != ',' && rijeci [ i ] [ j ] != '\0' ) { if ( * tekst != rijeci [ i ] [ j ] ) break ; tekst ++ ; j ++ ; } if ( ( * tekst == ' ' || * tekst == ',' || * tekst == '\0' ) && rijeci [ i ] [ j ] == '\0' ) { k = 0 ; h = 0 ; while ( rijeci [ i ] [ k ] != '\0' ) k ++ ; while ( zamjene [ i ] [ h ] != '\0' ) h ++ ; while ( * kraj != '\0' ) kraj ++ ; while ( kraj > p ) { * ( kraj + h - k ) = * kraj ; kraj -- ; } for ( x = 0 ; x < h ; x ++ ) { if ( * p == ' ' && x == 0 ) p ++ ; * p = zamjene [ i ] [ x ] ; p ++ ; tekst = p ; } } else if ( j == broj_rijeci - 1 || * tekst == '-' || * tekst == ',' ) { while ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; } p = tekst ; j = 0 ; } tekst ++ ; } return t ; } int main ( ) { char * rijeci [ 2 ] = { ""c"" } ; char * zamjene [ 2 ] = { ""prijestolonasljednikovica"" } ; char tekst [ 100 ] ; tekst [ 0 ] = 'c' ; tekst [ 1 ] = ' ' ; tekst [ 2 ] = 'c' ; tekst [ 3 ] = '\0' ; printf ( ""'%s'"" , zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ) ; return 0 ; }","#include <stdio.h> char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { int a = 0 , b = 0 , i , j = 0 , k ; char * p = tekst ; char * q = tekst ; char * zadnji = p ; if ( * tekst == null || broj_rijeci <= 0 ) return q ; while ( * tekst != '\0' ) { for ( i = 0 ; i < broj_rijeci ; i ++ ) { while ( * tekst != ' ' && * tekst != ',' && rijeci [ i ] [ j ] != '\0' ) { if ( * tekst != rijeci [ i ] [ j ] ) break ; j ++ ; tekst ++ ; } if ( ( * tekst == ' ' || * tekst == ',' || * tekst == '\0' ) && rijeci [ i ] [ j ] == '\0' ) { a = 0 ; b = 0 ; while ( rijeci [ i ] [ a ] != '\0' ) a ++ ; while ( zamjene [ i ] [ b ] != '\0' ) b ++ ; while ( * zadnji != '\0' ) zadnji ++ ; while ( zadnji > p ) { * ( zadnji - a + b ) = * zadnji ; zadnji -- ; } for ( k = 0 ; k < b ; k ++ ) { if ( * p == ' ' && k == 0 ) p ++ ; * p = zamjene [ i ] [ k ] ; p ++ ; tekst = p ; } } else if ( j == broj_rijeci - 1 || * tekst == '-' || * tekst == ',' ) { while ( * tekst != ' ' && * tekst != '\0' ) tekst ++ ; } p = tekst ; j = 0 ; } tekst ++ ; } return q ; } int main ( ) { char * rijeci [ 2 ] = { ""beli"" , ""sneg"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; char tekst [ 100 ] = { ""beli sneg je pokrio beli breg"" } ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }"
2390,99,99,0,201,A2016/Z5/Z2/student9972,A2016/Z5/Z2/student6723,"#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }"
2397,84,84,0,27,A2016/Z2/Z3/student3217,A2016/Z2/Z3/student8419,"#include <stdio.h> #define t 10 int main ( ) { int i , j , k , bt , x [ t ] , y [ t ] , a ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; if ( bt <= 0 || bt > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( bt <= 0 || bt > 10 ) ; for ( a = 0 ; a < bt ; a ++ ) { printf ( ""unesite %d. tacku: "" , a + 1 ) ; scanf ( ""%d %d"" , & x [ a ] , & y [ a ] ) ; if ( x [ a ] < 0 || y [ a ] < 0 || x [ a ] > 19 || y [ a ] > 19 ) { a -- ; printf ( ""pogresan unos\n"" ) ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < bt ; k ++ ) { if ( x [ k ] == j && y [ k ] == i ) { printf ( ""*"" ) ; j ++ ; } } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #define d 10 int main ( ) { int i , j , n , niza [ d ] , nizb [ d ] , c , e ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) printf ( ""pogresan unos\n"" ) ; } while ( n > 10 || n <= 0 ) ; for ( c = 0 ; c < n ; c ++ ) { printf ( ""unesite %d. tacku: "" , c + 1 ) ; scanf ( ""%d %d"" , & niza [ c ] , & nizb [ c ] ) ; if ( niza [ c ] < 0 || niza [ c ] > 19 || nizb [ c ] < 0 || nizb [ c ] > 19 ) { printf ( ""pogresan unos\n"" ) ; c -- ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( e = 0 ; e < n ; e ++ ) { if ( niza [ e ] == j && nizb [ e ] == i ) { printf ( ""*"" ) ; j ++ ; } } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2398,97,97,0,61,A2016/Z4/Z1/student2567,A2016/Z4/Z1/student9897,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { char * p = s ; char * kraj = s ; char * q = s ; int neslovo = 1 , razmak = 1 ; while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' ) neslovo = 1 ; else if ( neslovo == 1 ) { q ++ ; if ( * q == '\0' ) break ; if ( * p ++ == * q ++ ) { kraj = s ; while ( * kraj != '\0' && * kraj != ' ' ) kraj ++ ; } } } s ++ ; * kraj = '\0' ; } return q ; } int main ( ) { char tekst [ 100 ] ; printf ( ""unesite neki tekst: "" ) ; unesi ( tekst , 100 ) ; izbaci_najcescu ( tekst ) ; printf ( ""%s"" , tekst ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { char * p = s ; char * kraj = s ; char * q = s ; int neslovo = 1 , razmak = 1 ; while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' ) neslovo = 1 ; else if ( neslovo == 1 ) { q ++ ; if ( * q == '\0' ) break ; if ( * p ++ == * q ++ ) { kraj = s ; while ( * kraj != '\0' && * kraj != ' ' ) kraj ++ ; } } } s ++ ; * kraj = '\0' ; } return q ; } int main ( ) { char tekst [ 100 ] ; printf ( ""unesite neki tekst: "" ) ; unesi ( tekst , 100 ) ; izbaci_najcescu ( tekst ) ; printf ( ""%s"" , tekst ) ; return 0 ; }"
2409,44,44,0,13,A2016/Z3/Z1/student8518,A2016/Z3/Z1/student3759,"#include<stdio.h> int daj_prost ( ) { static int i = 1 ; int j ; i ++ ; for ( j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { daj_prost ( ) ; } } return i ; } int main ( ) { int a , b , i , y , suma = 0 ; do { printf ( ""unesite brojeve a i b:"" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( "" a nije prirodan broj.\n"" ) ; } if ( a >= b ) { printf ( "" a nije manje od b.\n"" ) ; } } while ( a >= b || a <= 0 || b <= 0 ) ; for ( i = 1 ; i < b ; i ++ ) { y = daj_prost ( ) ; if ( y > a && y < b ) { suma = suma + y ; } } printf ( "" suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int j ; static int a = 1 ; a ++ ; for ( j = 2 ; j < a ; j ++ ) { if ( a % j == 0 ) { a ++ ; j = 2 ; } } return a ; } int main ( ) { int a , b , i , suma = 0 , a ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a >= b || a <= 0 || b <= 0 ) ; for ( i = 0 ; i < b ; i ++ ) { a = daj_prost ( ) ; if ( a > a && a < b ) { suma = suma + a ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2421,20,20,0,36,A2016/Z5/Z3/student1833,A2016/Z5/Z3/student9538,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; return ucitano1 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int vel = sizeof ( struct cas ) ; int ucitano = fwrite ( raspored , vel , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , x , s , min = 100 , max = 0 ; int indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { s = raspored [ k ] . pocetak . sati ; if ( s <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; x = i ; } } if ( k == broj_casova ) for ( x = 0 ; x < 10 ; x ++ ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( cas . pocetak . minute + cas . pocetak . sati * 60 == raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 || raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 == cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . pocetak . minute + cas . pocetak . sati * 60 && raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 > cas . pocetak . minute + cas . pocetak . sati * 60 || cas . pocetak . minute + cas . pocetak . sati * 60 < raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 && cas . kraj . minute + cas . kraj . sati * 60 > raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 || raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . kraj . minute + cas . kraj . sati * 60 && raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 > cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 ; int i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j ; int k = 0 ; int n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , poc , moze = 0 ; struct cas cas ; for ( i = 1 ; i < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { dan = i ; poc = k ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = dan ; cas . pocetak . sati = poc ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; int index = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { index = i ; break ; } } raspored [ index ] = promjena ; } int poziv ( struct cas raspored [ ] , int ucit , char * ime , int br ) { int vr = dodaj_cas ( raspored , ucit , ime , br ) ; return vr ; } struct cas zamj ( struct cas casko , int dan , int sat , int min , int sat1 , int min1 ) { casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; return casko ; } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , rez , dan , cs , zap , m ; char ime [ 100 ] ; for ( m = 0 ; m < kapacitet ; m ++ ) { raspored [ m ] . pocetak . sati = 0 ; raspored [ m ] . kraj . sati = 0 ; raspored [ m ] . dan_u_sedmici = 1 ; raspored [ m ] . pocetak . minute = 0 ; raspored [ m ] . kraj . minute = 0 ; raspored [ m ] . pocetak . sekunde = 0 ; raspored [ m ] . kraj . sekunde = 0 ; } poc : printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; if ( broj == 0 ) return 0 ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; if ( broj == 0 ) return 0 ; rez = poziv ( raspored , ucit , ime , br ) ; if ( rez == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( rez == 1 ) ucit ++ ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; if ( broj == 0 ) return 0 ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; int sat , min ; char z ; int sat1 , min1 ; char z1 ; ispisi_dan ( raspored , ucit , dan ) ; if ( broj == 0 ) return 0 ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko = zamj ( casko , dan , sat , min , sat1 , min1 ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } if ( broj != 0 ) goto poc ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { int ima = 0 ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } void ispisreda ( ) { printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       pet       sub"" ) ; printf ( ""\n"" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , max = 0 , min = 100 ; int indexmaxa = 0 ; ispisreda ( ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; int x ; int s , dan , n ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { s = raspored [ k ] . pocetak . sati ; dan = raspored [ k ] . dan_u_sedmici ; n = raspored [ k ] . kraj . sati ; if ( s <= i && dan == j && n >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) for ( x = 0 ; x < 10 ; x ++ ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:%02d)"" , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; } } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j , brojac = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; brojac ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; if ( brojac > 0 ) break ; } } } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 && cas . kraj . minute + cas . kraj . sati * 60 > minkraj1 || raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 < cas . kraj . minute + cas . kraj . sati * 60 && minkraj1 > cas . kraj . minute + cas . kraj . sati * 60 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; struct cas cc ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } if ( preklop == 1 ) continue ; } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; int broj = opcija ; switch ( opcija ) { case 0 : { zapisi_datoteku ( raspored , broj_casova ) ; break ; } case 1 : { if ( broj != 0 ) ispis_rasporeda ( raspored , broj_casova ) ; break ; } case 2 : if ( broj != 0 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; if ( broj != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; if ( vr == 1 ) broj_casova ++ ; break ; } case 4 : if ( broj != 0 ) { int dan , redni ; int br = broj_casova ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , br , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , br , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } case 3 : if ( broj != 0 ) { struct cas promjena ; int dan , redni ; char * q , * p ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; ocisti ( unesi ( predmet , 10 ) ) ; q = promjena . predmet ; p = predmet ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . pocetak . sati , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; break ; } } } while ( opcija != 0 ) ; return 0 ; }"
2425,99,99,0,192,A2016/Z1/Z1/student8819,A2016/Z1/Z1/student4888,"#include <stdio.h> int main ( ) { float tp1 , tp2 , tp , tz , tzi , tu ; int to ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & tp1 ) ; if ( tp1 > 20 || tp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & tp2 ) ; if ( tp2 > 20 || tp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & tp ) ; if ( tp > 10 || tp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & tz ) ; if ( tz > 10 || tz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & tzi ) ; if ( tzi > 40 || tzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tu = tp1 + tp2 + tz + tp + tzi ; if ( tu < 55 ) to = 0 ; if ( tu >= 55 && tu < 65 ) to = 6 ; if ( tu >= 65 && tu < 75 ) to = 7 ; if ( tu >= 75 && tu < 85 ) to = 8 ; if ( tu >= 85 && tu < 92 ) to = 9 ; if ( tu >= 92 && tu <= 100 ) to = 10 ; float bp1 , bp2 , bp , bz , bzi , bu ; int bo ; printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & bz ) ; if ( bz > 10 || bz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bu = bp1 + bp2 + bz + bp + bzi ; if ( bu < 55 ) bo = 0 ; if ( bu >= 55 && bu < 65 ) bo = 6 ; if ( bu >= 65 && bu < 75 ) bo = 7 ; if ( bu >= 75 && bu < 85 ) bo = 8 ; if ( bu >= 85 && bu < 92 ) bo = 9 ; if ( bu >= 92 && bu <= 100 ) bo = 10 ; float mp1 , mp2 , mp , mz , mzi , mu ; int mo ; printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & mz ) ; if ( mz > 10 || mz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mu = mp1 + mp2 + mz + mp + mzi ; if ( mu < 55 ) mo = 0 ; if ( mu >= 55 && mu < 65 ) mo = 6 ; if ( mu >= 65 && mu < 75 ) mo = 7 ; if ( mu >= 75 && mu < 85 ) mo = 8 ; if ( mu >= 85 && mu < 92 ) mo = 9 ; if ( mu >= 92 && mu <= 100 ) mo = 10 ; int t = 0 ; int b = 0 ; int m = 0 ; int s = 0 ; if ( to > 5 ) t ++ ; if ( bo > 5 ) b ++ ; if ( mo > 5 ) m ++ ; s = t + b + m ; if ( s == 0 ) printf ( ""nijedan student nije polozio. "" ) ; if ( s == 1 ) printf ( ""jedan student je polozio. "" ) ; if ( s == 2 ) printf ( ""dva studenta su polozila. "" ) ; if ( s == 3 ) { printf ( ""sva tri studenta su polozila. "" ) ; if ( to == bo && to == mo ) printf ( ""\nsva tri studenta imaju istu ocjenu. "" ) ; if ( to == bo && bo != mo || mo == to && bo != to ) printf ( ""\ndva od tri studenta imaju istu ocjenu. "" ) ; if ( to != bo && mo != to ) printf ( ""\nsvaki student ima razlicitu ocjenu. "" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float tp1 , tp2 , tp , tz , tzi , tu ; int to ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & tp1 ) ; if ( tp1 > 20 || tp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & tp2 ) ; if ( tp2 > 20 || tp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & tp ) ; if ( tp > 10 || tp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & tz ) ; if ( tz > 10 || tz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & tzi ) ; if ( tzi > 40 || tzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tu = tp1 + tp2 + tz + tp + tzi ; if ( tu < 55 ) to = 0 ; if ( tu >= 55 && tu < 65 ) to = 6 ; if ( tu >= 65 && tu < 75 ) to = 7 ; if ( tu >= 75 && tu < 85 ) to = 8 ; if ( tu >= 85 && tu < 92 ) to = 9 ; if ( tu >= 92 && tu <= 100 ) to = 10 ; float bp1 , bp2 , bp , bz , bzi , bu ; int bo ; printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & bz ) ; if ( bz > 10 || bz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bu = bp1 + bp2 + bz + bp + bzi ; if ( bu < 55 ) bo = 0 ; if ( bu >= 55 && bu < 65 ) bo = 6 ; if ( bu >= 65 && bu < 75 ) bo = 7 ; if ( bu >= 75 && bu < 85 ) bo = 8 ; if ( bu >= 85 && bu < 92 ) bo = 9 ; if ( bu >= 92 && bu <= 100 ) bo = 10 ; float mp1 , mp2 , mp , mz , mzi , mu ; int mo ; printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & mz ) ; if ( mz > 10 || mz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mu = mp1 + mp2 + mz + mp + mzi ; if ( mu < 55 ) mo = 0 ; if ( mu >= 55 && mu < 65 ) mo = 6 ; if ( mu >= 65 && mu < 75 ) mo = 7 ; if ( mu >= 75 && mu < 85 ) mo = 8 ; if ( mu >= 85 && mu < 92 ) mo = 9 ; if ( mu >= 92 && mu <= 100 ) mo = 10 ; int t = 0 ; int b = 0 ; int m = 0 ; int s = 0 ; if ( to > 5 ) t ++ ; if ( bo > 5 ) b ++ ; if ( mo > 5 ) m ++ ; s = t + b + m ; if ( s == 0 ) printf ( ""nijedan student nije polozio. "" ) ; if ( s == 1 ) printf ( ""jedan student je polozio. "" ) ; if ( s == 2 ) printf ( ""dva studenta su polozila. "" ) ; if ( s == 3 ) { printf ( ""sva tri studenta su polozila. "" ) ; if ( to == bo && to == mo ) printf ( ""\nsva tri studenta imaju istu ocjenu. "" ) ; if ( to == bo && bo != mo || mo == to && bo != to ) printf ( ""\ndva od tri studenta imaju istu ocjenu. "" ) ; if ( to != bo && mo != to ) printf ( ""\nsvaki student ima razlicitu ocjenu. "" ) ; } return 0 ; }"
2427,99,99,0,98,A2016/Z4/Z4/student8187,A2016/Z4/Z4/student3631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * obuhvat ( char * tekst , double x1 , double x2 , double y1 , double y2 ) { char * krajprosle ; char * s = tekst ; double x = 0 , y = 0 ; double o = 0.1 ; while ( * s != '\0' ) { if ( ! ( ( * s >= 0 && s <= 9 ) || * s == '-' || * s == '.' || * s == ',' ) ) return 0 ; int imadec = 0 , predznak = 1 ; char * poc ; if ( * s = '(' ) { poc = s ; s ++ ; } x = 0 ; while ( * s != ',' ) { if ( ! ( ( * s >= 0 && s <= 9 ) || * s == '-' || * s == '.' || * s == ',' ) ) return 0 ; if ( * s == '-' ) { s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( * s == ',' ) { break ; } if ( imadec == 0 ) { x = x * 10 + ( * s - 48 ) ; } else { x = x + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } x = x * predznak ; imadec = 0 ; predznak = 1 ; s ++ ; y = 0 ; o = 0.1 ; while ( s != ')' ) { if ( * s == '-' ) { s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( imadec == 0 ) { y = y * 10 + ( * s - 48 ) ; } else { y = y + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } y = y * predznak ; krajprosle = s ; char * a = poc ; int izb = 0 ; if ( y > y2 || y < y1 || x < x1 || x > x2 ) { izb = 1 ; if ( * ( s + 1 ) == '\0' ) { * ( poc - 1 ) = '\0' ; return tekst ; } else { char * hod = s + 2 ; while ( * hod != '\0' ) { * poc = * hod ; poc ++ ; hod ++ ; } poc = '\0' ; } } if ( izb ) { s = a ; s -= 2 ; } s ++ ; s ++ ; } return tekst ; } int main ( ) { char s [ ] = ""(2.,2)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s"" , rez , s ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * obuhvat ( char * tekst , double x1 , double x2 , double y1 , double y2 ) { char * krajprosle ; char * s = tekst ; double x = 0 , y = 0 ; double o = 0.1 ; while ( * s != '\0' ) { if ( ! ( ( * s >= 0 && s <= 9 ) || * s == '-' || * s == '.' || * s == ',' ) ) return 0 ; int imadec = 0 , predznak = 1 ; char * poc ; if ( * s = '(' ) { poc = s ; s ++ ; } x = 0 ; while ( * s != ',' ) { if ( ! ( ( * s >= 0 && s <= 9 ) || * s == '-' || * s == '.' || * s == ',' ) ) return 0 ; if ( * s == '-' ) { s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( * s == ',' ) { break ; } if ( imadec == 0 ) { x = x * 10 + ( * s - 48 ) ; } else { x = x + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } x = x * predznak ; imadec = 0 ; predznak = 1 ; s ++ ; y = 0 ; o = 0.1 ; while ( s != ')' ) { if ( * s == '-' ) { s ++ ; predznak = - 1 ; } if ( * s == '.' ) { imadec = 1 ; s ++ ; } if ( imadec == 0 ) { y = y * 10 + ( * s - 48 ) ; } else { y = y + ( * s - 48 ) * o ; o = o / 10 ; } s ++ ; } y = y * predznak ; krajprosle = s ; char * a = poc ; int izb = 0 ; if ( y > y2 || y < y1 || x < x1 || x > x2 ) { izb = 1 ; if ( * ( s + 1 ) == '\0' ) { * ( poc - 1 ) = '\0' ; return tekst ; } else { char * hod = s + 2 ; while ( * hod != '\0' ) { * poc = * hod ; poc ++ ; hod ++ ; } poc = '\0' ; } } if ( izb ) { s = a ; s -= 2 ; } s ++ ; s ++ ; } return tekst ; } int main ( ) { char s [ ] = ""(2.,2)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s"" , rez , s ) ; return 0 ; }"
2429,96,96,0,35,A2016/Z3/Z1/student8029,A2016/Z3/Z1/student3715,"#include <stdio.h> int da_li_je_prost_broj ( int broj ) { int kazi = 1 , i ; if ( broj < 2 ) return 0 ; for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { kazi = 0 ; break ; } } return kazi ; } int daj_prost ( ) { static int a = 1 ; a ++ ; while ( da_li_je_prost_broj ( a ) != 1 ) a ++ ; return a ; } int main ( ) { int a , b , p , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj. \n"" ) ; else if ( a > b ) printf ( ""a nije manje od b. \n"" ) ; else if ( a == b ) printf ( ""a nije manje od b. \n"" ) ; } while ( a < 1 || a == b || a > b ) ; p = daj_prost ( ) ; while ( p <= a ) p = daj_prost ( ) ; while ( p < b ) { suma += p ; p = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d. "" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int da_li_je_prost_broj ( int broj ) { int kazi = 1 , i ; if ( broj < 2 ) return 0 ; for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { kazi = 0 ; break ; } } return kazi ; } int daj_prost ( ) { static int a = 1 ; a ++ ; while ( da_li_je_prost_broj ( a ) != 1 ) a ++ ; return a ; } int main ( ) { int a , b , p , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj. \n"" ) ; else if ( a > b ) printf ( ""a nije manje od b. \n"" ) ; else if ( a == b ) printf ( ""a nije manje od b. \n"" ) ; } while ( a < 1 || a == b || a > b ) ; p = daj_prost ( ) ; while ( p <= a ) p = daj_prost ( ) ; while ( p < b ) { suma += p ; p = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d. "" , a , b , suma ) ; return 0 ; }"
2431,19,19,0,14,A2016/Z4/Z2/student1616,A2016/Z4/Z2/student6029,"#include <stdio.h> void sortiraj ( int * niz , int * sort , int * index ) { int i , j ; int temp ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && index [ i ] > index [ j ] ) { temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } } } } void pretvori ( char * s , char * sifrarnik ) { char * p = s , * kljuc = sifrarnik ; int br ; while ( * p != '\0' ) { br = 0 ; kljuc = sifrarnik ; while ( * kljuc != '\0' ) { if ( * p == * kljuc ++ ) { * p = 126 - br ; break ; } br ++ ; } p ++ ; } } char * kodiraj ( char * s , char * sifrarnik ) { char * p = s , * pok = sifrarnik ; int i ; int niz [ 127 ] ; int sort [ 127 ] ; int index [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; index [ i ] = - 1 ; } else { niz [ i ] = 0 ; index [ i ] = i ; } } while ( * p != '\0' ) { niz [ * p + 0 ] ++ ; p ++ ; } for ( i = 0 ; i < 127 ; i ++ ) sort [ i ] = niz [ i ] ; sortiraj ( niz , sort , index ) ; for ( i = 0 ; i < 127 ; i ++ ) { if ( index [ i ] != - 1 ) { * pok = index [ i ] ; pok ++ ; } } pretvori ( s , sifrarnik ) ; return s ; } char * dekodiraj ( char * s , char * sifrarnik ) { char * p = s ; while ( * p != '\0' ) { * p = sifrarnik [ 126 - * p ] ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""u ovom testu cemo testirati samo kodiranje"" ; char sifrarnik [ 100 ] = """" ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; printf ( ""%s\n"" , sifrarnik ) ; return 0 ; }","#include <stdio.h> void sortiraj1 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] < s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } void sortiraj2 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] > s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } char * kodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = { ' ' } , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , j = 0 , br = 0 , vel = 0 , da = 0 , pret = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj1 ( slova , brojevi , vel ) ; for ( i = 0 ; i < vel ; i ++ ) { * t = slova [ i ] ; t ++ ; } for ( i = 32 ; i < 127 ; i ++ ) { pret = 1 ; for ( j = 0 ; j < vel ; j ++ ) if ( i == slova [ j ] ) pret = 0 ; if ( pret ) { * t = i ; t ++ ; * t = '\0' ; } } s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = 126 - i ; break ; } s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = """" , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , br = 0 , vel = 0 , da = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj2 ( slova , brojevi , vel ) ; s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = * ( t + i ) ; break ; } s ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] = ""llmlnlnmonm"" , tablica [ 200 ] = """" ; printf ( ""%s\n%s"" , kodiraj ( tekst , tablica ) , tablica ) ; printf ( ""\n%s"" , dekodiraj ( tekst , tablica ) ) ; return 0 ; }"
2436,78,78,0,169,A2016/Z1/Z1/student7496,A2016/Z1/Z1/student8796,"#include <stdio.h> #include <stdlib.h> int main ( ) { float a , b , c , x1 , x2 , x3 , x4 , x5 , y1 , y2 , y3 , y4 , y5 , z1 , z2 , z3 , z4 , z5 ; int x , y , z ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & y1 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & y2 ) ; if ( y2 < 0 || y2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & y3 ) ; if ( y3 < 0 || y3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & y4 ) ; if ( y4 < 0 || y4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & y5 ) ; if ( y5 < 0 || y5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & z1 ) ; if ( z1 < 0 || z1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & z2 ) ; if ( z2 < 0 || z2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & z4 ) ; if ( z4 < 0 || z4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & z5 ) ; if ( z5 < 0 || z5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; a = x1 + x2 + x3 + x4 + x5 ; b = y1 + y2 + y3 + y4 + y5 ; c = z1 + z2 + z3 + z4 + z5 ; x = a ; y = b ; z = c ; if ( x < 55 ) { x = 5 ; } if ( x >= 55 && x < 65 ) { x = 6 ; } if ( x >= 65 && x < 75 ) { x = 7 ; } if ( x >= 75 && x < 85 ) { x = 8 ; } if ( x >= 85 && x < 92 ) { x = 9 ; } if ( x >= 92 && x < 100 ) { x = 10 ; } if ( y < 55 ) { y = 5 ; } if ( y >= 55 && y < 65 ) { y = 6 ; } if ( y >= 65 && y < 75 ) { y = 7 ; } if ( y >= 75 && y < 85 ) { y = 8 ; } if ( y >= 85 && y < 92 ) { y = 9 ; } if ( y >= 92 && y < 100 ) { y = 10 ; } if ( z < 55 ) { z = 5 ; } if ( z >= 55 && z < 65 ) { z = 6 ; } if ( z >= 65 && z < 75 ) { z = 7 ; } if ( z >= 75 && z < 85 ) { z = 8 ; } if ( z >= 85 && z < 92 ) { z = 9 ; } if ( z >= 92 && z < 100 ) { z = 10 ; } if ( x > 5 && y > 5 && z > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; return 0 ; } if ( x <= 5 && y <= 5 && z <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y <= 5 && z <= 5 ) || ( x <= 5 && y > 5 && z <= 5 ) || ( x <= 5 && y <= 5 && z > 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y > 5 && z <= 5 ) || ( x <= 5 && y > 5 && z > 5 ) || ( x > 5 && y <= 5 && z > 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( x == y && y == z ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } if ( x != y && y != z ) { printf ( ""sva tri studenta imaju razlicitu ocjenu.\n"" ) ; return 0 ; } if ( ( x == y && y != z ) || ( x != y && y == z ) || ( x == y && y != z ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { float t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , m1 , m2 , m3 , m4 , m5 ; int a , b , c ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & t5 ) ; if ( t5 < 0 || t5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & b5 ) ; if ( b5 < 0 || b5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & m1 ) ; if ( m1 < 0 || m1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & m2 ) ; if ( m2 < 0 || m2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & m3 ) ; if ( m3 < 0 || m3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & m4 ) ; if ( m4 < 0 || m4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & m5 ) ; if ( m5 < 0 || m5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; a = t1 + t2 + t3 + t4 + t5 ; b = b1 + b2 + b3 + b4 + b5 ; c = m1 + m2 + m3 + m4 + m5 ; if ( a < 55 ) { a = 5 ; } if ( a >= 55 && a < 65 ) { a = 6 ; } if ( a >= 65 && a < 75 ) { a = 7 ; } if ( a >= 75 && a < 85 ) { a = 8 ; } if ( a >= 85 && a < 92 ) { a = 9 ; } if ( a >= 92 && a <= 100 ) { a = 10 ; } if ( b < 55 ) { b = 5 ; } if ( b >= 55 && b < 65 ) { b = 6 ; } if ( b >= 65 && b < 75 ) { b = 7 ; } if ( b >= 75 && b < 85 ) { b = 8 ; } if ( b >= 85 && b < 92 ) { b = 9 ; } if ( b >= 92 && b <= 100 ) { b = 10 ; } if ( c < 55 ) { c = 5 ; } if ( c >= 55 && c < 65 ) { c = 6 ; } if ( c >= 65 && c < 75 ) { c = 7 ; } if ( c >= 75 && c < 85 ) { c = 8 ; } if ( c >= 85 && c < 92 ) { c = 9 ; } if ( c >= 92 && c < 100 ) { c = 10 ; } if ( a > 5 && b > 5 && c > 5 ) { printf ( ""sva tri studenta su polozila. \n"" ) ; } if ( a <= 5 && b <= 5 && c <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( a > 5 && b <= 5 && c <= 5 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( a <= 5 && b > 5 && c <= 5 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( a <= 5 && b <= 5 && c > 5 ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( a > 5 && b > 5 && c <= 5 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( a <= 5 && b > 5 && c > 5 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( a > 5 && b <= 5 && c > 5 ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( a == b && b == c ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } if ( a != b && b != c ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } if ( a == b && b != c ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } if ( a != b && b == c ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } if ( a == c && b != c ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } return 0 ; }"
2437,93,93,0,68,A2016/Z3/Z3/student2900,A2016/Z3/Z3/student1313,"#include <stdio.h> int main ( ) { int i , i1 , i2 , j , m , n , matrica [ 200 ] [ 200 ] , temp ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 0 || m > 200 || n < 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; else break ; } while ( 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( i1 = i + 1 ; i1 < m ; i1 ++ ) { int a = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ i1 ] [ j ] ) a = 0 ; } if ( a == 1 ) { for ( i2 = i1 + 1 ; i2 < m ; i2 ++ ) { for ( j = 0 ; j < n ; j ++ ) { int temp = matrica [ i2 - 1 ] [ j ] ; matrica [ i2 - 1 ] [ j ] = matrica [ i2 ] [ j ] ; matrica [ i2 ] [ j ] = temp ; } } m -- ; i1 -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i1 = j + 1 ; i1 < n ; i1 ++ ) { int a = 1 ; for ( i2 = 0 ; i2 < m ; i2 ++ ) { if ( matrica [ i2 ] [ j ] != matrica [ i2 ] [ i1 ] ) a = 0 ; } if ( a == 1 ) { for ( i = i1 + 1 ; i < n ; i ++ ) { for ( i2 = 0 ; i2 < m ; i2 ++ ) { int temp ; temp = matrica [ i2 ] [ i - 1 ] ; matrica [ i2 ] [ i - 1 ] = matrica [ i2 ] [ i ] ; matrica [ i2 ] [ i ] = temp ; } } n -- ; i1 -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5.d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , mat [ 200 ] [ 200 ] , m , n , i1 , i2 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 0 || m > 200 || n < 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; else break ; } while ( 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( i1 = i + 1 ; i1 < m ; i1 ++ ) { int istinitost = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i1 ] [ j ] ) istinitost = 0 ; } if ( istinitost == 1 ) { for ( i2 = i1 + 1 ; i2 < m ; i2 ++ ) { for ( j = 0 ; j < n ; j ++ ) { int temp = mat [ i2 - 1 ] [ j ] ; mat [ i2 - 1 ] [ j ] = mat [ i2 ] [ j ] ; mat [ i2 ] [ j ] = temp ; } } m -- ; i1 -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i1 = j + 1 ; i1 < n ; i1 ++ ) { int istinitost = 1 ; for ( i2 = 0 ; i2 < m ; i2 ++ ) { if ( mat [ i2 ] [ j ] != mat [ i2 ] [ i1 ] ) istinitost = 0 ; } if ( istinitost == 1 ) { for ( i = i1 + 1 ; i < n ; i ++ ) { for ( i2 = 0 ; i2 < m ; i2 ++ ) { int temp = mat [ i2 ] [ i - 1 ] ; mat [ i2 ] [ i - 1 ] = mat [ i2 ] [ i ] ; mat [ i2 ] [ i ] = temp ; } } n -- ; i1 -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5.d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2444,74,74,0,40,A2016/Z2/Z2/student2464,A2016/Z2/Z2/student4495,"#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int n , i ; double a [ 502 ] , st [ 502 ] , m [ 502 ] , sk [ 502 ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & a [ i ] ) ; st [ i ] = a [ i ] * 180 / pi ; m [ i ] = ( ( ( int ) ( st [ i ] ) - st [ i ] ) * 60 ) ; sk [ i ] = ( ( ( int ) ( m [ i ] ) - m [ i ] ) * 60 ) ; if ( sk [ i ] >= 0 ) sk [ i ] += 0.5 ; else sk [ i ] -= 0.5 ; sk [ i ] = ( int ) ( sk [ i ] ) ; st [ i ] = ( int ) st [ i ] ; m [ i ] = fabs ( ( int ) m [ i ] ) ; sk [ i ] = fabs ( ( int ) sk [ i ] ) ; if ( sk [ i ] == 60 ) { sk [ i ] = 0 ; m [ i ] ++ ; } if ( m [ i ] == 60 ) { m [ i ] = 0 ; if ( st [ i ] >= 0 ) st [ i ] ++ ; else st [ i ] -- ; } if ( sk [ i ] > 30 ) { i -- ; n -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""%g stepeni %g minuta %g sekundi\n"" , st [ i ] , m [ i ] , sk [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int br_u , i ; double rad [ 502 ] , stepeni [ 502 ] , minute [ 502 ] , sekundi [ 502 ] ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & br_u ) ; } while ( br_u < 1 || br_u > 500 ) ; for ( i = 0 ; i < br_u ; i ++ ) { scanf ( ""%lf"" , & rad [ i ] ) ; stepeni [ i ] = rad [ i ] * 180 / pi ; minute [ i ] = ( ( ( int ) ( stepeni [ i ] ) - stepeni [ i ] ) * 60 ) ; sekundi [ i ] = ( ( ( int ) ( minute [ i ] ) - minute [ i ] ) * 60 ) ; if ( sekundi [ i ] >= 0 ) sekundi [ i ] += 0.5 ; else sekundi [ i ] -= 0.5 ; sekundi [ i ] = fabs ( ( int ) ( sekundi [ i ] ) ) ; minute [ i ] = fabs ( ( int ) ( minute [ i ] ) ) ; stepeni [ i ] = ( int ) ( stepeni [ i ] ) ; if ( sekundi [ i ] == 60 ) { minute [ i ] ++ ; sekundi [ i ] = 0 ; } if ( minute [ i ] >= 60 ) { minute [ i ] = 0 ; if ( stepeni [ i ] >= 0 ) stepeni [ i ] ++ ; else stepeni [ i ] -- ; } if ( sekundi [ i ] > 30 ) { br_u -- ; i -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < br_u ; i ++ ) { printf ( ""%g stepeni %g minuta %g sekundi\n"" , stepeni [ i ] , minute [ i ] , sekundi [ i ] ) ; } return 0 ; }"
2454,99,99,0,61,A2016/Z2/Z4/student5904,A2016/Z2/Z4/student7774,"#include <stdio.h> #define niz 100 int main ( ) { int m , n , i , j , tip_matrice = 2 ; double el [ niz ] [ niz ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 100 ) { printf ( ""pogresan unos!\n"" ) ; } else if ( n < 1 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m < 1 || m > 100 || n < 1 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & el [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( ( el [ i ] [ j ] != el [ i + 1 ] [ j + 1 ] ) || ( el [ i ] [ n - 1 ] != el [ i + 1 ] [ 0 ] ) ) { tip_matrice -- ; i = m ; break ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( el [ i ] [ j ] != el [ i + 1 ] [ j + 1 ] ) { tip_matrice -- ; i = m ; break ; } } } switch ( tip_matrice ) { case 2 : printf ( ""matrica je cirkularna"" ) ; break ; case 1 : printf ( ""matrica je teplicova"" ) ; break ; case 0 : printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; break ; } return 0 ; }","#include <stdio.h> #define niz 100 int main ( ) { int m , n , i , j , tip_matrice = 2 ; double el [ niz ] [ niz ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 100 ) { printf ( ""pogresan unos!\n"" ) ; } else if ( n < 1 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m < 1 || m > 100 || n < 1 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & el [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( ( el [ i ] [ j ] != el [ i + 1 ] [ j + 1 ] ) || ( el [ i ] [ n - 1 ] != el [ i + 1 ] [ 0 ] ) ) { tip_matrice -- ; i = m ; break ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( el [ i ] [ j ] != el [ i + 1 ] [ j + 1 ] ) { tip_matrice -- ; i = m ; break ; } } } switch ( tip_matrice ) { case 2 : printf ( ""matrica je cirkularna"" ) ; break ; case 1 : printf ( ""matrica je teplicova"" ) ; break ; case 0 : printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; break ; } return 0 ; }"
2455,83,83,0,42,A2016/Z2/Z3/student8329,A2016/Z2/Z3/student9160,"#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , brtac ; int br ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; while ( ( brtac < 1 ) || ( brtac > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < brtac ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( ( i < 0 ) || ( i > 19 ) || ( j < 0 ) || ( j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int broj_tacaka , brojac , i , j ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; while ( broj_tacaka < 1 || broj_tacaka > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( brojac = 0 ; brojac < broj_tacaka ; brojac ++ ) { printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; while ( i < 0 || j < 0 || j > 19 || i > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & i ) ; scanf ( ""%d"" , & j ) ; } niz [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2456,85,85,0,49,A2016/Z2/Z2/student9972,A2016/Z2/Z2/student5380,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; int i , j , n ; double stepeni , minute , sekunde ; double ugao ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { ugao = fabs ( ( niz [ i ] * 180 ) / pi ) ; minute = ( ugao - ( int ) ugao ) * 60 ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; if ( sekunde == 60 ) { sekunde = 0 , minute ++ ; } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { ugao = ( niz [ i ] * 180 ) / pi ; minute = fabs ( ( ugao - ( int ) ugao ) * 60 ) ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; stepeni = ( int ) ugao ; minute = ( int ) minute ; sekunde = round ( sekunde ) ; if ( stepeni >= 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni ++ ; } } if ( stepeni < 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , stepeni , minute , sekunde ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; double step , min , sec , x ; int i , j , n ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { x = fabs ( ( niz [ i ] ) * ( 180 / pi ) ) ; min = ( ( x - ( int ) x ) * 60 ) ; sec = ( round ( ( min - ( int ) min ) * 60 ) ) ; if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { x = ( niz [ i ] * ( 180 / pi ) ) ; min = fabs ( ( x - ( int ) x ) * 60 ) ; sec = ( ( min - ( int ) min ) * 60 ) ; step = ( int ) x ; min = ( int ) min ; sec = round ( sec ) ; if ( step >= 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step ++ ; } } if ( step < 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , step , min , sec ) ; } return 0 ; }"
2459,98,98,0,30,A2016/Z2/Z3/student1266,A2016/Z2/Z3/student3217,"#include <stdio.h> #define t 10 int main ( ) { int i , j , k , bt , x [ t ] , y [ t ] , a ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; if ( bt <= 0 || bt > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( bt <= 0 || bt > 10 ) ; for ( a = 0 ; a < bt ; a ++ ) { printf ( ""unesite %d. tacku: "" , a + 1 ) ; scanf ( ""%d %d"" , & x [ a ] , & y [ a ] ) ; if ( x [ a ] < 0 || y [ a ] < 0 || x [ a ] > 19 || y [ a ] > 19 ) { a -- ; printf ( ""pogresan unos\n"" ) ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < bt ; k ++ ) { if ( x [ k ] == j && y [ k ] == i ) { printf ( ""*"" ) ; j ++ ; } } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #define t 10 int main ( ) { int i , j , k , bt , x [ t ] , y [ t ] , a ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; if ( bt <= 0 || bt > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( bt <= 0 || bt > 10 ) ; for ( a = 0 ; a < bt ; a ++ ) { printf ( ""unesite %d. tacku: "" , a + 1 ) ; scanf ( ""%d %d"" , & x [ a ] , & y [ a ] ) ; if ( x [ a ] < 0 || y [ a ] < 0 || x [ a ] > 19 || y [ a ] > 19 ) { a -- ; printf ( ""pogresan unos\n"" ) ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < bt ; k ++ ) { if ( x [ k ] == j && y [ k ] == i ) { printf ( ""*"" ) ; j ++ ; } } printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2465,95,95,0,18,A2016/Z2/Z1/student2831,A2016/Z2/Z1/student3943,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , a , b , c , s = 0 , h , d = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 0 && n < 10 ) printf ( ""0"" ) ; else { h = abs ( n ) ; while ( h >= 10 ) { a = h % 10 ; b = h % 100 ; b = b / 10 ; c = abs ( a - b ) ; s = s + ( c * d ) ; d = d * 10 ; h = h / 10 ; } printf ( ""%d"" , s ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int n , a , b , c , s = 0 , h , d = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 0 && n < 10 ) printf ( ""0"" ) ; else { h = abs ( n ) ; while ( h >= 10 ) { a = h % 10 ; b = h % 100 ; b = b / 10 ; c = abs ( a - b ) ; s = s + ( c * d ) ; d = d * 10 ; h = h / 10 ; } printf ( ""%d"" , s ) ; } return 0 ; }"
2474,98,98,0,115,A2016/Z3/Z2/student8794,A2016/Z3/Z2/student4415,"#include <stdio.h> #include <math.h> int fibonaci ( int a ) { int b = a , first = 0 , second = 1 , next , x = 1 ; while ( 1 ) { next = first + second ; if ( b == next ) break ; else if ( b < next ) { x = 0 ; break ; } else { first = second ; second = next ; } } return x ; } int suma_cif ( int a ) { int zad_cifra , suma = 0 ; int b = fabs ( a ) ; while ( b ) { zad_cifra = b % 10 ; suma = suma + zad_cifra ; b = b / 10 ; } return suma ; } void ubaci ( int niz [ ] , int vel ) { int i , position = 2 ; int vel1 = vel ; int * p = niz , * q = niz , * d = niz ; while ( d < niz + vel ) { for ( i = vel1 - 1 ; i >= position - 1 ; i -- ) { * ( p + i + 1 ) = * ( p + i ) ; } * ( p + position - 1 ) = suma_cif ( * q ) ; vel1 ++ ; position += 2 ; q += 2 ; d ++ ; } } int izbaci ( int niz [ ] , int vel ) { int vel1 = vel , i , j ; int * p = niz , * q = niz ; for ( i = 0 ; i < vel1 ; i ++ ) { if ( fibonaci ( * ( p + i ) ) ) { for ( j = i ; j < vel1 - 1 ; j ++ ) { * ( q + j ) = * ( q + j + 1 ) ; } vel1 -- ; i -- ; } } return vel1 ; } int main ( ) { int niz [ 30 ] , vel = 10 , vel1 , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; vel1 = izbaci ( niz , 2 * vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel1 ; i ++ ) { if ( i == vel1 - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> int fibonaci ( int a ) { int b = a , first = 0 , second = 1 , next , x = 1 ; while ( 1 ) { next = first + second ; if ( b == next ) break ; else if ( b < next ) { x = 0 ; break ; } else { first = second ; second = next ; } } return x ; } int suma_cif ( int a ) { int zad_cifra , suma = 0 ; int b = fabs ( a ) ; while ( b ) { zad_cifra = b % 10 ; suma = suma + zad_cifra ; b = b / 10 ; } return suma ; } void ubaci ( int niz [ ] , int vel ) { int i , position = 2 ; int vel1 = vel ; int * p = niz , * q = niz , * d = niz ; while ( d < niz + vel ) { for ( i = vel1 - 1 ; i >= position - 1 ; i -- ) { * ( p + i + 1 ) = * ( p + i ) ; } * ( p + position - 1 ) = suma_cif ( * q ) ; vel1 ++ ; position += 2 ; q += 2 ; d ++ ; } } int izbaci ( int niz [ ] , int vel ) { int vel1 = vel , i , j ; int * p = niz , * q = niz ; for ( i = 0 ; i < vel1 ; i ++ ) { if ( fibonaci ( * ( p + i ) ) ) { for ( j = i ; j < vel1 - 1 ; j ++ ) { * ( q + j ) = * ( q + j + 1 ) ; } vel1 -- ; i -- ; } } return vel1 ; } int main ( ) { int niz [ 30 ] , vel = 10 , vel1 , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; vel1 = izbaci ( niz , 2 * vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel1 ; i ++ ) { if ( i == vel1 - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }"
2475,96,96,0,26,A2016/Z2/Z2/student1476,A2016/Z2/Z2/student5496,"#include <stdio.h> #define pi 3.1415926 int main ( ) { int i , y , broj ; int step [ 500 ] , min [ 500 ] , sec [ 500 ] ; double ugao ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & broj ) ; for ( i = 0 ; i < broj ; i ++ ) { scanf ( ""%lf"" , & ugao ) ; if ( ugao > 0 ) y = ( ugao * 180 * 3600 ) / pi + 0.5 ; if ( ugao < 0 ) y = ( ugao * 180 * 3600 ) / pi - 0.5 ; step [ i ] = y / 3600 ; if ( y < 0 ) { y *= - 1 ; } sec [ i ] = y % 60 ; y /= 60 ; min [ i ] = y % 60 ; if ( sec [ i ] > 30 ) { broj -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < broj ; i ++ ) printf ( ""%d stepeni %d minuta %d sekundi\n"" , step [ i ] , min [ i ] , sec [ i ] ) ; return 0 ; }","#include <stdio.h> #define pi 3.1415926 int main ( ) { int i , y , broj ; int step [ 500 ] , min [ 500 ] , sec [ 500 ] ; double ugao ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & broj ) ; for ( i = 0 ; i < broj ; i ++ ) { scanf ( ""%lf"" , & ugao ) ; if ( ugao > 0 ) y = ( ugao * 180 * 3600 ) / pi + 0.5 ; if ( ugao < 0 ) y = ( ugao * 180 * 3600 ) / pi - 0.5 ; step [ i ] = y / 3600 ; if ( y < 0 ) { y *= - 1 ; } sec [ i ] = y % 60 ; y /= 60 ; min [ i ] = y % 60 ; if ( sec [ i ] > 30 ) { broj -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < broj ; i ++ ) printf ( ""%d stepeni %d minuta %d sekundi\n"" , step [ i ] , min [ i ] , sec [ i ] ) ; return 0 ; }"
2480,99,99,0,52,A2016/Z1/Z3/student7948,A2016/Z1/Z3/student2247,"#include <stdio.h> int main ( ) { int k = 0 ; char x , c1 = 'c' , c2 = 'c' , b1 = 'b' , b2 = 'b' , s1 = 's' , s2 = 's' , v1 = 'v' , v2 = 'v' , p1 = 'p' , p2 = 'p' , k1 = 'k' , k2 = 'k' ; double ocp , obp , osp , ovp , opp , oc = 0 , ob = 0 , os = 0 , ov = 0 , op = 0 , ou ; printf ( ""unesite vozila: "" ) ; for ( ; ; ) { x = getchar ( ) ; if ( x == k1 || x == k2 ) { break ; } else if ( x == c1 || x == c2 ) { oc = oc + 1 ; } else if ( x == b1 || x == b2 ) { ob = ob + 1 ; } else if ( x == s1 || x == s2 ) { os = os + 1 ; } else if ( x == v1 || x == v2 ) { ov = ov + 1 ; } else if ( x == p1 || x == p2 ) { op = op + 1 ; } else if ( x != c1 && x != c2 && x != b1 && x != b2 && x != s1 && x != s2 && x != v1 && x != v2 && x != p1 && x != p2 && x != k1 && x != k2 ) { if ( k != 0 ) { printf ( ""\nneispravan unos"" ) ; } else if ( k < 1 ) { printf ( ""neispravan unos"" ) ; k ++ ; } } } ou = oc + ob + os + ov + op ; if ( k == 0 ) printf ( ""ukupno evidentirano %g vozila."" , ou ) ; else if ( k != 0 ) printf ( ""\nukupno evidentirano %g vozila."" , ou ) ; ocp = ( oc / ou ) * 100 ; obp = ( ob / ou ) * 100 ; osp = ( os / ou ) * 100 ; ovp = ( ov / ou ) * 100 ; opp = ( op / ou ) * 100 ; if ( oc == 0 ) ocp = 0.00 ; if ( ob == 0 ) obp = 0.00 ; if ( os == 0 ) osp = 0.00 ; if ( ov == 0 ) ovp = 0.00 ; if ( op == 0 ) opp = 0.00 ; if ( oc >= ob && oc >= os && oc >= ov && oc >= op ) { printf ( ""\nnajpopularnija boja je crna (%.2f%%)."" , ocp ) ; } else if ( ob > oc && ob >= os && ob >= ov && ob >= op ) { printf ( ""\nnajpopularnija boja je bijela (%.2f%%)."" , obp ) ; } else if ( os > oc && os > ob && os >= ov && os >= op ) { printf ( ""\nnajpopularnija boja je siva (%.2f%%)."" , osp ) ; } else if ( ov > oc && ov > ob && ov > os && ov >= op ) { printf ( ""\nnajpopularnija boja je crvena (%.2f%%)."" , ovp ) ; } else if ( op > oc && op > ob && op > ov && op > os ) { printf ( ""\nnajpopularnija boja je plava (%.2f%%)."" , opp ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int k = 0 ; char x , c1 = 'c' , c2 = 'c' , b1 = 'b' , b2 = 'b' , s1 = 's' , s2 = 's' , v1 = 'v' , v2 = 'v' , p1 = 'p' , p2 = 'p' , k1 = 'k' , k2 = 'k' ; double ocp , obp , osp , ovp , opp , oc = 0 , ob = 0 , os = 0 , ov = 0 , op = 0 , ou ; printf ( ""unesite vozila: "" ) ; for ( ; ; ) { x = getchar ( ) ; if ( x == k1 || x == k2 ) { break ; } else if ( x == c1 || x == c2 ) { oc = oc + 1 ; } else if ( x == b1 || x == b2 ) { ob = ob + 1 ; } else if ( x == s1 || x == s2 ) { os = os + 1 ; } else if ( x == v1 || x == v2 ) { ov = ov + 1 ; } else if ( x == p1 || x == p2 ) { op = op + 1 ; } else if ( x != c1 && x != c2 && x != b1 && x != b2 && x != s1 && x != s2 && x != v1 && x != v2 && x != p1 && x != p2 && x != k1 && x != k2 ) { if ( k != 0 ) { printf ( ""\nneispravan unos"" ) ; } else if ( k < 1 ) { printf ( ""neispravan unos"" ) ; k ++ ; } } } ou = oc + ob + os + ov + op ; if ( k == 0 ) printf ( ""ukupno evidentirano %g vozila."" , ou ) ; else if ( k != 0 ) printf ( ""\nukupno evidentirano %g vozila."" , ou ) ; ocp = ( oc / ou ) * 100 ; obp = ( ob / ou ) * 100 ; osp = ( os / ou ) * 100 ; ovp = ( ov / ou ) * 100 ; opp = ( op / ou ) * 100 ; if ( oc == 0 ) ocp = 0.00 ; if ( ob == 0 ) obp = 0.00 ; if ( os == 0 ) osp = 0.00 ; if ( ov == 0 ) ovp = 0.00 ; if ( op == 0 ) opp = 0.00 ; if ( oc >= ob && oc >= os && oc >= ov && oc >= op ) { printf ( ""\nnajpopularnija boja je crna (%.2f%%)."" , ocp ) ; } else if ( ob > oc && ob >= os && ob >= ov && ob >= op ) { printf ( ""\nnajpopularnija boja je bijela (%.2f%%)."" , obp ) ; } else if ( os > oc && os > ob && os >= ov && os >= op ) { printf ( ""\nnajpopularnija boja je siva (%.2f%%)."" , osp ) ; } else if ( ov > oc && ov > ob && ov > os && ov >= op ) { printf ( ""\nnajpopularnija boja je crvena (%.2f%%)."" , ovp ) ; } else if ( op > oc && op > ob && op > ov && op > os ) { printf ( ""\nnajpopularnija boja je plava (%.2f%%)."" , opp ) ; } return 0 ; }"
2482,97,97,0,45,A2016/Z2/Z3/student9315,A2016/Z2/Z3/student4766,"#include <stdio.h> int main ( ) { int x [ 10 ] , y [ 10 ] , num , i , j , k , looping , print ; for ( i = 0 ; i < 10 ; i ++ ) { x [ i ] = - 1 ; y [ i ] = - 1 ; } do { looping = 0 ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & num ) ; if ( num > 0 && num < 11 ) for ( i = 0 ; i < num ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x [ i ] , & y [ i ] ) ; if ( x [ i ] > 19 || x [ i ] < 0 || y [ i ] > 19 || y [ i ] < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } } else looping = 1 ; if ( looping ) { printf ( ""pogresan unos\n"" ) ; } } while ( looping ) ; for ( i = 0 ; i <= 19 ; i ++ ) { for ( j = 0 ; j <= 19 ; j ++ ) { print = 0 ; for ( k = 0 ; k < 10 ; k ++ ) { if ( j == x [ k ] && i == y [ k ] ) { print = 1 ; break ; } } if ( print ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int x [ 10 ] , y [ 10 ] , num , i , j , k , looping , print ; for ( i = 0 ; i < 10 ; i ++ ) { x [ i ] = - 1 ; y [ i ] = - 1 ; } do { looping = 0 ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & num ) ; if ( num > 0 && num < 11 ) for ( i = 0 ; i < num ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x [ i ] , & y [ i ] ) ; if ( x [ i ] > 19 || x [ i ] < 0 || y [ i ] > 19 || y [ i ] < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } } else looping = 1 ; if ( looping ) { printf ( ""pogresan unos\n"" ) ; } } while ( looping ) ; for ( i = 0 ; i <= 19 ; i ++ ) { for ( j = 0 ; j <= 19 ; j ++ ) { print = 0 ; for ( k = 0 ; k < 10 ; k ++ ) { if ( j == x [ k ] && i == y [ k ] ) { print = 1 ; break ; } } if ( print ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2486,91,91,0,102,A2016/Z3/Z3/student4108,A2016/Z3/Z3/student4661,"#include <stdio.h> int main ( ) { int i , k , br , j , mat [ 200 ] [ 200 ] , m , n , a , b , temp ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m >= 200 || n < 1 || n >= 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { br = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { br ++ ; } if ( br == n ) { for ( a = j + 1 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { temp = mat [ m - 1 ] [ n ] ; mat [ m - 1 ] [ n ] = mat [ m ] [ n ] ; mat [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { br = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { br ++ ; } if ( br == m ) { for ( a = j + 1 ; a < n ; a ++ ) { for ( b = 0 ; b < m ; b ++ ) { temp = mat [ n ] [ m - 1 ] ; mat [ n ] [ m - 1 ] = mat [ n ] [ m ] ; mat [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2491,94,94,0,60,A2016/Z1/Z3/student8518,A2016/Z1/Z3/student8110,"#include<stdio.h> int main ( ) { int crnaboja = 0 , bijelaboja = 0 , sivaboja = 0 , crvenaboja = 0 , plavaboja = 0 , u ; char znak ; float p , max ; printf ( ""unesite vozila: "" ) ; while ( 1 ) { scanf ( ""%c"" , & znak ) ; if ( znak == 'c' || znak == 'c' ) { crnaboja ++ ; } else if ( znak == 'b' || znak == 'b' ) { bijelaboja ++ ; } else if ( znak == 's' || znak == 's' ) { sivaboja ++ ; } else if ( znak == 'v' || znak == 'v' ) { crvenaboja ++ ; } else if ( znak == 'p' || znak == 'p' ) { plavaboja ++ ; } else if ( znak == 'k' || znak == 'k' ) { break ; } else { printf ( ""neispravan unos \n"" ) ; } } u = crnaboja + bijelaboja + sivaboja + crvenaboja + plavaboja ; printf ( ""ukupno evidentirano %d vozila."" , u ) ; if ( u == 0 ) { printf ( ""\nnajpopularnija boja je crna (0.00%%)."" ) ; } else { max = crnaboja ; znak = 'c' ; if ( bijelaboja > max ) { max = bijelaboja ; znak = 'b' ; } if ( sivaboja > max ) { max = sivaboja ; znak = 's' ; } if ( plavaboja > max ) { max = plavaboja ; znak = 'p' ; } if ( crvenaboja > max ) { max = crvenaboja ; znak = 'v' ; } p = max / u * 100 ; if ( znak == 'c' ) { printf ( ""\nnajpopularnija boja je crna (%.2f%%)."" , p ) ; } if ( znak == 'b' ) { printf ( ""\nnajpopularnija boja je bijela (%.2f%%)."" , p ) ; } if ( znak == 's' ) { printf ( ""\nnajpopularnija boja je siva (%.2f%%)."" , p ) ; } if ( znak == 'p' ) { printf ( ""\nnajpopularnija boja je plava (%.2f%%)."" , p ) ; } if ( znak == 'v' ) { printf ( ""\nnajpopularnija boja je crvena (%.2f%%)."" , p ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int cb = 0 , bb = 0 , sb = 0 , vb = 0 , pb = 0 , uk ; char znak ; float proc , max ; printf ( ""unesite vozila: "" ) ; while ( 1 ) { scanf ( ""%c"" , & znak ) ; if ( znak == 'c' || znak == 'c' ) { cb ++ ; } else if ( znak == 'b' || znak == 'b' ) { bb ++ ; } else if ( znak == 's' || znak == 's' ) { sb ++ ; } else if ( znak == 'v' || znak == 'v' ) { vb ++ ; } else if ( znak == 'p' || znak == 'p' ) { pb ++ ; } else if ( znak == 'k' || znak == 'k' ) { break ; } else { printf ( ""neispravan unos\n"" ) ; } } uk = cb + bb + sb + vb + pb ; printf ( ""ukupno evidentirano %d vozila."" , uk ) ; if ( uk == 0 ) { printf ( ""\nnajpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } max = cb ; znak = 'c' ; if ( bb > max ) { max = bb ; znak = 'b' ; } if ( sb > max ) { max = sb ; znak = 's' ; } if ( vb > max ) { max = vb ; znak = 'v' ; } if ( pb > max ) { max = pb ; znak = 'p' ; } proc = ( max / uk ) * 100 ; if ( znak == 'c' ) { printf ( ""\nnajpopularnija boja je crna (%.2f%%)."" , proc ) ; } if ( znak == 'b' ) { printf ( ""\nnajpopularnija boja je bijela (%.2f%%)."" , proc ) ; } if ( znak == 's' ) { printf ( ""\nnajpopularnija boja je siva (%.2f%%)."" , proc ) ; } if ( znak == 'v' ) { printf ( ""\nnajpopularnija boja je crvena (%.2f%%)."" , proc ) ; } if ( znak == 'p' ) { printf ( ""\nnajpopularnija boja je plava (%.2f%%)."" , proc ) ; } return 0 ; }"
2493,65,65,0,33,A2016/Z3/Z1/student3978,A2016/Z3/Z1/student9097,"#include <stdio.h> int daj_prost ( ) { int k = 0 , i ; do { k = 0 ; static int n = 2 ; for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { k ++ ; } } if ( k == 0 ) { n ++ ; return n - 1 ; } n ++ ; } while ( k != 0 ) ; } int main ( ) { int a , b , p = 2 , s , br ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( b < 1 ) printf ( ""b nije prirodan broj.\n"" ) ; else break ; } while ( p < 3 ) ; s = 0 ; br = daj_prost ( ) ; while ( br < b ) { if ( a < br && br < b ) s = s + br ; br = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , s ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int log_funk = 0 , i ; do { log_funk = 0 ; static int n = 2 ; for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { log_funk ++ ; } } if ( log_funk == 0 ) { n ++ ; return n - 1 ; } n ++ ; } while ( log_funk != 0 ) ; } int main ( ) { int a , b , s , br ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } } while ( ( a < 1 || b < 1 ) || ( a >= b ) ) ; s = 0 ; br = daj_prost ( ) ; while ( br < b ) { if ( a < br && br < b ) s = s + br ; br = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , s ) ; return 0 ; }"
2497,96,96,0,22,A2016/Z1/Z2/student5378,A2016/Z1/Z2/student5867,"#include <stdio.h> #include <math.h> int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; return 0 ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; return 0 ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; return 0 ; } x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
2506,36,36,0,23,A2016/Z4/Z2/student6053,A2016/Z4/Z2/student3557,"#include <stdio.h> char * kodiraj ( char * string_1 , char * string_2 ) { char * a = string_1 ; char * b = string_1 ; int i ; int j ; int max = 0 ; int br [ 95 ] = { 0 } ; char * string_string = string_2 ; int nesto ; while ( * b != null ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * b == i + 32 ) br [ i ] ++ ; } b ++ ; } for ( i = 0 ; i < 96 ; i ++ ) { for ( j = 0 ; j < 95 ; j ++ ) { if ( br [ max ] < br [ j ] ) max = j ; } * string_2 = max + 32 ; string_2 ++ ; br [ max ] = - 1 ; max = 0 ; } * string_2 = null ; string_2 = string_string ; while ( * a != null ) { while ( * a != * string_string ) string_string ++ ; nesto = string_string - string_2 ; * a = 126 - nesto ; string_string = string_2 ; a ++ ; } return string_1 ; } char * dekodiraj ( char * string_1 , char * string_2 ) { char * m = string_1 ; char * n = string_2 ; int varijabla ; int i ; while ( * m != null ) { varijabla = 126 - * m ; for ( i = 0 ; i < varijabla ; i ++ ) n ++ ; * m = * n ; n = string_2 ; m ++ ; } return string_1 ; } int main ( ) { int i ; char string [ ] = ""llmlnlnmonm"" ; char niz_1 [ 500 ] = "" "" ; char niz_2 [ 500 ] = "" "" ; printf ( ""%s"" , kodiraj ( string , niz_1 ) ) ; for ( i = 0 ; i < 10 ; i ++ ) ; printf ( ""%c"" , niz_1 [ i ] ) ; printf ( ""%s"" , kodiraj ( string , niz_2 ) ) ; for ( i = 0 ; i < 10 ; i ++ ) ; printf ( ""%c"" , niz_2 [ i ] ) ; printf ( ""%s"" , dekodiraj ( string , niz_2 ) ) ; printf ( ""%s"" , dekodiraj ( string , niz_1 ) ) ; return 0 ; }","#include <stdio.h> char * kodiraj ( char * s , char * sifre ) { int i = 0 , j = 0 , max = 0 ; int brojac [ 95 ] = { 0 } ; char * p , * q , * t ; p = s ; q = s ; t = sifre ; while ( * q != '\0' ) { for ( i = 0 ; i < 95 ; i ++ ) { if ( * q == i + 32 ) brojac [ i ] ++ ; } q ++ ; } for ( i = 0 ; i < 96 ; i ++ ) { for ( j = 0 ; j < 95 ; j ++ ) { if ( brojac [ j ] > brojac [ max ] ) max = j ; } * sifre ++ = 32 + max ; brojac [ max ] = - 1 ; max = 0 ; } * sifre = '\0' ; sifre = t ; while ( * p != '\0' ) { while ( * p != * t ) t ++ ; * p = 126 - ( t - sifre ) ; t = sifre ; p ++ ; } return s ; } char * dekodiraj ( char * s , char * sifre ) { int i , d ; char * p = s ; char * t = sifre ; while ( * p != '\0' ) { d = 126 - * p ; for ( i = 0 ; i < d ; i ++ ) t ++ ; * p = * t ; t = sifre ; p ++ ; } return s ; } int main ( ) { printf ( ""zadaca 4, zadatak 2"" ) ; return 0 ; }"
2509,99,99,0,24,A2016/Z1/Z4/student8580,A2016/Z1/Z4/student5512,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int j , i , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos \n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2515,96,96,0,39,A2016/Z3/Z1/student8133,A2016/Z3/Z1/student1180,"#include <stdio.h> int daj_prost ( ) { int j ; static int i = 1 ; i ++ ; for ( j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { i ++ ; j = 2 ; } } return i ; } int main ( ) { int a , b , y = 0 , p ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj."" ) ; else if ( a >= b ) printf ( ""a nije manje od b."" ) ; } while ( a <= 0 || a >= b ) ; do { p = daj_prost ( ) ; if ( p <= a ) continue ; if ( p >= b ) break ; y = y + p ; } while ( p < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d. "" , a , b , y ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int j ; static int i = 1 ; i ++ ; for ( j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { i ++ ; j = 2 ; } } return i ; } int main ( ) { int a , b , y = 0 , p ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj."" ) ; else if ( a >= b ) printf ( ""a nije manje od b."" ) ; } while ( a <= 0 || a >= b ) ; do { p = daj_prost ( ) ; if ( p <= a ) continue ; if ( p >= b ) break ; y = y + p ; } while ( p < b ) ; printf ( ""suma prostih brojeva izmedju %d i %d je %d. "" , a , b , y ) ; return 0 ; }"
2520,90,90,0,75,A2016/Z3/Z3/student6999,A2016/Z3/Z3/student4420,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , m , n , brojac = 0 , k = 0 , x , y , privremena ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( x = j + 1 ; x < m ; x ++ ) { for ( y = 0 ; y < n ; y ++ ) { privremena = mat [ x - 1 ] [ y ] ; mat [ x - 1 ] [ y ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = privremena ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( x = j + 1 ; x < n ; x ++ ) { for ( y = 0 ; y < m ; y ++ ) { privremena = mat [ y ] [ x - 1 ] ; mat [ y ] [ x - 1 ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = privremena ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2530,96,96,0,78,A2016/Z3/Z3/student8774,A2016/Z3/Z3/student5581,"#include <stdio.h> int main ( ) { int i , j , k , l ; int m , n , isti ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ k ] [ l ] = niz [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { isti = 0 ; } } if ( isti == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ l ] [ k ] = niz [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include<stdio.h> int main ( ) { int m , n ; int je_jednak ; int i , j , k , l ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { je_jednak = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { je_jednak = 0 ; } } if ( je_jednak == 1 ) { for ( k = j ; k < m - 1 ; k ++ ) { for ( l = 0 ; l < n ; l ++ ) { niz [ k ] [ l ] = niz [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { je_jednak = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { je_jednak = 0 ; } } if ( je_jednak == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ l ] [ k ] = niz [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( "" %4d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2531,75,75,0,43,A2016/Z3/Z1/student7293,A2016/Z3/Z1/student4661,"#include <stdio.h> int daj_prost ( ) { static int x = 1 ; int i , br = 0 ; while ( br == 0 ) { x ++ ; br = 1 ; for ( i = 2 ; i < x ; i ++ ) { if ( x % i == 0 ) { br = 0 ; break ; } } if ( br != 0 ) return x ; } } int main ( ) { int a , b , p , suma = 0 , i ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a <= 0 || a >= b ) ; p = daj_prost ( ) ; while ( p < b ) { if ( p > a && p < b ) suma += p ; p = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int j = 1 ; int i = 2 , broj = 0 ; while ( broj == 0 ) { j ++ ; broj = 1 ; for ( i ; i < j ; i ++ ) { if ( j % i == 0 ) { br = 0 ; break ; } } if ( broj != 0 ) return j ; } } int main ( ) { int a , b , p , suma = 0 , i ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a <= 0 || a >= b ) ; p = daj_prost ( ) ; while ( p < b ) { if ( p > a && p < b ) suma += p ; p = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2537,72,72,0,17,A2016/Z2/Z1/student1547,A2016/Z2/Z1/student8774,"#include <stdio.h> #include <stdlib.h> int main ( ) { int pc , dc , jed = 1 , broj = 0 , unos ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & unos ) ; unos = abs ( unos ) ; if ( unos < 10 ) { printf ( ""0"" ) ; return 0 ; } while ( unos >= 10 ) { pc = unos % 10 ; unos = unos / 10 ; dc = unos % 10 ; broj = broj + ( abs ( pc - dc ) ) * jed ; jed = jed * 10 ; } printf ( ""%d"" , broj ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int x , y , n , broj_1 = 0 , broj_2 = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } while ( n >= 10 ) { x = n % 10 ; n = n / 10 ; y = n % 10 ; broj_1 = broj_1 + ( abs ( x - y ) ) * broj_2 ; broj_2 = broj_2 * 10 ; } printf ( ""%d"" , broj_1 ) ; return 0 ; }"
2541,62,62,0,49,A2016/Z3/Z1/student4108,A2016/Z3/Z1/student5621,"#include <stdio.h> int daj_prost ( ) { int i , prost = 1 ; static int a = 1 ; while ( 1 ) { a ++ ; if ( a == 2 ) { return a ; } else { for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { prost = 0 ; break ; } } } if ( prost ) { return a ; } else { prost = 1 ; } } } int main ( ) { int a , b , c = 0 , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( b <= a ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b ) ; while ( c < b ) { c = daj_prost ( ) ; if ( c > a && c < b ) { suma += c ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int p = 0 , i ; static int q = 0 ; while ( 1 ) { q ++ ; if ( q == 2 ) { return q ; } else if ( q == 3 ) { return q ; } else { for ( i = 2 ; i < q ; i ++ ) { if ( q % i == 0 ) { p = 0 ; break ; } } if ( p ) { return q ; } else { p = 1 ; } } } } int main ( ) { int a , b , sum = 0 , q = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( q < b ) { q = daj_prost ( ) ; if ( q > a && q < b ) { sum += q ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }"
2546,92,92,0,106,A2016/Z3/Z3/student4108,A2016/Z3/Z3/student7293,"#include <stdio.h> int main ( ) { int i , k , br , j , mat [ 200 ] [ 200 ] , m , n , a , b , temp ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m >= 200 || n < 1 || n >= 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { br = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { br ++ ; } if ( br == n ) { for ( a = j + 1 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { temp = mat [ m - 1 ] [ n ] ; mat [ m - 1 ] [ n ] = mat [ m ] [ n ] ; mat [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { br = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { br ++ ; } if ( br == m ) { for ( a = j + 1 ; a < n ; a ++ ) { for ( b = 0 ; b < m ; b ++ ) { temp = mat [ n ] [ m - 1 ] ; mat [ n ] [ m - 1 ] = mat [ n ] [ m ] ; mat [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , br = 0 , k = 0 , l , temp , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { br = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) ; { br ++ ; } if ( br == n ) { for ( l = j + 1 ; l < m ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) { temp = mat [ l - 1 ] [ p ] ; mat [ l - 1 ] [ p ] = mat [ l ] [ p ] ; mat [ l ] [ p ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { br = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { br ++ ; } if ( br == m ) { for ( l = j + 1 ; l < n ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) { temp = mat [ p ] [ l - 1 ] ; mat [ p ] [ l - 1 ] = mat [ p ] [ l ] ; mat [ p ] [ l ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) ; { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2556,98,98,0,94,A2016/Z3/Z2/student6720,A2016/Z3/Z2/student4628,"#include <stdio.h> #include <stdlib.h> int suma_cifara ( int c ) { int clan , suma = 0 ; while ( c > 0 ) { clan = c % 10 ; suma += clan ; c /= 10 ; } return suma ; } void ubaci ( int niz [ ] , int vel ) { int i , c , pomocni_niz [ 20 ] = { 0 } ; for ( i = 0 ; i < vel ; i ++ ) { pomocni_niz [ i ] = niz [ i ] ; } for ( i = vel - 1 ; i >= 0 ; i -- ) { niz [ i * 2 ] = pomocni_niz [ i ] ; } for ( i = 0 ; i < vel ; i ++ ) { c = abs ( niz [ 2 * i ] ) ; niz [ 2 * i + 1 ] = suma_cifara ( c ) ; } } int fibonaci ( int n ) { int clan1 , clan2 , clan ; if ( n < 0 ) return 0 ; clan1 = 1 ; clan2 = 1 ; clan = 0 ; if ( n == clan1 || n == clan2 ) return 1 ; clan = clan1 + clan2 ; while ( clan <= n ) { if ( clan == n ) return 1 ; clan1 = clan2 ; clan2 = clan ; clan = clan1 + clan2 ; } return 0 ; } int izbaci ( int niz [ ] , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonaci ( niz [ i ] ) ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; vel -- ; } } return vel ; } int main ( ) { int i , niz [ 20 ] , modif_vel = 0 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; modif_vel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < modif_vel ; i ++ ) { if ( i < modif_vel - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int suma_cifara ( int c ) { int clan , suma = 0 ; while ( c > 0 ) { clan = c % 10 ; suma += clan ; c /= 10 ; } return suma ; } void ubaci ( int niz [ ] , int vel ) { int i , c , pomocni_niz [ 20 ] = { 0 } ; for ( i = 0 ; i < vel ; i ++ ) { pomocni_niz [ i ] = niz [ i ] ; } for ( i = vel - 1 ; i >= 0 ; i -- ) { niz [ i * 2 ] = pomocni_niz [ i ] ; } for ( i = 0 ; i < vel ; i ++ ) { c = abs ( niz [ 2 * i ] ) ; niz [ 2 * i + 1 ] = suma_cifara ( c ) ; } } int fibonaci ( int n ) { int clan1 , clan2 , clan ; if ( n < 0 ) return 0 ; clan1 = 1 ; clan2 = 1 ; clan = 0 ; if ( n == clan1 || n == clan2 ) return 1 ; clan = clan1 + clan2 ; while ( clan <= n ) { if ( clan == n ) return 1 ; clan1 = clan2 ; clan2 = clan ; clan = clan1 + clan2 ; } return 0 ; } int izbaci ( int niz [ ] , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonaci ( niz [ i ] ) ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; vel -- ; } } return vel ; } int main ( ) { int i , niz [ 20 ] , modif_vel = 0 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; modif_vel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < modif_vel ; i ++ ) { if ( i < modif_vel - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }"
2574,32,32,0,38,A2016/Z5/Z3/student8794,A2016/Z5/Z3/student5939,"#include <stdio.h> #include <string.h> #define kapacitet 200 typedef struct { char d [ 5 ] ; } dan ; typedef struct { char d [ 7 ] ; } sat ; typedef struct vrijeme { int sati , minute , sekunde ; } vrijeme ; typedef struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } cas ; void clear ( ) { while ( getchar ( ) != '\n' ) ; } void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; if ( znak != '\n' ) { int c ; while ( ( c = getchar ( ) ) != '\n' && c != eof ) { } } } int poredivrj ( vrijeme t1 , vrijeme t2 ) { int d1 = t1 . sati * 3600 + t1 . minute * 60 + t1 . sekunde ; int d2 = t2 . sati * 3600 + t2 . minute * 60 + t2 . sekunde ; if ( d1 == d2 ) { return 0 ; } if ( d1 > d2 ) { return 1 ; } if ( d1 < d2 ) { return - 1 ; } return - 2 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int flag = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( ( poredivrj ( raspored [ i ] . kraj , cas . pocetak ) == 1 ) && ( poredivrj ( cas . kraj , raspored [ i ] . pocetak ) == 1 ) && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { flag = 1 ; break ; } } return flag ; } int zadnji_sat ( struct cas raspored [ ] , int broj_casova ) { int flag = 1 ; int zad_sat = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( flag ) { if ( raspored [ i ] . kraj . minute == 0 ) zad_sat = raspored [ i ] . kraj . sati - 1 ; else zad_sat = raspored [ i ] . kraj . sati ; flag = 0 ; } else if ( raspored [ i ] . kraj . sati > zad_sat ) { if ( raspored [ i ] . kraj . minute == 0 ) zad_sat = raspored [ i ] . kraj . sati - 1 ; else zad_sat = raspored [ i ] . kraj . sati ; } } return zad_sat ; } int pr_sat ( struct cas raspored [ ] , int broj_casova ) { int flag = 1 ; int prvi_sat = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( flag ) { prvi_sat = raspored [ i ] . pocetak . sati ; flag = 0 ; } else if ( raspored [ i ] . pocetak . sati < prvi_sat ) { prvi_sat = raspored [ i ] . pocetak . minute ; } } return prvi_sat ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( trajanje > 10 ) { return 0 ; } struct cas cas ; strncpy ( cas . predmet , predmet , 10 ) ; cas . pocetak . sekunde = 0 ; cas . kraj . sekunde = 0 ; int flag = 0 ; int flag2 = 0 ; int i , j , k ; for ( i = 1 ; i < 7 && flag == 0 ; i ++ ) { cas . dan_u_sedmici = i ; flag2 = 0 ; for ( j = 9 ; j < 19 && flag == 0 && flag2 == 0 ; j ++ ) { cas . pocetak . sati = j ; cas . kraj = cas . pocetak ; cas . kraj . sati += trajanje ; for ( k = 0 ; k < 60 && flag == 0 && flag2 == 0 ; k ++ ) { cas . pocetak . minute = k ; cas . kraj = cas . pocetak ; cas . kraj . sati += trajanje ; if ( cas . kraj . sati >= 19 ) { if ( cas . kraj . sati == 19 && cas . kraj . minute > 0 ) { flag2 = 1 ; } else if ( cas . kraj . sati > 19 ) { flag2 = 1 ; } } if ( preklapanje ( raspored , broj_casova , cas ) == 0 && flag2 == 0 ) { flag = 1 ; } } } } if ( flag == 0 ) { return 0 ; } if ( broj_casova > 199 ) { return 0 ; } raspored [ broj_casova ] = cas ; return 1 ; } int ucitaj_datoteku ( struct cas * raspored ) { int i ; file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) { return 0 ; } i = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; fclose ( ulaz ) ; return i ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) { printf ( ""greska pri otvaranju datoteke zapisi.\n"" ) ; return 0 ; } int zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; if ( ferror ( ulaz ) ) { printf ( ""greska prilikom pisanja datoteke.\n"" ) ; printf ( ""zapisano je samo %d casova\n %d%%"" , zapisano , 100 / broj_casova * zapisano ) ; } fclose ( ulaz ) ; return 1 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 ; int i ; printf ( ""uneseni su casovi: \n"" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""%d) %s (%02d:%02d-%02d:%02d)\n"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int brojac = 1 ; int flag = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan && brojac == redni_broj ) { flag = 1 ; break ; } else if ( raspored [ i ] . dan_u_sedmici == dan ) { brojac ++ ; } } if ( flag == 0 ) { return ; } raspored [ i ] = promjena ; } int promijeni_cas_2 ( struct cas raspored [ ] , int broj_casova ) { int dan ; int redni_broj ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & redni_broj ) ; struct cas temp ; int brojac = 1 ; int flag = 0 ; int i ; struct cas promjena ; vrijeme reset = { - 1 , - 1 , - 1 } ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan && brojac == redni_broj ) { flag = 1 ; break ; } else if ( raspored [ i ] . dan_u_sedmici == dan ) { brojac ++ ; } } if ( flag == 0 ) { printf ( ""neispravan redni broj casa."" ) ; return 1 ; } printf ( ""naziv predmeta: "" ) ; unesi ( promjena . predmet , 10 ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d:%d"" , & promjena . pocetak . sati , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d:%d"" , & promjena . kraj . sati , & promjena . kraj . minute ) ; promjena . pocetak . sekunde = 0 ; promjena . kraj . sekunde = 0 ; promjena . dan_u_sedmici = dan ; temp = raspored [ i ] ; raspored [ i ] . pocetak = reset ; raspored [ i ] . kraj = reset ; if ( preklapanje ( raspored , broj_casova , promjena ) == 1 ) { printf ( ""promjena nije moguca jer dovodi do preklapanja\n"" ) ; raspored [ i ] = temp ; return 1 ; } raspored [ i ] = promjena ; return 0 ; } int obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int brojac = 1 ; int flag = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan && brojac == redni_broj ) { flag = 1 ; break ; } else if ( raspored [ i ] . dan_u_sedmici == dan ) { brojac ++ ; } } if ( flag == 0 ) { printf ( ""neispravan redni broj casa."" ) ; return 1 ; } raspored [ i ] = raspored [ broj_casova - 1 ] ; return 0 ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int flag2 = 1 ; int index_min = - 1 ; int zd_sat = zadnji_sat ( raspored , broj_casova ) ; dan sedmica [ 6 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; sat sati2 [ 24 ] = { ""0:00"" , ""1:00"" , ""2:00"" , ""3:00"" , ""4:00"" , ""5:00"" , ""6:00"" , ""7:00"" , ""8:00"" , ""9:00"" , ""10:00"" , ""11:00"" , ""12:00"" , ""13:00"" , ""14:00"" , ""15:00"" , ""16:00"" , ""17:00"" , ""18:00"" , ""19:00"" , ""20:00"" , ""21:00"" , ""22:00"" , ""23:00"" } ; printf ( ""\n"" ) ; printf ( ""%-7s"" , "" "" ) ; for ( i = 0 ; i < 6 ; i ++ ) { printf ( ""%-10s"" , sedmica [ i ] . d ) ; } printf ( ""\n"" ) ; for ( i = pr_sat ( raspored , broj_casova ) ; i < zd_sat + 1 && zd_sat != 0 ; i ++ ) { printf ( ""%-7s"" , sati2 [ i ] . d ) ; for ( k = 1 ; k < 7 ; k ++ ) { index_min = - 1 ; flag2 = 1 ; for ( j = 0 ; j < broj_casova ; j ++ ) { if ( raspored [ j ] . dan_u_sedmici == k ) { if ( ( raspored [ j ] . pocetak . sati <= i ) && ( raspored [ j ] . kraj . sati >= i ) && ! ( raspored [ j ] . kraj . sati == i && raspored [ j ] . kraj . minute == 0 ) ) { if ( flag2 ) { index_min = j ; flag2 = 0 ; } else if ( poredivrj ( raspored [ j ] . pocetak , raspored [ index_min ] . pocetak ) == - 1 ) { index_min = j ; } } } } if ( index_min == - 1 ) { printf ( ""%-10s"" , "" "" ) ; } else if ( index_min != - 1 ) { printf ( ""%-10s"" , raspored [ index_min ] . predmet ) ; } } printf ( ""\n"" ) ; } } int dodaj_cas2 ( struct cas raspored [ ] , int broj_casova ) { char ime_cas [ 13 ] ; int br_cas ; printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime_cas , 10 ) ; if ( strcmp ( ime_cas , "" "" ) == 0 ) unesi ( ime_cas , 10 ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br_cas ) ; if ( dodaj_cas ( raspored , broj_casova , ime_cas , br_cas ) == 1 ) { return 0 ; } else { printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_cas ) ; return 1 ; } } int obrisi_cas_2 ( struct cas raspored [ ] , int broj_casova ) { int dan_op ; int rd_br ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan_op ) ; ispisi_dan ( raspored , broj_casova , dan_op ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & rd_br ) ; if ( obrisi_cas ( raspored , broj_casova , dan_op , rd_br ) == 0 ) { printf ( ""cas obrisan\n"" ) ; return 0 ; } else return 1 ; } int menu ( struct cas raspored [ ] , int broj_casova ) { int a = 0 ; int opcija ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; if ( scanf ( ""%d"" , & opcija ) == 0 ) { printf ( ""nepoznata opcija"" ) ; clear ( ) ; continue ; } switch ( opcija ) { case 1 : ispis_rasporeda ( raspored , broj_casova ) ; break ; case 2 : if ( dodaj_cas2 ( raspored , broj_casova ) == 0 ) broj_casova ++ ; break ; case 3 : while ( promijeni_cas_2 ( raspored , broj_casova ) != 0 ) ; break ; case 4 : while ( obrisi_cas_2 ( raspored , broj_casova ) != 0 ) ; broj_casova -- ; break ; case 5 : a = pr_sat ( raspored , broj_casova ) ; printf ( ""\n zadnji sat je %d\n"" , a ) ; break ; case 0 : break ; default : printf ( ""nepoznata opcija"" ) ; break ; } } while ( opcija != 0 ) ; return broj_casova ; } int main ( ) { struct cas raspored [ kapacitet ] ; int broj_casova = ucitaj_datoteku ( raspored ) ; broj_casova = menu ( raspored , broj_casova ) ; zapisi_datoteku ( raspored , broj_casova ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 typedef struct vrijeme { int sati , minute , sekunde ; } vrijeme ; typedef struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } cas ; void unos ( char niz [ ] , int vel ) { int i = 0 ; int c = 0 ; char simbol = getchar ( ) ; if ( simbol == ""\n"" ) simbol = getchar ( ) ; vel = vel - 1 ; while ( simbol != '\n' && i < vel ) { niz [ i ] = simbol ; i ++ ; simbol = getchar ( ) ; } niz [ i ] = '\0' ; if ( simbol != '\n' ) { while ( c = getchar ( ) != '\n' && c != eof ) { } } } int vrijeme ( vrijeme v1 , vrijeme v2 ) { int s2 = v2 . sati * 3600 + v2 . minute * 60 + v2 . sekunde ; int s1 = v1 . sati * 3600 + v1 . minute * 60 + v1 . sekunde ; if ( s1 == s2 ) return 0 ; else if ( s1 > s2 ) return 1 ; else if ( s1 < s2 ) return - 1 ; return - 2 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i = 0 ; int status = 0 ; int uslov1 = 0 ; int uslov2 = 0 ; int uslov3 = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { uslov1 = vrijeme ( raspored [ i ] . kraj , cas . pocetak ) == 1 ; uslov2 = vrijeme ( cas . kraj , raspored [ i ] . pocetak ) == 1 ; uslov3 = cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ; if ( uslov1 && uslov2 && uslov1 ) { status = 1 ; break ; } return status ; } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { struct cas cas ; int status = 0 ; int status1 = 0 ; int i = 0 ; int j = 0 ; int k = 0 ; cas . pocetak . sekunde = 0 ; if ( trajanje > 10 ) return 0 ; for ( i = 1 ; i < 7 && status == 0 ; i ++ ) { cas . dan_u_sedmici = i ; status1 = 0 ; for ( j = 9 ; j < 19 && status == 0 && status1 == 0 ; j ++ ) cas . pocetak . sati = j ; cas . kraj . sati = cas . kraj . sati + trajanje ; cas . kraj = cas . pocetak ; for ( k = 0 ; k < 60 && status == 0 && status1 == 0 ; k ++ ) { cas . pocetak . minute == k ; cas . kraj . sati = cas . kraj . sati + trajanje ; if ( cas . kraj . sati >= 19 ) { if ( cas . kraj . minute > 0 && cas . kraj . sati == 19 ) status1 = 1 ; } else if ( cas . kraj . sati > 19 ) status1 = 1 ; } } } int main ( ) { printf ( ""zadaća 5, zadatak 3"" ) ; return 0 ; }"
2578,67,67,0,49,A2016/Z3/Z2/student8886,A2016/Z3/Z2/student2513,"#include <stdio.h> #include <stdlib.h> int suma ( int n ) { int c , sum = 0 ; while ( n != 0 ) { c = abs ( n % 10 ) ; sum += c ; n = n / 10 ; } return sum ; } void ubaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = vel - 1 ; j > i ; j -- ) niz [ j + 1 ] = niz [ j ] ; niz [ i + 1 ] = suma ( niz [ i ] ) ; vel ++ ; i ++ ; } } int fibonaci ( int n ) { int x , y ; x = 1 ; y = 1 ; while ( x < n && y < n ) { x = x + y ; y = x + y ; } if ( x == n || y == n ) return 1 ; else return 0 ; } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonaci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 1000 ] , i , vel = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; vel = vel * 2 ; vel = izbaci ( niz , vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == vel - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int suma ( int n ) { int s = 0 ; n = abs ( n ) ; while ( n != 0 ) { s = s + n % 10 ; n = n / 10 ; } return s ; } int fibonaci ( int n ) { int a = 1 , b = 1 ; while ( a < n && b < n ) { a = a + b ; b = a + b ; } if ( n == a || n == b ) return 1 ; else return 0 ; } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonaci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; vel -- ; } } return vel ; } void ubaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = vel - 1 ; j > i ; j -- ) { niz [ j + 1 ] = niz [ j ] ; } niz [ i + 1 ] = suma ( niz [ i ] ) ; vel ++ ; i ++ ; } } int main ( ) { int niz [ 20 ] , i , vel ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; vel = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == vel - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }"
2580,97,97,0,43,A2016/Z2/Z3/student5529,A2016/Z2/Z3/student6571,"#include <stdio.h> int main ( ) { int n , i , j , x [ 10 ] , y [ 10 ] , k , razmax = 0 , bake ; printf ( ""unesite broj tacaka: "" ) ; do { scanf ( ""%d"" , & n ) ; if ( n < 0 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; } continue ; } while ( n < 0 || n > 10 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x [ i ] , & y [ i ] ) ; if ( ( x [ i ] < 0 || x [ i ] > 10 ) || ( y [ i ] < 0 || y [ i ] > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku:"" , i + 1 ) ; continue ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( j == x [ k ] && i == y [ k ] ) { printf ( ""*"" ) ; razmax = 1 ; break ; } } if ( razmax == 0 ) printf ( "" "" ) ; else razmax = 0 ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j , x [ 10 ] , y [ 10 ] , k , razmax = 0 , bake ; printf ( ""unesite broj tacaka: "" ) ; do { scanf ( ""%d"" , & n ) ; if ( n < 0 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; } continue ; } while ( n < 0 || n > 10 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x [ i ] , & y [ i ] ) ; if ( ( x [ i ] < 0 || x [ i ] > 10 ) || ( y [ i ] < 0 || y [ i ] > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku:"" , i + 1 ) ; continue ; } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { for ( k = 0 ; k < n ; k ++ ) { if ( j == x [ k ] && i == y [ k ] ) { printf ( ""*"" ) ; razmax = 1 ; break ; } } if ( razmax == 0 ) printf ( "" "" ) ; else razmax = 0 ; } printf ( ""\n"" ) ; } return 0 ; }"
2582,57,57,0,76,A2016/Z4/Z4/student2965,A2016/Z4/Z4/student6720,"#include <stdio.h> #define epsilon 0.0001 #include <math.h> char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * pocetak , * kraj ; char * pocetno = s ; float x , xdecimalno , y , ydecimalno ; int brojx , brojy , predznak , i ; while ( * s != '\0' ) { if ( * s == '(' ) { if ( s == pocetno ) pocetak = s ; x = 0 ; y = 0 ; xdecimalno = 0 ; ydecimalno = 0 ; brojx = 0 ; brojy = 0 ; predznak = 1 ; s ++ ; } else return null ; if ( * s == '-' ) { predznak = - 1 ; s ++ ; } if ( * s < '0' || * s > '9' ) return null ; while ( * s >= '0' && * s <= '9' ) { x = x * 10 + predznak * ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; if ( * s == ' ' ) return null ; while ( * s >= '0' && * s <= '9' ) { xdecimalno = xdecimalno + 10 + ( * s - '0' ) ; brojx ++ ; s ++ ; if ( * s == ',' ) { for ( i = 0 ; i < brojx ; i ++ ) xdecimalno = xdecimalno / 10 ; x = x + predznak * xdecimalno ; predznak = 1 ; } } } predznak = 1 ; if ( * s == ',' ) s ++ ; else return null ; if ( * s == '-' ) { predznak = - 1 ; s ++ ; } if ( * s < '0' || * s > '9' ) return null ; while ( * s >= '0' && * s <= '9' ) { y = y * 10 + predznak * ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; if ( * s == ' ' ) return null ; while ( * s >= '0' && * s <= '9' ) { ydecimalno = ydecimalno + 10 + ( * s - '0' ) ; brojy ++ ; s ++ ; if ( * s == ')' ) { for ( i = 0 ; i < brojy ; i ++ ) ydecimalno = ydecimalno / 10 ; y = y + predznak * ydecimalno ; } } } if ( * s == ')' ) { s ++ ; kraj = s ; } else return null ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { while ( * kraj != '0' ) { * pocetak = * kraj ; pocetak ++ ; kraj ++ ; } * pocetak = * kraj ; s = s - ( kraj - pocetak ) ; } if ( * s == ',' ) { pocetak = s ; s ++ ; x = 0 ; y = 0 ; xdecimalno = 0 ; ydecimalno = 0 ; brojy = 0 ; brojx = 0 ; predznak = 1 ; if ( * s == '\0' ) return null ; } } s = pocetno ; if ( * s == ',' ) { while ( * s != '\0' ) { * s = ( * s + 1 ) ; s ++ ; } * s = ( * s + 1 ) ; } s = pocetno ; return s ; } int main ( ) { return 0 ; }","#include <stdio.h> char * obuhvat ( char * s , float x1 , float x2 , float y1 , float y2 ) { char * p = s ; char * pocetak ; char * kraj ; int k , q , negativno ; float x , y , x_dec , y_dec ; while ( * s != '\0' ) { if ( * s == '(' ) { pocetak = s ; x = 0 ; y = 0 ; x_dec = 0 ; y_dec = 0 ; k = 1 ; q = 1 ; negativno = 1 ; s ++ ; } else return null ; if ( * s == '-' ) { negativno = - 1 ; s ++ ; } if ( * s < '0' || * s > '9' ) return null ; while ( * s >= '0' && * s <= '9' ) { x = x * 10 + negativno * ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; while ( * s >= '0' && * s <= '9' ) { k = k * 10 ; x_dec = x_dec + ( * s - '0' ) / k ; s ++ ; } x = x + negativno * x_dec ; } else return null ; if ( * s == ',' ) s ++ ; else return null ; negativno = 1 ; if ( * s == '-' ) { negativno = - 1 ; s ++ ; } if ( * s < '0' || * s > '9' ) return null ; while ( * s >= '0' && * s <= '9' ) { y = y * 10 + negativno * ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; while ( * s >= '0' && * s <= '9' ) { q = q * 10 ; y_dec = y_dec + ( * s - '0' ) / q ; s ++ ; } y = y + negativno * y_dec ; } else return null ; if ( * s == ')' ) { s ++ ; kraj = s ; } else return null ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { while ( * kraj != '\0' ) { * pocetak ++ = * kraj ++ ; } * pocetak = * kraj ; s = s - ( kraj - pocetak ) ; } if ( * s == ',' ) { pocetak = s ; s ++ ; x = 0 ; y = 0 ; x_dec = 0 ; y_dec = 0 ; k = 1 ; q = 1 ; negativno = 1 ; if ( * s == '\0' ) return null ; } } s = p ; if ( * s == ',' ) { while ( * s != '\0' ) { * s = * ( s + 1 ) ; s ++ ; } } return p ; } int main ( ) { printf ( ""zadaća 4, zadatak 4"" ) ; return 0 ; }"
2585,81,81,0,80,A2016/Z3/Z2/student5612,A2016/Z3/Z2/student6824,"#include <stdio.h> #include<stdlib.h> #define velicina 10 #define velicina_2 20 void ubaci ( int * niz , int velicina ) { int i , k ; int b1 ; int b2 ; int b3 = 0 ; for ( k = velicina - 1 ; k >= 0 ; k -- ) { niz [ 2 * k ] = niz [ k ] ; } for ( i = 0 ; i < 2 * velicina ; i = i + 2 ) { b1 = abs ( niz [ i ] ) ; if ( b1 < 10 ) b3 = b1 ; else { do { b2 = b1 % 10 ; b3 = b3 + b2 ; b1 = b1 / 10 ; } while ( b1 != 0 ) ; } niz [ i + 1 ] = b3 ; b3 = 0 ; } } int izbaci ( int * niz , int velicina ) { int i ; int k ; int x = 1 ; int y = 1 ; int z ; int u ; for ( i = 0 ; i < velicina ; i ++ ) { x = 1 ; y = 1 ; for ( k = 1 ; k < 10000 ; k ++ ) { if ( k == 1 ) z = 1 ; else { z = x + y ; x = y ; y = z ; } if ( niz [ i ] == z ) { for ( u = i ; u < velicina - 1 ; u ++ ) { niz [ u ] = niz [ u + 1 ] ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 2 * velicina ] ; int i ; int u ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < velicina ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; u = izbaci ( niz , velicina_2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < u ; i ++ ) { if ( i == u - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define vel 10 #define velicina 20 void ubaci ( int * niz , int vel ) { int i , broj , broj1 , nbroj = 0 , j ; for ( j = vel - 1 ; j >= 0 ; j -- ) { niz [ 2 * j ] = niz [ j ] ; } for ( i = 0 ; i < 2 * vel ; i += 2 ) { broj = abs ( niz [ i ] ) ; if ( broj < 10 ) { nbroj = broj ; } else { do { broj1 = broj % 10 ; nbroj = nbroj + broj1 ; broj = broj / 10 ; } while ( broj != 0 ) ; } niz [ i + 1 ] = nbroj ; nbroj = 0 ; } } int izbaci ( int * niz , int vel ) { int i , j , a = 1 , b = 1 , c , s ; for ( i = 0 ; i < vel ; i ++ ) { a = 1 ; b = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) { c = 1 ; } else { c = a + b ; a = b ; b = c ; } if ( niz [ i ] == c ) { for ( s = i ; s < vel - 1 ; s ++ ) { niz [ s ] = niz [ s + 1 ] ; } vel -- ; i -- ; break ; } } } return vel ; } int main ( ) { int niz [ 2 * vel ] , s , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; s = izbaci ( niz , velicina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < s ; i ++ ) { if ( i == s - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
2590,97,97,0,56,A2016/Z3/Z1/student5529,A2016/Z3/Z1/student6571,"#include <stdio.h> #include <stdlib.h> int daj_prost ( ) { static int c = 1 ; int i , prost ; while ( 1 ) { c ++ ; prost = 1 ; for ( i = 2 ; i < c ; i ++ ) { if ( c % i == 0 ) { prost = 0 ; break ; } } if ( prost ) break ; } return c ; } int main ( ) { int a , b , i , k , suma = 0 ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 && a < b ) { printf ( ""a nije prirodan broj."" ) ; continue ; } if ( a >= b ) { printf ( ""a nije manje od b."" ) ; continue ; } } while ( a <= 0 || a >= b ) ; for ( i = a + 1 ; i < b ; i ++ ) { k = daj_prost ( ) ; if ( k > a && k < b ) { suma = suma + k ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int daj_prost ( ) { static int c = 1 ; int i , prost ; while ( 1 ) { c ++ ; prost = 1 ; for ( i = 2 ; i < c ; i ++ ) { if ( c % i == 0 ) { prost = 0 ; break ; } } if ( prost ) break ; } return c ; } int main ( ) { int a , b , i , k , suma = 0 ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 && a < b ) { printf ( ""a nije prirodan broj."" ) ; continue ; } if ( a >= b ) { printf ( ""a nije manje od b."" ) ; continue ; } } while ( a <= 0 || a >= b ) ; for ( i = a + 1 ; i < b ; i ++ ) { k = daj_prost ( ) ; if ( k > a && k < b ) { suma = suma + k ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2593,98,98,0,72,A2016/Z3/Z2/student7232,A2016/Z3/Z2/student3301,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define bre1 10 #define bre12 20 void ubaci ( int * niz , int size ) { int n , dig , num1 , num2 = 0 ; for ( n = size - 1 ; n >= 0 ; n -- ) { * ( niz + 2 * n ) = * ( niz + n ) ; } for ( n = 0 ; n < size * 2 ; n ++ ) { if ( n % 2 == 1 ) { num1 = * ( niz + n - 1 ) ; while ( num1 != 0 ) { dig = num1 % 10 ; num2 += dig ; num1 /= 10 ; } num2 = abs ( num2 ) ; * ( niz + n ) = num2 ; num2 = 0 ; } } } int izbaci ( int * niz , int size ) { int n , m , p , first = 0 , second = 1 , next ; for ( n = 0 ; n < size ; n ++ ) { first = 0 ; second = 1 ; for ( m = 1 ; m < 10000 ; m ++ ) { if ( m == 1 ) { next = m ; } else { next = first + second ; first = second ; second = next ; } if ( * ( niz + n ) == next ) { for ( p = n ; p < size - 1 ; p ++ ) { * ( niz + p ) = * ( niz + p + 1 ) ; } size -- ; n -- ; break ; } } } return size ; } int main ( ) { int niz [ 20 ] , n , x ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( n = 0 ; n < 10 ; n ++ ) { scanf ( ""%d"" , & niz [ n ] ) ; } ubaci ( niz , bre1 ) ; x = izbaci ( niz , bre12 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( n = 0 ; n < x ; n ++ ) { if ( n < ( x - 1 ) ) { printf ( ""%d, "" , niz [ n ] ) ; } else { printf ( ""%d. "" , niz [ n ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define brel 10 #define brel2 20 void ubaci ( int * niz , int velicina ) { int i , cifra , broj , broj2 = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { broj = * ( niz + i - 1 ) ; while ( broj != 0 ) { cifra = broj % 10 ; broj2 += cifra ; broj /= 10 ; } broj2 = abs ( broj2 ) ; * ( niz + i ) = broj2 ; broj2 = 0 ; } } } int izbaci ( int * niz , int velicina ) { int i , j , m , prvi = 0 , drugi = 1 , slijedeci ; for ( i = 0 ; i < velicina ; i ++ ) { prvi = 0 ; drugi = 1 ; for ( j = 1 ; j < 10000 ; j ++ ) { if ( j == 1 ) slijedeci = j ; else { slijedeci = prvi + drugi ; prvi = drugi ; drugi = slijedeci ; } if ( * ( niz + i ) == slijedeci ) { for ( m = i ; m < velicina - 1 ; m ++ ) { * ( niz + m ) = * ( niz + m + 1 ) ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , brel ) ; n = izbaci ( niz , brel2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < ( n - 1 ) ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d. "" , niz [ i ] ) ; } } return 0 ; }"
2602,98,98,0,120,A2016/Z4/Z4/student1192,A2016/Z4/Z4/student7085,"#include <stdio.h> char * obuhvat ( char * c , float x1 , float y1 , float x2 , float y2 ) { char * reset = c , * pocetak = c , * kraj ; float x , xd , y , yd ; int i , brx , bry , predznak ; while ( * c != '\0' ) { if ( * c == '(' ) { if ( c == reset ) pocetak = c ; x = 0 ; y = 0 ; xd = 0 ; yd = 0 ; brx = 0 ; bry = 0 ; predznak = 1 ; c ++ ; } else return null ; if ( * c == '-' ) { predznak = - 1 ; c ++ ; } if ( * c < '0' || * c > '9' ) return null ; while ( * c >= '0' && * c <= '9' ) { x = x * 10 + predznak * ( * c - '0' ) ; c ++ ; } if ( * c == '.' ) { c ++ ; if ( * c == ' ' ) return null ; while ( * c >= '0' && * c <= '9' ) { xd = xd * 10 + ( * c - '0' ) ; brx ++ ; c ++ ; if ( * c == ',' ) { for ( i = 0 ; i < brx ; i ++ ) xd = xd / 10 ; x = x + predznak * xd ; predznak = 1 ; } } } predznak = 1 ; if ( * c == ',' ) c ++ ; else return null ; if ( * c == '-' ) { predznak = - 1 ; c ++ ; } if ( * c < '0' || * c > '9' ) return null ; while ( * c >= '0' && * c <= '9' ) { y = y * 10 + predznak * ( * c - '0' ) ; c ++ ; } if ( * c == '.' ) { c ++ ; if ( * c == ' ' ) return null ; while ( * c >= '0' && * c <= '9' ) { yd = yd * 10 + ( * c - '0' ) ; bry ++ ; c ++ ; if ( * c == ')' ) { for ( i = 0 ; i < bry ; i ++ ) yd = yd / 10 ; y = y + predznak * yd ; } } } if ( * c == ')' ) { c ++ ; kraj = c ; } else return null ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { while ( * kraj != '\0' ) { * pocetak = * kraj ; pocetak ++ ; kraj ++ ; } * pocetak = * kraj ; c = c - ( kraj - pocetak ) ; } if ( * c == ',' ) { pocetak = c ; c ++ ; x = 0 ; y = 0 ; xd = 0 ; yd = 0 ; brx = 0 ; bry = 0 ; predznak = 1 ; if ( * c == '\0' ) return null ; } } c = reset ; if ( * c == ',' ) { while ( * c != '\0' ) { * c = * ( c + 1 ) ; c ++ ; } * c = * ( c + 1 ) ; } c = reset ; return c ; } int main ( ) { printf ( ""zadaća 4, zadatak 4"" ) ; return 0 ; }","#include <stdio.h> char * obuhvat ( char * c , float x1 , float y1 , float x2 , float y2 ) { char * reset = c , * pocetak = c , * kraj ; float x , xd , y , yd ; int i , brx , bry , predznak ; while ( * c != '\0' ) { if ( * c == '(' ) { if ( c == reset ) pocetak = c ; x = 0 ; y = 0 ; xd = 0 ; yd = 0 ; brx = 0 ; bry = 0 ; predznak = 1 ; c ++ ; } else return null ; if ( * c == '-' ) { predznak = - 1 ; c ++ ; } if ( * c < '0' || * c > '9' ) return null ; while ( * c >= '0' && * c <= '9' ) { x = x * 10 + predznak * ( * c - '0' ) ; c ++ ; } if ( * c == '.' ) { c ++ ; if ( * c == ' ' ) return null ; while ( * c >= '0' && * c <= '9' ) { xd = xd * 10 + ( * c - '0' ) ; brx ++ ; c ++ ; if ( * c == ',' ) { for ( i = 0 ; i < brx ; i ++ ) xd = xd / 10 ; x = x + predznak * xd ; predznak = 1 ; } } } predznak = 1 ; if ( * c == ',' ) c ++ ; else return null ; if ( * c == '-' ) { predznak = - 1 ; c ++ ; } if ( * c < '0' || * c > '9' ) return null ; while ( * c >= '0' && * c <= '9' ) { y = y * 10 + predznak * ( * c - '0' ) ; c ++ ; } if ( * c == '.' ) { c ++ ; if ( * c == ' ' ) return null ; while ( * c >= '0' && * c <= '9' ) { yd = yd * 10 + ( * c - '0' ) ; bry ++ ; c ++ ; if ( * c == ')' ) { for ( i = 0 ; i < bry ; i ++ ) yd = yd / 10 ; y = y + predznak * yd ; } } } if ( * c == ')' ) { c ++ ; kraj = c ; } else return null ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { while ( * kraj != '\0' ) { * pocetak = * kraj ; pocetak ++ ; kraj ++ ; } * pocetak = * kraj ; c = c - ( kraj - pocetak ) ; } if ( * c == ',' ) { pocetak = c ; c ++ ; x = 0 ; y = 0 ; xd = 0 ; yd = 0 ; brx = 0 ; bry = 0 ; predznak = 1 ; if ( * c == '\0' ) return null ; } } c = reset ; if ( * c == ',' ) { while ( * c != '\0' ) { * c = * ( c + 1 ) ; c ++ ; } * c = * ( c + 1 ) ; } c = reset ; return c ; } int main ( ) { printf ( ""zadaća 4, zadatak 4"" ) ; return 0 ; }"
2603,99,99,0,55,A2016/Z1/Z3/student9463,A2016/Z1/Z3/student4389,"#include <stdio.h> int main ( ) { char inpt , unos ; int blk = 0 , wht = 0 , gry = 0 , red = 0 , blu = 0 , i = 0 ; float blkp , whtp , gryp , redp , blup ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & inpt ) ; if ( ( ( inpt != 'c' ) && ( inpt != 'b' ) && ( inpt != 's' ) && ( inpt != 'v' ) && ( inpt != 'p' ) && ( inpt != 'k' ) ) && ( ( inpt != 'c' ) && ( inpt != 'b' ) && ( inpt != 's' ) && ( inpt != 'v' ) && ( inpt != 'p' ) ) && ( inpt != 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } if ( inpt == 'c' || inpt == 'c' ) { blk ++ ; } else if ( inpt == 'b' || inpt == 'b' ) { wht ++ ; } else if ( inpt == 's' || inpt == 's' ) { ; gry ++ ; } else if ( inpt == 'v' || inpt == 'v' ) { red ++ ; } else if ( inpt == 'p' || inpt == 'p' ) { blu ++ ; } if ( ( inpt != 'k' && inpt != 'k' ) && ( ( inpt == 'c' ) || ( inpt == 'c' ) || ( inpt == 'b' ) || ( inpt == 'b' ) || ( inpt == 's' ) || ( inpt == 's' ) || ( inpt == 'v' ) || ( inpt == 'v' ) || ( inpt == 'p' ) || ( inpt == 'p' ) ) ) { i ++ ; } if ( inpt == 'k' || inpt == 'k' ) { break ; } } while ( inpt != 'k' ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , i ) ; blkp = ( ( blk ) / ( ( float ) i ) ) * 100 ; whtp = ( ( wht ) / ( ( float ) i ) ) * 100 ; gryp = ( ( gry ) / ( ( float ) i ) ) * 100 ; redp = ( ( red ) / ( ( float ) i ) ) * 100 ; blup = ( ( blu ) / ( ( float ) i ) ) * 100 ; if ( ( ( blk >= wht ) && ( blk >= gry ) && ( blk >= red ) && ( blk >= blu ) ) && i == 0 ) { printf ( ""najpopularnija boja je crna (0.00%)."" ) ; } else if ( ( blk >= wht ) && ( blk >= gry ) && ( blk >= red ) && ( blk >= blu ) ) { printf ( ""najpopularnija boja je crna (%.2f%)."" , blkp ) ; } else if ( ( wht >= blk ) && ( wht >= gry ) && ( wht >= red ) && ( wht >= blu ) ) { printf ( ""najpopularnija boja je bijela (%.2f%)."" , whtp ) ; } else if ( ( gry >= wht ) && ( gry >= blk ) && ( gry >= red ) && ( gry >= blu ) ) { printf ( ""najpopularnija boja je siva (%.2f%)."" , gryp ) ; } else if ( ( red >= wht ) && ( red >= gry ) && ( red >= blk ) && ( red >= blu ) ) { printf ( ""najpopularnija boja je crvena (%.2f%)."" , redp ) ; } else if ( ( blu >= wht ) && ( blu >= gry ) && ( blu >= red ) && ( blu >= blk ) ) { printf ( ""najpopularnija boja je plava (%.2f%)."" , blup ) ; } }","#include <stdio.h> int main ( ) { char inpt , unos ; int blk = 0 , wht = 0 , gry = 0 , red = 0 , blu = 0 , i = 0 ; float blkp , whtp , gryp , redp , blup ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & inpt ) ; if ( ( ( inpt != 'c' ) && ( inpt != 'b' ) && ( inpt != 's' ) && ( inpt != 'v' ) && ( inpt != 'p' ) && ( inpt != 'k' ) ) && ( ( inpt != 'c' ) && ( inpt != 'b' ) && ( inpt != 's' ) && ( inpt != 'v' ) && ( inpt != 'p' ) ) && ( inpt != 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } if ( inpt == 'c' || inpt == 'c' ) { blk ++ ; } else if ( inpt == 'b' || inpt == 'b' ) { wht ++ ; } else if ( inpt == 's' || inpt == 's' ) { ; gry ++ ; } else if ( inpt == 'v' || inpt == 'v' ) { red ++ ; } else if ( inpt == 'p' || inpt == 'p' ) { blu ++ ; } if ( ( inpt != 'k' && inpt != 'k' ) && ( ( inpt == 'c' ) || ( inpt == 'c' ) || ( inpt == 'b' ) || ( inpt == 'b' ) || ( inpt == 's' ) || ( inpt == 's' ) || ( inpt == 'v' ) || ( inpt == 'v' ) || ( inpt == 'p' ) || ( inpt == 'p' ) ) ) { i ++ ; } if ( inpt == 'k' || inpt == 'k' ) { break ; } } while ( inpt != 'k' ) ; printf ( ""ukupno evidentirano %d vozila.\n"" , i ) ; blkp = ( ( blk ) / ( ( float ) i ) ) * 100 ; whtp = ( ( wht ) / ( ( float ) i ) ) * 100 ; gryp = ( ( gry ) / ( ( float ) i ) ) * 100 ; redp = ( ( red ) / ( ( float ) i ) ) * 100 ; blup = ( ( blu ) / ( ( float ) i ) ) * 100 ; if ( ( ( blk >= wht ) && ( blk >= gry ) && ( blk >= red ) && ( blk >= blu ) ) && i == 0 ) { printf ( ""najpopularnija boja je crna (0.00%)."" ) ; } else if ( ( blk >= wht ) && ( blk >= gry ) && ( blk >= red ) && ( blk >= blu ) ) { printf ( ""najpopularnija boja je crna (%.2f%)."" , blkp ) ; } else if ( ( wht >= blk ) && ( wht >= gry ) && ( wht >= red ) && ( wht >= blu ) ) { printf ( ""najpopularnija boja je bijela (%.2f%)."" , whtp ) ; } else if ( ( gry >= wht ) && ( gry >= blk ) && ( gry >= red ) && ( gry >= blu ) ) { printf ( ""najpopularnija boja je siva (%.2f%)."" , gryp ) ; } else if ( ( red >= wht ) && ( red >= gry ) && ( red >= blk ) && ( red >= blu ) ) { printf ( ""najpopularnija boja je crvena (%.2f%)."" , redp ) ; } else if ( ( blu >= wht ) && ( blu >= gry ) && ( blu >= red ) && ( blu >= blk ) ) { printf ( ""najpopularnija boja je plava (%.2f%)."" , blup ) ; } }"
2627,95,95,0,57,A2016/Z3/Z1/student8187,A2016/Z3/Z1/student5829,"#include <stdio.h> int daj_prost ( ) { int m = 0 , n ; do { m = 0 ; static int p = 2 ; for ( n = 2 ; n < p ; n ++ ) { if ( p % n == 0 ) { m ++ ; } } if ( m == 0 ) { p ++ ; return p - 1 ; } p ++ ; } while ( m != 0 ) ; } int main ( ) { int a , b , c = 2 , broj , d ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } else if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else break ; } while ( c < 3 ) ; d = 0 ; broj = daj_prost ( ) ; while ( broj < b ) { if ( a < broj && broj < b ) d = d + broj ; broj = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , d ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int k = 0 , i ; do { k = 0 ; static int n = 2 ; for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { k ++ ; } } if ( k == 0 ) { n ++ ; return n - 1 ; } n ++ ; } while ( k != 0 ) ; } int main ( ) { int a , b , p = 2 , s , br ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a < 1 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( b < 1 ) printf ( ""b nije prirodan broj.\n"" ) ; else break ; } while ( p < 3 ) ; s = 0 ; br = daj_prost ( ) ; while ( br < b ) { if ( a < br && br < b ) s = s + br ; br = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , s ) ; return 0 ; }"
2634,66,66,0,27,A2016/Z3/Z1/student8089,A2016/Z3/Z1/student2335,"#include <stdio.h> int daj_prost ( ) { static int n = 1 ; int i , prost ; do { n ++ ; prost = 0 ; if ( n == 2 ) break ; else { for ( i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prost = 1 ; break ; } } } } while ( prost == 1 ) ; return n ; } int main ( ) { int m = 0 , n = 0 , suma = 0 , z = 0 ; while ( 1 ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 0 && n > 0 && m < n ) break ; else if ( m <= 0 ) printf ( ""a nije prirodan broj. \n"" ) ; else if ( n <= m ) printf ( ""a nije manje od b. \n"" ) ; } while ( z < n ) { z = daj_prost ( ) ; if ( z > m && z < n ) suma += z ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , m , n , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int a = 1 ; int i , prost ; do { a ++ ; prost = 1 ; if ( a == 2 ) break ; else { for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { prost = 0 ; break ; } } } } while ( prost == 0 ) ; return a ; } int main ( ) { int a = 0 , b = 0 , suma = 0 , y = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a > 0 && b > 0 && a < b ) break ; else if ( a < 0 || a == 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a == b || b < a ) printf ( ""a nije manje od b.\n"" ) ; } while ( 1 ) ; while ( 1 ) { y = daj_prost ( ) ; if ( y <= a ) continue ; else if ( y >= b ) break ; else if ( y > a && y < b ) suma += y ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2646,81,81,0,40,A2016/Z1/Z3/student7735,A2016/Z1/Z3/student8796,"#include <stdio.h> int main ( ) { int c = 0 , p = 0 , b = 0 , s = 0 , v = 0 , uk = 0 ; float procenat ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c ++ ; uk ++ ; } if ( boja == 'b' || boja == 'b' ) { b ++ ; uk ++ ; } if ( boja == 's' || boja == 's' ) { s ++ ; uk ++ ; } if ( boja == 'v' || boja == 'v' ) { v ++ ; uk ++ ; ; } if ( boja == 'p' || boja == 'p' ) { p ++ ; uk ++ ; } if ( boja != 'c' && boja != 'c' && boja != 'b' && boja != 'b' && boja != 's' && boja != 's' && boja != 'v' && boja != 'v' && boja != 'p' && boja != 'p' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos\n"" ) ; } if ( boja == 'k' || boja == 'k' ) { goto l1 ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c >= b && c >= s && c >= v && c >= p ) { procenat = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , procenat ) ; } if ( c < b && b >= s && b >= v && b >= p ) { procenat = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , procenat ) ; } if ( c < s && b < s && s >= v && s >= p ) { procenat = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , procenat ) ; } if ( c < v && b < v && s < v && v >= p ) { procenat = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , procenat ) ; } if ( c < p && b < p && s < p && v < p ) { procenat = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , procenat ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c = 0 , p = 0 , b = 0 , s = 0 , v = 0 , uk = 0 ; float pr ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c = c + 1 ; uk = uk + 1 ; } if ( boja == 'b' || boja == 'b' ) { b = b + 1 ; uk = uk + 1 ; } if ( boja == 's' || boja == 's' ) { s = s + 1 ; uk = uk + 1 ; } if ( boja == 'v' || boja == 'v' ) { v = v + 1 ; uk = uk + 1 ; } if ( boja == 'p' || boja == 'p' ) { p = p + 1 ; uk = uk + 1 ; } if ( boja != 'c' && boja != 'c' && boja != 'b' && boja != 'b' && boja != 's' && boja != 's' && boja != 'v' && boja != 'v' && boja != 'p' && boja != 'p' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos\n"" ) ; } if ( boja == 'k' || boja == 'k' ) { goto l1 ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c > b && c > s && c > v && c > p ) { pr = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , pr ) ; } if ( c < b && b > s && b > v && b > p ) { pr = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pr ) ; } if ( c < s && b < s && s > v && s > p ) { pr = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , pr ) ; } if ( c < v && b < v && s < v && v > p ) { pr = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pr ) ; } if ( c < p && b < p && s < p && v < p ) { pr = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , pr ) ; } return 0 ; }"
2651,96,96,0,78,A2016/Z3/Z3/student8089,A2016/Z3/Z3/student5581,"#include <stdio.h> int main ( ) { int a , b , i , j , equal , k , h ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 || a > 200 || b <= 0 || b > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( a <= 0 || b <= 0 || a > 200 || b > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < a ; i ++ ) { for ( j = i + 1 ; j < a ; j ++ ) { equal = 1 ; for ( k = 0 ; k < b ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { equal = 0 ; } } if ( equal == 1 ) { for ( k = j ; k < b - 1 ; k ++ ) { for ( h = 0 ; h < a ; h ++ ) { niz [ k ] [ h ] = niz [ k + 1 ] [ h ] ; } } a -- ; j -- ; } } } for ( i = 0 ; i < b ; i ++ ) { for ( j = i + 1 ; j < b ; j ++ ) { equal = 1 ; for ( k = 0 ; k < a ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { equal = 0 ; } } if ( equal == 1 ) { for ( k = j ; k < b - 1 ; k ++ ) { for ( h = 0 ; h < a ; h ++ ) { niz [ h ] [ k ] = niz [ h ] [ k + 1 ] ; } } b -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < a ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { printf ( ""%5d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include<stdio.h> int main ( ) { int m , n ; int je_jednak ; int i , j , k , l ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { je_jednak = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { je_jednak = 0 ; } } if ( je_jednak == 1 ) { for ( k = j ; k < m - 1 ; k ++ ) { for ( l = 0 ; l < n ; l ++ ) { niz [ k ] [ l ] = niz [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { je_jednak = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { je_jednak = 0 ; } } if ( je_jednak == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ l ] [ k ] = niz [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( "" %4d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2654,95,95,0,15,A2016/Z1/Z2/student9949,A2016/Z1/Z2/student2477,"#include <stdio.h> #include <math.h> #define e 0.001 int main ( ) { float a1 , b1 , a2 , b2 , y1 , x ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su\n"" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se\n"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y1 = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y1 ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su "" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se "" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
2657,99,99,0,82,A2016/Z3/Z3/student3301,A2016/Z3/Z3/student3567,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2660,35,35,0,35,A2016/Z4/Z2/student2351,A2016/Z4/Z2/student5284,"#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }","#include <stdio.h> void sort ( int * sortiraj , int * index ) { int i , j , temp ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = 0 ; j < 95 ; j ++ ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp ; temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ j ] > index [ i ] ) { temp = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp ; } } } } void stvorikljuc ( char * kljuc , int * sortiraj , int * index ) { int i ; for ( i = 0 ; i < 95 ; i ++ ) { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } } for ( i = 0 ; i < 95 ; i ++ ) { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } } * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst , * q ; int niz [ 95 ] ; int sortiraj [ 95 ] ; int index [ 95 ] ; int i , br ; for ( i = 0 ; i < 95 ; i ++ ) niz [ i ] = 0 ; while ( * p != '\0' ) { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) niz [ * p - 32 ] = br ; p ++ ; } for ( i = 0 ; i < 95 ; i ++ ) { sortiraj [ i ] = niz [ i ] ; index [ i ] = i ; } sort ( sortiraj , index ) ; stvorikljuc ( kljuc , sortiraj , index ) ; p = tekst ; q = kljuc ; while ( * p != '\0' ) { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; while ( * p != '\0' ) { * p = kljuc [ 126 - * p ] ; p ++ ; } return tekst ; } int main ( ) { char tekst [ ] = ""llmlnlnmonm"" ; char sifrarnik [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( tekst , sifrarnik ) ) ; return 0 ; }"
2672,70,70,0,32,A2016/Z2/Z4/student3872,A2016/Z2/Z4/student4982,"#include <stdio.h> #include<math.h> #define broj_el 100 int main ( ) { int n , m ; int teplicova = 1 , cirkularna = 1 ; int i , j ; long double mat [ broj_el ] [ broj_el ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; break ; } } } if ( teplicova ) { for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; break ; } } if ( j < 1 ) { cirkularna = 0 ; break ; } } if ( cirkularna ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int i , j , m , n ; double matrica [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 100 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || n <= 0 || n > 100 || m > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } int teplicova = 1 , cirkularna = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; break ; } } } if ( teplicova == 0 ) cirkularna = 0 ; if ( teplicova == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( matrica [ i ] [ n - 1 ] != matrica [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; break ; } } } if ( teplicova == 1 && cirkularna == 0 ) printf ( ""matrica je teplicova"" ) ; if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; if ( teplicova == 0 && cirkularna == 0 ) printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
2673,97,97,0,54,A2016/Z3/Z1/student1915,A2016/Z3/Z1/student5603,"#include <stdio.h> #include<math.h> int daj_prost ( ) { static int a = 2 ; int i , j ; for ( i = a ; i < 100000 ; i ++ ) { int prost = 1 ; for ( j = 2 ; j <= sqrt ( i ) ; j ++ ) if ( i % j == 0 ) { prost = 0 ; break ; } if ( prost == 1 ) { a = i ; break ; } } return a ++ ; } int main ( ) { int a , b ; int pom1 = 1 , pom2 = 1 , sum = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a >= b || a <= 0 ) ; while ( pom1 < a ) { pom1 = daj_prost ( ) ; if ( pom1 > a && pom1 < b ) sum = pom1 ; } while ( pom2 < b ) { pom2 = daj_prost ( ) ; if ( pom2 >= b ) break ; sum += pom2 ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }","#include <stdio.h> #include<math.h> int daj_prost ( ) { static int a = 2 ; int i , j ; for ( i = a ; i < 100000 ; i ++ ) { int prost = 1 ; for ( j = 2 ; j <= sqrt ( i ) ; j ++ ) if ( i % j == 0 ) { prost = 0 ; break ; } if ( prost == 1 ) { a = i ; break ; } } return a ++ ; } int main ( ) { int a , b ; int pom1 = 1 , pom2 = 1 , sum = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; } while ( a >= b || a <= 0 ) ; while ( pom1 < a ) { pom1 = daj_prost ( ) ; if ( pom1 > a && pom1 < b ) sum = pom1 ; } while ( pom2 < b ) { pom2 = daj_prost ( ) ; if ( pom2 >= b ) break ; sum += pom2 ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }"
2678,18,18,0,15,A2016/Z4/Z2/student5624,A2016/Z4/Z2/student8264,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void izmjeni ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pomocni_sifrarnik = sifrarnik ; int brojac ; while ( * pomocni_string != '\0' ) { brojac = 0 ; pomocni_sifrarnik = sifrarnik ; while ( * pomocni_sifrarnik != '\0' ) { if ( * pomocni_string == * pomocni_sifrarnik ++ ) { * pomocni_string = 126 - brojac ; break ; } brojac ++ ; } pomocni_string ++ ; } } void sortiraj ( int * niz , int * niz_sort , int * indeks , char * pokazivac , char * string ) { int i , j ; int temp ; char * sifrarnik = pokazivac ; for ( i = 0 ; i < 127 ; i ++ ) { for ( j = i ; j < 127 ; j ++ ) { if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } else if ( niz [ i ] == niz [ j ] && indeks [ i ] > indeks [ j ] ) { temp = indeks [ i ] ; indeks [ i ] = indeks [ j ] ; indeks [ j ] = temp ; } } } for ( i = 0 ; i < 127 ; i ++ ) { if ( indeks [ i ] != - 1 ) { * pokazivac = indeks [ i ] ; pokazivac ++ ; } } izmjeni ( string , sifrarnik ) ; } char * kodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string , * pokazivac = sifrarnik ; int i ; int niz [ 127 ] ; int niz_sort [ 127 ] ; int indeks [ 127 ] ; for ( i = 0 ; i < 127 ; i ++ ) { if ( i < 32 ) { niz [ i ] = - 1 ; indeks [ i ] = - 1 ; } else { niz [ i ] = 0 ; indeks [ i ] = i ; } } while ( * pomocni_string != '\0' ) { niz [ * pomocni_string + 0 ] ++ ; pomocni_string ++ ; } for ( i = 0 ; i < 127 ; i ++ ) { niz_sort [ i ] = niz [ i ] ; } sortiraj ( niz , niz_sort , indeks , pokazivac , string ) ; return string ; } char * dekodiraj ( char * string , char * sifrarnik ) { char * pomocni_string = string ; while ( * pomocni_string != '\0' ) { * pomocni_string = sifrarnik [ 126 - * pomocni_string ] ; pomocni_string ++ ; } return string ; } int main ( ) { printf ( ""zadaca 4, zadatak 2"" ) ; return 0 ; }","#include <stdio.h> void sortiraj1 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] < s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } void sortiraj2 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] > s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } char * kodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = { ' ' } , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , j = 0 , br = 0 , vel = 0 , da = 0 , pret = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj1 ( slova , brojevi , vel ) ; for ( i = 0 ; i < vel ; i ++ ) { * t = slova [ i ] ; t ++ ; } for ( i = 32 ; i < 127 ; i ++ ) { pret = 1 ; for ( j = 0 ; j < vel ; j ++ ) if ( i == slova [ j ] ) pret = 0 ; if ( pret ) { * t = i ; t ++ ; * t = '\0' ; } } s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = 126 - i ; break ; } s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = """" , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , br = 0 , vel = 0 , da = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj2 ( slova , brojevi , vel ) ; s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = * ( t + i ) ; break ; } s ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] = ""llmlnlnmonm"" , tablica [ 200 ] = """" ; printf ( ""%s\n%s"" , kodiraj ( tekst , tablica ) , tablica ) ; printf ( ""\n%s"" , dekodiraj ( tekst , tablica ) ) ; return 0 ; }"
2679,99,99,0,123,A2016/Z4/Z1/student7823,A2016/Z4/Z1/student9175,"#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * string ) { char * max = string , * p = string , * pocetak , * kraj , * temp , * sljedecipocetak , * sljedecikraj , * temp1 , * p2 , * p3 ; int vel1 , brojrijeci = 0 , vel2 , jednaka , vel3 , maxbrojrijeci = 0 , maxvelicina = 0 , znak ; char znak1 , znak2 ; if ( * p == '\0' ) return string ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } brojrijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljedecipocetak = temp ; while ( ( * sljedecipocetak < 'a' || ( * sljedecipocetak > 'z' && * sljedecipocetak < 'a' ) || * sljedecipocetak > 'z' ) && * ( sljedecipocetak + 1 ) != '\0' ) sljedecipocetak ++ ; sljedecikraj = sljedecipocetak ; vel2 = 1 ; while ( ( ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) || ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) ) && * ( sljedecikraj + 1 ) != '\0' ) { vel2 ++ ; sljedecikraj ++ ; } jednaka = 1 ; vel3 = 0 ; temp1 = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * temp1 >= 'a' && * temp1 <= 'z' ) znak1 = ( * temp1 ) + ( 'a' - 'a' ) ; else znak1 = * temp1 ; if ( * sljedecipocetak >= 'a' && * sljedecipocetak <= 'z' ) znak2 = ( * sljedecipocetak ) + ( 'a' - 'a' ) ; else znak2 = * sljedecipocetak ; if ( znak1 != znak2 ) jednaka = 0 ; temp1 ++ ; sljedecipocetak ++ ; vel3 ++ ; } if ( jednaka ) brojrijeci ++ ; temp = sljedecikraj + 1 ; } if ( brojrijeci > maxbrojrijeci ) { maxbrojrijeci = brojrijeci ; max = kraj ; maxvelicina = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= string ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) znak1 = ( * p ) + ( 'a' - 'a' ) ; else znak1 = * p ; if ( * max >= 'a' && * max <= 'z' ) znak2 = ( * max ) + ( 'a' - 'a' ) ; else znak2 = * max ; if ( znak1 == znak2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= string && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= string ) { if ( * p2 >= 'a' && * p2 <= 'z' ) znak1 = ( * p2 ) + ( 'a' - 'a' ) ; else znak1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) znak2 = ( * p2 ) + ( 'a' - 'a' ) ; else znak2 = * p2 ; if ( znak1 != znak2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvelicina != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return string ; } int main ( ) { char str1ng [ 400 ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }","#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * str ) { char * max = str , * p = str , * pocetak , * kraj , * temp , * sljpocetak , * sljkraj , * tempoc , * p2 , * p3 ; int vel1 , broj_rijeci = 0 , vel2 , jednaka , vel3 , max_broj_rijeci = 0 , maxvel = 0 , znak ; char c1 , c2 ; if ( * p == '\0' ) return str ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } broj_rijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljpocetak = temp ; while ( ( * sljpocetak < 'a' || ( * sljpocetak > 'z' && * sljpocetak < 'a' ) || * sljpocetak > 'z' ) && * ( sljpocetak + 1 ) != '\0' ) sljpocetak ++ ; sljkraj = sljpocetak ; vel2 = 1 ; while ( ( ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) || ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) ) && * ( sljkraj + 1 ) != '\0' ) { vel2 ++ ; sljkraj ++ ; } jednaka = 1 ; vel3 = 0 ; tempoc = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * tempoc >= 'a' && * tempoc <= 'z' ) c1 = ( * tempoc ) + ( 'a' - 'a' ) ; else c1 = * tempoc ; if ( * sljpocetak >= 'a' && * sljpocetak <= 'z' ) c2 = ( * sljpocetak ) + ( 'a' - 'a' ) ; else c2 = * sljpocetak ; if ( c1 != c2 ) jednaka = 0 ; tempoc ++ ; sljpocetak ++ ; vel3 ++ ; } if ( jednaka ) broj_rijeci ++ ; temp = sljkraj + 1 ; } if ( broj_rijeci > max_broj_rijeci ) { max_broj_rijeci = broj_rijeci ; max = kraj ; maxvel = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= str ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) c1 = ( * p ) + ( 'a' - 'a' ) ; else c1 = * p ; if ( * max >= 'a' && * max <= 'z' ) c2 = ( * max ) + ( 'a' - 'a' ) ; else c2 = * max ; if ( c1 == c2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= str && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= str ) { if ( * p2 >= 'a' && * p2 <= 'z' ) c1 = ( * p2 ) + ( 'a' - 'a' ) ; else c1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) c2 = ( * p2 ) + ( 'a' - 'a' ) ; else c2 = * p2 ; if ( c1 != c2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvel != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return str ; } int main ( ) { char str1ng [ 400 ] = "" zghklkvedza zvezda zdvdwa"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }"
2698,79,79,0,58,A2016/Z3/Z1/student6824,A2016/Z3/Z1/student8317,"#include <stdio.h> int daj_prost ( ) { static int s = 1 ; int prost = 1 , i ; while ( 1 ) { s ++ ; for ( i = 2 ; i < s ; i ++ ) { if ( s % i == 0 ) { prost = 0 ; break ; } else { prost = 1 ; } } if ( prost == 1 ) { return s ; } } } int main ( ) { int a , b , suma = 0 , k = daj_prost ( ) ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a >= b || a <= 0 ) ; while ( k < b ) { k = daj_prost ( ) ; if ( k > a && k < b ) { suma = suma + k ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int t = 1 ; int prost = 1 , i = 0 ; while ( 1 ) { t ++ ; for ( i = 2 ; i < t ; i ++ ) { if ( t % i == 0 ) { prost = 0 ; break ; } else { prost = 1 ; } } if ( prost == 1 ) { return t ; } } } int main ( ) { int a , b , suma_prostih = 0 , f = daj_prost ( ) ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a >= b || a <= 0 ) ; while ( f < b ) { f = daj_prost ( ) ; if ( f > a && f < b ) { suma_prostih = suma_prostih + f ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d. "" , a , b , suma_prostih ) ; return 0 ; }"
2711,99,99,0,23,A2016/Z2/Z2/student4473,A2016/Z2/Z2/student6534,"#include <stdio.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int i , j = 0 , a , sec = 0 , min = 0 , stepen = 0 ; double n [ 500 ] , us = 0 , c = 0 , b = 0 , sanida = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & a ) ; for ( i = 0 ; i < a ; i ++ ) scanf ( ""%lf"" , & n [ i ] ) ; sanida = a ; printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < a ; i ++ ) { us = ( n [ i ] * ( 180 / pi ) ) ; stepen = ( int ) ( us ) ; c = ( us - stepen ) * 60 ; min = ( int ) ( c ) ; b = ( c - min ) * 60 ; if ( b < 0 ) sec = ( abs ) ( b - 0.5 ) ; else if ( b > 0 ) sec = ( int ) ( b + 0.5 ) ; else sec = 0 ; if ( sec == 60 ) { sec = 0 ; min = ( abs ) ( min ) ; min ++ ; } if ( min == 60 ) { min = 0 ; if ( stepen < 0 ) stepen -- ; else if ( stepen > 0 ) stepen ++ ; } min = ( abs ) ( min ) ; if ( sec <= 30 && sec >= - 30 ) printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepen , min , sec ) ; if ( sec > 30 || sec < - 30 ) { for ( j = i ; j < sanida - 1 ; j ++ ) { n [ j ] = n [ j + 1 ] ; sanida -- ; j -- ; } } } return 0 ; }","#include <stdio.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int i , j = 0 , a , sec = 0 , min = 0 , stepen = 0 ; double n [ 500 ] , us = 0 , c = 0 , b = 0 , sanida = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & a ) ; for ( i = 0 ; i < a ; i ++ ) scanf ( ""%lf"" , & n [ i ] ) ; sanida = a ; printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < a ; i ++ ) { us = ( n [ i ] * ( 180 / pi ) ) ; stepen = ( int ) ( us ) ; c = ( us - stepen ) * 60 ; min = ( int ) ( c ) ; b = ( c - min ) * 60 ; if ( b < 0 ) sec = ( abs ) ( b - 0.5 ) ; else if ( b > 0 ) sec = ( int ) ( b + 0.5 ) ; else sec = 0 ; if ( sec == 60 ) { sec = 0 ; min = ( abs ) ( min ) ; min ++ ; } if ( min == 60 ) { min = 0 ; if ( stepen < 0 ) stepen -- ; else if ( stepen > 0 ) stepen ++ ; } min = ( abs ) ( min ) ; if ( sec <= 30 && sec >= - 30 ) printf ( ""%d stepeni %d minuta %d sekundi\n"" , stepen , min , sec ) ; if ( sec > 30 || sec < - 30 ) { for ( j = i ; j < sanida - 1 ; j ++ ) { n [ j ] = n [ j + 1 ] ; sanida -- ; j -- ; } } } return 0 ; }"
2721,87,87,0,41,A2016/Z2/Z3/student8329,A2016/Z2/Z3/student4420,"#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , brtac ; int br ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; while ( ( brtac < 1 ) || ( brtac > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brtac ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } for ( br = 0 ; br < brtac ; br ++ ) { printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( ( i < 0 ) || ( i > 19 ) || ( j < 0 ) || ( j > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , br + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } mat [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bkt , i , j , ktacke ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; while ( bkt < 1 || bkt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( ktacke = 0 ; ktacke < bkt ; ktacke ++ ) { printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( i < 0 || j < 0 || i > 19 || j > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } niz [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2722,87,87,0,82,A2016/Z3/Z3/student6728,A2016/Z3/Z3/student2645,"#include <stdio.h> #include <math.h> int main ( ) { int m , n , nizb [ 200 ] [ 200 ] , i , j , l ; int brojac , k ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m >= 200 || n <= 0 || n >= 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( ( m <= 0 || m >= 200 ) || ( n <= 0 || n >= 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & nizb [ i ] [ j ] ) ; } } for ( k = 0 ; k < m - 1 ; k ++ ) { for ( i = k + 1 ; i < m ; i ++ ) { brojac = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( nizb [ k ] [ j ] == nizb [ i ] [ j ] ) { brojac ++ ; } else if ( nizb [ k ] [ j ] != nizb [ i ] [ j ] ) break ; } if ( brojac == n ) { for ( l = i ; l < m - 1 ; l ++ ) { for ( j = 0 ; j < n ; j ++ ) { nizb [ l ] [ j ] = nizb [ l + 1 ] [ j ] ; } } m -- ; i -- ; } } } for ( k = 0 ; k < n - 1 ; k ++ ) { for ( i = k + 1 ; i < n ; i ++ ) { brojac = 0 ; for ( j = 0 ; j < m ; j ++ ) { if ( nizb [ j ] [ k ] == nizb [ j ] [ i ] ) { brojac ++ ; } else if ( nizb [ j ] [ k ] != nizb [ j ] [ i ] ) break ; } if ( brojac == m ) { for ( j = 0 ; j < m ; j ++ ) { for ( l = i ; l < n - 1 ; l ++ ) { nizb [ j ] [ l ] = nizb [ j ] [ l + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , nizb [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , k , br , g , h ; int mat [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || n > 200 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || n > 200 || m > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { br = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == mat [ k ] [ j ] ) br ++ ; } if ( br == n ) { for ( g = k ; g < m - 1 ; g ++ ) { for ( h = 0 ; h < n ; h ++ ) { mat [ g ] [ h ] = mat [ g + 1 ] [ h ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { br = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] == mat [ i ] [ k ] ) br ++ ; } if ( br == m ) { for ( g = 0 ; g < m ; g ++ ) { for ( h = k ; h < n - 1 ; h ++ ) { mat [ g ] [ h ] = mat [ g ] [ h + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2724,85,85,0,58,A2016/Z2/Z4/student5573,A2016/Z2/Z4/student1278,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define g 0.000000000000000000000001 int main ( ) { double niz [ 100 ] [ 100 ] ; int m , n , i = 0 , j , a = 0 ; do { if ( i > 0 ) printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; i ++ ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; i = 0 ; while ( i < m ) { j = 0 ; while ( j < n ) { scanf ( ""%lf"" , & niz [ i ] [ j ] ) ; j ++ ; } i ++ ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( niz [ i ] [ j ] - niz [ i + 1 ] [ j + 1 ] ) > g ) { a ++ ; break ; } } if ( a == 1 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } } if ( a == 0 ) { for ( i = 0 ; i < m - 1 ; i ++ ) { if ( m == 1 ) { break ; } for ( j = 0 ; j < n ; j ++ ) { if ( fabs ( niz [ i ] [ n - 1 ] - niz [ i + 1 ] [ 0 ] ) > g ) { a ++ ; printf ( ""matrica je teplicova "" ) ; break ; } } if ( a == 1 ) { break ; } } if ( a == 0 ) { printf ( ""matrica je cirkularna "" ) ; } } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define g 0.0000000000000000000000001 int main ( ) { double niz [ 100 ] [ 100 ] ; int m , n , k = 0 , a = 0 , j ; do { if ( k > 0 ) printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; k ++ ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; k = 0 ; while ( k < m ) { j = 0 ; while ( j < n ) { scanf ( ""%lf"" , & niz [ k ] [ j ] ) ; j ++ ; } k ++ ; } for ( k = 0 ; k < m - 1 ; k ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( niz [ k ] [ j ] - niz [ k + 1 ] [ j + 1 ] ) > g ) { a ++ ; break ; } } if ( a == 1 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } } if ( a == 0 ) { for ( k = 0 ; k < m - 1 ; k ++ ) { if ( m == 1 ) { break ; } for ( j = 0 ; j < n ; j ++ ) { if ( fabs ( niz [ k ] [ n - 1 ] - niz [ k + 1 ] [ 0 ] ) > g ) { a ++ ; printf ( ""matrica je teplicova "" ) ; break ; } } if ( a == 1 ) { break ; } } if ( a == 0 ) { printf ( ""matrica je cirkularna "" ) ; } } return 0 ; }"
2729,77,77,0,67,A2016/Z3/Z2/student4934,A2016/Z3/Z2/student8043,"#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int velicina ) { int * o ; int * s ; int i ; int zbir ; int x ; int y ; o = s = niz ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( s + ( 2 * i ) ) = * ( o + i ) ; } o = niz ; for ( i = 0 ; i < 2 * velicina ; i ++ ) { zbir = 0 ; x = * ( o + i ) ; x = abs ( x ) ; do { y = x % 10 ; x = x / 10 ; zbir = zbir + y ; } while ( x != 0 ) ; * ( o + 1 + i ) = zbir ; i ++ ; } } int fibonacijev_niz ( int m ) { int a ; int b ; int c ; if ( m < 0 ) return 0 ; if ( m == 1 ) return 1 ; a = 1 ; b = 1 ; while ( 1 ) { c = a + b ; if ( m == c ) return 1 ; else if ( c > m ) return 0 ; a = b ; b = c ; } } int izbaci ( int * niz , int velicina ) { int i ; int x ; int j ; int * o ; o = niz ; for ( i = 0 ; i < velicina ; i ++ ) { x = fibonacijev_niz ( * ( o + i ) ) ; if ( x == 1 ) { for ( j = i ; j < velicina - 1 ; j ++ ) { * ( o + j ) = * ( o + j + 1 ) ; } velicina -- ; i -- ; } } return velicina ; } int main ( ) { int niz [ 20 ] , i , velicina = 10 , x ; printf ( ""unesite niz od 10 brojeva:"" ) ; for ( i = 0 ; i < velicina ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; x = izbaci ( niz , 2 * velicina ) ; printf ( "" modificirani niz glasi: "" ) ; for ( i = 0 ; i < x - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int * p , * q , i , suma , a , b ; p = q = niz ; for ( i = vel - 1 ; i >= 0 ; i -- ) { * ( q + ( 2 * i ) ) = * ( p + i ) ; } p = niz ; for ( i = 0 ; i < 2 * vel ; i ++ ) { suma = 0 ; a = * ( p + i ) ; a = abs ( a ) ; while ( a != 0 ) { b = a % 10 ; a /= 10 ; suma += b ; } * ( p + i + 1 ) = suma ; i ++ ; } } int fibniz ( int n ) { int x , y , z ; if ( n < 0 ) return 0 ; if ( n == 1 ) return 1 ; x = 1 ; y = 1 ; while ( 1 ) { z = x + y ; if ( n == z ) return 1 ; else if ( z > n ) return 0 ; x = y ; y = z ; } } int izbaci ( int * niz , int vel ) { int i , a , j , * p ; p = niz ; for ( i = 0 ; i < vel ; i ++ ) { a = fibniz ( * ( p + i ) ) ; if ( a == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { * ( p + j ) = * ( p + j + 1 ) ; } vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , vel = 10 , a ; printf ( ""unesite niz od 10 brojeva:"" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; a = izbaci ( niz , 2 * vel ) ; printf ( "" modificirani niz glasi: "" ) ; for ( i = 0 ; i < a - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }"
2731,98,98,0,31,A2016/Z2/Z3/student7013,A2016/Z2/Z3/student5222,"#include <stdio.h> int main ( ) { char matrica [ 20 ] [ 20 ] ; int n = 0 , x , y , i = 0 ; for ( y = 0 ; y < 20 ; y ++ ) for ( x = 0 ; x < 20 ; x ++ ) matrica [ y ] [ x ] = ' ' ; while ( 1 ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; else break ; } while ( i < n ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d%d"" , & x , & y ) ; if ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; } else { matrica [ y ] [ x ] = '*' ; i ++ ; } } for ( y = 0 ; y < 20 ; y ++ ) { for ( x = 0 ; x < 20 ; x ++ ) printf ( ""%c"" , matrica [ y ] [ x ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { char matrica [ 20 ] [ 20 ] ; int n = 0 , x , y , i = 0 ; for ( y = 0 ; y < 20 ; y ++ ) for ( x = 0 ; x < 20 ; x ++ ) matrica [ y ] [ x ] = ' ' ; while ( 1 ) { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 10 ) printf ( ""pogresan unos\n"" ) ; else break ; } while ( i < n ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d%d"" , & x , & y ) ; if ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; } else { matrica [ y ] [ x ] = '*' ; i ++ ; } } for ( y = 0 ; y < 20 ; y ++ ) { for ( x = 0 ; x < 20 ; x ++ ) printf ( ""%c"" , matrica [ y ] [ x ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
2734,96,96,0,22,A2016/Z1/Z4/student3701,A2016/Z1/Z4/student2486,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""**"" ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * ( n - 1 ) ; j ++ ) { if ( i == j || i + j == 2 * ( n - 1 ) || j - i == 2 * ( n - 1 ) || j + i == 4 * ( n - 1 ) ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\n"" ) ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""**"" ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * ( n - 1 ) ; j ++ ) { if ( i == j || i + j == 2 * ( n - 1 ) || j - i == 2 * ( n - 1 ) || j + i == 4 * ( n - 1 ) ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2739,22,22,0,19,A2016/Z5/Z1/student6548,A2016/Z5/Z1/student3386,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjecna_ocjena ( int niz [ ] , int vel ) { if ( vel == 0 ) return 0 ; int i ; double prosjek = 5 , suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } prosjek = suma / vel ; return prosjek ; } int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } int prvi = - 1 , drugi = - 1 , treci = - 1 ; double najveci = 0 , prosj ; int ispred ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { prvi = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ prvi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ prvi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { prvi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci && i != prvi ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { drugi = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ drugi ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ drugi ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { drugi = i ; } } } najveci = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) >= najveci && i != prvi && i != drugi ) { if ( prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) > najveci ) { treci = i ; najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; continue ; } najveci = prosjecna_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; ispred = uporedi ( studenti [ treci ] . prezime , studenti [ i ] . prezime ) ; if ( ispred == 0 ) ispred = uporedi ( studenti [ treci ] . ime , studenti [ i ] . ime ) ; if ( ispred == 1 ) { treci = i ; } } } for ( i = 0 ; i < velicina ; i ++ ) if ( i == prvi ) printf ( ""\n%s %s\n"" , studenti [ prvi ] . prezime , studenti [ prvi ] . ime ) ; for ( i = 0 ; i < velicina ; i ++ ) if ( i == drugi ) printf ( ""%s %s\n"" , studenti [ drugi ] . prezime , studenti [ drugi ] . ime ) ; for ( i = 0 ; i < velicina ; i ++ ) if ( i == treci ) printf ( ""%s %s\n"" , studenti [ treci ] . prezime , studenti [ treci ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 10 ] = { { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 7 , 8 , 9 } , 3 } , { ""mujo"" , ""mujic"" , { 10 , 10 , 10 , 10 , 9 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 7 } , 7 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 7 , 7 , 6 , 6 , 6 , 5 } , 10 } , { ""osman"" , ""osmic"" , { 8 , 6 , 9 , 10 , 9 } , 5 } , { ""pero"" , ""mujic"" , { 10 , 6 , 10 , 10 , 9 } , 5 } , { ""beba"" , ""mujic"" , { 10 , 8 , 7 , 6 , 9 } , 5 } , } ; int vel = genijalci ( studenti , 9 , 7 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; float prosjek ( int niz [ ] , int vel ) { int i = 0 , suma = 0 ; float prosjek ; if ( vel == 0 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) { if ( niz [ i ] == 5 ) return 5 ; suma += niz [ i ] ; } prosjek = ( float ) suma / vel ; return prosjek ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; else if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( strcmp ( pr . prezime , dr . prezime ) > 0 ) return 0 ; else if ( strcmp ( pr . prezime , dr . prezime ) < 0 ) return 1 ; if ( strcmp ( pr . ime , dr . ime ) > 0 ) return 0 ; else if ( strcmp ( pr . ime , dr . ime ) < 0 ) return 1 ; else return 1 ; } int ind ( struct student niz [ ] , int vel , double prosjekk ) { int i ; int indexmin = 0 ; double min = 10 ; float temp ; for ( i = 0 ; i < vel ; i ++ ) { temp = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp > epsilon ) { min = temp ; indexmin = i ; } } return indexmin ; } int izb ( struct student niz [ ] , int vel , double prosjekk ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( prosjekk - prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } return vel ; } void ispis ( struct student niz [ ] , int vel , double prosjekk , int indexmin ) { int i , indexprvi , indexdrugi = 0 , indextreci , vr ; if ( vel > 0 ) { indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { vr = dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ; if ( vr == 1 ) indexprvi = i ; } if ( i > 0 ) printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; } if ( vel > 1 ) { indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; vr = dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ; if ( vr == 1 ) indexdrugi = i ; } printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; } if ( vel > 2 ) { indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; vr = dalijeveci ( niz [ i ] , niz [ indextreci ] ) ; if ( vr == 1 ) indextreci = i ; } if ( i > 0 ) printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; } } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int indexmin = 0 ; vel = izb ( niz , vel , prosjekk ) ; indexmin = ind ( niz , vel , prosjekk ) ; ispis ( niz , vel , prosjekk , indexmin ) ; return vel ; } int main ( ) { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""beba"" , ""bebic"" , { 10 , 10 , 10 , 10 , 5 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; }"
2751,99,99,0,46,A2016/Z2/Z3/student2900,A2016/Z2/Z3/student4036,"#include <stdio.h> int main ( ) { int unos , i , j ; char a [ 20 ] [ 20 ] ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { a [ i ] [ j ] = ' ' ; } } do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & unos ) ; if ( unos <= 0 || unos > 10 ) printf ( ""pogresan unos \n"" ) ; else break ; } while ( 1 ) ; for ( i = 0 ; i < unos ; i ++ ) { int x , y ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x >= 0 && x <= 19 && y >= 0 && y <= 19 ) { a [ x ] [ y ] = '*' ; } else { printf ( ""pogresan unos\n"" ) ; i -- ; } } int kocka = 0 ; for ( kocka ; kocka < 20 ; kocka ++ ) { int sat = 0 ; for ( sat ; sat < 20 ; sat ++ ) { if ( a [ sat ] [ kocka ] == '*' ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int unos , i , j ; char a [ 20 ] [ 20 ] ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { a [ i ] [ j ] = ' ' ; } } do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & unos ) ; if ( unos <= 0 || unos > 10 ) printf ( ""pogresan unos \n"" ) ; else break ; } while ( 1 ) ; for ( i = 0 ; i < unos ; i ++ ) { int x , y ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x >= 0 && x <= 19 && y >= 0 && y <= 19 ) { a [ x ] [ y ] = '*' ; } else { printf ( ""pogresan unos\n"" ) ; i -- ; } } int kocka = 0 ; for ( kocka ; kocka < 20 ; kocka ++ ) { int sat = 0 ; for ( sat ; sat < 20 ; sat ++ ) { if ( a [ sat ] [ kocka ] == '*' ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2762,91,91,0,102,A2016/Z3/Z3/student4108,A2016/Z3/Z3/student2526,"#include <stdio.h> int main ( ) { int i , k , br , j , mat [ 200 ] [ 200 ] , m , n , a , b , temp ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m >= 200 || n < 1 || n >= 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { br = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { br ++ ; } if ( br == n ) { for ( a = j + 1 ; a < m ; a ++ ) { for ( b = 0 ; b < n ; b ++ ) { temp = mat [ m - 1 ] [ n ] ; mat [ m - 1 ] [ n ] = mat [ m ] [ n ] ; mat [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { br = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { br ++ ; } if ( br == m ) { for ( a = j + 1 ; a < n ; a ++ ) { for ( b = 0 ; b < m ; b ++ ) { temp = mat [ n ] [ m - 1 ] ; mat [ n ] [ m - 1 ] = mat [ n ] [ m ] ; mat [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2767,98,98,0,72,A2016/Z4/Z2/student9318,A2016/Z4/Z2/student8665,"#include <stdio.h> #define duz 95 int vrati_najveci ( int * niz , int vel ) { int i , j = 0 ; static int vrijednost = - 1 ; int max = niz [ 0 ] ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] > max ) { max = niz [ i ] ; j = i ; } niz [ j ] = vrijednost ; vrijednost -- ; return j ; } char * kodiraj ( char * tekst , char * tablica ) { char * pocetak = tekst , * pamti = tablica ; int brojac [ duz ] = { 0 } , i ; while ( * tekst != '\0' ) brojac [ * tekst ++ - 32 ] ++ ; for ( i = 0 ; i < duz ; i ++ ) * tablica ++ = vrati_najveci ( brojac , duz ) + 32 ; for ( i = 0 ; i < duz ; i ++ ) if ( brojac [ i ] == 0 ) * tablica ++ = i + 32 ; tablica = '\0' ; tekst = pocetak ; while ( * tekst != '\0' ) { tablica = pamti ; while ( * tablica != '\0' ) { if ( * tablica == * tekst ) { * tekst = 126 - ( tablica - pamti ) ; break ; } tablica ++ ; } tekst ++ ; } return pocetak ; } char * dekodiraj ( char * tekst , char * tablica ) { char * pocetak = tekst , * pamti = tablica ; int a ; while ( * tekst != '\0' ) { tablica = pamti ; while ( * tablica != '\0' ) { if ( * tablica == * tekst ) { a = 126 - * tablica ; * tekst = * ( pamti + a ) ; break ; } tablica ++ ; } tekst ++ ; } return pocetak ; } int main ( ) { char tekst [ ] = ""llmlnlnmonm"" ; char sifrarnik [ 100 ] = """" ; int i ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik [ i ] ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }","#include <stdio.h> #define duz 95 int vrati_najveci ( int * niz , int vel ) { int i , j = 0 ; static int vrijednost = - 1 ; int max = niz [ 0 ] ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] > max ) { max = niz [ i ] ; j = i ; } niz [ j ] = vrijednost ; vrijednost -- ; return j ; } char * kodiraj ( char * tekst , char * tablica ) { char * pocetak = tekst , * pamti = tablica ; int brojac [ duz ] = { 0 } , i ; while ( * tekst != '\0' ) brojac [ * tekst ++ - 32 ] ++ ; for ( i = 0 ; i < duz ; i ++ ) * tablica ++ = vrati_najveci ( brojac , duz ) + 32 ; for ( i = 0 ; i < duz ; i ++ ) if ( brojac [ i ] == 0 ) * tablica ++ = i + 32 ; tablica = '\0' ; tekst = pocetak ; while ( * tekst != '\0' ) { tablica = pamti ; while ( * tablica != '\0' ) { if ( * tablica == * tekst ) { * tekst = 126 - ( tablica - pamti ) ; break ; } tablica ++ ; } tekst ++ ; } return pocetak ; } char * dekodiraj ( char * tekst , char * tablica ) { char * pocetak = tekst , * pamti = tablica ; int a ; while ( * tekst != '\0' ) { tablica = pamti ; while ( * tablica != '\0' ) { if ( * tablica == * tekst ) { a = 126 - * tablica ; * tekst = * ( pamti + a ) ; break ; } tablica ++ ; } tekst ++ ; } return pocetak ; } int main ( ) { char tekst [ ] = ""llmlnlnmonm"" ; char sifrarnik [ 100 ] = """" ; int i ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s\n"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik [ i ] ) ; dekodiraj ( tekst , sifrarnik ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
2777,97,97,0,46,A2016/Z3/Z1/student3900,A2016/Z3/Z1/student7802,"#include <stdio.h> int daj_prost ( ) { static int prost = 2 ; int i , prosti_broj = 0 ; for ( i = 2 ; i <= prost ; i ++ ) { if ( ( prost % i == 0 ) && ( prost == i ) ) { prosti_broj = prost ; break ; } else if ( ( prost % i == 0 ) && ( prost != i ) ) { prost ++ ; i = 2 ; } } prost ++ ; return prosti_broj ; } int main ( ) { int a , suma = 0 , prost = 0 , b , i ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) { printf ( ""a nije manje od b."" ) ; printf ( ""\n"" ) ; } else if ( a <= 0 ) { printf ( ""a nije prirodan broj."" ) ; printf ( ""\n"" ) ; } else if ( b <= 0 ) { printf ( ""b nije prirodan broj."" ) ; printf ( ""\n"" ) ; } } while ( a >= b || a <= 0 || b <= 0 ) ; for ( i = 0 ; i < b ; i ++ ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) { suma = suma + prost ; } else if ( prost > b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int prost = 2 ; int i , prosti_broj = 0 ; for ( i = 2 ; i <= prost ; i ++ ) { if ( ( prost % i == 0 ) && ( prost == i ) ) { prosti_broj = prost ; break ; } else if ( ( prost % i == 0 ) && ( prost != i ) ) { prost ++ ; i = 2 ; } } prost ++ ; return prosti_broj ; } int main ( ) { int a , suma = 0 , prost = 0 , b , i ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) { printf ( ""a nije manje od b."" ) ; printf ( ""\n"" ) ; } else if ( a <= 0 ) { printf ( ""a nije prirodan broj."" ) ; printf ( ""\n"" ) ; } else if ( b <= 0 ) { printf ( ""b nije prirodan broj."" ) ; printf ( ""\n"" ) ; } } while ( a >= b || a <= 0 || b <= 0 ) ; for ( i = 0 ; i < b ; i ++ ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) { suma = suma + prost ; } else if ( prost > b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2780,85,85,0,51,A2016/Z3/Z3/student7802,A2016/Z3/Z3/student8540,"#include <stdio.h> int main ( ) { int t = 1 , l , p , o , i , j , k , m , n , mat [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = 0 ; k < m - i - 1 ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + k + 1 ] [ j ] ) break ; } if ( j == n ) { for ( l = 0 ; l < m - k - i - 1 ; l ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ i + k + l + 1 ] [ j ] = mat [ i + k + l + 2 ] [ j ] ; } } m -- ; k -- ; } } } t = 1 ; for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = 0 ; k < n - j - 1 ; k ++ ) { for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ j + k + 1 ] ) break ; } if ( i == m ) { for ( o = 0 ; o < m ; o ++ ) { for ( p = 0 ; p < n - k - j - 1 ; p ++ ) { mat [ o ] [ j + k + p + 1 ] = mat [ o ] [ j + k + p + 2 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , l , i , j , k , o , n ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu. \n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = 0 ; k < m - i - 1 ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ i + k + 1 ] [ j ] ) { break ; } } if ( j == n ) { for ( l = 0 ; l < m - k - i - 1 ; l ++ ) { for ( j = 0 ; j < n ; j ++ ) { matrica [ i + k + l + 1 ] [ j ] = matrica [ i + k + l + 2 ] [ j ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = 0 ; k < n - j - 1 ; k ++ ) { for ( i = 0 ; i < m ; i ++ ) { if ( matrica [ i ] [ j ] != matrica [ i ] [ j + k + 1 ] ) { break ; } } if ( i == m ) { for ( n = 0 ; n < m ; n ++ ) { for ( o = 0 ; o < n - k - j - 1 ; o ++ ) { matrica [ n ] [ j + k + 1 + o ] = matrica [ n ] [ j + k + 2 + o ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2782,94,94,0,13,A2016/Z2/Z1/student8393,A2016/Z2/Z1/student3288,"#include <stdio.h> #include <math.h> int main ( ) { int n , x , a , b , rez = 0 , c = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; while ( n >= 10 || n <= - 10 ) { a = n % 10 ; b = n % 100 ; b = b / 10 ; x = fabs ( a - b ) * c ; c *= 10 ; rez = rez + x ; n = n / 10 ; } printf ( ""%d"" , rez ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { int n , x , a , b , rez = 0 , c = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; while ( n >= 10 || n <= - 10 ) { a = n % 10 ; b = n % 100 ; b = b / 10 ; x = fabs ( a - b ) * c ; c *= 10 ; rez = rez + x ; n = n / 10 ; } printf ( ""%d"" , rez ) ; return 0 ; }"
2787,25,25,0,79,A2016/Z5/Z3/student6956,A2016/Z5/Z3/student6548,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int vr = znak ; int i = 0 ; while ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' && vr > 0 ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { int ima = 0 ; if ( znak == '\0' ) return ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int ucitano = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz ) ; int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( ucitano == ucitano1 ) return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int nasao = 0 ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { nasao = 1 ; max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 && nasao == 1 ) max = max - 1 ; if ( nasao == 1 ) return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; int nasao = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) nasao = 1 ; min = raspored [ i ] . pocetak . sati ; } if ( nasao == 1 ) return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; printf ( ""\n       "" ) ; printf ( ""pon       "" ) ; printf ( ""uto       "" ) ; printf ( ""sri       "" ) ; printf ( ""cet       "" ) ; printf ( ""pet       "" ) ; printf ( ""sub\n"" ) ; for ( i = min ( raspored , broj_casova ) ; i <= max ( raspored , broj_casova ) ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; int brojac = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d"" , raspored [ i ] . kraj . minute ) ; printf ( "")"" ) ; } brojac ++ ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { int zapisano ; int nova ; file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } nova = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( zapisano >= 1 && nova == zapisano ) return 1 ; else return 0 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 , obrisan = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { obrisan = 1 ; for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 ) { int d1 = t1 . sati * 3600 + t1 . minute * 60 + t1 . sekunde ; int d2 = t2 . sati * 3600 + t2 . minute * 60 + t2 . sekunde ; if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return - 1 ; if ( d1 == d2 ) return 0 ; return - 2 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int flag = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int prvi = poredivrj ( raspored [ i ] . kraj , cas . pocetak ) ; int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak ) ; if ( prvi == 1 && drugi == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { flag = 1 ; break ; } } return flag ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; int dokle = 19 - trajanje ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= dokle ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; struct cas cas1 = { ""pom"" , 2 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; while ( * q ++ = * p ++ ) ; char * a = cas1 . predmet ; char * b = cas1 . predmet ; if ( a == b ) preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 0 : { zapisi_datoteku ( raspored , broj_casova ) ; break ; } case 1 : { ispis_rasporeda ( raspored , broj_casova ) ; break ; } case 2 : { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; if ( vr == 1 ) broj_casova ++ ; break ; } case 3 : { struct cas promjena ; int dan , redni ; char * q , * p ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; int broj = broj_casova ; ispisi_dan ( raspored , broj , dan ) ; promjena . dan_u_sedmici = dan ; int dani = dan + 7 ; printf ( ""\nizaberite koji cas zelite promijeniti:  naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; ocisti ( unesi ( predmet , 10 ) ) ; q = promjena . predmet ; p = predmet ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; if ( dani > 0 ) promijeni_cas ( raspored , broj , dan , redni , promjena ) ; break ; } case 4 : { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; printf ( "" cas obrisan\n"" ) ; broj_casova -- ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int vel = velicina ; int i = 0 , k = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel && znak != '\n' ) { niz [ i ] = znak ; i ++ ; k ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void cln ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } void isp ( int vel ) { int x ; int veli = vel / 2 ; for ( x = 0 ; x < veli ; x ++ ) printf ( ""  "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , max = 0 , min = 100 ; int indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } printf ( ""\n       pon       uto       sri"" ) ; printf ( ""       cet       "" ) ; printf ( ""pet       sub\n"" ) ; int mintt = 0 ; int indexpamtimo ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; mintt = raspored [ i ] . kraj . minute ; indexpamtimo = 1 ; } } int x ; int s , dan , n ; if ( mintt == 0 ) max = max - 1 ; int poc = min ; int kraj = max ; int ukupno = broj_casova ; for ( i = poc ; i <= kraj ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%02d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < ukupno ; k ++ ) { if ( max > 0 ) { dan = raspored [ k ] . dan_u_sedmici ; n = raspored [ k ] . kraj . sati ; if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && n >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } } if ( k == ukupno && ukupno > - 1 ) isp ( 10 ) ; } printf ( ""\n"" ) ; } } void pomispis ( int k , char * s , int sat , int min , int sat1 , int min1 ) { printf ( ""\n%d) %s ("" , k ++ , s ) ; printf ( ""%02d:%02d-"" , sat , min ) ; printf ( ""%02d:%02d)"" , sat1 , min1 ) ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i , k = 1 ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int pocs = raspored [ i ] . pocetak . sati ; int pocm = raspored [ i ] . pocetak . minute ; int krajs = raspored [ i ] . kraj . sati ; int krajm = raspored [ i ] . kraj . minute ; pomispis ( k ++ , raspored [ i ] . predmet , pocs , pocm , krajs , krajm ) ; } } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) return 0 ; int nova = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , ulaz1 ) ; if ( nova != zapisano ) return 0 ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , j ; int bezzadnjeg = broj_casova - 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < bezzadnjeg ; j ++ ) raspored [ j ] = raspored [ j + 1 ] ; return ; break ; } } } } int poredba ( int p , int d ) { if ( p > d ) return 1 ; if ( p < d ) return - 1 ; if ( p == d ) return 0 ; } int poredi ( struct vrijeme t1 , struct vrijeme t2 , int vel ) { int vr = t1 . sati * vel * vel + t1 . minute * vel + t1 . sekunde , vr2 = t2 . sati * vel * vel + t2 . minute * vel + t2 . sekunde ; return poredba ( vr , vr2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int ima = 0 ; int i , prvi ; for ( i = 0 ; i < broj_casova ; i ++ ) { prvi = poredi ( raspored [ i ] . kraj , cas . pocetak , 60 ) ; if ( prvi == 1 && poredi ( cas . kraj , raspored [ i ] . pocetak , 60 ) == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) ima = 1 ; break ; } return ima ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; int ukupno = 19 - trajanje ; for ( i = 0 ; i < 6 ; i ++ ) { for ( j = 9 ; j <= ukupno ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; char * q = cas . predmet , * p = ( char * ) predmet ; struct cas cc ; while ( * q ++ = * p ++ ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 1 ) continue ; else { raspored [ broj_casova ] = cas ; goto jedan ; } } } return 0 ; jedan : return 1 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } void mjesto ( int br ) { printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija != 4 && opcija != 3 && opcija != 0 && opcija != 1 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; cln ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; int vr = dodan ; if ( vr == 0 ) mjesto ( br_casova ) ; if ( vr == 1 ) broj_casova ++ ; } if ( opcija != 0 && opcija != 3 && opcija != 2 && opcija != 1 ) { int dan , redni ; printf ( ""unesite dan "" ) ; printf ( ""1=ponedjeljak, 2=utorak...,6=subota: "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova -- ; printf ( ""cas obrisan\n"" ) ; } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija != 4 && opcija != 3 && opcija != 2 && opcija != 0 ) ; ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija != 4 && opcija != 0 && opcija != 2 && opcija != 1 ) { struct cas promjena ; int dan , redni ; char znak , predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota):"" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: naziv predmeta: "" ) ; scanf ( ""%d"" , & redni ) ; cln ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet ; char * p = predmet ; while ( * q ++ = * p ++ ) ; int prvi = broj_casova ; int drugi = dan ; int treci = redni ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . pocetak . sati , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; scanf ( ""%d%c%d"" , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , prvi , drugi , redni , promjena ) ; } } while ( opcija != 0 ) ; return 0 ; }"
2794,56,56,0,23,A2016/Z2/Z4/student9141,A2016/Z2/Z4/student6992,"#include <stdio.h> int main ( ) { int m = 0 , n = 0 , i = 0 , j = 0 , teplicova = 1 , cirkularna = 1 ; double matrica [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ i + 1 ] [ j + 1 ] || matrica [ i ] [ n - 1 ] != matrica [ i + 1 ] [ 0 ] ) { cirkularna = 0 ; i = m ; j = n ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ i + 1 ] [ j + 1 ] ) { teplicova = 0 ; i = m ; j = n ; } } } if ( m > 1 && n == 1 ) cirkularna = 0 ; if ( cirkularna == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int m = 0 , n = 0 , i = 0 , j = 0 , teplicova = 1 , cirkularna = 1 ; double mat [ 100 ] [ 100 ] = { 0 } , prvired [ 100 ] = { 0 } , temp = 0 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || n > 100 || m > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || n <= 0 || n > 100 || m > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) prvired [ i ] = mat [ 0 ] [ i ] ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) if ( prvired [ j ] != mat [ i ] [ j ] ) { cirkularna = 0 ; break ; } if ( cirkularna == 0 ) break ; temp = prvired [ n - 1 ] ; for ( j = n - 2 ; j >= 0 ; j -- ) prvired [ j + 1 ] = prvired [ j ] ; prvired [ 0 ] = temp ; } if ( cirkularna == 0 ) for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) teplicova = 0 ; } } if ( cirkularna ) printf ( ""matrica je cirkularna"" ) ; else if ( teplicova ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
2800,15,15,0,24,A2016/Z5/Z1/student6956,A2016/Z5/Z1/student4095,"#include <stdio.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( * s1 != '\0' && * s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } float prosjek ( int niz [ ] , int vel ) { if ( vel == 0 ) return 5 ; int i = 0 ; float suma = 0 ; for ( i = 0 ; i < vel ; i ++ ) if ( niz [ i ] == 5 ) return 5 ; for ( i = 0 ; i < vel ; i ++ ) suma = suma + niz [ i ] ; return suma / vel ; } int dalijeveci ( struct student pr , struct student dr ) { if ( prosjek ( pr . ocjene , pr . br_ocjena ) > prosjek ( dr . ocjene , dr . br_ocjena ) ) return 1 ; if ( prosjek ( pr . ocjene , pr . br_ocjena ) < prosjek ( dr . ocjene , dr . br_ocjena ) ) return 0 ; if ( uporedi ( pr . prezime , dr . prezime ) == - 1 ) return 1 ; if ( uporedi ( pr . prezime , dr . prezime ) == 1 ) return 0 ; if ( uporedi ( pr . ime , dr . ime ) == - 1 ) return 1 ; if ( uporedi ( pr . ime , dr . ime ) == 1 ) return 0 ; else return 1 ; } int genijalci ( struct student niz [ ] , int vel , double prosjekk ) { int i , j , indexprvi , indexdrugi , indextreci , indexmin = 0 ; double maxprvi , maxdrugi , maxtreci , temp_prosjek , min = 10 ; for ( i = 0 ; i < vel ; i ++ ) { temp_prosjek = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( prosjekk - temp_prosjek > epsilon ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } for ( i = 0 ; i < vel ; i ++ ) { temp_prosjek = prosjek ( niz [ i ] . ocjene , niz [ i ] . br_ocjena ) ; if ( min - temp_prosjek > epsilon ) { min = temp_prosjek ; indexmin = i ; } } if ( vel == 0 ) return 0 ; if ( vel == 1 ) goto jedan ; if ( vel == 2 ) goto dva ; if ( vel >= 3 ) goto tri ; jedan : indexprvi = indexmin ; printf ( ""\n%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; return vel ; dva : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) indexdrugi = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; return vel ; tri : indexprvi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( dalijeveci ( niz [ i ] , niz [ indexprvi ] ) ) indexprvi = i ; } indexdrugi = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indexdrugi ] ) ) indexdrugi = i ; } indextreci = indexmin ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == indexprvi || i == indexdrugi ) continue ; if ( dalijeveci ( niz [ i ] , niz [ indextreci ] ) ) indextreci = i ; } printf ( ""%s %s\n"" , niz [ indexprvi ] . prezime , niz [ indexprvi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indexdrugi ] . prezime , niz [ indexdrugi ] . ime ) ; printf ( ""%s %s\n"" , niz [ indextreci ] . prezime , niz [ indextreci ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""nekic"" , { 10 , 10 , 5 , 10 , 10 , 10 , 10 } , 7 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9.8 ) ; printf ( ""vel: %dstudenti:"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedi ( char * s1 , char * s2 ) { while ( s1 != '\0' && s2 != '\0' ) { if ( * s1 < * s2 ) return - 1 ; if ( * s1 > * s2 ) return 1 ; s1 ++ ; s2 ++ ; } if ( * s1 != '\0' ) return 1 ; if ( * s2 != '\0' ) return - 1 ; return 0 ; } double racunanje_prosjeka ( struct student student ) { int j ; double suma = 0 , prosjek_studenta = 0 ; if ( student . br_ocjena == 0 ) { prosjek_studenta = 5. ; } for ( j = 0 ; j < student . br_ocjena ; j ++ ) { if ( student . ocjene [ j ] == 5 ) { prosjek_studenta = 5.0 ; break ; } else suma += student . ocjene [ j ] ; } if ( prosjek_studenta != 5. ) prosjek_studenta = suma / student . br_ocjena ; return prosjek_studenta ; } void izbacivanje ( struct student * novi , int vel ) { int i ; for ( i = 0 ; i < vel ; i ++ ) { * ( novi + i ) = * ( novi + i + 1 ) ; } } void najbolji_studenti ( struct student * studenti , int vel , double prosjek ) { int i , index1 = 0 , index2 = 0 , index3 = 0 ; int n , k ; int k1 , k2 , k3 ; for ( i = 0 ; i < vel ; i ++ ) { if ( racunanje_prosjeka ( studenti [ index1 ] ) < racunanje_prosjeka ( studenti [ i ] ) ) index1 = i ; } if ( vel > 1 ) { if ( index1 == index2 ) index2 = index1 + 1 ; for ( i = 0 ; i < vel ; i ++ ) { if ( i != index1 && racunanje_prosjeka ( studenti [ index2 ] ) < racunanje_prosjeka ( studenti [ i ] ) ) index2 = i ; } if ( vel == 2 ) { if ( fabs ( racunanje_prosjeka ( studenti [ index1 ] ) - racunanje_prosjeka ( studenti [ index2 ] ) ) < epsilon ) { n = uporedi ( studenti [ index1 ] . prezime , studenti [ index2 ] . prezime ) ; if ( n == - 1 ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; return ; } else if ( n == 1 ) { printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; return ; } else if ( n == 0 ) { k = uporedi ( studenti [ index1 ] . ime , studenti [ index2 ] . ime ) ; if ( k == - 1 ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; return ; } else if ( k == 1 ) { printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; return ; } else { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; return ; } } } else { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; return ; } } else { if ( index1 == index3 || index3 == index2 ) index3 = index2 + 1 ; for ( i = 0 ; i < vel ; i ++ ) { if ( i != index1 && i != index2 && racunanje_prosjeka ( studenti [ index3 ] ) < racunanje_prosjeka ( studenti [ i ] ) ) index3 = i ; } if ( racunanje_prosjeka ( studenti [ index1 ] ) != racunanje_prosjeka ( studenti [ index2 ] ) && racunanje_prosjeka ( studenti [ index2 ] ) != racunanje_prosjeka ( studenti [ index3 ] ) && racunanje_prosjeka ( studenti [ index1 ] ) != racunanje_prosjeka ( studenti [ index3 ] ) ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } else if ( racunanje_prosjeka ( studenti [ index1 ] ) == racunanje_prosjeka ( studenti [ index2 ] ) && racunanje_prosjeka ( studenti [ index1 ] ) != racunanje_prosjeka ( studenti [ index3 ] ) ) { n = uporedi ( studenti [ index1 ] . prezime , studenti [ index2 ] . prezime ) ; if ( n == - 1 ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } else if ( n == 1 ) { printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } else if ( n == 0 ) { k = uporedi ( studenti [ index1 ] . ime , studenti [ index2 ] . ime ) ; if ( k == - 1 ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } else if ( k == 1 ) { printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } else { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } } } else { k1 = uporedi ( studenti [ index1 ] . prezime , studenti [ index2 ] . prezime ) ; k2 = uporedi ( studenti [ index1 ] . prezime , studenti [ index3 ] . prezime ) ; k3 = uporedi ( studenti [ index2 ] . prezime , studenti [ index3 ] . prezime ) ; if ( k1 != 0 && k2 != 0 && k3 != 0 ) { if ( k1 == - 1 && k2 == - 1 && k3 == - 1 ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } else if ( k1 == - 1 && k2 == - 1 ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; return ; } else if ( k1 == 1 && k2 == - 1 && k3 == - 1 ) { printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; return ; } else if ( k1 == - 1 && k2 == 1 && k3 == 1 ) { printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; return ; } else if ( k1 == 1 && k2 == 1 && k3 == - 1 ) { printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; return ; } else { printf ( ""%s %s\n"" , studenti [ index3 ] . prezime , studenti [ index3 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index2 ] . prezime , studenti [ index2 ] . ime ) ; printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; return ; } } } } } else if ( vel == 1 ) { printf ( ""%s %s\n"" , studenti [ index1 ] . prezime , studenti [ index1 ] . ime ) ; return ; } } int genijalci ( struct student * studenti , int vel , double prosjek ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( racunanje_prosjeka ( studenti [ i ] ) < prosjek ) { izbacivanje ( studenti + i , vel - i - 1 ) ; vel -- ; i -- ; } } najbolji_studenti ( studenti , vel , prosjek ) ; return vel ; } int main ( ) { struct student s = { ""aaaaaaaaaaaaaaaaaaa"" , ""aaaaaaaaaaaaaaaaaaa"" , { } , 50 } ; int i ; for ( i = 0 ; i < 50 ; i ++ ) s . ocjene [ i ] = 10 ; printf ( ""vel: %llu"" , sizeof s ) ; struct student niz [ 1 ] ; niz [ 0 ] = s ; genijalci ( niz , 1 , 9.9 ) ; return 0 ; }"
2805,46,46,0,26,A2016/Z3/Z1/student2157,A2016/Z3/Z1/student7341,"#include <stdio.h> int daj_prost ( ) { int j = 2 , broj = 0 ; static int i = 1 ; do { i ++ ; for ( j = 2 ; j <= i ; ) { if ( i == j ) { broj = i ; break ; } else if ( i % j == 0 ) { break ; } else if ( i % j != 0 ) { j ++ ; } } } while ( broj != i ) ; return broj ; } int main ( ) { int a , b , i , suma = 0 , b ; printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; while ( a >= b || a <= 0 ) { if ( a <= 0 ) { printf ( ""a nije prirodan broj. "" ) ; printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; } else if ( a >= b ) { printf ( ""a nije manje od b. "" ) ; printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; } } for ( i = 0 ; i < b ; i ++ ) { b = daj_prost ( ) ; if ( b > a && b < b ) { suma += b ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int i ; static int c = 1 ; do { c ++ ; for ( i = 2 ; i < c ; i ++ ) { if ( c % i == 0 ) break ; } } while ( c != i ) ; return c ; } int main ( ) { int a , b , j , suma = 0 , prostbroj ; printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; while ( a <= 0 || b < 0 || b <= a ) { if ( b <= a ) { printf ( ""a nije manje od b.\nunesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; } else if ( a <= 0 ) { printf ( ""a nije prirodan broj.\nunesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; } else if ( b < 0 ) { printf ( ""b nije prirodan broj.\nunesite brojeve a i b: "" ) ; scanf ( ""%d%d"" , & a , & b ) ; } } for ( j = 1 ; j <= b ; j ++ ) { prostbroj = daj_prost ( ) ; if ( prostbroj > a && prostbroj < b ) { suma += prostbroj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
2811,99,99,0,295,A2016/Z4/Z4/student8794,A2016/Z4/Z4/student1639,"#include <stdio.h> #include <math.h> void izbaci_rijec ( char * s , char * s2 , int vel ) { char * poc = s2 ; char * kraj = s2 + vel ; while ( ( * poc ++ = * kraj ++ ) ) ; } float s_to_f ( char * niz ) { char * p = niz ; char * d = niz ; float suma = 0 ; int cifra ; int brojcifaraizatacke = 0 ; int predznak = 0 ; int decimalan = 0 ; int i = 0 ; if ( * p == '-' ) { predznak = 1 ; p ++ ; } while ( * d != '\0' ) { if ( * d == '.' ) { decimalan = 1 ; } d ++ ; } if ( decimalan == 1 ) { while ( * p != '\0' ) { if ( * p == '.' ) { char * q = p + 1 ; while ( * q != '\0' ) { brojcifaraizatacke ++ ; q ++ ; } } p ++ ; } p -- ; while ( * p != '.' ) { cifra = * p - '0' ; suma += cifra / ( float ) ( pow ( 10 , brojcifaraizatacke ) ) ; brojcifaraizatacke -- ; p -- ; } p -- ; if ( predznak == 0 ) { do { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } while ( p != niz - 1 ) ; } else { do { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } while ( p != niz ) ; } if ( predznak == 0 ) { return suma ; } return - suma ; } if ( decimalan == 0 ) { while ( * p != '\0' ) { p ++ ; } p -- ; if ( predznak == 0 ) { while ( p != niz - 1 ) { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } } else { while ( p != niz ) { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } } } if ( predznak == 0 ) { return suma ; } return - suma ; } int duzina ( char * s ) { int brojac = 1 ; while ( * s != '\0' && * s != ')' ) { brojac ++ ; s ++ ; } s ++ ; if ( * s == ',' ) { brojac ++ ; } return brojac ; } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * kopija_poc = s ; int x = 1 ; int tacka = 0 ; if ( * s == '\0' ) { return s ; } do { x = 1 ; tacka = 0 ; if ( * s != '(' ) { x = 0 ; break ; } else { s ++ ; } if ( * s == '-' ) { s ++ ; } if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } while ( 1 ) { if ( * s == '.' && tacka == 1 ) { x = 0 ; break ; } else if ( * s == '.' && ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) ) { tacka = 1 ; } else if ( * s == ',' && ( ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) || * ( s - 1 ) == '.' ) ) { break ; } else if ( * s == ',' ) { x = 0 ; break ; } else if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } s ++ ; } if ( x == 0 ) { break ; } x = 1 ; tacka = 0 ; if ( * s != ',' ) { x = 0 ; break ; } else { s ++ ; } if ( * s == '-' ) { s ++ ; } if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } while ( 1 ) { if ( * s == '.' && tacka == 1 ) { x = 0 ; break ; } else if ( * s == '.' && ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) ) { tacka = 1 ; } else if ( * s == ')' && ( ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) || * ( s - 1 ) == '.' ) ) { break ; } else if ( * s == ')' ) { x = 0 ; break ; } else if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } if ( * s == '\0' ) break ; s ++ ; } if ( x == 0 ) { break ; } if ( * s == '\0' ) break ; s ++ ; if ( * s == '\0' || * s == ',' ) { if ( * s == '\0' ) { break ; } else { s ++ ; } } else { return null ; } } while ( 1 ) ; if ( x == 0 ) { return null ; } char * a = kopija_poc ; char r_broj_x [ 100 ] ; char r_broj_y [ 100 ] ; char * b = r_broj_x ; char * c = r_broj_y ; char * poc_tacke ; int duzina_tacke ; int izbaci = 0 ; while ( * a != '\0' ) { if ( * a == '(' ) { izbaci = 0 ; poc_tacke = a ; duzina_tacke = duzina ( poc_tacke ) ; if ( * ( a + duzina_tacke ) == '\0' && a != kopija_poc ) { poc_tacke = a - 1 ; duzina_tacke ++ ; } a ++ ; b = r_broj_x ; while ( * a != ',' && * a != '\0' ) { * b = * a ; a ++ ; b ++ ; } * b = '\0' ; if ( s_to_f ( r_broj_x ) < x1 || s_to_f ( r_broj_x ) > x2 ) { izbaci = 1 ; } a ++ ; c = r_broj_y ; while ( * a != ')' ) { * c = * a ; a ++ ; c ++ ; } * c = '\0' ; if ( s_to_f ( r_broj_y ) < y1 || s_to_f ( r_broj_y ) > y2 ) { izbaci = 1 ; } if ( izbaci ) { izbaci_rijec ( kopija_poc , poc_tacke , duzina_tacke ) ; a = kopija_poc ; a -- ; } } a ++ ; } return kopija_poc ; } int main ( ) { char n [ ] = ""(0,-3),(-15,4),(2,2(,(-1,217)"" ; char * rez = obuhvat ( n , - 3 , - 3 , 3 , 3 ) ; printf ( ""%d "" , ( int ) rez ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> void izbaci_rijec ( char * s , char * s2 , int vel ) { char * poc = s2 ; char * kraj = s2 + vel ; while ( ( * poc ++ = * kraj ++ ) ) ; } float s_to_f ( char * niz ) { char * p = niz ; char * d = niz ; float suma = 0 ; int cifra ; int brojcifaraizatacke = 0 ; int predznak = 0 ; int decimalan = 0 ; int i = 0 ; if ( * p == '-' ) { predznak = 1 ; p ++ ; } while ( * d != '\0' ) { if ( * d == '.' ) { decimalan = 1 ; } d ++ ; } if ( decimalan == 1 ) { while ( * p != '\0' ) { if ( * p == '.' ) { char * q = p + 1 ; while ( * q != '\0' ) { brojcifaraizatacke ++ ; q ++ ; } } p ++ ; } p -- ; while ( * p != '.' ) { cifra = * p - '0' ; suma += cifra / ( float ) ( pow ( 10 , brojcifaraizatacke ) ) ; brojcifaraizatacke -- ; p -- ; } p -- ; if ( predznak == 0 ) { do { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } while ( p != niz - 1 ) ; } else { do { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } while ( p != niz ) ; } if ( predznak == 0 ) { return suma ; } return - suma ; } if ( decimalan == 0 ) { while ( * p != '\0' ) { p ++ ; } p -- ; if ( predznak == 0 ) { while ( p != niz - 1 ) { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } } else { while ( p != niz ) { cifra = * p - '0' ; suma += cifra * pow ( 10 , i ) ; i ++ ; p -- ; } } } if ( predznak == 0 ) { return suma ; } return - suma ; } int duzina ( char * s ) { int brojac = 1 ; while ( * s != '\0' && * s != ')' ) { brojac ++ ; s ++ ; } s ++ ; if ( * s == ',' ) { brojac ++ ; } return brojac ; } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * kopija_poc = s ; int x = 1 ; int tacka = 0 ; if ( * s == '\0' ) { return s ; } do { x = 1 ; tacka = 0 ; if ( * s != '(' ) { x = 0 ; break ; } else { s ++ ; } if ( * s == '-' ) { s ++ ; } if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } while ( 1 ) { if ( * s == '.' && tacka == 1 ) { x = 0 ; break ; } else if ( * s == '.' && ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) ) { tacka = 1 ; } else if ( * s == ',' && ( ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) || * ( s - 1 ) == '.' ) ) { break ; } else if ( * s == ',' ) { x = 0 ; break ; } else if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } s ++ ; } if ( x == 0 ) { break ; } x = 1 ; tacka = 0 ; if ( * s != ',' ) { x = 0 ; break ; } else { s ++ ; } if ( * s == '-' ) { s ++ ; } if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } while ( 1 ) { if ( * s == '.' && tacka == 1 ) { x = 0 ; break ; } else if ( * s == '.' && ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) ) { tacka = 1 ; } else if ( * s == ')' && ( ( * ( s - 1 ) >= '0' && * ( s - 1 ) <= '9' ) || * ( s - 1 ) == '.' ) ) { break ; } else if ( * s == ')' ) { x = 0 ; break ; } else if ( ! ( * s >= '0' && * s <= '9' ) ) { x = 0 ; break ; } if ( * s == '\0' ) break ; s ++ ; } if ( * s == '\0' ) break ; s ++ ; if ( * s == '\0' || * s == ',' ) { if ( * s == '\0' ) { break ; } else { s ++ ; } } else { return null ; } } while ( 1 ) ; if ( x == 0 ) { return null ; } char * a = kopija_poc ; char r_broj_x [ 100 ] ; char r_broj_y [ 100 ] ; char * b = r_broj_x ; char * c = r_broj_y ; char * poc_tacke ; int duzina_tacke ; int izbaci = 0 ; while ( * a != '\0' ) { if ( * a == '(' ) { izbaci = 0 ; poc_tacke = a ; duzina_tacke = duzina ( poc_tacke ) ; if ( * ( a + duzina_tacke ) == '\0' && a != kopija_poc ) { poc_tacke = a - 1 ; duzina_tacke ++ ; } a ++ ; b = r_broj_x ; while ( * a != ',' && * a != '\0' ) { * b = * a ; a ++ ; b ++ ; } * b = '\0' ; if ( s_to_f ( r_broj_x ) < x1 || s_to_f ( r_broj_x ) > x2 ) { izbaci = 1 ; } a ++ ; c = r_broj_y ; while ( * a != ')' ) { * c = * a ; a ++ ; c ++ ; } * c = '\0' ; if ( s_to_f ( r_broj_y ) < y1 || s_to_f ( r_broj_y ) > y2 ) { izbaci = 1 ; } if ( izbaci ) { izbaci_rijec ( kopija_poc , poc_tacke , duzina_tacke ) ; a = kopija_poc ; a -- ; } } a ++ ; } return kopija_poc ; } int main ( ) { return 0 ; }"
2818,85,85,0,46,A2016/Z2/Z3/student9296,A2016/Z2/Z3/student3421,"#include <stdio.h> int main ( ) { int i , j , k , brt = 0 ; char smor [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brt ) ; while ( brt <= 0 || brt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & brt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { smor [ i ] [ j ] = ' ' ; } } for ( k = 0 ; k < brt ; k ++ ) { printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & i , & j ) ; while ( i < 0 || i > 19 || j < 0 || j > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & i , & j ) ; } smor [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , smor [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int broj_tacaka , brojac , n , m ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; while ( broj_tacaka < 1 || broj_tacaka > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & broj_tacaka ) ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { niz [ n ] [ m ] = ' ' ; } } for ( brojac = 0 ; brojac < broj_tacaka ; brojac ++ ) { printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; while ( n < 0 || m < 0 || n > 19 || m > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , brojac + 1 ) ; scanf ( ""%d"" , & n ) ; scanf ( ""%d"" , & m ) ; } niz [ n ] [ m ] = '*' ; } for ( n = 0 ; n < 20 ; n ++ ) { for ( m = 0 ; m < 20 ; m ++ ) { printf ( ""%c"" , niz [ m ] [ n ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2827,99,99,0,169,A2016/Z5/Z1/student4082,A2016/Z5/Z1/student7597,"#include <stdio.h> #include <stdlib.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void swap ( struct student * a , struct student * b ) { struct student temp = * b ; * b = * a ; * a = temp ; } int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } double get_prosjek ( struct student s ) { int i ; double sum = 0.0 ; if ( s . br_ocjena == 0 ) return 5 ; for ( i = 0 ; i < s . br_ocjena ; i ++ ) sum += s . ocjene [ i ] ; return sum / s . br_ocjena ; } int prosjek_cmp ( struct student a , struct student b ) { int i , acnt , bcnt , agcd , bgcd , asum = 0 , bsum = 0 ; acnt = a . br_ocjena ; bcnt = b . br_ocjena ; for ( i = 0 ; i < a . br_ocjena ; i ++ ) { asum += a . ocjene [ i ] ; if ( a . ocjene [ i ] == 5 ) { asum = 5 ; acnt = 1 ; } } for ( i = 0 ; i < b . br_ocjena ; i ++ ) { bsum += b . ocjene [ i ] ; if ( b . ocjene [ i ] == 5 ) { bsum = 5 ; bcnt = 1 ; } } if ( asum == 0 ) { acnt = 1 ; asum = 5 ; } if ( bsum == 0 ) { bcnt = 1 ; bsum = 5 ; } agcd = gcd ( asum , acnt ) ; bgcd = gcd ( bsum , bcnt ) ; asum /= agcd ; bsum /= bgcd ; acnt /= agcd ; bcnt /= bgcd ; if ( asum == bsum && acnt == bcnt ) return 0 ; else return ( asum * bcnt > bsum * acnt ) ? - 1 : 1 ; } int student_cmp ( struct student a , struct student b ) { int cmp ; if ( prosjek_cmp ( a , b ) != 0 ) return prosjek_cmp ( a , b ) ; else { cmp = strcmp ( a . prezime , b . prezime ) ; if ( cmp != 0 ) return cmp ; cmp = strcmp ( a . ime , b . ime ) ; return cmp ; } } void remove_at ( struct student * students , int index , int * n_students ) { int i , j ; for ( i = 0 ; i < * n_students ; i ++ ) { if ( i == index ) { for ( j = i ; j < * n_students - 1 ; j ++ ) swap ( & students [ j ] , & students [ j + 1 ] ) ; ( * n_students ) -- ; return ; } } } int genijalci ( struct student * students , int n , double prosjek ) { int i , gen [ 3 ] , t , j ; char found = 0 ; for ( i = 0 ; i < n ; i ++ ) { double p = get_prosjek ( students [ i ] ) ; if ( p < prosjek ) { remove_at ( students , i , & n ) ; i -- ; } } for ( i = 0 ; i < 3 ; i ++ ) gen [ i ] = - 1 ; for ( t = 0 ; t < 3 ; t ++ ) { for ( i = 0 ; i < n ; i ++ ) { found = 0 ; for ( j = 0 ; j < t ; j ++ ) { if ( gen [ j ] == i ) { found = 1 ; break ; } } if ( found ) continue ; if ( gen [ t ] == - 1 || student_cmp ( students [ gen [ t ] ] , students [ i ] ) > 0 ) gen [ t ] = i ; } } for ( i = 0 ; i < 3 ; i ++ ) if ( gen [ i ] != - 1 ) printf ( ""%s %s\n"" , students [ gen [ i ] ] . prezime , students [ gen [ i ] ] . ime ) ; return n ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; void swap ( struct student * a , struct student * b ) { struct student temp = * b ; * b = * a ; * a = temp ; } int gcd ( int a , int b ) { return b == 0 ? a : gcd ( b , a % b ) ; } double get_prosjek ( struct student s ) { int i ; double sum = 0.0 ; if ( s . br_ocjena == 0 ) return 5 ; for ( i = 0 ; i < s . br_ocjena ; i ++ ) sum += s . ocjene [ i ] ; return sum / s . br_ocjena ; } int prosjek_cmp ( struct student a , struct student b ) { int i , acnt , bcnt , agcd , bgcd , asum = 0 , bsum = 0 ; acnt = a . br_ocjena ; bcnt = b . br_ocjena ; for ( i = 0 ; i < a . br_ocjena ; i ++ ) { asum += a . ocjene [ i ] ; if ( a . ocjene [ i ] == 5 ) { asum = 5 ; acnt = 1 ; } } for ( i = 0 ; i < b . br_ocjena ; i ++ ) { bsum += b . ocjene [ i ] ; if ( b . ocjene [ i ] == 5 ) { bsum = 5 ; bcnt = 1 ; } } if ( asum == 0 ) { acnt = 1 ; asum = 5 ; } if ( bsum == 0 ) { bcnt = 1 ; bsum = 5 ; } agcd = gcd ( asum , acnt ) ; bgcd = gcd ( bsum , bcnt ) ; asum /= agcd ; bsum /= bgcd ; acnt /= agcd ; bcnt /= bgcd ; if ( asum == bsum && acnt == bcnt ) return 0 ; else return ( asum * bcnt > bsum * acnt ) ? - 1 : 1 ; } int student_cmp ( struct student a , struct student b ) { int cmp ; if ( prosjek_cmp ( a , b ) != 0 ) return prosjek_cmp ( a , b ) ; else { cmp = strcmp ( a . prezime , b . prezime ) ; if ( cmp != 0 ) return cmp ; cmp = strcmp ( a . ime , b . ime ) ; return cmp ; } } void remove_at ( struct student * students , int index , int * n_students ) { int i , j ; for ( i = 0 ; i < * n_students ; i ++ ) { if ( i == index ) { for ( j = i ; j < * n_students - 1 ; j ++ ) swap ( & students [ j ] , & students [ j + 1 ] ) ; ( * n_students ) -- ; return ; } } } int genijalci ( struct student * students , int n , double prosjek ) { int i , gen [ 3 ] , t , j ; char found = 0 ; for ( i = 0 ; i < n ; i ++ ) { double p = get_prosjek ( students [ i ] ) ; if ( p < prosjek ) { remove_at ( students , i , & n ) ; i -- ; } } for ( i = 0 ; i < 3 ; i ++ ) gen [ i ] = - 1 ; for ( t = 0 ; t < 3 ; t ++ ) { for ( i = 0 ; i < n ; i ++ ) { found = 0 ; for ( j = 0 ; j < t ; j ++ ) { if ( gen [ j ] == i ) { found = 1 ; break ; } } if ( found ) continue ; if ( gen [ t ] == - 1 || student_cmp ( students [ gen [ t ] ] , students [ i ] ) > 0 ) gen [ t ] = i ; } } for ( i = 0 ; i < 3 ; i ++ ) if ( gen [ i ] != - 1 ) printf ( ""%s %s\n"" , students [ gen [ i ] ] . prezime , students [ gen [ i ] ] . ime ) ; return n ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 6 , 6.5 ) ; return 0 ; }"
2831,76,76,0,58,A2016/Z1/Z3/student9805,A2016/Z1/Z3/student1120,"#include <stdio.h> #include <math.h> int main ( ) { float b = 0 , s = 0 , c = 0 , v = 0 , p = 0 , pb = 0.0 , ps = 0.0 , pc = 0.0 , pv = 0.0 , pp = 0.0 , ubv ; char boja ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & boja ) ; while ( boja == '\n' ) { scanf ( ""%c"" , & boja ) ; } if ( ( boja == 'c' ) || ( boja == 'c' ) ) { c ++ ; continue ; } if ( ( boja == 'b' ) || ( boja == 'b' ) ) { b ++ ; continue ; } if ( ( boja == 's' ) || ( boja == 's' ) ) { s ++ ; continue ; } if ( ( boja == 'v' ) || ( boja == 'v' ) ) { v ++ ; continue ; } if ( ( boja == 'p' ) || ( boja == 'p' ) ) { p ++ ; continue ; } if ( ( boja != 'c' ) && ( boja != 'c' ) && ( boja != 'b' ) && ( boja != 'b' ) && ( boja != 's' ) && ( boja != 's' ) && ( boja != 'v' ) && ( boja != 'v' ) && ( boja != 'p' ) && ( boja != 'p' ) && ( boja != 'k' ) && ( boja != 'k' ) ) { printf ( ""neispravan unos\n"" ) ; continue ; } } while ( boja != 'k' && boja != 'k' ) ; ubv = b + s + c + v + p ; pc = c * 100 / ubv ; pb = b * 100 / ubv ; ps = s * 100 / ubv ; pv = v * 100 / ubv ; pp = p * 100 / ubv ; printf ( ""ukupno evidentirano %g vozila. \n"" , ubv ) ; if ( ubv == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c >= b && c >= s && c >= v && c >= p ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , pc ) ; return 0 ; } if ( b >= c && b >= s && b >= v && b >= p ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pb ) ; return 0 ; } if ( s >= c && s >= b && s >= v && s >= p ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , ps ) ; return 0 ; } if ( v >= c && v >= s && v >= b && v >= p ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pv ) ; return 0 ; } if ( p >= c && p >= s && p >= v && p >= b ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; return 0 ; } return 0 ; }","#include <stdio.h> int main ( ) { float brc = 0 , brb = 0 , brs = 0 , brv = 0 , brp = 0 ; float pc = 0.0 , pb = 0.0 , ps = 0.0 , pv = 0.0 , pp = 0.0 , s = 0 ; char znak ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & znak ) ; if ( ( znak == 'c' ) || ( znak == 'c' ) ) { brc ++ ; continue ; } if ( ( znak == 'b' ) || ( znak == 'b' ) ) { brb ++ ; continue ; } if ( ( znak == 's' ) || ( znak == 's' ) ) { brs ++ ; continue ; } if ( ( znak == 'v' ) || ( znak == 'v' ) ) { brv ++ ; continue ; } if ( ( znak == 'p' ) || ( znak == 'p' ) ) { brp ++ ; continue ; } if ( ( ( znak != 'p' ) && ( znak != 'p' ) ) && ( ( znak != 'v' ) && ( znak != 'v' ) ) && ( ( znak != 's' ) && ( znak != 's' ) ) && ( ( znak != 'b' ) && ( znak != 'b' ) ) && ( ( znak != 'c' ) && ( znak != 'c' ) ) && ( ( znak != 'k' ) && ( znak != 'k' ) ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ( znak != 'k' ) && ( znak != 'k' ) ) ; s = brc + brb + brs + brv + brp ; printf ( ""ukupno evidentirano %g vozila.\n"" , s ) ; if ( s != 0 ) { pc = ( brc * 100 ) / s ; pb = ( brb * 100 ) / s ; ps = ( brs * 100 ) / s ; pv = ( brv * 100 ) / s ; pp = ( brp * 100 ) / s ; } if ( ( brc >= brb ) && ( brc >= brs ) && ( brc >= brv ) && ( brc >= brp ) ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , pc ) ; return 0 ; } if ( ( brb >= brc ) && ( brb >= brs ) && ( brb >= brv ) && ( brb >= brp ) ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pb ) ; return 0 ; } if ( ( brs >= brc ) && ( brs > brb ) && ( brs >= brv ) && ( brs >= brp ) ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , ps ) ; return 0 ; } if ( ( brv >= brc ) && ( brv >= brb ) && ( brv >= brs ) && ( brv >= brp ) ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pv ) ; return 0 ; } if ( ( brp >= brc ) && ( brp >= brb ) && ( brp >= brs ) && ( brp >= brv ) ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; return 0 ; } return 0 ; }"
2832,82,82,0,32,A2016/Z1/Z4/student7341,A2016/Z1/Z4/student5649,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i <= n - 1 ; i ++ ) { for ( j = 0 ; j <= 4 * n ; j ++ ) { if ( i == j || j == 2 * ( n - 1 ) - i || j == 2 * n - 2 + i || j == 4 * ( n - 1 ) - i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n , j , i ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * n - 4 ; j ++ ) { if ( i == j || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }"
2853,4,4,0,11,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student8923,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 #define max 1000 #define min 0 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unosstringa ( char * s , int vel ) { int i = 0 ; char z = getchar ( ) ; if ( z == '\n' ) z = getchar ( ) ; while ( i < vel - 1 && z != '\n' ) { s [ i ] = z ; i ++ ; z = getchar ( ) ; } s [ i ] = '\0' ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { int ucitajdat ; file * datoteka = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( datoteka == null ) return 0 ; ucitajdat = fread ( raspored , sizeof ( raspored ) , kapacitet , datoteka ) ; fclose ( datoteka ) ; return ucitajdat ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { int zapisidat ; file * datoteka = fopen ( ""raspored.dat"" , ""wb"" ) ; if ( datoteka == null ) return 0 ; zapisidat = fwrite ( raspored , sizeof ( raspored ) , broj_casova , datoteka ) ; if ( ferror ( datoteka ) ) { printf ( ""greska prilikom pisanja datoteke.\n"" ) ; } fclose ( datoteka ) ; return 1 ; } void inicijaliziraj ( struct cas * s ) { ( * s ) . pocetak . sati = 0 ; ( * s ) . pocetak . minute = 0 ; ( * s ) . pocetak . sekunde = 0 ; ( * s ) . kraj . sati = 0 ; ( * s ) . kraj . minute = 0 ; ( * s ) . kraj . sekunde = 0 ; ( * s ) . dan_u_sedmici = 1 ; } void copyfunk ( char * s1 , const char * s2 ) { int x = 0 ; for ( ; ; ) { s1 [ x ] = s2 [ x ] ; if ( s2 [ x ] == '\0' ) break ; x ++ ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( cas . dan_u_sedmici != raspored [ i ] . dan_u_sedmici ) return 0 ; if ( cas . pocetak . sati == raspored [ i ] . kraj . sati ) { if ( raspored [ i ] . pocetak . sati == cas . kraj . sati ) { if ( cas . pocetak . minute < raspored [ i ] . kraj . minute && raspored [ i ] . pocetak . minute < cas . kraj . minute ) { return 1 ; } } else if ( raspored [ i ] . pocetak . sati < cas . kraj . sati && cas . pocetak . minute < raspored [ i ] . kraj . minute ) { return 1 ; } } else if ( raspored [ i ] . pocetak . sati == cas . kraj . sati ) { if ( cas . pocetak . sati < raspored [ i ] . kraj . sati && raspored [ i ] . pocetak . minute < cas . kraj . minute ) { return 1 ; } } else if ( cas . pocetak . sati < raspored [ i ] . kraj . sati && raspored [ i ] . pocetak . sati < cas . kraj . sati ) { return 1 ; } } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { struct cas s ; int i ; int tmp = 1 ; inicijaliziraj ( & s ) ; if ( trajanje > 10 ) return 0 ; broj_casova ++ ; copyfunk ( s . predmet , predmet ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( s . kraj . sati > 19 && tmp > 6 ) return 0 ; s . pocetak . sati = 9 ; s . kraj . sati = 9 + trajanje ; s . dan_u_sedmici = tmp ; if ( ! preklapanje ( raspored , broj_casova , s ) ) break ; else { for ( ; ; ) { s . pocetak . sati ++ ; s . kraj . sati ++ ; if ( s . kraj . sati > 19 && tmp > 6 ) return 0 ; if ( ! preklapanje ( raspored , broj_casova , s ) ) break ; } } if ( s . kraj . sati > 19 ) { tmp ++ ; i = 0 ; } } s . dan_u_sedmici = tmp ; raspored [ broj_casova - 1 ] = s ; return 1 ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i , br = 0 , test = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { if ( test == 0 ) { printf ( ""\n"" ) ; printf ( ""uneseni su casovi:"" ) ; } test = 1 ; br ++ ; printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , br , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; } } } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , tmp = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { tmp ++ ; if ( tmp == redni_broj ) { copyfunk ( raspored [ i ] . predmet , promjena . predmet ) ; raspored [ i ] . dan_u_sedmici = promjena . dan_u_sedmici ; raspored [ i ] . pocetak = promjena . pocetak ; raspored [ i ] . kraj = promjena . kraj ; } } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j , tmp = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { tmp ++ ; if ( tmp == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { copyfunk ( raspored [ i ] . predmet , raspored [ j + 1 ] . predmet ) ; raspored [ i ] . dan_u_sedmici = raspored [ j + 1 ] . dan_u_sedmici ; raspored [ i ] . pocetak = raspored [ j + 1 ] . pocetak ; raspored [ i ] . kraj = raspored [ j + 1 ] . kraj ; } broj_casova -- ; i -- ; } } } } int main ( ) { struct cas raspored [ kapacitet ] ; int broj_casova = 0 , izbor = 1 , tmp ; char string [ max ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & izbor ) ; switch ( izbor ) { case 2 : printf ( ""unesite naziv predmeta: "" ) ; unosstringa ( string , max ) ; string [ 9 ] = '\0' ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & tmp ) ; break ; case 0 : break ; } } while ( izbor != 0 ) ; zapisi_datoteku ( raspored , broj_casova ) ; return 0 ; }"
2860,97,97,0,48,A2016/Z1/Z4/student7496,A2016/Z1/Z4/student3331,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
2869,90,90,0,60,A2016/Z3/Z3/student9931,A2016/Z3/Z3/student3717,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , p , z , l , w ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { w = 1 ; for ( p = 0 ; p < n ; p ++ ) { if ( mat [ i ] [ p ] != mat [ j ] [ p ] ) { w = 0 ; break ; } } if ( w ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( l = 0 ; l < n ; l ++ ) { mat [ z ] [ l ] = mat [ z + 1 ] [ l ] ; } } j -- ; m -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { w = 1 ; for ( p = 0 ; p < m ; p ++ ) { if ( mat [ p ] [ j ] != mat [ p ] [ i ] ) { w = 0 ; break ; } } if ( w ) { for ( z = i ; z < n - 1 ; z ++ ) { for ( l = 0 ; l < m ; l ++ ) { mat [ l ] [ z ] = mat [ l ] [ z + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , x , kolona , red ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 0 || m >= 200 || n < 0 || n >= 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 0 || m >= 200 || n < 0 || n >= 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( j = 0 ; j < n - 1 ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { kolona = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) { kolona = 0 ; break ; } } if ( kolona == 1 ) { for ( x = k ; x < n - 1 ; x ++ ) { for ( i = 0 ; i < m ; i ++ ) { mat [ i ] [ x ] = mat [ i ] [ x + 1 ] ; } } n -- ; k -- ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { red = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { red = 0 ; break ; } } if ( red == 1 ) { for ( x = k ; x < m - 1 ; x ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ x ] [ j ] = mat [ x + 1 ] [ j ] ; } } m -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2870,99,99,0,199,A2016/Z1/Z1/student7496,A2016/Z1/Z1/student3331,"#include <stdio.h> #include <stdlib.h> int main ( ) { float a , b , c , x1 , x2 , x3 , x4 , x5 , y1 , y2 , y3 , y4 , y5 , z1 , z2 , z3 , z4 , z5 ; int x , y , z ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & y1 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & y2 ) ; if ( y2 < 0 || y2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & y3 ) ; if ( y3 < 0 || y3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & y4 ) ; if ( y4 < 0 || y4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & y5 ) ; if ( y5 < 0 || y5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & z1 ) ; if ( z1 < 0 || z1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & z2 ) ; if ( z2 < 0 || z2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & z4 ) ; if ( z4 < 0 || z4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & z5 ) ; if ( z5 < 0 || z5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; a = x1 + x2 + x3 + x4 + x5 ; b = y1 + y2 + y3 + y4 + y5 ; c = z1 + z2 + z3 + z4 + z5 ; x = a ; y = b ; z = c ; if ( x < 55 ) { x = 5 ; } if ( x >= 55 && x < 65 ) { x = 6 ; } if ( x >= 65 && x < 75 ) { x = 7 ; } if ( x >= 75 && x < 85 ) { x = 8 ; } if ( x >= 85 && x < 92 ) { x = 9 ; } if ( x >= 92 && x < 100 ) { x = 10 ; } if ( y < 55 ) { y = 5 ; } if ( y >= 55 && y < 65 ) { y = 6 ; } if ( y >= 65 && y < 75 ) { y = 7 ; } if ( y >= 75 && y < 85 ) { y = 8 ; } if ( y >= 85 && y < 92 ) { y = 9 ; } if ( y >= 92 && y < 100 ) { y = 10 ; } if ( z < 55 ) { z = 5 ; } if ( z >= 55 && z < 65 ) { z = 6 ; } if ( z >= 65 && z < 75 ) { z = 7 ; } if ( z >= 75 && z < 85 ) { z = 8 ; } if ( z >= 85 && z < 92 ) { z = 9 ; } if ( z >= 92 && z < 100 ) { z = 10 ; } if ( x > 5 && y > 5 && z > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; return 0 ; } if ( x <= 5 && y <= 5 && z <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y <= 5 && z <= 5 ) || ( x <= 5 && y > 5 && z <= 5 ) || ( x <= 5 && y <= 5 && z > 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y > 5 && z <= 5 ) || ( x <= 5 && y > 5 && z > 5 ) || ( x > 5 && y <= 5 && z > 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( x == y && y == z ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } if ( x != y && y != z ) { printf ( ""sva tri studenta imaju razlicitu ocjenu.\n"" ) ; return 0 ; } if ( ( x == y && y != z ) || ( x != y && y == z ) || ( x == y && y != z ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { float a , b , c , x1 , x2 , x3 , x4 , x5 , y1 , y2 , y3 , y4 , y5 , z1 , z2 , z3 , z4 , z5 ; int x , y , z ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & y1 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & y2 ) ; if ( y2 < 0 || y2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & y3 ) ; if ( y3 < 0 || y3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & y4 ) ; if ( y4 < 0 || y4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & y5 ) ; if ( y5 < 0 || y5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & z1 ) ; if ( z1 < 0 || z1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & z2 ) ; if ( z2 < 0 || z2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & z4 ) ; if ( z4 < 0 || z4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & z5 ) ; if ( z5 < 0 || z5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } system ( ""clear"" ) ; a = x1 + x2 + x3 + x4 + x5 ; b = y1 + y2 + y3 + y4 + y5 ; c = z1 + z2 + z3 + z4 + z5 ; x = a ; y = b ; z = c ; if ( x < 55 ) { x = 5 ; } if ( x >= 55 && x < 65 ) { x = 6 ; } if ( x >= 65 && x < 75 ) { x = 7 ; } if ( x >= 75 && x < 85 ) { x = 8 ; } if ( x >= 85 && x < 92 ) { x = 9 ; } if ( x >= 92 && x < 100 ) { x = 10 ; } if ( y < 55 ) { y = 5 ; } if ( y >= 55 && y < 65 ) { y = 6 ; } if ( y >= 65 && y < 75 ) { y = 7 ; } if ( y >= 75 && y < 85 ) { y = 8 ; } if ( y >= 85 && y < 92 ) { y = 9 ; } if ( y >= 92 && y < 100 ) { y = 10 ; } if ( z < 55 ) { z = 5 ; } if ( z >= 55 && z < 65 ) { z = 6 ; } if ( z >= 65 && z < 75 ) { z = 7 ; } if ( z >= 75 && z < 85 ) { z = 8 ; } if ( z >= 85 && z < 92 ) { z = 9 ; } if ( z >= 92 && z < 100 ) { z = 10 ; } if ( x > 5 && y > 5 && z > 5 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; return 0 ; } if ( x <= 5 && y <= 5 && z <= 5 ) { printf ( ""nijedan student nije polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y <= 5 && z <= 5 ) || ( x <= 5 && y > 5 && z <= 5 ) || ( x <= 5 && y <= 5 && z > 5 ) ) { printf ( ""jedan student je polozio.\n"" ) ; return 0 ; } if ( ( x > 5 && y > 5 && z <= 5 ) || ( x <= 5 && y > 5 && z > 5 ) || ( x > 5 && y <= 5 && z > 5 ) ) { printf ( ""dva studenta su polozila.\n"" ) ; return 0 ; } if ( x == y && y == z ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } if ( x != y && y != z ) { printf ( ""sva tri studenta imaju razlicitu ocjenu.\n"" ) ; return 0 ; } if ( ( x == y && y != z ) || ( x != y && y == z ) || ( x == y && y != z ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; return 0 ; } return 0 ; }"
2872,99,99,0,129,A2016/Z4/Z1/student4473,A2016/Z4/Z1/student1453,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * rijec1 , char * rijec2 , int vel1 , int vel2 ) { int i ; char * p1 = rijec1 , * p2 = rijec2 ; if ( vel1 != vel2 ) return 0 ; else { for ( i = 0 ; i < vel1 - 1 ; i ++ ) { if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' && * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p1 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pok [ 500 ] ; int i = 0 , j = 0 , brojac_slova [ 500 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 500 ] = { 0 } ; p = s ; pok [ j ] = p ; if ( * p == '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , pok [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pok [ max ] , pok [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * ( p + brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pok [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac_slova [ i ] ; } } } p = pok [ max ] ; while ( * p != '\0' ) { * p = * ( p + brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""1pst1 pst2 3pst pstpst pst"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * rijec1 , char * rijec2 , int vel1 , int vel2 ) { int i ; char * p1 = rijec1 , * p2 = rijec2 ; if ( vel1 != vel2 ) return 0 ; else { for ( i = 0 ; i < vel1 - 1 ; i ++ ) { if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' && * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p1 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pok [ 500 ] ; int i = 0 , j = 0 , brojac_slova [ 500 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 500 ] = { 0 } ; p = s ; pok [ j ] = p ; if ( * p == '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , pok [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pok [ max ] , pok [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * ( p + brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pok [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac_slova [ i ] ; } } } p = pok [ max ] ; while ( * p != '\0' ) { * p = * ( p + brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""1pst1 pst2 3pst pstpst pst"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }"
2875,99,99,0,54,A2016/Z2/Z2/student3301,A2016/Z2/Z2/student1976,"#include <stdio.h> #include <stdlib.h> #include<math.h> #define pi 3.1415926 int main ( ) { int i , j , n ; float niz [ 500 ] ; double ste [ 500 ] , min [ 500 ] , sek [ 500 ] , uk [ 500 ] , step [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 500 ) { return 0 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { uk [ i ] = ( niz [ i ] * 1296000 ) / ( 2. * pi ) ; ste [ i ] = uk [ i ] / ( 60 * 60 ) ; step [ i ] = ( int ) ( ste [ i ] ) ; min [ i ] = ( int ) ( ( ste [ i ] - step [ i ] ) * 60 ) ; sek [ i ] = ( ste [ i ] - step [ i ] - min [ i ] / 60 ) * 3600 ; if ( ste [ i ] > 0 ) { if ( sek [ i ] >= 59.5 ) { min [ i ] = min [ i ] + 1 ; sek [ i ] = 0 ; } if ( min [ i ] > 59 ) { step [ i ] = step [ i ] + 1 ; min [ i ] = 0 ; } } else if ( ste [ i ] <= 0 ) { if ( sek [ i ] < - 59.5 ) { min [ i ] = min [ i ] - 1 ; sek [ i ] = 0 ; } if ( min [ i ] < - 59 ) { step [ i ] = step [ i ] - 1 ; min [ i ] = 0 ; } if ( min [ i ] < 0 && sek [ i ] < 0 ) { min [ i ] = min [ i ] / ( - 1 ) ; sek [ i ] = sek [ i ] / ( - 1 ) ; } else if ( step [ i ] < 1 && step [ i ] > - 1 && min [ i ] < 0 && sek [ i ] < 0 ) { min [ i ] = min [ i ] / ( - 1 ) ; } else if ( step [ i ] < 0 && min [ i ] < 1 && min [ i ] > - 1 && sek [ i ] < 0 ) { sek [ i ] = sek [ i ] / ( - 1 ) ; } } } for ( i = 0 ; i < n ; i ++ ) { } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30.5 || sek [ i ] < - 30.5 ) { for ( j = i ; j < n - 1 ; j ++ ) { sek [ j ] = sek [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; step [ j ] = step [ j + 1 ] ; } n -- ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , step [ i ] , min [ i ] , sek [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include<math.h> #define pi 3.1415926 int main ( ) { int i , j , n ; float niz [ 500 ] ; double ste [ 500 ] , min [ 500 ] , sek [ 500 ] , uk [ 500 ] , step [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 500 ) { return 0 ; } for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { uk [ i ] = ( niz [ i ] * 1296000 ) / ( 2. * pi ) ; ste [ i ] = uk [ i ] / ( 60 * 60 ) ; step [ i ] = ( int ) ( ste [ i ] ) ; min [ i ] = ( int ) ( ( ste [ i ] - step [ i ] ) * 60 ) ; sek [ i ] = ( ste [ i ] - step [ i ] - min [ i ] / 60 ) * 3600 ; if ( ste [ i ] > 0 ) { if ( sek [ i ] >= 59.5 ) { min [ i ] = min [ i ] + 1 ; sek [ i ] = 0 ; } if ( min [ i ] > 59 ) { step [ i ] = step [ i ] + 1 ; min [ i ] = 0 ; } } else if ( ste [ i ] <= 0 ) { if ( sek [ i ] < - 59.5 ) { min [ i ] = min [ i ] - 1 ; sek [ i ] = 0 ; } if ( min [ i ] < - 59 ) { step [ i ] = step [ i ] - 1 ; min [ i ] = 0 ; } if ( min [ i ] < 0 && sek [ i ] < 0 ) { min [ i ] = min [ i ] / ( - 1 ) ; sek [ i ] = sek [ i ] / ( - 1 ) ; } else if ( step [ i ] < 1 && step [ i ] > - 1 && min [ i ] < 0 && sek [ i ] < 0 ) { min [ i ] = min [ i ] / ( - 1 ) ; } else if ( step [ i ] < 0 && min [ i ] < 1 && min [ i ] > - 1 && sek [ i ] < 0 ) { sek [ i ] = sek [ i ] / ( - 1 ) ; } } } for ( i = 0 ; i < n ; i ++ ) { } for ( i = 0 ; i < n ; i ++ ) { if ( sek [ i ] > 30.5 || sek [ i ] < - 30.5 ) { for ( j = i ; j < n - 1 ; j ++ ) { sek [ j ] = sek [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; step [ j ] = step [ j + 1 ] ; } n -- ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , step [ i ] , min [ i ] , sek [ i ] ) ; } return 0 ; }"
2880,97,97,0,24,A2016/Z1/Z4/student8004,A2016/Z1/Z4/student5468,"#include <stdio.h> int main ( ) { int i , j , n ; greska : printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( ( n < 1 ) || n > 50 ) { printf ( ""pogresan unos"" ) ; goto greska ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 4 * n - 3 ) ; j ++ ) { if ( ( i == j ) || ( i + j == 2 * n ) ) printf ( ""*"" ) ; else if ( i + j == 2 * n + 2 * ( i - 1 ) ) printf ( ""*"" ) ; else if ( i + j == 4 * n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n ; greska : printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( ( n < 1 ) || n > 50 ) { printf ( ""pogresan unos"" ) ; goto greska ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 4 * n - 3 ) ; j ++ ) { if ( ( i == j ) || ( i + j == 2 * n ) ) printf ( ""*"" ) ; else if ( i + j == 2 * n + 2 * ( i - 1 ) ) printf ( ""*"" ) ; else if ( i + j == 4 * n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2890,97,97,0,51,A2016/Z3/Z1/student9315,A2016/Z3/Z1/student4766,"#include <stdio.h> unsigned long daj_prost ( ) { static unsigned long start = 1 ; unsigned long i ; int prost ; do { prost = 1 ; start ++ ; for ( i = 2 ; i < start ; i ++ ) { if ( start % i == 0 ) { prost = 0 ; break ; } } } while ( prost == 0 ) ; return start ; } int main ( ) { long a , b ; int isprunos ; unsigned long suma = 0 , temp ; int sabiraj = 1 ; do { isprunos = 1 ; printf ( ""unesite brojeve a i b: "" ) ; if ( scanf ( ""%ld %ld"" , & a , & b ) != 2 ) isprunos = 0 ; if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; isprunos = 0 ; } else if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; isprunos = 0 ; } } while ( isprunos == 0 ) ; while ( sabiraj ) { temp = daj_prost ( ) ; if ( temp >= b ) break ; if ( temp > a ) suma += temp ; } printf ( ""suma prostih brojeva izmedju %ld i %ld je %lu."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> unsigned long daj_prost ( ) { static unsigned long start = 1 ; unsigned long i ; int prost ; do { prost = 1 ; start ++ ; for ( i = 2 ; i < start ; i ++ ) { if ( start % i == 0 ) { prost = 0 ; break ; } } } while ( prost == 0 ) ; return start ; } int main ( ) { long a , b ; int isprunos ; unsigned long suma = 0 , temp ; int sabiraj = 1 ; do { isprunos = 1 ; printf ( ""unesite brojeve a i b: "" ) ; if ( scanf ( ""%ld %ld"" , & a , & b ) != 2 ) isprunos = 0 ; if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; isprunos = 0 ; } else if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; isprunos = 0 ; } } while ( isprunos == 0 ) ; while ( sabiraj ) { temp = daj_prost ( ) ; if ( temp >= b ) break ; if ( temp > a ) suma += temp ; } printf ( ""suma prostih brojeva izmedju %ld i %ld je %lu."" , a , b , suma ) ; return 0 ; }"
2893,91,91,0,63,A2016/Z3/Z3/student1581,A2016/Z3/Z3/student5961,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , l , r , p ; printf ( ""unesite brojeve m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; printf ( ""unesite brojeve m i n: "" ) ; continue ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { p = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { p = 0 ; break ; } } if ( p == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( r = 0 ; r < n ; r ++ ) { mat [ l ] [ r ] = mat [ l + 1 ] [ r ] ; } } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { p = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { p = 0 ; break ; } } if ( p == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( r = 0 ; r < m ; r ++ ) { mat [ r ] [ l ] = mat [ r ] [ l + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , matrica [ 200 ] [ 200 ] , i , j , k , e , f , jeste , m , n ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } m = m ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { jeste = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = j ; e < m - 1 ; e ++ ) { for ( f = 0 ; f < n ; f ++ ) { matrica [ e ] [ f ] = matrica [ e + 1 ] [ f ] ; } } j -- ; m -- ; } } } n = n ; for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { jeste = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ j ] != matrica [ k ] [ i ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = i ; e < n - 1 ; e ++ ) { for ( f = 0 ; f < m ; f ++ ) { matrica [ f ] [ e ] = matrica [ f ] [ e + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2911,99,99,0,24,A2016/Z1/Z4/student8580,A2016/Z1/Z4/student2526,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos \n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2915,96,96,0,15,A2016/Z1/Z4/student4903,A2016/Z1/Z4/student5713,"#include<stdio.h> int n , i , j ; int main ( ) { do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; continue ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= 4 * n - 3 ; j ++ ) { if ( i == j || i + j == 2 * n || i + j == 4 * n - 2 || j - i == 2 * n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include<stdio.h> int n , i , j ; int main ( ) { do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; continue ; } } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= 4 * n - 3 ; j ++ ) { if ( i == j || i + j == 2 * n || i + j == 4 * n - 2 || j - i == 2 * n - 2 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2916,96,96,0,84,A2016/Z5/Z1/student7485,A2016/Z5/Z1/student8004,"#include <stdio.h> #include <string.h> #define epsilon 0.0001 void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) ; znak = getchar ( ) ; while ( i < vel - 1 && znak != '\0' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int genijalci ( struct student * studenti , int vel , float prosjek ) { int i , j , zbir_ocjena = 0 , logicka_varijabla , studentski_broj [ 3 ] = { 0 } ; float prosjek_trenutnog_studenta = 5.0 , najbolji [ 3 ] = { 0 } ; for ( i = 0 ; i < vel ; i ++ ) { zbir_ocjena = 0 ; logicka_varijabla = 1 ; if ( studenti [ i ] . br_ocjena == 0 ) { prosjek_trenutnog_studenta = 5.0 ; logicka_varijabla = 0 ; } for ( j = 0 ; j < studenti [ i ] . br_ocjena ; j ++ ) { if ( studenti [ i ] . ocjene [ j ] == 5 ) { logicka_varijabla = 0 ; prosjek_trenutnog_studenta = 5.0 ; break ; } else zbir_ocjena += studenti [ i ] . ocjene [ j ] ; } if ( logicka_varijabla ) prosjek_trenutnog_studenta = ( float ) zbir_ocjena / studenti [ i ] . br_ocjena ; if ( prosjek_trenutnog_studenta < prosjek ) { j = i ; while ( j < vel - 1 ) { studenti [ j ] = studenti [ j + 1 ] ; j ++ ; } vel -- ; i -- ; continue ; } if ( prosjek_trenutnog_studenta > najbolji [ 0 ] || ( ( prosjek_trenutnog_studenta == najbolji [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ studentski_broj [ 0 ] ] . prezime ) < 0 ) || ( prosjek_trenutnog_studenta == najbolji [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ studentski_broj [ 0 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ studentski_broj [ 0 ] ] . ime ) < 0 ) ) ) { najbolji [ 2 ] = najbolji [ 1 ] ; najbolji [ 1 ] = najbolji [ 0 ] ; najbolji [ 0 ] = prosjek_trenutnog_studenta ; studentski_broj [ 2 ] = studentski_broj [ 1 ] ; studentski_broj [ 1 ] = studentski_broj [ 0 ] ; studentski_broj [ 0 ] = i ; } else if ( prosjek_trenutnog_studenta > najbolji [ 1 ] || ( ( prosjek_trenutnog_studenta == najbolji [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ studentski_broj [ 1 ] ] . prezime ) < 0 ) || ( prosjek_trenutnog_studenta == najbolji [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ studentski_broj [ 1 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ studentski_broj [ 1 ] ] . ime ) < 0 ) ) ) { najbolji [ 2 ] = najbolji [ 1 ] ; najbolji [ 1 ] = prosjek_trenutnog_studenta ; studentski_broj [ 2 ] = studentski_broj [ 1 ] ; studentski_broj [ 1 ] = i ; } else if ( prosjek_trenutnog_studenta > najbolji [ 2 ] || ( ( prosjek_trenutnog_studenta == najbolji [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ studentski_broj [ 2 ] ] . prezime ) < 0 ) || ( prosjek_trenutnog_studenta == najbolji [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ studentski_broj [ 2 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ studentski_broj [ 2 ] ] . ime ) < 0 ) ) ) { najbolji [ 2 ] = prosjek_trenutnog_studenta ; studentski_broj [ 2 ] = i ; } } if ( najbolji [ 0 ] != 0 ) printf ( ""%s %s\n"" , studenti [ studentski_broj [ 0 ] ] . prezime , studenti [ studentski_broj [ 0 ] ] . ime ) ; if ( najbolji [ 1 ] != 0 ) printf ( ""%s %s\n"" , studenti [ studentski_broj [ 1 ] ] . prezime , studenti [ studentski_broj [ 1 ] ] . ime ) ; if ( najbolji [ 2 ] != 0 ) printf ( ""%s %s\n"" , studenti [ studentski_broj [ 2 ] ] . prezime , studenti [ studentski_broj [ 2 ] ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ 100 ] ; int i = 0 , prekid ; do { printf ( ""unesite ime i prezime studenta %d: "" , i + 1 ) ; unesi ( studenti [ i ] . ime , 20 ) ; unesi ( studenti [ i ] . prezime , 20 ) ; i ++ ; printf ( ""ako ste zavrsili sa unosom studenata pritisnite 0, ako ne onda 1."" ) ; scanf ( ""%d"" , & prekid ) ; } while ( i < 100 && prekid ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define epsilon 0.00001 void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\0' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int genijalci ( struct student * studenti , int vel , float prosjek ) { int i , j , suma_ocjena = 0 , logicki_prosjek , broj_studenta [ 3 ] = { 0 } ; float pojedinacni_prosjek = 5.0 , max [ 3 ] = { 0 } ; for ( i = 0 ; i < vel ; i ++ ) { suma_ocjena = 0 ; logicki_prosjek = 1 ; if ( studenti [ i ] . br_ocjena == 0 ) { pojedinacni_prosjek = 5.0 ; logicki_prosjek = 0 ; } for ( j = 0 ; j < studenti [ i ] . br_ocjena ; j ++ ) { if ( studenti [ i ] . ocjene [ j ] == 5 ) { logicki_prosjek = 0 ; pojedinacni_prosjek = 5.0 ; break ; } else suma_ocjena += studenti [ i ] . ocjene [ j ] ; } if ( logicki_prosjek ) pojedinacni_prosjek = ( float ) suma_ocjena / studenti [ i ] . br_ocjena ; if ( pojedinacni_prosjek < prosjek ) { for ( j = i ; j < vel - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } vel -- ; i -- ; continue ; } if ( pojedinacni_prosjek > max [ 0 ] || ( pojedinacni_prosjek == max [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 0 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 0 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 0 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 0 ] ] . ime ) < 0 ) ) { max [ 2 ] = max [ 1 ] ; max [ 1 ] = max [ 0 ] ; max [ 0 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = broj_studenta [ 1 ] ; broj_studenta [ 1 ] = broj_studenta [ 0 ] ; broj_studenta [ 0 ] = i ; } else if ( pojedinacni_prosjek > max [ 1 ] || ( pojedinacni_prosjek == max [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 1 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 1 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 1 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 1 ] ] . ime ) < 0 ) ) { max [ 2 ] = max [ 1 ] ; max [ 1 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = broj_studenta [ 1 ] ; broj_studenta [ 1 ] = i ; } else if ( pojedinacni_prosjek > max [ 2 ] || ( pojedinacni_prosjek == max [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 2 ] ] . prezime ) < 0 ) || ( pojedinacni_prosjek == max [ 2 ] && strcmp ( studenti [ i ] . prezime , studenti [ broj_studenta [ 2 ] ] . prezime ) == 0 && strcmp ( studenti [ i ] . ime , studenti [ broj_studenta [ 2 ] ] . ime ) < 0 ) ) { max [ 2 ] = pojedinacni_prosjek ; broj_studenta [ 2 ] = i ; } } if ( max [ 0 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 0 ] ] . prezime , studenti [ broj_studenta [ 0 ] ] . ime ) ; if ( max [ 1 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 1 ] ] . prezime , studenti [ broj_studenta [ 1 ] ] . ime ) ; if ( max [ 2 ] != 0 ) printf ( ""%s %s\n"" , studenti [ broj_studenta [ 2 ] ] . prezime , studenti [ broj_studenta [ 2 ] ] . ime ) ; return vel ; } int main ( ) { struct student studenti [ 100 ] ; int i = 0 , prekid ; do { printf ( ""unesite ime i prezime studenta %d: "" , i + 1 ) ; unesi ( studenti [ i ] . ime , 20 ) ; unesi ( studenti [ i ] . prezime , 20 ) ; i ++ ; printf ( ""ako ste zavrsili sa unosom studenata pritisnite 0, ako ne onda 1."" ) ; scanf ( ""%d"" , & prekid ) ; } while ( i < 100 && prekid ) ; return 0 ; }"
2919,85,85,0,49,A2016/Z2/Z3/student4824,A2016/Z2/Z3/student8598,"#include <stdio.h> #include <stdlib.h> int main ( ) { int z , niz [ 20 ] [ 20 ] , niza [ 20 ] [ 20 ] , i , j , k , p , q , r , s ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & z ) ; while ( ( z <= 0 ) || ( z > 10 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & z ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = 0 ; niza [ i ] [ j ] = 1 ; } } for ( k = 1 ; k <= z ; k ++ ) { printf ( ""unesite %d. tacku: "" , k ) ; scanf ( ""%d %d"" , & p , & r ) ; while ( ( ( p > 19 ) && ( r > 19 ) ) || ( ( p < 0 ) && ( r < 0 ) ) || ( ( p > 19 ) && ( r < 1 ) ) || ( ( p < 1 ) && ( r > 19 ) ) || ( ( p < 0 ) && ( r < 20 ) ) || ( ( p < 20 ) && ( r < 0 ) ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , k ) ; scanf ( ""%d %d"" , & p , & r ) ; } niz [ r ] [ p ] = 1 ; } for ( q = 0 ; q <= 19 ; q ++ ) { for ( s = 0 ; s <= 19 ; s ++ ) { if ( niz [ q ] [ s ] == niza [ q ] [ s ] ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m , a , b , s , z , niz1 [ 20 ] [ 20 ] , t , k ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n > 10 || n <= 0 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } int niz [ 20 ] [ 20 ] ; for ( t = 0 ; t <= 19 ; t ++ ) { for ( k = 0 ; k <= 19 ; k ++ ) { niz [ t ] [ k ] = 0 ; niz1 [ t ] [ k ] = 1 ; } } for ( m = 1 ; m <= n ; m ++ ) { printf ( ""unesite %d. tacku: "" , m ) ; scanf ( ""%d %d"" , & a , & b ) ; while ( ( a < 0 && b < 0 ) || ( a > 19 && b > 19 ) || ( a <= 0 && b > 19 ) || ( a > 19 && b <= 0 ) || ( a < 20 && b < 0 ) || ( a < 0 && b < 20 ) ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite %d. tacku: "" , m ) ; scanf ( ""%d %d"" , & a , & b ) ; } niz [ b ] [ a ] = 1 ; } for ( s = 0 ; s <= 19 ; s ++ ) { for ( z = 0 ; z <= 19 ; z ++ ) { if ( niz [ s ] [ z ] == niz1 [ s ] [ z ] ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
2922,99,99,0,91,A2016/Z4/Z3/student3301,A2016/Z4/Z3/student2526,"#include <stdio.h> #include <stdlib.h> int znak ( char * slovo ) { if ( ( * slovo >= 'a' && * slovo <= 'z' ) || ( * slovo >= 'a' && * slovo <= 'z' ) || * slovo == '-' || * slovo == '.' ) return 0 ; else return 1 ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p1 = tekst , * poc = tekst ; int duzina = 0 , duzina1 = 0 , duzina2 = 0 , i , l , m , j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { j = 0 ; duzina1 = 0 ; duzina2 = 0 ; while ( rijeci [ i ] [ j ] != '\0' ) { duzina1 ++ ; j ++ ; } m = 0 ; while ( zamjene [ i ] [ m ] != '\0' ) { duzina2 ++ ; m ++ ; } duzina = duzina2 - duzina1 ; p1 = tekst ; while ( * p1 != '\0' ) { char * p2 = p1 ; char * p = rijeci [ i ] ; while ( * p2 == * p ) { if ( * p == '\0' ) break ; p2 ++ ; p ++ ; } int provjera2 = znak ( p2 ) ; if ( * p == '\0' && ( p1 == poc || * ( p1 - 1 ) == ' ' ) && ( * p2 == '\0' || * p2 == ' ' || provjera2 ) ) { if ( duzina == 0 ) { for ( l = 0 ; l < duzina1 ; l ++ ) { * p1 ++ = zamjene [ i ] [ l ] ; } } else if ( duzina1 < duzina2 ) { char * kraj = p1 ; while ( * kraj != '\0' ) kraj ++ ; while ( kraj > p1 ) { * ( kraj + duzina ) = * kraj ; kraj -- ; } for ( l = 0 ; l < duzina2 ; l ++ ) { * p1 ++ = zamjene [ i ] [ l ] ; } } else if ( duzina1 > duzina2 ) { char * pocetak = p1 ; while ( * pocetak != '\0' ) { * pocetak = * ( pocetak - duzina ) ; if ( * pocetak == '\0' ) break ; pocetak ++ ; } for ( l = 0 ; l < duzina2 ; l ++ ) { * p1 ++ = zamjene [ i ] [ l ] ; } } p1 -- ; } p1 ++ ; } } return poc ; } int main ( ) { char * rijeci [ 2 ] = { ""test"" , ""testiranje"" } ; char * zamjene [ 2 ] = { ""swap"" , ""zamjena"" } ; char tekst [ ] = ""test testiranje test"" ; printf ( ""'%s'"" , zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int znak ( char * slovo ) { if ( ( * slovo >= 'a' && * slovo <= 'z' ) || ( * slovo >= 'a' && * slovo <= 'z' ) || * slovo == '-' || * slovo == '.' ) return 0 ; else return 1 ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p1 = tekst , * poc = tekst ; int duzina = 0 , duzina1 = 0 , duzina2 = 0 , i , l , m , j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { j = 0 ; duzina1 = 0 ; duzina2 = 0 ; while ( rijeci [ i ] [ j ] != '\0' ) { duzina1 ++ ; j ++ ; } m = 0 ; while ( zamjene [ i ] [ m ] != '\0' ) { duzina2 ++ ; m ++ ; } duzina = duzina2 - duzina1 ; p1 = tekst ; while ( * p1 != '\0' ) { char * p2 = p1 ; char * p = rijeci [ i ] ; while ( * p2 == * p ) { if ( * p == '\0' ) break ; p2 ++ ; p ++ ; } int provjera2 = znak ( p2 ) ; if ( * p == '\0' && ( p1 == poc || * ( p1 - 1 ) == ' ' ) && ( * p2 == '\0' || * p2 == ' ' || provjera2 ) ) { if ( duzina == 0 ) { for ( l = 0 ; l < duzina1 ; l ++ ) { * p1 ++ = zamjene [ i ] [ l ] ; } } else if ( duzina1 < duzina2 ) { char * kraj = p1 ; while ( * kraj != '\0' ) kraj ++ ; while ( kraj > p1 ) { * ( kraj + duzina ) = * kraj ; kraj -- ; } for ( l = 0 ; l < duzina2 ; l ++ ) { * p1 ++ = zamjene [ i ] [ l ] ; } } else if ( duzina1 > duzina2 ) { char * pocetak = p1 ; while ( * pocetak != '\0' ) { * pocetak = * ( pocetak - duzina ) ; if ( * pocetak == '\0' ) break ; pocetak ++ ; } for ( l = 0 ; l < duzina2 ; l ++ ) { * p1 ++ = zamjene [ i ] [ l ] ; } } p1 -- ; } p1 ++ ; } } return poc ; } int main ( ) { char * rijeci [ 2 ] = { ""test"" , ""testiranje"" } ; char * zamjene [ 2 ] = { ""swap"" , ""zamjena"" } ; char tekst [ ] = ""test testiranje test"" ; printf ( ""'%s'"" , zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ) ; return 0 ; }"
2923,84,84,0,54,A2016/Z2/Z4/student2585,A2016/Z2/Z4/student3671,"#include <stdio.h> int main ( ) { int m , n , i , j , cirkularna , teplicova ; teplicova = 1 ; cirkularna = 1 ; double m [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || n > 100 || m <= 0 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & m [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( m [ i ] [ j ] != m [ i - 1 ] [ j - 1 ] ) { teplicova = 0 ; } } } for ( i = 1 ; i < m ; i ++ ) { if ( m [ i ] [ 0 ] != m [ i - 1 ] [ n - 1 ] ) { cirkularna = 0 ; break ; } } if ( cirkularna && teplicova ) { printf ( ""matrica je cirkularna\n"" ) ; } else if ( teplicova && cirkularna == 0 ) { printf ( ""matrica je teplicova\n"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { double matrica [ 100 ] [ 100 ] ; int i , j , m , n , teplicova = 1 , cirkularna = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ i - 1 ] [ j - 1 ] ) { teplicova = 0 ; } } } for ( i = 1 ; i < m ; i ++ ) { if ( matrica [ i ] [ 0 ] != matrica [ i - 1 ] [ n - 1 ] ) { cirkularna = 0 ; break ; } } if ( cirkularna && teplicova ) { printf ( ""matrica je cirkularna"" ) ; } else if ( teplicova && cirkularna == 0 ) { printf ( ""matrica je teplicova"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }"
2926,63,63,0,56,A2016/Z3/Z2/student8724,A2016/Z3/Z2/student1502,"#include <stdio.h> #include <math.h> int br ( int i ) { int suma = 0 ; while ( i != 0 ) { i = fabs ( i ) ; suma += i % 10 ; i /= 10 ; } return suma ; } int f ( int b ) { int a = 1 , c = 1 , d ; if ( b == 1 ) { return 1 ; } while ( 2 ) { d = a + c ; if ( d == b ) return 1 ; if ( d > b ) return 0 ; a = c ; c = d ; } } int izbaci ( int * n , int v ) { int i , y , j ; for ( i = 0 ; i < v ; i ++ ) { y = f ( n [ i ] ) ; if ( y ) { for ( j = i ; j < v - 1 ; j ++ ) { n [ j ] = n [ j + 1 ] ; } v -- ; i -- ; } } return v ; } void ubaci ( int * niz , int velicina ) { int niz2 [ 20 ] ; int niz3 [ 20 ] ; int i ; for ( i = 0 ; i < velicina ; i ++ ) { niz2 [ i ] = br ( niz [ i ] ) ; } int b = 0 ; for ( i = 0 ; i < 2 * velicina ; i += 2 ) { niz3 [ i ] = niz [ b ] ; niz3 [ i + 1 ] = niz2 [ b ] ; b ++ ; if ( b == velicina ) break ; } for ( i = 0 ; i < 2 * velicina ; i ++ ) { niz [ i ] = niz3 [ i ] ; } } int main ( ) { int niz [ 20 ] ; int i , broj ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < broj ; i ++ ) { printf ( "", %d"" , niz [ i ] ) ; } printf ( ""."" ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int daj_f ( int b ) { int a = 1 , c = 1 ; int d ; if ( b == 1 ) { return 1 ; } while ( 1 == 1 ) { d = a + c ; if ( d == b ) return 1 ; if ( d > b ) return 0 ; a = c ; c = d ; } } int broj ( int i ) { int suma = 0 ; while ( i != 0 ) { i = abs ( i ) ; suma += i % 10 ; i /= 10 ; } return suma ; } void ubaci ( int * niz , int velicina ) { int niz2 [ 20 ] ; int niz3 [ 20 ] ; int i ; for ( i = 0 ; i < velicina ; i ++ ) { niz2 [ i ] = broj ( niz [ i ] ) ; } int b = 0 ; for ( i = 0 ; i < 2 * velicina ; i += 2 ) { niz3 [ i ] = niz [ b ] ; niz3 [ i + 1 ] = niz2 [ b ] ; b ++ ; if ( b == velicina ) break ; } for ( i = 0 ; i < 2 * velicina ; i ++ ) { niz [ i ] = niz3 [ i ] ; } } int izbaci ( int * niz , int velicina ) { int i ; int j ; for ( i = 0 ; i < velicina ; i ++ ) { int n = daj_f ( niz [ i ] ) ; if ( n ) { for ( j = i ; j < velicina - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } velicina -- ; i -- ; } } return velicina ; } int main ( ) { int niz [ 20 ] ; int i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; int broj_clanova = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; printf ( ""%d"" , niz [ 0 ] ) ; for ( i = 1 ; i < broj_clanova ; i ++ ) { printf ( "", %d"" , niz [ i ] ) ; } printf ( ""."" ) ; return 0 ; }"
2933,90,90,0,56,A2016/Z2/Z4/student4804,A2016/Z2/Z4/student2340,"#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { int m , n , i , j , t = 0 , c = 0 ; double a [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & a [ i ] [ j ] ) ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( a [ i ] [ j ] - a [ i + 1 ] [ j + 1 ] ) < e ) t = 1 ; else { t = 0 ; break ; } } if ( t == 0 ) break ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( t == 1 && ( fabs ( a [ i ] [ n - 1 ] - a [ i + 1 ] [ 0 ] ) < e ) ) c = 1 ; else { c = 0 ; break ; } } if ( c == 0 ) break ; } if ( c == 1 || m == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( t == 1 || n == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.001 int main ( ) { int m , n , i , j , templic , cirkularna ; double a [ 100 ] [ 100 ] = { { 0 } } ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 || m > 100 ) || ( n <= 0 || n > 100 ) ) { printf ( ""pogresan unos!\n"" ) ; } } while ( ( m <= 0 || m > 100 ) || ( n <= 0 || n > 100 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & a [ i ] [ j ] ) ; } } templic = 0 ; cirkularna = 0 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( a [ i ] [ j ] - a [ i + 1 ] [ j + 1 ] ) < epsilon ) templic = 1 ; else { templic = 0 ; break ; } } if ( templic == 0 ) break ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( ( templic == 1 ) && ( fabs ( a [ i ] [ n - 1 ] - a [ i + 1 ] [ 0 ] ) < epsilon ) ) { cirkularna = 1 ; } else { cirkularna = 0 ; break ; } } if ( cirkularna == 0 ) break ; } if ( cirkularna == 1 || m == 1 ) printf ( ""matrica je cirkularna"" ) ; else if ( templic == 1 || n == 1 ) printf ( ""matrica je teplicova"" ) ; else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
2934,99,99,0,135,A2016/Z5/Z1/student2160,A2016/Z5/Z1/student3841,"#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ocjena ( int ocjene [ ] , int br_ocjena ) { double prosjek1 = 0 , suma = 0 ; int i = 0 ; if ( br_ocjena == 0 ) return 5.0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek1 = 5.0 ; return prosjek1 ; } suma += ocjene [ i ] ; } prosjek1 = suma / br_ocjena ; return prosjek1 ; } int kriterij ( struct student prvi , struct student drugi ) { double p1 , p2 ; p1 = prosjek_ocjena ( prvi . ocjene , prvi . br_ocjena ) ; p2 = prosjek_ocjena ( drugi . ocjene , drugi . br_ocjena ) ; if ( p1 > p2 ) return 1 ; if ( p1 < p2 ) return 0 ; if ( strcmp ( prvi . prezime , drugi . prezime ) < 0 ) return 1 ; else if ( strcmp ( prvi . prezime , drugi . prezime ) > 0 ) return 0 ; if ( strcmp ( prvi . ime , drugi . ime ) < 0 ) return 1 ; else return 0 ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { double pr ; int i = 0 , j = 0 , i1 = 0 , i2 = - 1 , i3 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { pr = prosjek_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( pr < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } if ( velicina == 0 ) return 0 ; for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i1 ] ) ) i1 = i ; for ( i = 0 ; i < velicina ; i ++ ) if ( i != i1 ) i2 = i ; if ( i2 != - 1 ) { for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i2 ] ) && i != i1 ) i2 = i ; for ( i = 0 ; i < velicina ; i ++ ) if ( i != i2 && i != i1 ) i3 = i ; if ( i3 != - 1 ) for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i3 ] ) && i != i2 && i != i1 ) i3 = i ; } printf ( ""%s %s\n"" , studenti [ i1 ] . prezime , studenti [ i1 ] . ime ) ; if ( i2 != - 1 ) printf ( ""%s %s\n"" , studenti [ i2 ] . prezime , studenti [ i2 ] . ime ) ; if ( i3 != - 1 ) printf ( ""%s %s\n"" , studenti [ i3 ] . prezime , studenti [ i3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; printf ( ""%d "" , kriterij ( studenti [ 0 ] , studenti [ 5 ] ) ) ; return 0 ; }","#include <stdio.h> #include <string.h> struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ocjena ( int ocjene [ ] , int br_ocjena ) { double prosjek1 = 0 , suma = 0 ; int i = 0 ; if ( br_ocjena == 0 ) return 5.0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek1 = 5.0 ; return prosjek1 ; } suma += ocjene [ i ] ; } prosjek1 = suma / br_ocjena ; return prosjek1 ; } int kriterij ( struct student prvi , struct student drugi ) { double p1 , p2 ; p1 = prosjek_ocjena ( prvi . ocjene , prvi . br_ocjena ) ; p2 = prosjek_ocjena ( drugi . ocjene , drugi . br_ocjena ) ; if ( p1 > p2 ) return 1 ; if ( p1 < p2 ) return 0 ; if ( strcmp ( prvi . prezime , drugi . prezime ) < 0 ) return 1 ; else if ( strcmp ( prvi . prezime , drugi . prezime ) > 0 ) return 0 ; if ( strcmp ( prvi . ime , drugi . ime ) < 0 ) return 1 ; else return 0 ; } int genijalci ( struct student studenti [ ] , int velicina , double prosjek ) { double pr ; int i = 0 , j = 0 , i1 = 0 , i2 = - 1 , i3 = - 1 ; for ( i = 0 ; i < velicina ; i ++ ) { pr = prosjek_ocjena ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( pr < prosjek ) { for ( j = i ; j < velicina - 1 ; j ++ ) studenti [ j ] = studenti [ j + 1 ] ; velicina -- ; i -- ; } } if ( velicina == 0 ) return 0 ; for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i1 ] ) ) i1 = i ; for ( i = 0 ; i < velicina ; i ++ ) if ( i != i1 ) i2 = i ; if ( i2 != - 1 ) { for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i2 ] ) && i != i1 ) i2 = i ; for ( i = 0 ; i < velicina ; i ++ ) if ( i != i2 && i != i1 ) i3 = i ; if ( i3 != - 1 ) for ( i = 0 ; i < velicina ; i ++ ) if ( kriterij ( studenti [ i ] , studenti [ i3 ] ) && i != i2 && i != i1 ) i3 = i ; } printf ( ""%s %s\n"" , studenti [ i1 ] . prezime , studenti [ i1 ] . ime ) ; if ( i2 != - 1 ) printf ( ""%s %s\n"" , studenti [ i2 ] . prezime , studenti [ i2 ] . ime ) ; if ( i3 != - 1 ) printf ( ""%s %s\n"" , studenti [ i3 ] . prezime , studenti [ i3 ] . ime ) ; return velicina ; } int main ( ) { struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; printf ( ""%d "" , kriterij ( studenti [ 0 ] , studenti [ 5 ] ) ) ; return 0 ; }"
2939,80,80,0,187,A2016/Z1/Z1/student8189,A2016/Z1/Z1/student3253,"#include <stdio.h> #include <math.h> int main ( ) { double t1 , t2 , t3 , t4 , t5 , b1 , b2 , b3 , b4 , b5 , x1 , x2 , x3 , x4 , x5 , t , b , m ; int ocjenat , ocjenab , ocjenam ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t1 ) ; if ( t1 < 0 || t1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & t2 ) ; if ( t2 < 0 || t2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & t3 ) ; if ( t3 < 0 || t3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & t4 ) ; if ( t4 < 0 || t4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & t5 ) ; if ( t5 < 0 || t5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b1 ) ; if ( b1 < 0 || b1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & b2 ) ; if ( b2 < 0 || b2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & b3 ) ; if ( b3 < 0 || b3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & b4 ) ; if ( b4 < 0 || b4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & b5 ) ; if ( b5 < 0 || b5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova\n"" ) ; return 0 ; } t = t1 + t2 + t3 + t4 + t5 ; b = b1 + b2 + b3 + b4 + b5 ; m = x1 + x2 + x3 + x4 + x5 ; if ( t < 55 && b < 55 && m < 55 ) printf ( ""nijedan student nije polozio.\n"" ) ; else if ( ( t >= 55 && b < 55 && m < 55 ) || ( t < 55 && b >= 55 && m < 55 ) || ( t < 55 && b < 55 && m >= 55 ) ) printf ( ""jedan student je polozio.\n"" ) ; else if ( ( t >= 55 && b >= 55 && m < 55 ) || ( t < 55 && b >= 55 && m >= 55 ) || ( t >= 55 && b < 55 && m >= 55 ) ) printf ( ""dva studenta su polozila.\n"" ) ; if ( t < 55 ) ocjenat = 5 ; else if ( t >= 55 && t < 65 ) ocjenat = 6 ; else if ( t >= 65 && t < 75 ) ocjenat = 7 ; else if ( t >= 75 && t < 85 ) ocjenat = 8 ; else if ( t >= 85 && t < 95 ) ocjenat = 9 ; else if ( t >= 95 && t <= 100 ) ocjenat = 10 ; if ( b < 55 ) ocjenab = 5 ; else if ( b >= 55 && b < 65 ) ocjenab = 6 ; else if ( b >= 65 && b < 75 ) ocjenab = 7 ; else if ( b >= 75 && b < 85 ) ocjenab = 8 ; else if ( b >= 85 && b < 95 ) ocjenab = 9 ; else if ( b >= 95 && b <= 100 ) ocjenab = 10 ; if ( m < 55 ) ocjenam = 5 ; else if ( m >= 55 && m < 65 ) ocjenam = 6 ; else if ( m >= 65 && m < 75 ) ocjenam = 7 ; else if ( m >= 75 && m < 85 ) ocjenam = 8 ; else if ( m >= 85 && m < 95 ) ocjenam = 9 ; else if ( m >= 95 && m <= 100 ) ocjenam = 10 ; if ( t >= 55 && b >= 55 && m >= 55 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ( ocjenat == ocjenab ) && ( ocjenab == ocjenam ) && ( ocjenat == ocjenam ) ) { printf ( ""sva tri studenta imaju istu ocjenu."" ) ; } else if ( ( ocjenat != ocjenam ) && ( ocjenab != ocjenam ) && ( ocjenat != ocjenab ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } else if ( ( ( ocjenat == ocjenab ) && ( ocjenab != ocjenam ) ) || ( ( ocjenat == ocjenam ) && ( ocjenat != ocjenab ) ) || ( ( ocjenab == ocjenam ) && ( ocjenam != ocjenat ) ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { int a , b , c ; double x1 , x2 , x3 , x4 , x5 , y1 , y2 , y3 , y4 , y5 , z1 , z2 , z3 , z4 , z5 , s1 , s2 , s3 ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x1 ) ; if ( x1 < 0 || x1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & x2 ) ; if ( x2 < 0 || x2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & x3 ) ; if ( x3 < 0 || x3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & x4 ) ; if ( x4 < 0 || x4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & x5 ) ; if ( x5 < 0 || x5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & y1 ) ; if ( y1 < 0 || y1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & y2 ) ; if ( y2 < 0 || y2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & y3 ) ; if ( y3 < 0 || y3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & y4 ) ; if ( y4 < 0 || y4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & y5 ) ; if ( y5 < 0 || y5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & z1 ) ; if ( z1 < 0 || z1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & z2 ) ; if ( z2 < 0 || z2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & z3 ) ; if ( z3 < 0 || z3 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z4 ) ; if ( z4 < 0 || z4 > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & z5 ) ; if ( z5 < 0 || z5 > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } s1 = x1 + x2 + x3 + x4 + x5 ; s2 = y1 + y2 + y3 + y4 + y5 ; s3 = z1 + z2 + z3 + z4 + z5 ; if ( s1 >= 0 && s1 < 55 ) { a = 5 ; } else if ( s1 >= 55 && s1 < 65 ) { a = 6 ; } else if ( s1 >= 65 && s1 < 75 ) { a = 7 ; } else if ( s1 >= 75 && s1 < 85 ) { a = 8 ; } else if ( s1 >= 85 && s1 < 92 ) { a = 9 ; } else if ( s1 >= 92 && s1 <= 100 ) { a = 10 ; } if ( s2 >= 0 && s2 < 55 ) { b = 5 ; } else if ( s2 >= 55 && s2 < 65 ) { b = 6 ; } else if ( s2 >= 65 && s2 < 75 ) { b = 7 ; } else if ( s2 >= 75 && s2 < 85 ) { b = 8 ; } else if ( s2 >= 85 && s2 < 92 ) { b = 9 ; } else if ( s2 >= 92 && s2 <= 100 ) { b = 10 ; } if ( s3 >= 0 && s3 < 55 ) { c = 5 ; } else if ( s3 >= 55 && s3 < 65 ) { c = 6 ; } else if ( s3 >= 65 && s3 < 75 ) { c = 7 ; } else if ( s3 >= 75 && s3 < 85 ) { c = 8 ; } else if ( s3 >= 85 && s3 < 92 ) { c = 9 ; } else if ( s3 >= 92 && s3 <= 100 ) { c = 10 ; } if ( ( a == 5 ) && ( b == 5 ) && ( c == 5 ) ) { printf ( ""nijedan student nije polozio.\n"" ) ; } else if ( ( ( a == 5 ) && ( b == 5 ) && ( c != 5 ) ) || ( ( a == 5 ) && ( c == 5 ) && ( b != 5 ) ) || ( ( c == 5 ) && ( b == 5 ) && ( a != 5 ) ) ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( ( ( a != 5 ) && ( b != 5 ) && ( c == 5 ) ) || ( ( a != 5 ) && ( b == 5 ) && ( c != 5 ) ) || ( ( a == 5 ) && ( b != 5 ) && ( c != 5 ) ) ) { printf ( ""dva studenta su polozila.\n"" ) ; } else if ( ( a != 5 ) && ( b != 5 ) && ( c != 5 ) ) { printf ( ""sva tri studenta su polozila.\n"" ) ; if ( ( ( a == b ) && ( a != c ) && ( b != c ) ) || ( ( a == c ) && ( a != b ) && ( b != c ) ) || ( ( c == b ) && ( a != c ) && ( b != a ) ) ) { printf ( ""dva od tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( a == b ) && ( b == c ) && ( a == c ) ) { printf ( ""sva tri studenta imaju istu ocjenu.\n"" ) ; } else if ( ( a != b ) && ( b != c ) && ( a != c ) ) { printf ( ""svaki student ima razlicitu ocjenu.\n"" ) ; } } return 0 ; }"
2944,99,99,0,33,A2016/Z2/Z4/student3900,A2016/Z2/Z4/student7802,"#include <stdio.h> #define visina 100 #define sirina 100 int main ( ) { int t = 1 , c = 1 , m = 1 , n = 1 , i = 0 , j = 0 ; double mat [ visina ] [ sirina ] = { { 0 } } ; printf ( ""unesite m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 100 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; } } while ( m <= 0 || n <= 0 || m > 100 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i + 1 ] [ j + 1 ] != mat [ i ] [ j ] || mat [ 1 + i ] [ 0 ] != mat [ i ] [ n - 1 ] ) c = 0 ; } } t = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) t = 0 ; } } if ( n == 1 && m != 1 ) { printf ( ""matrica je teplicova"" ) ; } else if ( c == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( t == 1 && c == 0 ) { printf ( ""matrica je teplicova"" ) ; } else if ( t == 0 && c == 0 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> #define visina 100 #define sirina 100 int main ( ) { int t = 1 , c = 1 , m = 1 , n = 1 , i = 0 , j = 0 ; double mat [ visina ] [ sirina ] = { { 0 } } ; printf ( ""unesite m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 100 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; } } while ( m <= 0 || n <= 0 || m > 100 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i + 1 ] [ j + 1 ] != mat [ i ] [ j ] || mat [ 1 + i ] [ 0 ] != mat [ i ] [ n - 1 ] ) c = 0 ; } } t = 1 ; for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) t = 0 ; } } if ( n == 1 && m != 1 ) { printf ( ""matrica je teplicova"" ) ; } else if ( c == 1 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( t == 1 && c == 0 ) { printf ( ""matrica je teplicova"" ) ; } else if ( t == 0 && c == 0 ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }"
2960,98,98,0,101,A2016/Z4/Z1/student2351,A2016/Z4/Z1/student7180,"#include <stdio.h> #include <ctype.h> char * izbaci_najcescu ( char * s ) { char * p = s ; char * pr , * kr , * kt , * pt , * pn , * kn , * q , * r , * k ; int a , i ; char x [ 1000 ] ; int max = 0 , br = 0 ; if ( * s == '\0' ) return 0 ; do { if ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' && ( * ( s + 1 ) != ' ' || ( s + 1 ) != '\0' ) ) { pr = s ; br = 1 ; do { s ++ ; } while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ; kr = s ; q = s ; while ( * q != '\0' ) { if ( * q >= 'a' && * q <= 'z' || * q >= 'a' && * q <= 'z' && ( * ( q + 1 ) != ' ' || * ( q + 1 ) != '\0' ) ) { pn = q ; do { q ++ ; } while ( * q >= 'a' && * q <= 'z' || * q >= 'a' && * q <= 'z' ) ; kn = q ; pt = pr ; kt = kr ; a = 1 ; do { if ( tolower ( * pt ) != tolower ( * pn ) ) { a = 0 ; break ; } pt ++ ; pn ++ ; } while ( pt != kr ) ; if ( a == 1 ) br ++ ; } else q ++ ; } if ( br > max ) { max = br ; r = pr ; k = kr ; i = 0 ; do { x [ i ] = * r ; i ++ ; r ++ ; } while ( r != k ) ; x [ i ] = '\0' ; } } else s ++ ; } while ( * s != '\0' ) ; s = p ; do { if ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' && ( * ( s + 1 ) != ' ' || ( s + 1 ) != '\0' ) ) { pr = s ; q = s ; do { s ++ ; } while ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' ) ; kr = s ; a = 1 ; pt = x ; kt = x + i ; do { if ( tolower ( * pt ) != tolower ( * pr ) ) { a = 0 ; break ; } pt ++ ; pr ++ ; } while ( pr != kr ) ; if ( a == 1 ) { while ( * kr != '\0' ) { * q = * kr ; q ++ ; kr ++ ; } * q = '\0' ; s -= ( kr - q ) ; } } else s ++ ; } while ( * s != '\0' ) ; return p ; } int main ( ) { char primjer [ ] = ""auto ide gore dolje gore"" ; printf ( ""%s"" , izbaci_najcescu ( primjer ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char * izbaci_najcescu ( char * s ) { char * p = s ; char * pr , * kr , * kt , * pt , * pn , * kn , * q , * r , * k ; int a , i ; char x [ 1000 ] ; int max = 0 , br = 0 ; if ( * s == '\0' ) return 0 ; do { if ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' && ( * ( s + 1 ) != ' ' || ( s + 1 ) != '\0' ) ) { pr = s ; br = 1 ; do { s ++ ; } while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ; kr = s ; q = s ; while ( * q != '\0' ) { if ( * q >= 'a' && * q <= 'z' || * q >= 'a' && * q <= 'z' && ( * ( q + 1 ) != ' ' || * ( q + 1 ) != '\0' ) ) { pn = q ; do { q ++ ; } while ( * q >= 'a' && * q <= 'z' || * q >= 'a' && * q <= 'z' ) ; kn = q ; pt = pr ; kt = kr ; a = 1 ; do { if ( tolower ( * pt ) != tolower ( * pn ) ) { a = 0 ; break ; } pt ++ ; pn ++ ; } while ( pt != kr ) ; if ( a == 1 ) br ++ ; } else q ++ ; } if ( br > max ) { max = br ; r = pr ; k = kr ; i = 0 ; do { x [ i ] = * r ; i ++ ; r ++ ; } while ( r != k ) ; x [ i ] = '\0' ; } } else s ++ ; } while ( * s != '\0' ) ; s = p ; do { if ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' && ( * ( s + 1 ) != ' ' || ( s + 1 ) != '\0' ) ) { pr = s ; q = s ; do { s ++ ; } while ( * s >= 'a' && * s <= 'z' || * s >= 'a' && * s <= 'z' ) ; kr = s ; a = 1 ; pt = x ; kt = x + i ; do { if ( tolower ( * pt ) != tolower ( * pr ) ) { a = 0 ; break ; } pt ++ ; pr ++ ; } while ( pr != kr ) ; if ( a == 1 ) { while ( * kr != '\0' ) { * q = * kr ; q ++ ; kr ++ ; } * q = '\0' ; s -= ( kr - q ) ; } } else s ++ ; } while ( * s != '\0' ) ; return p ; } int main ( ) { char primjer [ ] = ""auto ide gore dolje gore"" ; printf ( ""%s"" , izbaci_najcescu ( primjer ) ) ; return 0 ; }"
2961,90,90,0,75,A2016/Z3/Z3/student3301,A2016/Z3/Z3/student6999,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , m , n , brojac = 0 , k = 0 , x , y , privremena ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( x = j + 1 ; x < m ; x ++ ) { for ( y = 0 ; y < n ; y ++ ) { privremena = mat [ x - 1 ] [ y ] ; mat [ x - 1 ] [ y ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = privremena ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( x = j + 1 ; x < n ; x ++ ) { for ( y = 0 ; y < m ; y ++ ) { privremena = mat [ y ] [ x - 1 ] ; mat [ y ] [ x - 1 ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = privremena ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2965,99,99,0,170,A2016/Z1/Z1/student7823,A2016/Z1/Z1/student7457,"#include <stdio.h> #define pet 55 #define sest 65 #define sedam 75 #define osam 85 #define devet 92 #define deset 100 #define epsilon 0.005 struct prijatelj { float ipi ; float iipi ; float prisustvo ; float zadace ; float zavrsniispit ; float ukupnobodova ; int ocjena ; } ; void ocjena ( float brojbodova , int * ocjena ) { int a = ( brojbodova * 100 + 0.005 ) ; brojbodova = a / 100 ; if ( brojbodova < pet ) * ocjena = 5 ; else if ( brojbodova < sest ) * ocjena = 6 ; else if ( brojbodova < sedam ) * ocjena = 7 ; else if ( brojbodova < osam ) * ocjena = 8 ; else if ( ocjena < devet ) * ocjena = 9 ; else if ( ocjena <= deset ) * ocjena = 10 ; } int main ( ) { struct prijatelj tarik , mirza , bojan ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & tarik . ipi ) ; if ( tarik . ipi < 0 || tarik . ipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & tarik . iipi ) ; if ( tarik . iipi < 0 || tarik . iipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & tarik . prisustvo ) ; if ( tarik . prisustvo < 0 || tarik . prisustvo > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & tarik . zadace ) ; if ( tarik . zadace < 0 || tarik . zadace > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & tarik . zavrsniispit ) ; if ( tarik . zavrsniispit < 0 || tarik . zavrsniispit > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & bojan . ipi ) ; if ( bojan . ipi < 0 || bojan . ipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & bojan . iipi ) ; if ( bojan . iipi < 0 || bojan . iipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & bojan . prisustvo ) ; if ( bojan . prisustvo < 0 || bojan . prisustvo > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & bojan . zadace ) ; if ( bojan . zadace < 0 || bojan . zadace > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & bojan . zavrsniispit ) ; if ( bojan . zavrsniispit < 0 || bojan . zavrsniispit > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & mirza . ipi ) ; if ( mirza . ipi < 0 || mirza . ipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & mirza . iipi ) ; if ( mirza . iipi < 0 || mirza . iipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & mirza . prisustvo ) ; if ( mirza . prisustvo < 0 || mirza . prisustvo > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & mirza . zadace ) ; if ( mirza . zadace < 0 || mirza . zadace > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & mirza . zavrsniispit ) ; if ( mirza . zavrsniispit < 0 || mirza . zavrsniispit > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tarik . ukupnobodova = tarik . ipi + tarik . iipi + tarik . prisustvo + tarik . zadace + tarik . zavrsniispit ; bojan . ukupnobodova = bojan . ipi + bojan . iipi + bojan . prisustvo + bojan . zadace + bojan . zavrsniispit ; mirza . ukupnobodova = mirza . ipi + mirza . iipi + mirza . prisustvo + mirza . zadace + mirza . zavrsniispit ; ocjena ( tarik . ukupnobodova , & tarik . ocjena ) ; ocjena ( bojan . ukupnobodova , & bojan . ocjena ) ; ocjena ( mirza . ukupnobodova , & mirza . ocjena ) ; int brojacprolaznosti = 0 ; if ( tarik . ocjena > 5 ) brojacprolaznosti ++ ; if ( bojan . ocjena > 5 ) brojacprolaznosti ++ ; if ( mirza . ocjena > 5 ) brojacprolaznosti ++ ; if ( brojacprolaznosti == 0 ) printf ( ""nijedan student nije polozio."" ) ; if ( brojacprolaznosti == 1 ) printf ( ""jedan student je polozio."" ) ; if ( brojacprolaznosti == 2 ) printf ( ""dva studenta su polozila."" ) ; if ( brojacprolaznosti == 3 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; int brojacocjena = 0 ; if ( tarik . ocjena == bojan . ocjena ) brojacocjena ++ ; if ( tarik . ocjena == mirza . ocjena ) brojacocjena ++ ; if ( bojan . ocjena == mirza . ocjena ) brojacocjena ++ ; if ( brojacocjena == 0 ) printf ( ""svaki student ima razlicitu ocjenu."" ) ; if ( brojacocjena == 1 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; if ( brojacocjena == 3 ) printf ( ""sva tri studenta imaju istu ocjenu."" ) ; } return 0 ; }","#include <stdio.h> #define pet 55 #define sest 65 #define sedam 75 #define osam 85 #define devet 92 #define deset 100 #define epsilon 0.005 struct prijatelj { float ipi ; float iipi ; float prisustvo ; float zadace ; float zavrsniispit ; float ukupnobodova ; int ocjena ; } ; void ocjena ( float brojbodova , int * ocjena ) { int a = ( brojbodova * 100 + 0.005 ) ; brojbodova = a / 100 ; if ( brojbodova < pet ) * ocjena = 5 ; else if ( brojbodova < sest ) * ocjena = 6 ; else if ( brojbodova < sedam ) * ocjena = 7 ; else if ( brojbodova < osam ) * ocjena = 8 ; else if ( ocjena < devet ) * ocjena = 9 ; else if ( ocjena <= deset ) * ocjena = 10 ; } int main ( ) { struct prijatelj tarik , mirza , bojan ; printf ( ""unesite bodove za tarika: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & tarik . ipi ) ; if ( tarik . ipi < 0 || tarik . ipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & tarik . iipi ) ; if ( tarik . iipi < 0 || tarik . iipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & tarik . prisustvo ) ; if ( tarik . prisustvo < 0 || tarik . prisustvo > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & tarik . zadace ) ; if ( tarik . zadace < 0 || tarik . zadace > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & tarik . zavrsniispit ) ; if ( tarik . zavrsniispit < 0 || tarik . zavrsniispit > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & bojan . ipi ) ; if ( bojan . ipi < 0 || bojan . ipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & bojan . iipi ) ; if ( bojan . iipi < 0 || bojan . iipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & bojan . prisustvo ) ; if ( bojan . prisustvo < 0 || bojan . prisustvo > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & bojan . zadace ) ; if ( bojan . zadace < 0 || bojan . zadace > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & bojan . zavrsniispit ) ; if ( bojan . zavrsniispit < 0 || bojan . zavrsniispit > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: "" ) ; printf ( ""\ni parcijalni ispit: "" ) ; scanf ( ""%f"" , & mirza . ipi ) ; if ( mirza . ipi < 0 || mirza . ipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & mirza . iipi ) ; if ( mirza . iipi < 0 || mirza . iipi > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & mirza . prisustvo ) ; if ( mirza . prisustvo < 0 || mirza . prisustvo > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & mirza . zadace ) ; if ( mirza . zadace < 0 || mirza . zadace > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & mirza . zavrsniispit ) ; if ( mirza . zavrsniispit < 0 || mirza . zavrsniispit > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tarik . ukupnobodova = tarik . ipi + tarik . iipi + tarik . prisustvo + tarik . zadace + tarik . zavrsniispit ; bojan . ukupnobodova = bojan . ipi + bojan . iipi + bojan . prisustvo + bojan . zadace + bojan . zavrsniispit ; mirza . ukupnobodova = mirza . ipi + mirza . iipi + mirza . prisustvo + mirza . zadace + mirza . zavrsniispit ; ocjena ( tarik . ukupnobodova , & tarik . ocjena ) ; ocjena ( bojan . ukupnobodova , & bojan . ocjena ) ; ocjena ( mirza . ukupnobodova , & mirza . ocjena ) ; int brojacprolaznosti = 0 ; if ( tarik . ocjena > 5 ) brojacprolaznosti ++ ; if ( bojan . ocjena > 5 ) brojacprolaznosti ++ ; if ( mirza . ocjena > 5 ) brojacprolaznosti ++ ; if ( brojacprolaznosti == 0 ) printf ( ""nijedan student nije polozio."" ) ; if ( brojacprolaznosti == 1 ) printf ( ""jedan student je polozio."" ) ; if ( brojacprolaznosti == 2 ) printf ( ""dva studenta su polozila."" ) ; if ( brojacprolaznosti == 3 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; int brojacocjena = 0 ; if ( tarik . ocjena == bojan . ocjena ) brojacocjena ++ ; if ( tarik . ocjena == mirza . ocjena ) brojacocjena ++ ; if ( bojan . ocjena == mirza . ocjena ) brojacocjena ++ ; if ( brojacocjena == 0 ) printf ( ""svaki student ima razlicitu ocjenu."" ) ; if ( brojacocjena == 1 ) printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; if ( brojacocjena == 3 ) printf ( ""sva tri studenta imaju istu ocjenu."" ) ; } return 0 ; }"
2966,78,78,0,51,A2016/Z1/Z3/student9805,A2016/Z1/Z3/student2421,"#include <stdio.h> #include <math.h> int main ( ) { float b = 0 , s = 0 , c = 0 , v = 0 , p = 0 , pb = 0.0 , ps = 0.0 , pc = 0.0 , pv = 0.0 , pp = 0.0 , ubv ; char boja ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & boja ) ; while ( boja == '\n' ) { scanf ( ""%c"" , & boja ) ; } if ( ( boja == 'c' ) || ( boja == 'c' ) ) { c ++ ; continue ; } if ( ( boja == 'b' ) || ( boja == 'b' ) ) { b ++ ; continue ; } if ( ( boja == 's' ) || ( boja == 's' ) ) { s ++ ; continue ; } if ( ( boja == 'v' ) || ( boja == 'v' ) ) { v ++ ; continue ; } if ( ( boja == 'p' ) || ( boja == 'p' ) ) { p ++ ; continue ; } if ( ( boja != 'c' ) && ( boja != 'c' ) && ( boja != 'b' ) && ( boja != 'b' ) && ( boja != 's' ) && ( boja != 's' ) && ( boja != 'v' ) && ( boja != 'v' ) && ( boja != 'p' ) && ( boja != 'p' ) && ( boja != 'k' ) && ( boja != 'k' ) ) { printf ( ""neispravan unos\n"" ) ; continue ; } } while ( boja != 'k' && boja != 'k' ) ; ubv = b + s + c + v + p ; pc = c * 100 / ubv ; pb = b * 100 / ubv ; ps = s * 100 / ubv ; pv = v * 100 / ubv ; pp = p * 100 / ubv ; printf ( ""ukupno evidentirano %g vozila. \n"" , ubv ) ; if ( ubv == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c >= b && c >= s && c >= v && c >= p ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , pc ) ; return 0 ; } if ( b >= c && b >= s && b >= v && b >= p ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pb ) ; return 0 ; } if ( s >= c && s >= b && s >= v && s >= p ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , ps ) ; return 0 ; } if ( v >= c && v >= s && v >= b && v >= p ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pv ) ; return 0 ; } if ( p >= c && p >= s && p >= v && p >= b ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; return 0 ; } return 0 ; }","#include <stdio.h> #define epsilon 0.0001 int main ( ) { float c = 0 , b = 0 , s = 0 , crv = 0 , p = 0 ; float n = 0 , pc = 0.0 , pcrv = 0.0 , pb = 0.0 , ps = 0.0 , pp = 0.0 ; char vo ; printf ( ""unesite vozila: "" ) ; do { scanf ( ""%c"" , & vo ) ; if ( ( vo == 'c' ) || ( vo == 'c' ) ) { c ++ ; continue ; } if ( ( vo == 'b' ) || ( vo == 'b' ) ) { b ++ ; continue ; } if ( ( vo == 's' ) || ( vo == 's' ) ) { s ++ ; continue ; } if ( ( vo == 'v' ) || ( vo == 'v' ) ) { crv ++ ; continue ; } if ( ( vo == 'p' ) || ( vo == 'p' ) ) { p ++ ; continue ; } if ( ( vo != 'p' && vo != 'p' ) && ( vo != 'v' && vo != 'v' ) && ( vo != 's' && vo != 's' ) && ( vo != 'b' && vo != 'b' ) && ( vo != 'c' && vo != 'c' ) && ( vo != 'k' && vo != 'k' ) ) { printf ( ""neispravan unos\n"" ) ; } } while ( ( vo != 'k' ) && ( vo != 'k' ) ) ; n = c + b + s + crv + p ; printf ( ""ukupno evidentirano %g vozila.\n"" , n ) ; if ( ( n - 0 ) > epsilon ) { pc = ( c * 100 ) / n ; pb = ( b * 100 ) / n ; ps = ( s * 100 ) / n ; pcrv = ( crv * 100 ) / n ; pp = ( p * 100 ) / n ; } if ( ( c >= b ) && ( c >= s ) && ( c >= crv ) && ( c >= p ) ) { printf ( ""najpopularnija boja je crna (%.2f%%)."" , pc ) ; return 0 ; } if ( ( b >= c ) && ( b >= s ) && ( b >= crv ) && ( b >= p ) ) { printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pb ) ; return 0 ; } if ( ( s >= c ) && ( s >= b ) && ( s >= crv ) && ( s >= p ) ) { printf ( ""najpopularnija boja je siva (%.2f%%)."" , ps ) ; return 0 ; } if ( ( crv >= c ) && ( crv >= b ) && ( crv >= s ) && ( crv >= p ) ) { printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pcrv ) ; return 0 ; } if ( ( p >= c ) && ( p >= b ) && ( p >= s ) && ( p >= crv ) ) { printf ( ""najpopularnija boja je plava (%.2f%%)."" , pp ) ; return 0 ; } return 0 ; }"
2975,79,79,0,160,A2016/Z5/Z2/student7485,A2016/Z5/Z2/student9972,"#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int ch ) { if ( ( ch >= 'a' && ch <= 'z' ) || ( ch >= 'a' && ch <= 'z' ) ) return 1 ; return 0 ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulazpom = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { { 0 } } , novired , c , pomoc [ 100 ] ; int brojac [ 1000 ] = { 0 } , kontrola ; int i , broj_rijeci = 0 , j , kraj , ima , temp ; char rijec [ 100000 ] , znak , znk ; int duzina = 0 ; znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { ima = 0 ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; strcpy ( pomoc , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , rijeci [ j ] ) ; strcpy ( rijeci [ j ] , pomoc ) ; } } } kraj = 10 ; novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } c = fgetc ( ulazpom ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulazpom ) ; } rijec [ duzina ] = '\0' ; kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulazpom ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulazpom ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulazpom = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { { 0 } } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , broj_mjesta = 0 , j ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } broj_mjesta = 0 ; char c = fgetc ( ulazpom ) ; while ( c != eof ) { if ( c == '\n' ) broj_mjesta ++ ; if ( broj_mjesta == broj_rijeci ) break ; c = fgetc ( ulazpom ) ; } c = fgetc ( ulazpom ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulazpom ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulazpom ) ; fclose ( izlaz ) ; } int main ( ) { char str [ 100 ] , paket [ 100 ] ; int menu ; do { printf ( ""odaberite:1-kompresuj,2-dekompresuj,0-izlaz: "" ) ; scanf ( ""%d"" , & menu ) ; switch ( menu ) { case 1 : { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( str , 40 ) ; kompresuj ( str , paket ) ; break ; } case 2 : { printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( str , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( paket , 40 ) ; dekompresuj ( str , paket ) ; break ; } } } while ( menu != 0 ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> #include <string.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int slovo ( int c ) { if ( c >= 'a' && c <= 'z' || c >= 'a' && c <= 'z' ) return 1 ; return 0 ; } void swap ( char * p , char * q ) { char temp [ 100 ] ; strcpy ( temp , p ) ; strcpy ( p , q ) ; strcpy ( q , temp ) ; } void kompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } ; int brojac [ 1000 ] = { 0 } ; int i , broj_rijeci = 0 ; char rijec [ 1000 ] ; int duzina ; char znak = fgetc ( ulaz ) ; while ( znak != eof ) { duzina = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { int ima = 0 ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { ima = 1 ; brojac [ j ] ++ ; break ; } } if ( ima != 1 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; brojac [ broj_rijeci ++ ] = 1 ; } } znak = fgetc ( ulaz ) ; } int j ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { for ( j = i + 1 ; j < broj_rijeci ; j ++ ) { if ( brojac [ j ] > brojac [ i ] || ( brojac [ j ] == brojac [ i ] && strcmp ( rijeci [ i ] , rijeci [ j ] ) == 1 ) ) { int temp = brojac [ j ] ; brojac [ j ] = brojac [ i ] ; brojac [ i ] = temp ; swap ( rijeci [ i ] , rijeci [ j ] ) ; } } } int kraj = 10 ; char novired = '\n' ; if ( broj_rijeci < 10 ) kraj = broj_rijeci ; for ( i = 0 ; i < kraj ; i ++ ) { fputs ( rijeci [ i ] , izlaz ) ; fputc ( novired , izlaz ) ; } char c = fgetc ( ulaz1 ) ; while ( c != eof ) { duzina = 0 ; while ( slovo ( c ) ) { rijec [ duzina ++ ] = c ; c = fgetc ( ulaz1 ) ; } rijec [ duzina ] = '\0' ; int kontrola = 0 ; if ( duzina < 10 && duzina != 0 ) { for ( j = 0 ; j < kraj ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { char znk = j + 20 ; kontrola = 1 ; fputc ( znk , izlaz ) ; fputc ( c , izlaz ) ; break ; } } } if ( kontrola == 0 ) { char * r = rijec ; while ( * r != '\0' ) { fputc ( * r , izlaz ) ; r ++ ; } fputc ( c , izlaz ) ; } c = fgetc ( ulaz1 ) ; } printf ( ""datoteka kompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; fclose ( izlaz ) ; } void dekompresuj ( char * naziv , char * naziv1 ) { file * ulaz = fopen ( naziv , ""r"" ) ; file * ulaz1 = fopen ( naziv , ""r"" ) ; file * izlaz = fopen ( naziv1 , ""w"" ) ; char rijeci [ 1000 ] [ 1000 ] = { 0 } , rijec [ 1000 ] ; int broj_rijeci = 0 , duzina = 0 , brojackrajeva = 0 ; char znak = fgetc ( ulaz ) ; int kontrola = 0 ; while ( znak != eof ) { duzina = 0 ; kontrola = 0 ; while ( slovo ( znak ) ) { rijec [ duzina ++ ] = znak ; znak = fgetc ( ulaz ) ; } rijec [ duzina ] = '\0' ; if ( duzina < 10 && duzina != 0 ) { strcpy ( rijeci [ broj_rijeci ] , rijec ) ; int j ; for ( j = 0 ; j < broj_rijeci ; j ++ ) { if ( strcmp ( rijeci [ j ] , rijec ) == 0 ) { kontrola = 1 ; break ; } } if ( kontrola ) break ; broj_rijeci ++ ; } znak = fgetc ( ulaz ) ; } brojackrajeva = 0 ; char c = fgetc ( ulaz1 ) ; while ( c != eof ) { if ( c == '\n' ) brojackrajeva ++ ; if ( brojackrajeva == broj_rijeci ) break ; c = fgetc ( ulaz1 ) ; } c = fgetc ( ulaz1 ) ; while ( c != eof ) { int n = 0 ; if ( c >= 20 && c <= 30 ) { char * p = rijeci [ c - 20 ] ; n = 1 ; while ( * p != '\0' ) { fputc ( * p , izlaz ) ; p ++ ; } } if ( n == 0 ) fputc ( c , izlaz ) ; c = fgetc ( ulaz1 ) ; } printf ( ""datoteka dekompresovana.\n"" ) ; fclose ( ulaz ) ; fclose ( izlaz ) ; fclose ( ulaz1 ) ; } int main ( ) { int opcija ; char s [ 100 ] , p [ 100 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; switch ( opcija ) { case 1 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; kompresuj ( s , p ) ; break ; case 2 : printf ( ""unesite ime ulazne datoteke: "" ) ; unesi ( s , 40 ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; unesi ( p , 40 ) ; dekompresuj ( s , p ) ; } } while ( opcija != 0 ) ; return 0 ; }"
2978,88,88,0,75,A2016/Z3/Z3/student6332,A2016/Z3/Z3/student8419,"#include <stdio.h> int main ( ) { int m , n , i , j , k , h , kolona , vrsta , mat [ 100 ] [ 100 ] , ind = 0 , ind1 = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( ind == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { kolona = 0 ; while ( kolona < n ) { if ( mat [ i ] [ kolona ] == mat [ k ] [ kolona ] ) ind = 1 ; else { ind = 0 ; break ; } kolona ++ ; } if ( ind == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( h = 0 ; h < n ; h ++ ) { mat [ j ] [ h ] = mat [ j + 1 ] [ h ] ; } } m -- ; k -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { if ( ind1 == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { vrsta = 0 ; while ( vrsta < m ) { if ( mat [ vrsta ] [ i ] == mat [ vrsta ] [ k ] ) ind1 = 1 ; else { ind1 = 0 ; break ; } vrsta ++ ; } if ( ind1 == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( h = 0 ; h < m ; h ++ ) { mat [ h ] [ j ] == mat [ h ] [ j + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , mat [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 100 ] [ 100 ] , m , n , i , j , k , l , p , c , r , s ; p = 0 ; s = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } for ( i = 0 ; i < m ; i ++ ) { if ( p == 1 ) i -- ; for ( k = i + 1 ; k < m ; k ++ ) { c = 0 ; while ( c < n ) { if ( matrica [ i ] [ c ] == matrica [ k ] [ c ] ) p = 1 ; else { p = 0 ; break ; } c ++ ; } if ( p == 1 ) { for ( j = k ; j < m - 1 ; j ++ ) { for ( l = 0 ; l < n ; l ++ ) matrica [ j ] [ l ] = matrica [ j + 1 ] [ l ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { if ( s == 1 ) i -- ; for ( k = i + 1 ; k < n ; k ++ ) { r = 0 ; while ( r < m ) { if ( matrica [ r ] [ i ] == matrica [ r ] [ k ] ) s = 1 ; else { s = 0 ; break ; } r ++ ; } if ( s == 1 ) { for ( j = k ; j < n ; j ++ ) { for ( l = 0 ; l < m ; l ++ ) matrica [ l ] [ j ] == matrica [ l ] [ j + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
2981,92,92,0,68,A2016/Z3/Z3/student4959,A2016/Z3/Z3/student5961,"#include <stdio.h> #include <math.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , check , a , b , c , x , y ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || m < 1 || n > 200 || n < 1 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m > 200 || m < 1 || n > 200 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } x = m ; for ( i = 0 ; i < x ; i ++ ) { for ( j = i + 1 ; j < x ; j ++ ) { check = 1 ; for ( a = 0 ; a < n ; a ++ ) { if ( mat [ i ] [ a ] != mat [ j ] [ a ] ) { check = 0 ; break ; } } if ( check ) { for ( b = j ; b < x - 1 ; b ++ ) { for ( c = 0 ; c < n ; c ++ ) { mat [ b ] [ c ] = mat [ b + 1 ] [ c ] ; } } j -- ; x -- ; } } } y = n ; for ( j = 0 ; j < y ; j ++ ) { for ( i = j + 1 ; i < y ; i ++ ) { check = 1 ; for ( a = 0 ; a < x ; a ++ ) { if ( mat [ a ] [ i ] != mat [ a ] [ j ] ) { check = 0 ; break ; } } if ( check ) { for ( b = i ; b < y - 1 ; b ++ ) { for ( c = 0 ; c < x ; c ++ ) { mat [ c ] [ b ] = mat [ c ] [ b + 1 ] ; } } i -- ; y -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < x ; i ++ ) { for ( j = 0 ; j < y ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , matrica [ 200 ] [ 200 ] , i , j , k , e , f , jeste , m , n ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } m = m ; for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { jeste = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] != matrica [ j ] [ k ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = j ; e < m - 1 ; e ++ ) { for ( f = 0 ; f < n ; f ++ ) { matrica [ e ] [ f ] = matrica [ e + 1 ] [ f ] ; } } j -- ; m -- ; } } } n = n ; for ( j = 0 ; j < n ; j ++ ) { for ( i = j + 1 ; i < n ; i ++ ) { jeste = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ j ] != matrica [ k ] [ i ] ) { jeste = 0 ; break ; } } if ( jeste ) { for ( e = i ; e < n - 1 ; e ++ ) { for ( f = 0 ; f < m ; f ++ ) { matrica [ f ] [ e ] = matrica [ f ] [ e + 1 ] ; } } i -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
2984,94,94,0,120,A2016/Z4/Z1/student8797,A2016/Z4/Z1/student8753,"#include <stdio.h> int kolko ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { p ++ ; brojac ++ ; } return brojac ; } void f ( char * s , char * r ) { int duzina = kolko ( r ) ; char * s1 = s ; char * pomp = s ; while ( * s1 != '\0' ) { char * r2 = r ; char * p2 = s1 ; while ( ( ( * p2 == * r2 ) || ( * p2 == * r2 - 32 ) || ( * p2 == * r2 + 32 ) ) && * r2 != '\0' ) { p2 ++ ; r2 ++ ; if ( s1 == s ) { if ( * r2 == '\0' && ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) pomp = s1 ; while ( * ( pomp + duzina ) != '\0' ) { * pomp = * ( pomp + duzina ) ; pomp ++ ; } * pomp = * ( pomp + duzina ) ; } else if ( * r2 == '\0' && ( ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) && ! ( * ( s1 - 1 ) >= 'a' && * ( s1 - 1 ) <= 'z' ) && ! ( * ( s1 - 1 ) >= 'a' && * ( s1 - 1 ) <= 'z' ) ) { pomp = s1 ; while ( * ( pomp + duzina ) != '\0' ) { * pomp = * ( pomp + duzina ) ; pomp ++ ; } * pomp = * ( pomp + duzina ) ; } } s1 ++ ; } } char * izbaci_najcescu ( char * s ) { char * p = s ; char * k = s ; char * a = s ; char * b = s ; char * p1 = s ; int duzina = 0 , i = 0 , brojac = 0 ; char rijec [ 10000 ] ; char max_rijec [ 10000 ] ; int max = 0 ; int provjerim = kolko ( s ) ; if ( provjerim == 0 ) { return p ; } while ( * s != '\0' ) { k = s ; while ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) { if ( * s == '\0' ) break ; s ++ ; } if ( * s == '\0' ) { if ( k == p ) return p ; break ; } a = s ; b = s ; duzina = 0 ; brojac = 0 ; while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) { if ( * s == '\0' ) break ; s ++ ; } if ( b == p && * s == '\0' ) { f ( p , p ) ; return p ; } if ( * s == '\0' ) break ; i = 0 ; while ( i < s - a ) { * ( rijec + i ) = * b ; b ++ ; duzina ++ ; i ++ ; } rijec [ i ] = '\0' ; p1 = p ; while ( * p1 != '\0' ) { char * p2 = p1 ; char * r2 = rijec ; while ( ( ( * p2 == * r2 ) || ( * p2 == * r2 - 32 ) || ( * p2 == * r2 + 32 ) ) && * r2 != '\0' ) { p2 ++ ; r2 ++ ; if ( p1 == p ) { if ( * r2 == '\0' && ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) brojac ++ ; } else if ( * r2 == '\0' && ( ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) && ! ( * ( p1 - 1 ) >= 'a' && * ( p1 - 1 ) <= 'z' ) && ! ( * ( p1 - 1 ) >= 'a' && * ( p1 - 1 ) <= 'z' ) ) brojac ++ ; } p1 ++ ; } if ( brojac > max ) { max = brojac ; for ( i = 0 ; i < duzina ; i ++ ) { max_rijec [ i ] = rijec [ i ] ; } max_rijec [ i ] = '\0' ; } if ( * s == '\0' ) break ; s ++ ; } f ( p , max_rijec ) ; return p ; } int main ( ) { char s [ 100000 ] = { ""szzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttteeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrreeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeewwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwsqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqssssssssssssssssssssssssssssssssssssssssssssssssaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaasssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss"" } ; printf ( ""\nmodificiran niz glasi: |%s|"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> int broj_karaktera ( char * s ) { char * p = s ; int n = 0 ; while ( * p != '\0' ) { p ++ ; n ++ ; } return n ; } void izbacuje ( char * s , char * q ) { int duzina = broj_karaktera ( q ) ; char * s1 = s ; char * m = s ; while ( * s1 != '\0' ) { char * q2 = q ; char * p2 = s1 ; while ( ( ( * p2 == * q2 ) || ( * p2 == * q2 - 32 ) || ( * p2 == * q2 + 32 ) ) && * q2 != '\0' ) { p2 ++ ; q2 ++ ; if ( s1 == s ) { if ( * q2 == '\0' && ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) m = s1 ; while ( * ( m + duzina ) != '\0' ) { * m = * ( m + duzina ) ; m ++ ; } * m = * ( m + duzina ) ; } else if ( * q2 == '\0' && ( ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) && ! ( * ( s1 - 1 ) >= 'a' && * ( s1 - 1 ) <= 'z' ) && ! ( * ( s1 - 1 ) >= 'a' && * ( s1 - 1 ) <= 'z' ) ) { m = s1 ; while ( * ( m + duzina ) != '\0' ) { * m = * ( m + duzina ) ; m ++ ; } * m = * ( m + duzina ) ; } } s1 ++ ; } } char * izbaci_najcescu ( char * s ) { char * p = s ; char * a = s ; char * b = s ; char * c = s ; char * p1 = s ; int i = 0 , n = 0 , duzina = 0 , maks = 0 ; char tekst [ 100 ] ; char maksi_rijec [ 100 ] ; int broj = broj_karaktera ( s ) ; if ( broj == 0 ) { return p ; } while ( * s != '\0' ) { a = s ; while ( ! ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) ) { if ( * s == '\0' ) break ; s ++ ; } if ( * s == '\0' ) { if ( a == p ) return p ; break ; } b = s ; c = s ; while ( ( * s >= 'a' && * s <= 'z' ) || ( * s >= 'a' && * s <= 'z' ) ) { if ( * s == '\0' ) break ; s ++ ; } if ( c == p && * s == '\0' ) { izbacuje ( p , p ) ; return p ; } if ( * s == '\0' ) break ; while ( i < s - b ) { * ( tekst + i ) = * c ; c ++ ; duzina ++ ; i ++ ; } tekst [ i ] = '\0' ; p1 = p ; while ( * p1 != '\0' ) { char * p2 = p1 ; char * q2 = tekst ; while ( ( ( * p2 == * q2 ) || ( * p2 == * q2 - 32 ) || ( * p2 == * q2 + 32 ) ) && * q2 != '\0' ) { p2 ++ ; q2 ++ ; if ( p1 = p ) { if ( * q2 == '\0' && ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) n ++ ; } else if ( * q2 == '\0' && ( ! ( * p2 >= 'a' && * p2 <= 'z' ) && ! ( * p2 >= 'a' && * p2 <= 'z' ) ) && ! ( * ( p1 - 1 ) >= 'a' && * ( p1 - 1 ) <= 'z' ) && ! ( * ( p1 - 1 ) >= 'a' && * ( p1 - 1 ) <= 'z' ) ) n ++ ; } p1 ++ ; } if ( n > maks ) { maks = n ; for ( i = 0 ; i < duzina ; i ++ ) { maksi_rijec [ i ] = tekst [ i ] ; } maksi_rijec [ i ] = '\0' ; } if ( * s == '\0' ) break ; s ++ ; } izbacuje ( p , maksi_rijec ) ; return p ; } int main ( ) { char s [ 10000 ] = { "" "" } ; printf ( ""modificiran niz glasi: |%s|"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
2989,42,42,0,165,A2016/Z5/Z3/student1192,A2016/Z5/Z3/student7802,"#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 , k = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; k ++ ; } niz [ k ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null ) return 0 ; int kap = kapacitet ; int vel = sizeof ( struct cas ) ; int ucitano ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; fclose ( ulaz ) ; return ucitano ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } void ispisss ( ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; } void ispispr ( char * pr ) { printf ( ""%-10s"" , pr ) ; } void ispispraz ( int d ) { printf ( ""          "" ) ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; ispisss ( ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { ispispr ( raspored [ k ] . predmet ) ; break ; ispispraz ( 10 ) ; } if ( k == broj_casova ) ispispraz ( 10 ) ; } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { int sat = raspored [ i ] . pocetak . sati ; int min = raspored [ i ] . pocetak . minute ; printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( sat < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , sat ) ; if ( min < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , min ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)\n"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , j = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) j ++ ; if ( redni_broj == j ) { for ( ; i < broj_casova - 1 ; i ++ ) raspored [ i ] = raspored [ i + 1 ] ; break ; } } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 ; int sat1 = t2 . sati * 3600 ; int min = t1 . minute * 60 ; int min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; if ( d1 > d2 ) return 1 ; if ( d1 < d2 ) return - 1 ; if ( d1 == d2 ) return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) == 1 && drugi == 1 && ( cas . dan_u_sedmici == raspored [ i ] . dan_u_sedmici ) ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } int prazan ( struct cas cas ) { if ( cas . predmet == """" ) return 0 ; else return 1 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; if ( trajanje < 0 || trajanje > 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; int praz = prazan ( cas ) ; struct cas pom = { """" , 0 , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null ) return 0 ; int kap = broj_casova ; int vel = sizeof ( struct cas ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; return 1 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; char predmet [ 10 ] ; printf ( ""unesite dan (1=ponedjeljak, "" ) ; printf ( ""2=utorak..., "" ) ; printf ( ""6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""izaberite koji cas zelite promijeniti:  "" ) ; scanf ( ""%d"" , & redni ) ; if ( redni > 100 || redni < 0 ) goto preskok ; printf ( ""naziv predmeta: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; char * q ; if ( opcija != 0 ) q = promjena . predmet ; char * p ; if ( opcija != 0 ) p = predmet ; preskok : strcpy ( q , p ) ; char znak ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; scanf ( ""%d%c%d%d%c%d"" , & promjena . pocetak . sati , & znak , & promjena . pocetak . minute , & promjena . kraj . sati , & znak , & promjena . kraj . minute ) ; promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""izaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( "" cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; char unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( velicina < 0 ) return znak ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; return znak ; } void ocisti ( char znak ) { while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano1 = fread ( raspored , sizeof ( struct cas ) , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; } int mmm ( int d ) { if ( d == 0 ) return - 1 ; return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int brojac = 1 ; int i , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { brojac ++ ; if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } max = max - mmm ( raspored [ indexmaxa ] . kraj . minute ) ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; return min ; } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; if ( sat + min + t1 . sekunde > sat1 + min1 + t2 . sekunde ) return 1 ; if ( sat + min + t1 . sekunde < sat1 + min1 + t2 . sekunde ) return - 1 ; if ( sat + min + t1 . sekunde == sat1 + min1 + t2 . sekunde ) return 0 ; } int prvi ( struct cas raspored [ ] , int casova ) { int i , j = 25 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < j ) j = raspored [ i ] . pocetak . sati ; } return j ; } int zadnji ( struct cas raspored [ ] , int casova ) { int i , j = 0 , index = 0 ; for ( i = 0 ; i < casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati > j ) j = raspored [ i ] . kraj . sati ; index = i ; } if ( raspored [ index ] . kraj . minute == 0 ) j -- ; return j ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k , flag2 = 1 , index_min = - 1 ; int last = zadnji ( raspored , broj_casova ) ; int first = prvi ( raspored , broj_casova ) ; char sedmica [ ] [ 7 ] = { ""pon"" , ""uto"" , ""sri"" , ""cet"" , ""pet"" , ""sub"" } ; char sati [ ] [ 25 ] = { ""0:00"" , ""1:00"" , ""2:00"" , ""3:00"" , ""4:00"" , ""5:00"" , ""6:00"" , ""7:00"" , ""8:00"" , ""9:00"" , ""10:00"" , ""11:00"" , ""12:00"" , ""13:00"" , ""14:00"" , ""15:00"" , ""16:00"" , ""17:00"" , ""18:00"" , ""19:00"" , ""20:00"" , ""21:00"" , ""22:00"" , ""23:00"" } ; printf ( ""\n"" ) ; printf ( ""%-7s"" , "" "" ) ; for ( i = 0 ; i < 6 ; i ++ ) { printf ( ""%-10s"" , sedmica [ i ] ) ; } printf ( ""\n"" ) ; for ( i = first ; i - 1 < last ; i ++ ) { printf ( ""%-7s"" , sati [ i ] ) ; for ( k = 1 ; k < 7 ; k ++ ) { index_min = - 1 ; flag2 = 1 ; for ( j = 0 ; j < broj_casova ; j ++ ) { if ( raspored [ j ] . dan_u_sedmici == k ) { if ( ( raspored [ j ] . pocetak . sati <= i ) && ( raspored [ j ] . kraj . sati >= i ) && ! ( raspored [ j ] . kraj . sati == i && raspored [ j ] . kraj . minute == 0 ) ) { if ( flag2 ) { index_min = j ; flag2 = 0 ; } else if ( poredivrj ( raspored [ j ] . pocetak , raspored [ index_min ] . pocetak ) == - 1 ) { index_min = j ; } } } } if ( index_min == - 1 ) { printf ( ""%-10s"" , "" "" ) ; } else if ( index_min != - 1 ) { printf ( ""%-10s"" , raspored [ index_min ] . predmet ) ; } } printf ( ""\n"" ) ; } } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n"" ) ; printf ( ""%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; printf ( ""%02d:"" , raspored [ i ] . pocetak . sati ) ; printf ( ""%02d-"" , raspored [ i ] . pocetak . minute ) ; printf ( ""%02d:"" , raspored [ i ] . kraj . sati ) ; printf ( ""%02d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i , k = 0 , n = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; n ++ ; } if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } if ( n > 0 ) break ; return ; } } } int minute ( int min , int sati ) { return min + sati * 60 ; } int prekl ( int minpoc1 , int minkraj1 , int minpoc2 , int minkraj2 ) { return ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; for ( i = 0 ; i < broj_casova ; i ++ ) { int vr = prekl ( minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) , minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) , minute ( cas . pocetak . minute , cas . pocetak . sati ) , minute ( cas . kraj . minute , cas . kraj . sati ) ) ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minute ( cas . pocetak . minute , cas . pocetak . sati ) == minute ( raspored [ i ] . pocetak . minute , raspored [ i ] . pocetak . sati ) || minute ( raspored [ i ] . kraj . minute , raspored [ i ] . kraj . sati ) == minute ( cas . kraj . minute , cas . kraj . sati ) ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && vr == 1 ) return 1 ; } return 0 ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 ) return 0 ; int i , j , preklop ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; cas . pocetak . minute = 0 ; cas . kraj . minute = 0 ; cas . pocetak . sekunde = 0 ; cas . pocetak . minute = 0 ; strcpy ( cas . predmet , predmet ) ; preklop = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i , redni = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) redni ++ ; if ( redni_broj == redni ) raspored [ i ] = promjena ; } } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova > 0 ) return 1 ; else return 0 ; } int main ( ) { int opcija , broj_casova = 0 ; struct cas raspored [ kapacitet ] ; ucitaj_datoteku ( raspored ) ; do { printf ( ""1) ispis rasporeda\n"" ) ; printf ( ""2) dodavanje casa\n"" ) ; printf ( ""3) promjena casa\n"" ) ; printf ( ""4) brisanje casa\n"" ) ; printf ( ""0) kraj rada\n"" ) ; printf ( ""izaberite opciju: "" ) ; scanf ( ""%d"" , & opcija ) ; if ( opcija == 2 ) { int br_casova , dodan = 0 ; char predmet [ 10 ] ; printf ( ""unesite naziv predmeta: unesite broj casova: "" ) ; ocisti ( unesi ( predmet , 10 ) ) ; scanf ( ""%d"" , & br_casova ) ; dodan = dodaj_cas ( raspored , broj_casova , predmet , br_casova ) ; switch ( dodan ) { case 1 : broj_casova ++ ; break ; default : printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br_casova ) ; } } if ( opcija == 0 ) zapisi_datoteku ( raspored , broj_casova ) ; if ( opcija == 1 ) ispis_rasporeda ( raspored , broj_casova ) ; if ( opcija == 3 ) { struct cas promjena ; int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , broj_casova , dan ) ; promjena . dan_u_sedmici = dan ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & redni ) ; printf ( ""naziv predmeta: "" ) ; char predmet [ 10 ] ; if ( opcija != 0 ) ocisti ( unesi ( predmet , 10 ) ) ; char * q = promjena . predmet , * p = predmet ; char znak ; strcpy ( q , p ) ; printf ( ""vrijeme pocetka: "" ) ; scanf ( ""%d"" , & promjena . pocetak . sati ) ; scanf ( ""%c"" , & znak ) ; scanf ( ""%d"" , & promjena . pocetak . minute ) ; printf ( ""vrijeme zavrsetka: "" ) ; scanf ( ""%d%c"" , & promjena . kraj . sati , & znak ) ; scanf ( ""%d"" , & promjena . kraj . minute ) ; if ( opcija != 0 ) promijeni_cas ( raspored , broj_casova , dan , redni , promjena ) ; } if ( opcija == 4 ) { int dan , redni ; printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; if ( opcija != 0 ) { ispisi_dan ( raspored , broj_casova , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & redni ) ; obrisi_cas ( raspored , broj_casova , dan , redni ) ; broj_casova = broj_casova - 1 ; printf ( ""cas obrisan\n"" ) ; } } } while ( opcija != 0 ) ; return 0 ; }"
2999,90,90,0,75,A2016/Z3/Z3/student6999,A2016/Z3/Z3/student2526,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , m , n , brojac = 0 , k = 0 , x , y , privremena ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] == mat [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( x = j + 1 ; x < m ; x ++ ) { for ( y = 0 ; y < n ; y ++ ) { privremena = mat [ x - 1 ] [ y ] ; mat [ x - 1 ] [ y ] = mat [ x ] [ y ] ; mat [ x ] [ y ] = privremena ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] == mat [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( x = j + 1 ; x < n ; x ++ ) { for ( y = 0 ; y < m ; y ++ ) { privremena = mat [ y ] [ x - 1 ] ; mat [ y ] [ x - 1 ] = mat [ y ] [ x ] ; mat [ y ] [ x ] = privremena ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3010,96,96,0,18,A2016/Z1/Z4/student7507,A2016/Z1/Z4/student5162,"#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { for ( i = 0 ; i < ( 2 * n ) ; i ++ ) { printf ( ""*"" ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 4 * n - 3 ) ; j ++ ) { if ( i == j || i + j == 2 * n || j - i == ( 2 * n - 2 ) || ( i + j ) == ( 4 * n - 2 ) ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int i , j , n ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { for ( i = 0 ; i < ( 2 * n ) ; i ++ ) { printf ( ""*"" ) ; } } for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= ( 4 * n - 3 ) ; j ++ ) { if ( i == j || i + j == 2 * n || j - i == ( 2 * n - 2 ) || ( i + j ) == ( 4 * n - 2 ) ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3029,95,95,0,75,A2016/Z3/Z2/student6956,A2016/Z3/Z2/student3108,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int zbir ( int x ) { int sabrani = 0 ; if ( x < 0 ) x *= ( - 1 ) ; while ( x > 0 ) { sabrani += x % 10 ; x /= 10 ; } return sabrani ; } void ubaci ( int * niz , int velicina ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < velicina ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = zbir ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * velicina ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int izbaci ( int * niz , int velicina ) { int i , j ; for ( i = 0 ; i < velicina ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < velicina - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; velicina -- ; i -- ; } } return velicina ; } int main ( ) { int i , niz [ 20 ] , n = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; return 0 ; }","#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }"
3047,90,90,0,55,A2016/Z3/Z3/student5624,A2016/Z3/Z3/student3329,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , i , j , k , l , m , n , pret , pret1 , p ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { pret = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( l = k ; l < m - 1 ; l ++ ) { for ( p = 0 ; p < n ; p ++ ) matrica [ l ] [ p ] = matrica [ l + 1 ] [ p ] ; } m -- ; k -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( k = i + 1 ; k < n ; k ++ ) { pret1 = 1 ; for ( j = 0 ; j < m ; j ++ ) { if ( matrica [ j ] [ i ] != matrica [ j ] [ k ] ) pret1 = 0 ; } if ( pret1 == 1 ) { for ( l = k ; l < n - 1 ; l ++ ) { for ( p = 0 ; p < m ; p ++ ) matrica [ p ] [ l ] = matrica [ p ] [ l + 1 ] ; } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] ; int m , n , i , j , k , m , n , checker ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( k = i + 1 ; k < m ; k ++ ) { checker = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ k ] [ j ] ) { checker = 0 ; break ; } } if ( checker ) { for ( m = k ; m < m - 1 ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { mat [ m ] [ n ] = mat [ m + 1 ] [ n ] ; } } m -- ; k -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( k = j + 1 ; k < n ; k ++ ) { checker = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ k ] ) { checker = 0 ; break ; } } if ( checker ) { for ( n = k ; n < n - 1 ; n ++ ) { for ( m = 0 ; m < m ; m ++ ) { mat [ m ] [ n ] = mat [ m ] [ n + 1 ] ; } } n -- ; k -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3074,97,97,0,25,A2016/Z1/Z4/student8497,A2016/Z1/Z4/student5649,"#include <stdio.h> int main ( ) { int i , j , n ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 1 ; i <= n ; i ++ ) { for ( j = 1 ; j <= 4 * n - 3 ; j ++ ) { if ( j == i || j == 2 * n - i || j == 2 * n - 2 + i || j == 4 * n - 2 - i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }","#include <stdio.h> int main ( ) { int n , j , i ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 50 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; } else { for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= 4 * n - 4 ; j ++ ) { if ( i == j || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) { printf ( ""*"" ) ; } else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } } return 0 ; }"
3075,71,71,0,73,A2016/Z3/Z2/student5612,A2016/Z3/Z2/student3732,"#include <stdio.h> #include<stdlib.h> #define velicina 10 #define velicina_2 20 void ubaci ( int * niz , int velicina ) { int i , k ; int b1 ; int b2 ; int b3 = 0 ; for ( k = velicina - 1 ; k >= 0 ; k -- ) { niz [ 2 * k ] = niz [ k ] ; } for ( i = 0 ; i < 2 * velicina ; i = i + 2 ) { b1 = abs ( niz [ i ] ) ; if ( b1 < 10 ) b3 = b1 ; else { do { b2 = b1 % 10 ; b3 = b3 + b2 ; b1 = b1 / 10 ; } while ( b1 != 0 ) ; } niz [ i + 1 ] = b3 ; b3 = 0 ; } } int izbaci ( int * niz , int velicina ) { int i ; int k ; int x = 1 ; int y = 1 ; int z ; int u ; for ( i = 0 ; i < velicina ; i ++ ) { x = 1 ; y = 1 ; for ( k = 1 ; k < 10000 ; k ++ ) { if ( k == 1 ) z = 1 ; else { z = x + y ; x = y ; y = z ; } if ( niz [ i ] == z ) { for ( u = i ; u < velicina - 1 ; u ++ ) { niz [ u ] = niz [ u + 1 ] ; } velicina -- ; i -- ; break ; } } } return velicina ; } int main ( ) { int niz [ 2 * velicina ] ; int i ; int u ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < velicina ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; u = izbaci ( niz , velicina_2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < u ; i ++ ) { if ( i == u - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include<stdlib.h> #include <math.h> #define broje_elemenata 10 void ubaci ( int * niz , int duzina_niza ) { int i , broj , broj2 = 0 , cifra ; for ( i = duzina_niza - 1 ; i >= 0 ; i -- ) { niz [ 2 * i ] = niz [ i ] ; } for ( i = 0 ; i < 2 * duzina_niza ; i += 2 ) { broj = abs ( niz [ i ] ) ; if ( broj < 10 ) { broj2 = broj ; } else { do { cifra = broj % 10 ; broj2 = broj2 + cifra ; broj = broj / 10 ; } while ( broj != 0 ) ; } niz [ i + 1 ] = broj2 ; broj2 = 0 ; } } int izbaci ( int * niz , int duzina_niza ) { int prvi , drugi , treci ; int i , j , k ; for ( k = 0 ; k < duzina_niza ; k ++ ) { prvi = 0 ; drugi = 1 ; for ( i = 1 ; i < 10000 ; i ++ ) { if ( i == 1 ) { treci = 1 ; } else { treci = prvi + drugi ; prvi = drugi ; drugi = treci ; } if ( niz [ k ] == treci ) { for ( j = k ; j < duzina_niza - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } duzina_niza -- ; k -- ; break ; } } } return duzina_niza ; } int main ( ) { int niz [ 2 * broje_elemenata ] , i ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , broje_elemenata ) ; int funkcija ; funkcija = izbaci ( niz , 2 * broje_elemenata ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < funkcija ; i ++ ) { if ( i == funkcija - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
3086,81,81,0,89,A2016/Z3/Z2/student8187,A2016/Z3/Z2/student8753,"#include <stdio.h> #include <stdlib.h> int suma ( int a ) { int s = 0 ; while ( a > 0 ) { s = s + a % 10 ; a = a / 10 ; } return s ; } void ubaci ( int niz [ ] , int velicina ) { int sklj ; int * s , * b ; int i = 2 * velicina ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { b = niz + i * 2 ; s = niz + i ; * b = * s ; } for ( i = 0 ; i < velicina * 2 ; i = i + 2 ) { b = niz + i ; s = b + 1 ; sklj = abs ( * b ) ; * s = suma ( sklj ) ; } } int izbaci ( int niz [ ] , int velicina ) { int fibonacijev [ 1000 ] = { 0 } ; int max , b = 2 , i , j , sklj , v2 ; max = niz [ 0 ] ; for ( i = 0 ; i < velicina ; i ++ ) { if ( max < niz [ i ] ) max = niz [ i ] ; } fibonacijev [ 0 ] = 1 ; fibonacijev [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { fibonacijev [ i ] = fibonacijev [ i - 1 ] + fibonacijev [ i - 2 ] ; if ( fibonacijev [ i ] > max ) break ; else ( b ++ ) ; } v2 = velicina ; for ( i = 0 ; i < v2 ; i ++ ) { for ( j = 0 ; j < b ; j ++ ) { if ( niz [ i ] == fibonacijev [ j ] ) { for ( sklj = i ; sklj < v2 - 1 ; sklj ++ ) niz [ sklj ] = niz [ sklj + 1 ] ; v2 -- ; i -- ; break ; } } } return v2 ; } int main ( ) { int niz [ 20 ] , i , velicina = 10 , izbac ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , velicina ) ; velicina = velicina * 2 ; izbac = izbaci ( niz , velicina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izbac - 1 ; i ++ ) printf ( ""%d, "" , niz [ i ] ) ; printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int zbir ( int a ) { int x = 0 ; while ( a > 0 ) { x = x + a % 10 ; a = a / 10 ; } return x ; } void ubaci ( int niz [ ] , int duzina ) { int * q , * p ; int i = 2 * duzina ; int y ; for ( i = duzina - 1 ; i >= 0 ; i -- ) { p = niz + i * 2 ; q = niz + i ; * p = * q ; } for ( i = 0 ; i < 2 * duzina ; i += 2 ) { p = niz + i ; q = p + 1 ; y = abs ( * p ) ; * q = zbir ( y ) ; } } int izbaci ( int niz [ ] , int duzina ) { int fbn [ 1000 ] = { 0 } ; int max , x = 2 , i , j , k , vel ; max = niz [ 0 ] ; for ( i = 0 ; i < duzina ; i ++ ) { if ( max < niz [ i ] ) max = niz [ i ] ; fbn [ 0 ] = 1 ; fbn [ 1 ] = 1 ; } for ( i = 2 ; i < 1000 ; i ++ ) { fbn [ i ] = fbn [ i - 1 ] + fbn [ i - 2 ] ; if ( fbn [ i ] > max ) break ; else x ++ ; } vel = duzina ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = 0 ; j < x ; j ++ ) { if ( niz [ i ] == fbn [ j ] ) { for ( k = i ; k < vel - 1 ; k ++ ) { niz [ k ] = niz [ k + 1 ] ; vel -- ; i -- ; break ; } } } } return vel ; } int main ( ) { int niz [ 20 ] , duzina = 10 , i , izbacii ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < duzina ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , duzina ) ; duzina *= 2 ; izbacii = izbaci ( niz , duzina ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izbacii - 1 ; i ++ ) { printf ( ""%d,"" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }"
3096,99,99,0,149,A2016/Z5/Z1/student7125,A2016/Z5/Z1/student2254,"#include <stdio.h> #include <string.h> #include <math.h> #define epsilon 0.00001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int genijalci ( struct student student [ ] , int vel , float prosjek ) ; int main ( ) { int vel ; struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; } int genijalci ( struct student student [ ] , int vel , float prosjek ) { int i , j , k , za_ispis , temp [ 50 ] , max , max_tmp1 = 0 , max_tmp2 = 0 , br_elemenata , br_ocjena_najboljih [ 3 ] = { 0 } ; float prosjek_studenta [ 50 ] = { 0 } ; struct student najbolji [ 3 ] , student_temp ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = 0 ; j < student [ i ] . br_ocjena ; j ++ ) if ( student [ i ] . ocjene [ j ] > 4 && student [ i ] . ocjene [ j ] < 11 ) { prosjek_studenta [ i ] += student [ i ] . ocjene [ j ] ; if ( student [ i ] . ocjene [ j ] == 5 ) { prosjek_studenta [ i ] = 5 * student [ i ] . br_ocjena ; break ; } } if ( student [ i ] . br_ocjena != 0 ) prosjek_studenta [ i ] /= student [ i ] . br_ocjena ; else prosjek_studenta [ i ] = 5.0 ; } for ( i = 0 ; i < vel ; i ++ ) if ( prosjek_studenta [ i ] < prosjek ) { for ( j = i ; j < vel - 1 ; j ++ ) { student [ j ] = student [ j + 1 ] ; prosjek_studenta [ j ] = prosjek_studenta [ j + 1 ] ; } vel -- ; i -- ; } k = 0 ; for ( i = 0 ; i < vel ; i ++ ) { max = 0 ; if ( k == 3 ) break ; if ( i == vel ) break ; for ( j = vel - 1 ; j > i ; j -- ) { if ( prosjek_studenta [ i ] < prosjek_studenta [ j ] ) { if ( i != 0 && ( j == max_tmp1 || j == max_tmp2 ) ) continue ; max = j ; } else if ( fabs ( prosjek_studenta [ i ] - prosjek_studenta [ j ] ) < epsilon ) { if ( strcmp ( student [ i ] . prezime , student [ j ] . prezime ) > 0 ) { if ( i != 0 && ( j == max_tmp1 || j == max_tmp2 ) ) continue ; max = j ; } else if ( strcmp ( student [ i ] . prezime , student [ j ] . prezime ) == 0 ) if ( strcmp ( student [ i ] . ime , student [ j ] . ime ) > 0 ) { if ( i != 0 && ( j == max_tmp1 || j == max_tmp2 ) ) continue ; max = j ; } } } najbolji [ k ] = student [ max ] ; if ( i == 0 ) max_tmp1 = max ; if ( i == 1 ) max_tmp2 = max ; br_ocjena_najboljih [ k ] = student [ max ] . br_ocjena ; k ++ ; } br_elemenata = k ; for ( i = 0 ; i < vel ; i ++ ) prosjek_studenta [ i ] = 0 ; for ( i = 0 ; i < br_elemenata ; i ++ ) { for ( j = 0 ; j < br_ocjena_najboljih [ i ] ; j ++ ) { prosjek_studenta [ i ] += najbolji [ i ] . ocjene [ j ] ; } prosjek_studenta [ i ] /= br_ocjena_najboljih [ i ] ; } for ( i = 0 ; i < br_elemenata ; i ++ ) for ( j = br_elemenata - 1 ; j > i ; j -- ) { if ( prosjek_studenta [ i ] < prosjek_studenta [ j ] ) { student_temp = najbolji [ i ] ; najbolji [ i ] = najbolji [ j ] ; najbolji [ j ] = student_temp ; max = j ; } else if ( fabs ( prosjek_studenta [ i ] - prosjek_studenta [ j ] ) < epsilon ) { if ( strcmp ( najbolji [ i ] . prezime , najbolji [ j ] . prezime ) > 0 ) { student_temp = najbolji [ i ] ; najbolji [ i ] = najbolji [ j ] ; najbolji [ j ] = student_temp ; } else if ( strcmp ( najbolji [ i ] . prezime , najbolji [ j ] . prezime ) == 0 ) { if ( strcmp ( najbolji [ i ] . ime , najbolji [ j ] . ime ) > 0 ) { student_temp = najbolji [ i ] ; najbolji [ i ] = najbolji [ j ] ; najbolji [ j ] = student_temp ; } } } } for ( k = 0 ; k < br_elemenata ; k ++ ) printf ( ""%s %s\n"" , najbolji [ k ] . prezime , najbolji [ k ] . ime ) ; return vel ; }","#include <stdio.h> #include <string.h> #include <math.h> #define epsilon 0.00001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int genijalci ( struct student student [ ] , int vel , float prosjek ) ; int main ( ) { int vel ; struct student studenti [ 6 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""meho"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; return 0 ; } int genijalci ( struct student student [ ] , int vel , float prosjek ) { int i , j , k , za_ispis , temp [ 50 ] , max , max_tmp1 = 0 , max_tmp2 = 0 , br_elemenata , br_ocjena_najboljih [ 3 ] = { 0 } ; float prosjek_studenta [ 50 ] = { 0 } ; struct student najbolji [ 3 ] , student_temp ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = 0 ; j < student [ i ] . br_ocjena ; j ++ ) if ( student [ i ] . ocjene [ j ] > 4 && student [ i ] . ocjene [ j ] < 11 ) { prosjek_studenta [ i ] += student [ i ] . ocjene [ j ] ; if ( student [ i ] . ocjene [ j ] == 5 ) { prosjek_studenta [ i ] = 5 * student [ i ] . br_ocjena ; break ; } } if ( student [ i ] . br_ocjena != 0 ) prosjek_studenta [ i ] /= student [ i ] . br_ocjena ; else prosjek_studenta [ i ] = 5.0 ; } for ( i = 0 ; i < vel ; i ++ ) if ( prosjek_studenta [ i ] < prosjek ) { for ( j = i ; j < vel - 1 ; j ++ ) { student [ j ] = student [ j + 1 ] ; prosjek_studenta [ j ] = prosjek_studenta [ j + 1 ] ; } vel -- ; i -- ; } k = 0 ; for ( i = 0 ; i < vel ; i ++ ) { max = 0 ; if ( k == 3 ) break ; if ( i == vel ) break ; for ( j = vel - 1 ; j > i ; j -- ) { if ( prosjek_studenta [ i ] < prosjek_studenta [ j ] ) { if ( i != 0 && ( j == max_tmp1 || j == max_tmp2 ) ) continue ; max = j ; } else if ( fabs ( prosjek_studenta [ i ] - prosjek_studenta [ j ] ) < epsilon ) { if ( strcmp ( student [ i ] . prezime , student [ j ] . prezime ) > 0 ) { if ( i != 0 && ( j == max_tmp1 || j == max_tmp2 ) ) continue ; max = j ; } else if ( strcmp ( student [ i ] . prezime , student [ j ] . prezime ) == 0 ) if ( strcmp ( student [ i ] . ime , student [ j ] . ime ) > 0 ) { if ( i != 0 && ( j == max_tmp1 || j == max_tmp2 ) ) continue ; max = j ; } } } najbolji [ k ] = student [ max ] ; if ( i == 0 ) max_tmp1 = max ; if ( i == 1 ) max_tmp2 = max ; br_ocjena_najboljih [ k ] = student [ max ] . br_ocjena ; k ++ ; } br_elemenata = k ; for ( i = 0 ; i < vel ; i ++ ) prosjek_studenta [ i ] = 0 ; for ( i = 0 ; i < br_elemenata ; i ++ ) { for ( j = 0 ; j < br_ocjena_najboljih [ i ] ; j ++ ) { prosjek_studenta [ i ] += najbolji [ i ] . ocjene [ j ] ; } prosjek_studenta [ i ] /= br_ocjena_najboljih [ i ] ; } for ( i = 0 ; i < br_elemenata ; i ++ ) for ( j = br_elemenata - 1 ; j > i ; j -- ) { if ( prosjek_studenta [ i ] < prosjek_studenta [ j ] ) { student_temp = najbolji [ i ] ; najbolji [ i ] = najbolji [ j ] ; najbolji [ j ] = student_temp ; max = j ; } else if ( fabs ( prosjek_studenta [ i ] - prosjek_studenta [ j ] ) < epsilon ) { if ( strcmp ( najbolji [ i ] . prezime , najbolji [ j ] . prezime ) > 0 ) { student_temp = najbolji [ i ] ; najbolji [ i ] = najbolji [ j ] ; najbolji [ j ] = student_temp ; } else if ( strcmp ( najbolji [ i ] . prezime , najbolji [ j ] . prezime ) == 0 ) { if ( strcmp ( najbolji [ i ] . ime , najbolji [ j ] . ime ) > 0 ) { student_temp = najbolji [ i ] ; najbolji [ i ] = najbolji [ j ] ; najbolji [ j ] = student_temp ; } } } } for ( k = 0 ; k < br_elemenata ; k ++ ) printf ( ""%s %s\n"" , najbolji [ k ] . prezime , najbolji [ k ] . ime ) ; return vel ; }"
3106,98,98,0,70,A2016/Z3/Z1/student8794,A2016/Z3/Z1/student4415,"#include <stdio.h> int prost ( int a ) { int x = 1 , i ; if ( a == 1 ) return 0 ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { x = 0 ; break ; } } if ( x ) return 1 ; else return 0 ; } int daj_prost ( ) { static int prost_broj = 2 ; while ( 1 ) { if ( prost ( prost_broj ) ) break ; else prost_broj ++ ; } return prost_broj ++ ; } int main ( ) { int a , b , prost , suma = 0 ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj."" ) ; else if ( a >= b ) printf ( ""a nije manje od b."" ) ; else if ( b < 1 ) printf ( ""b nije prirodan broj."" ) ; } while ( a >= b || a < 1 || b < 1 ) ; while ( 1 ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) suma = suma + prost ; if ( prost >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int prost ( int a ) { int x = 1 , i ; if ( a == 1 ) return 0 ; for ( i = 2 ; i < a ; i ++ ) { if ( a % i == 0 ) { x = 0 ; break ; } } if ( x ) return 1 ; else return 0 ; } int daj_prost ( ) { static int prost_broj = 2 ; while ( 1 ) { if ( prost ( prost_broj ) ) break ; else prost_broj ++ ; } return prost_broj ++ ; } int main ( ) { int a , b , prost , suma = 0 ; do { printf ( ""\nunesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) printf ( ""a nije prirodan broj."" ) ; else if ( a >= b ) printf ( ""a nije manje od b."" ) ; else if ( b < 1 ) printf ( ""b nije prirodan broj."" ) ; } while ( a >= b || a < 1 || b < 1 ) ; while ( 1 ) { prost = daj_prost ( ) ; if ( prost > a && prost < b ) suma = suma + prost ; if ( prost >= b ) break ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
3113,97,97,0,48,A2016/Z1/Z4/student7735,A2016/Z1/Z4/student7496,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
3124,98,98,0,33,A2016/Z2/Z3/student6042,A2016/Z2/Z3/student7080,"#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , n , x , y ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } greska_1 : printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; goto greska_1 ; } for ( i = 1 ; i <= n ; i ++ ) { greska_2 : printf ( ""unesite %d. tacku: "" , i ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x >= 20 || y < 0 || y >= 20 ) { printf ( ""pogresan unos\n"" ) ; goto greska_2 ; } mat [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { char mat [ 20 ] [ 20 ] ; int i , j , n , x , y ; for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { mat [ i ] [ j ] = ' ' ; } } greska_1 : printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 10 ) { printf ( ""pogresan unos\n"" ) ; goto greska_1 ; } for ( i = 1 ; i <= n ; i ++ ) { greska_2 : printf ( ""unesite %d. tacku: "" , i ) ; scanf ( ""%d %d"" , & x , & y ) ; if ( x < 0 || x >= 20 || y < 0 || y >= 20 ) { printf ( ""pogresan unos\n"" ) ; goto greska_2 ; } mat [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3127,99,99,0,123,A2016/Z4/Z1/student1192,A2016/Z4/Z1/student8357,"#include <stdio.h> #include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * rijec1 , char * rijec2 , int velicina1 , int velicina2 ) { int i ; char * pokazivac1 , * pokazivac2 ; pokazivac1 = rijec1 ; pokazivac2 = rijec2 ; if ( velicina1 != velicina2 ) return 0 ; else { for ( i = 0 ; i < velicina1 - 1 ; i ++ ) { if ( * ( pokazivac1 + i ) >= 'a' && * ( pokazivac1 + i ) <= 'z' ) { if ( * ( pokazivac1 + i ) + 32 != * ( pokazivac2 + i ) ) return 0 ; continue ; } if ( * ( pokazivac2 + i ) >= 'a' && * ( pokazivac2 + i ) <= 'z' ) { if ( * ( pokazivac1 + i ) != * ( pokazivac2 + i ) + 32 ) return 0 ; continue ; } if ( * ( pokazivac2 + i ) >= 'a' && * ( pokazivac2 + i ) <= 'z' && * ( pokazivac1 + i ) >= 'a' && * ( pokazivac1 + i ) <= 'z' ) { if ( * ( pokazivac1 + i ) + 32 != * ( pokazivac2 + i ) + 32 ) return 0 ; continue ; } if ( * ( pokazivac1 + i ) != * ( pokazivac2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * string ) { char * reset , * pok [ 100 ] ; int i = 0 , j = 0 , max = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 100 ] = { 0 } ; reset = string ; pok [ j ] = string ; if ( * string == '\0' ) return 0 ; while ( * string != '\0' ) { if ( ( * string > 31 && * string < 'a' ) || ( * string > 'z' && * string < 'a' ) || ( * string > 'z' && * string < 127 ) ) { brojac_rijeci ++ ; do { string ++ ; } while ( ( * string > 31 && * string < 'a' ) || ( * string > 'z' && * string < 'a' ) || ( * string > 'z' && * string < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = string ; continue ; } brojac_slova [ i ] ++ ; string ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , pok [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pok [ max ] , pok [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { string = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * string = '\0' ; break ; } while ( * string != '\0' ) { * string = * ( string + brojac_slova [ i ] ) ; if ( * string == '\0' ) break ; string ++ ; } do { pok [ i ] ++ ; } while ( ( * string > 31 && * string < 'a' ) || ( * string > 'z' && * string < 'a' ) || ( * string > 'z' && * string < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac_slova [ i ] ; } } } string = pok [ max ] ; while ( * string != '\0' ) { * string = * ( string + brojac_slova [ max ] ) ; if ( * string == '\0' ) break ; string ++ ; } return reset ; } int main ( ) { char string [ ] = ""you ____will---never,never,!!.never walk alone,....alone"" ; printf ( ""%s"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * rijec1 , char * rijec2 , int velicina1 , int velicina2 ) { int i ; char * pokazivac1 , * pokazivac2 ; pokazivac1 = rijec1 ; pokazivac2 = rijec2 ; if ( velicina1 != velicina2 ) return 0 ; else { for ( i = 0 ; i < velicina1 - 1 ; i ++ ) { if ( * ( pokazivac1 + i ) >= 'a' && * ( pokazivac1 + i ) <= 'z' ) { if ( * ( pokazivac1 + i ) + 32 != * ( pokazivac2 + i ) ) return 0 ; continue ; } if ( * ( pokazivac2 + i ) >= 'a' && * ( pokazivac2 + i ) <= 'z' ) { if ( * ( pokazivac1 + i ) != * ( pokazivac2 + i ) + 32 ) return 0 ; continue ; } if ( * ( pokazivac2 + i ) >= 'a' && * ( pokazivac2 + i ) <= 'z' && * ( pokazivac1 + i ) >= 'a' && * ( pokazivac1 + i ) <= 'z' ) { if ( * ( pokazivac1 + i ) + 32 != * ( pokazivac2 + i ) + 32 ) return 0 ; continue ; } if ( * ( pokazivac1 + i ) != * ( pokazivac2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * string ) { char * reset , * pok [ 100 ] ; int i = 0 , j = 0 , max = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 100 ] = { 0 } ; reset = string ; pok [ j ] = string ; if ( * string == '\0' ) return 0 ; while ( * string != '\0' ) { if ( ( * string > 31 && * string < 'a' ) || ( * string > 'z' && * string < 'a' ) || ( * string > 'z' && * string < 127 ) ) { brojac_rijeci ++ ; do { string ++ ; } while ( ( * string > 31 && * string < 'a' ) || ( * string > 'z' && * string < 'a' ) || ( * string > 'z' && * string < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = string ; continue ; } brojac_slova [ i ] ++ ; string ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , pok [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pok [ max ] , pok [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { string = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * string = '\0' ; break ; } while ( * string != '\0' ) { * string = * ( string + brojac_slova [ i ] ) ; if ( * string == '\0' ) break ; string ++ ; } do { pok [ i ] ++ ; } while ( ( * string > 31 && * string < 'a' ) || ( * string > 'z' && * string < 'a' ) || ( * string > 'z' && * string < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac_slova [ i ] ; } } } string = pok [ max ] ; while ( * string != '\0' ) { * string = * ( string + brojac_slova [ max ] ) ; if ( * string == '\0' ) break ; string ++ ; } return reset ; } int main ( ) { char string [ ] = ""you ____will---never,never,!!.never walk alone,....alone"" ; printf ( ""%s"" , izbaci_najcescu ( string ) ) ; return 0 ; }"
3131,95,95,0,52,A2016/Z3/Z2/student4108,A2016/Z3/Z2/student2086,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define br_el 10 #define br_el2 20 int ubaci ( int * niz , int velicina ) { int cifra , i , br , br2 = 0 ; for ( i = velicina - 1 ; i >= 0 ; i -- ) { * ( niz + 2 * i ) = * ( niz + i ) ; } for ( i = 0 ; i < velicina * 2 ; i ++ ) { if ( i % 2 == 1 ) { br = * ( niz + i - 1 ) ; while ( br != 0 ) { cifra = br % 10 ; br2 += cifra ; br /= 10 ; } br2 = abs ( br2 ) ; * ( niz + i ) = br2 ; br2 = 0 ; } } } int main ( ) { int niz [ 10 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( i < ( n - 1 ) ) { printf ( ""%d"" , niz [ i ] ) ; } else { printf ( ""%d"" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define bre1 10 #define bre12 20 void ubaci ( int * niz , int size ) { int n , dig , num1 , num2 = 0 ; for ( n = size - 1 ; n >= 0 ; n -- ) { * ( niz + 2 * n ) = * ( niz + n ) ; } for ( n = 0 ; n < size * 2 ; n ++ ) { if ( n % 2 == 1 ) { num1 = * ( niz + n - 1 ) ; while ( num1 != 0 ) { dig = num1 % 10 ; num2 += dig ; num1 /= 10 ; } num2 = abs ( num2 ) ; * ( niz + n ) = num2 ; num2 = 0 ; } } } int izbaci ( int * niz , int size ) { int n , m , p , first = 0 , second = 1 , next ; for ( n = 0 ; n < size ; n ++ ) { first = 0 ; second = 1 ; for ( m = 1 ; m < 10000 ; m ++ ) { if ( m == 1 ) { next = m ; } else { next = first + second ; first = second ; second = next ; } if ( * ( niz + n ) == next ) { for ( p = n ; p < size - 1 ; p ++ ) { * ( niz + p ) = * ( niz + p + 1 ) ; } size -- ; n -- ; break ; } } } return size ; } int main ( ) { int niz [ 20 ] , n , x ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( n = 0 ; n < 10 ; n ++ ) { scanf ( ""%d"" , & niz [ n ] ) ; } ubaci ( niz , bre1 ) ; x = izbaci ( niz , bre12 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( n = 0 ; n < x ; n ++ ) { if ( n < ( x - 1 ) ) { printf ( ""%d, "" , niz [ n ] ) ; } else { printf ( ""%d. "" , niz [ n ] ) ; } } return 0 ; }"
3140,99,99,0,199,A2016/Z4/Z4/student7823,A2016/Z4/Z4/student7457,"#include <stdio.h> #include <math.h> #define epsilon 0.0001 struct tocka { double x , y ; } ; char * obuhvat ( char * string , double x1 , double y1 , double x2 , double y2 ) ; void printajstring ( char * znak ) { while ( * znak != '\0' ) { printf ( ""%c"" , * znak ) ; znak ++ ; } printf ( ""\n"" ) ; } double stringtodouble ( char * string ) ; void unesi ( char niz [ ] , int velicina ) ; int duzinabroja ( char * string ) ; void uklonitocku ( char * string ) ; int dalipripadakvadratu ( struct tocka dalipripada , struct tocka ivica1 , struct tocka ivica2 ) ; int provjeriniz ( char * string ) ; int dalipripadaosi ( double tocka , double var1 , double var2 ) ; int provjeritocku ( char * string ) ; int main ( ) { char rijec1 [ 100 ] ; while ( 1 ) { printf ( ""rijec 1:"" ) ; unesi ( rijec1 , 100 ) ; printf ( ""\nrijeci su: %s\n"" , obuhvat ( rijec1 , 1 , 6 , 2 , 5 ) ) ; } return 0 ; } char * obuhvat ( char * string , double x1 , double y1 , double x2 , double y2 ) { char * pocetak = string ; char * pomocnipocetak ; struct tocka trenutna , ivica1 , ivica2 ; ivica1 . x = x1 ; ivica1 . y = y1 ; ivica2 . x = x2 ; ivica2 . y = y2 ; if ( provjeriniz ( string ) == 0 ) { while ( * string ++ ) ; return string ; } while ( * string ) { pomocnipocetak = string ; string ++ ; trenutna . x = stringtodouble ( string ) ; while ( * string ++ != ',' ) ; trenutna . y = stringtodouble ( string ) ; if ( dalipripadakvadratu ( trenutna , ivica1 , ivica2 ) == 0 ) { string = pomocnipocetak ; uklonitocku ( string ) ; } while ( * string != '(' && * string != '\0' ) string ++ ; if ( * string == '(' ) string ++ ; } } int provjeriniz ( char * string ) { while ( * string ) { if ( provjeritocku ( string ) == 0 ) return 0 ; while ( * string ++ != ')' ) ; if ( * string != ',' && * string != '\0' ) return 0 ; if ( * string == ',' ) { string ++ ; if ( * string == '\0' ) return 0 ; } } return 1 ; } int provjeritocku ( char * string ) { if ( * string ++ != '(' ) return 0 ; if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != '.' && * string != ',' ) return 0 ; if ( * string == '.' ) { string ++ ; if ( * string != ',' ) { if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != ',' ) return 0 ; } } string ++ ; if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != '.' && * string != ')' ) return 0 ; if ( * string == '.' ) { string ++ ; if ( * string != ')' ) { if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != ')' ) return 0 ; } } return 1 ; } void uklonitocku ( char * string ) { int duzina = 1 ; char * pocetak = string ; if ( * string == '(' ) { while ( * string != '\0' && ! ( * string == ',' && * ( string - 1 ) == ')' ) ) { duzina ++ ; string ++ ; } string = pocetak ; while ( * ( string + duzina ) != '\0' ) { * string = * ( string + duzina ) ; string ++ ; } * string = * ( string + duzina ) ; } } double stringtodouble ( char * string ) { double broj = 0 , dec = 1 ; int duzina = duzinabroja ( string ) ; for ( ; duzina > 0 ; duzina -- ) dec *= 10 ; while ( ( * string != '\0' && * string >= '0' && * string <= '9' && dec > 0.000001 ) || * string == '.' ) { if ( * string == '.' ) { string ++ ; continue ; } broj += ( 9 - ( '9' - * string ) ) * dec ; dec /= 10 ; string ++ ; } return broj ; } int duzinabroja ( char * string ) { int broj = - 1 ; while ( * string != '\0' && * string >= '0' && * string <= '9' ) { broj ++ ; string ++ ; } return broj ; } void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int dalipripadakvadratu ( struct tocka dalipripada , struct tocka ivica1 , struct tocka ivica2 ) { if ( dalipripadaosi ( dalipripada . x , ivica1 . x , ivica2 . x ) && dalipripadaosi ( dalipripada . y , ivica1 . y , ivica2 . y ) ) return 1 ; return 0 ; } int dalipripadaosi ( double tocka , double var1 , double var2 ) { if ( fabs ( tocka - var1 ) < epsilon || fabs ( tocka - var2 ) < epsilon ) return 1 ; if ( ( var2 < tocka && tocka < var1 ) || ( var1 < tocka && tocka < var2 ) ) return 1 ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0001 struct tocka { double x , y ; } ; char * obuhvat ( char * string , double x1 , double y1 , double x2 , double y2 ) ; void printajstring ( char * znak ) { while ( * znak != '\0' ) { printf ( ""%c"" , * znak ) ; znak ++ ; } printf ( ""\n"" ) ; } double stringtodouble ( char * string ) ; void unesi ( char niz [ ] , int velicina ) ; int duzinabroja ( char * string ) ; void uklonitocku ( char * string ) ; int dalipripadakvadratu ( struct tocka dalipripada , struct tocka ivica1 , struct tocka ivica2 ) ; int provjeriniz ( char * string ) ; int dalipripadaosi ( double tocka , double var1 , double var2 ) ; int provjeritocku ( char * string ) ; int main ( ) { char rijec1 [ 100 ] ; while ( 1 ) { printf ( ""rijec 1:"" ) ; unesi ( rijec1 , 100 ) ; printf ( ""\nrijeci su: %s\n"" , obuhvat ( rijec1 , 1 , 6 , 2 , 5 ) ) ; } return 0 ; } char * obuhvat ( char * string , double x1 , double y1 , double x2 , double y2 ) { char * pocetak = string ; char * pomocnipocetak ; struct tocka trenutna , ivica1 , ivica2 ; ivica1 . x = x1 ; ivica1 . y = y1 ; ivica2 . x = x2 ; ivica2 . y = y2 ; if ( provjeriniz ( string ) == 0 ) { while ( * string ++ ) ; return string ; } while ( * string ) { pomocnipocetak = string ; string ++ ; trenutna . x = stringtodouble ( string ) ; while ( * string ++ != ',' ) ; trenutna . y = stringtodouble ( string ) ; if ( dalipripadakvadratu ( trenutna , ivica1 , ivica2 ) == 0 ) { string = pomocnipocetak ; uklonitocku ( string ) ; } while ( * string != '(' && * string != '\0' ) string ++ ; if ( * string == '(' ) string ++ ; } } int provjeriniz ( char * string ) { while ( * string ) { if ( provjeritocku ( string ) == 0 ) return 0 ; while ( * string ++ != ')' ) ; if ( * string != ',' && * string != '\0' ) return 0 ; if ( * string == ',' ) { string ++ ; if ( * string == '\0' ) return 0 ; } } return 1 ; } int provjeritocku ( char * string ) { if ( * string ++ != '(' ) return 0 ; if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != '.' && * string != ',' ) return 0 ; if ( * string == '.' ) { string ++ ; if ( * string != ',' ) { if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != ',' ) return 0 ; } } string ++ ; if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != '.' && * string != ')' ) return 0 ; if ( * string == '.' ) { string ++ ; if ( * string != ')' ) { if ( ! ( * string >= '0' && * string <= '9' ) ) return 0 ; while ( * string >= '0' && * string <= '9' ) string ++ ; if ( * string != ')' ) return 0 ; } } return 1 ; } void uklonitocku ( char * string ) { int duzina = 1 ; char * pocetak = string ; if ( * string == '(' ) { while ( * string != '\0' && ! ( * string == ',' && * ( string - 1 ) == ')' ) ) { duzina ++ ; string ++ ; } string = pocetak ; while ( * ( string + duzina ) != '\0' ) { * string = * ( string + duzina ) ; string ++ ; } * string = * ( string + duzina ) ; } } double stringtodouble ( char * string ) { double broj = 0 , dec = 1 ; int duzina = duzinabroja ( string ) ; for ( ; duzina > 0 ; duzina -- ) dec *= 10 ; while ( ( * string != '\0' && * string >= '0' && * string <= '9' && dec > 0.000001 ) || * string == '.' ) { if ( * string == '.' ) { string ++ ; continue ; } broj += ( 9 - ( '9' - * string ) ) * dec ; dec /= 10 ; string ++ ; } return broj ; } int duzinabroja ( char * string ) { int broj = - 1 ; while ( * string != '\0' && * string >= '0' && * string <= '9' ) { broj ++ ; string ++ ; } return broj ; } void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int dalipripadakvadratu ( struct tocka dalipripada , struct tocka ivica1 , struct tocka ivica2 ) { if ( dalipripadaosi ( dalipripada . x , ivica1 . x , ivica2 . x ) && dalipripadaosi ( dalipripada . y , ivica1 . y , ivica2 . y ) ) return 1 ; return 0 ; } int dalipripadaosi ( double tocka , double var1 , double var2 ) { if ( fabs ( tocka - var1 ) < epsilon || fabs ( tocka - var2 ) < epsilon ) return 1 ; if ( ( var2 < tocka && tocka < var1 ) || ( var1 < tocka && tocka < var2 ) ) return 1 ; return 0 ; }"
3143,61,61,0,65,A2016/Z3/Z2/student4100,A2016/Z3/Z2/student4495,"#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int * var = niz ; int * var2 ; int clan = 0 , k = 0 , br ; while ( var < niz + 2 * vel ) { br = abs ( * var ) ; while ( br ) { clan = clan + br % 10 ; br = br / 10 ; } for ( var2 = niz + ( vel + k ) ; var2 > var ; var2 -- ) { * var2 = * ( var2 - 1 ) ; } k ++ ; var ++ ; * var = clan ; clan = 0 ; var ++ ; } } int fibonacci ( int br ) { int niz [ 1000 ] ; niz [ 0 ] = 1 ; niz [ 1 ] = 1 ; if ( br == 1 ) return 1 ; int * var1 = niz ; int * var2 = niz + 1 ; int * var3 = niz + 2 ; while ( 1 ) { * var3 = * var2 + * var1 ; if ( * var3 == br ) return 1 ; if ( * var3 > br ) { return 0 ; } var1 ++ ; var2 ++ ; var3 ++ ; } } int izbaci ( int * niz , int velicina ) { int * var = niz ; int * var2 ; int broj ; while ( var < niz + velicina ) { broj = * var ; broj = fibonacci ( broj ) ; if ( broj == 1 ) { for ( var2 = var ; var2 < niz + velicina - 1 ; var2 ++ ) { * var2 = * ( var2 + 1 ) ; } velicina -- ; var -- ; } var ++ ; } return velicina ; } int main ( ) { int i , j , niz [ 100 ] ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; j = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < j ; i ++ ) { if ( i == j - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int * niz , int vel ) { int * clan ; clan = niz ; while ( clan < niz + vel ) { int suma_c = 0 ; int clan_niza = abs ( * clan ) ; while ( clan_niza != 0 ) { suma_c = suma_c + ( clan_niza % 10 ) ; clan_niza = clan_niza / 10 ; } int * temp_p ; temp_p = niz + vel ; while ( temp_p > clan ) { * temp_p = * ( temp_p - 1 ) ; temp_p -- ; } * ( clan + 1 ) = suma_c ; clan = clan + 2 ; vel ++ ; } } int fibonacci ( int br ) { int niz [ 1000 ] ; niz [ 0 ] = 1 ; niz [ 1 ] = 1 ; if ( br == 1 ) return 1 ; int * p1 = niz ; int * p2 = niz + 1 ; int * p3 = niz + 2 ; while ( 1 ) { * p3 = * p2 + * p1 ; if ( * p3 == br ) return 1 ; if ( * p3 > br ) return 0 ; p1 ++ ; p2 ++ ; p3 ++ ; } } int izbaci ( int * p , int vel ) { int * niz = p ; int br ; int * temp_p ; while ( niz < p + vel ) { br = * niz ; br = fibonacci ( br ) ; if ( br == 1 ) { for ( temp_p = niz ; temp_p < p + vel - 1 ; temp_p ++ ) { * temp_p = * ( temp_p + 1 ) ; } vel -- ; niz -- ; } niz ++ ; } return vel ; } int main ( ) { int niz [ 100 ] , i , izbaceni ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; izbaceni = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izbaceni ; i ++ ) { if ( i < izbaceni - 1 ) printf ( ""%d, "" , niz [ i ] ) ; else printf ( ""%d."" , niz [ i ] ) ; } return 0 ; }"
3145,98,98,0,119,A2016/Z4/Z2/student5581,A2016/Z4/Z2/student8317,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
3153,98,98,0,84,A2016/Z2/Z4/student3258,A2016/Z2/Z4/student5488,"#include <stdio.h> int main ( ) { double matrica [ 100 ] [ 100 ] ; int m , n , i , j , k ; int cirkularna , teplicova ; double red [ 200 ] ; double kolona [ 100 ] ; cirkularna = 1 ; teplicova = 1 ; int broj , brojac , index ; brojac = 0 ; broj = 0 ; int a ; double f ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m <= 0 || n > 100 || n <= 0 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m <= 0 || n > 100 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) red [ i ] = matrica [ 0 ] [ i ] ; for ( i = n ; i < 2 * n ; i ++ ) { red [ i ] = matrica [ 0 ] [ brojac ] ; brojac ++ ; } for ( j = 0 ; j < n ; j ++ ) { index = ( n - 1 ) + j + 1 ; broj = 0 ; for ( k = index ; k > index - m ; k -- ) { kolona [ broj ] = red [ k ] ; broj ++ ; } for ( a = 0 ; a < m ; a ++ ) { if ( matrica [ a ] [ j ] == kolona [ a ] ) { cirkularna = 1 ; } else { cirkularna = 0 ; break ; } } if ( cirkularna == 0 ) break ; } k = 0 ; if ( cirkularna == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } broj = 0 ; for ( i = 0 ; i < n ; i ++ ) { f = matrica [ broj ] [ i ] ; while ( ++ broj < m && ++ i < n ) { if ( f != matrica [ broj ] [ i ] ) { teplicova = 0 ; printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } broj = 0 ; for ( i = 1 ; i < m ; i ++ ) { f = matrica [ i ] [ broj ] ; while ( ++ i < m && ++ broj < n ) { if ( f != matrica [ i ] [ broj ] ) { teplicova = 0 ; printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double matrica [ 100 ] [ 100 ] ; int m , n , i , j , k ; int cirkularna , teplicova ; double red [ 200 ] ; double kolona [ 100 ] ; cirkularna = 1 ; teplicova = 1 ; int broj , brojac , index ; brojac = 0 ; broj = 0 ; int a ; double f ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m <= 0 || n > 100 || n <= 0 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m <= 0 || n > 100 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; for ( i = 0 ; i < n ; i ++ ) red [ i ] = matrica [ 0 ] [ i ] ; for ( i = n ; i < 2 * n ; i ++ ) { red [ i ] = matrica [ 0 ] [ brojac ] ; brojac ++ ; } for ( j = 0 ; j < n ; j ++ ) { index = ( n - 1 ) + j + 1 ; broj = 0 ; for ( k = index ; k > index - m ; k -- ) { kolona [ broj ] = red [ k ] ; broj ++ ; } for ( a = 0 ; a < m ; a ++ ) { if ( matrica [ a ] [ j ] == kolona [ a ] ) { cirkularna = 1 ; } else { cirkularna = 0 ; break ; } } if ( cirkularna == 0 ) break ; } k = 0 ; if ( cirkularna == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } broj = 0 ; for ( i = 0 ; i < n ; i ++ ) { f = matrica [ broj ] [ i ] ; while ( ++ broj < m && ++ i < n ) { if ( f != matrica [ broj ] [ i ] ) { teplicova = 0 ; printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } broj = 0 ; for ( i = 1 ; i < m ; i ++ ) { f = matrica [ i ] [ broj ] ; while ( ++ i < m && ++ broj < n ) { if ( f != matrica [ i ] [ broj ] ) { teplicova = 0 ; printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } if ( teplicova == 1 ) printf ( ""matrica je teplicova"" ) ; return 0 ; }"
3156,95,95,0,18,A2016/Z1/Z2/student7085,A2016/Z1/Z2/student7258,"#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { float a1 , b1 , a2 , b2 , y , x ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.0001 int main ( ) { float a1 , a2 , b1 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) > e ) { printf ( ""paralelne su"" ) ; } else if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
3157,98,98,0,42,A2016/Z2/Z4/student1200,A2016/Z2/Z4/student9391,"#include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int i , j ; int m , n ; int tep = 1 , cirk = 1 ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; while ( m > 100 || m < 1 || n < 1 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) for ( j = 0 ; j < n - 1 ; j ++ ) if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) tep = 0 ; if ( tep == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) if ( mat [ i + 1 ] [ 0 ] != mat [ i ] [ n - 1 ] ) cirk = 0 ; } if ( tep == 1 ) { if ( cirk == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double mat [ 100 ] [ 100 ] ; int i , j ; int m , n ; int tep = 1 , cirk = 1 ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; while ( m > 100 || m < 1 || n < 1 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; } printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; for ( i = 0 ; i < m - 1 ; i ++ ) for ( j = 0 ; j < n - 1 ; j ++ ) if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) tep = 0 ; if ( tep == 1 ) { for ( i = 0 ; i < m - 1 ; i ++ ) if ( mat [ i + 1 ] [ 0 ] != mat [ i ] [ n - 1 ] ) cirk = 0 ; } if ( tep == 1 ) { if ( cirk == 1 ) printf ( ""matrica je cirkularna"" ) ; else printf ( ""matrica je teplicova"" ) ; } else printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; }"
3163,99,99,0,76,A2016/Z3/Z3/student8846,A2016/Z3/Z3/student5636,"#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , a , brojac = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n <= 0 || n > 200 || m <= 0 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( n <= 0 || n > 200 || m <= 0 || m > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( a = i + 1 ; a < m ; a ++ ) { brojac = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == mat [ a ] [ j ] ) brojac ++ ; } if ( brojac == n ) { for ( k = a ; k < m - 1 ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ k ] [ j ] = mat [ k + 1 ] [ j ] ; } } m -- ; a -- ; brojac = 0 ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( a = j + 1 ; a < n ; a ++ ) { brojac = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] == mat [ i ] [ a ] ) brojac ++ ; } if ( brojac == m ) { for ( k = a ; k < n - 1 ; k ++ ) { for ( i = 0 ; i < m ; i ++ ) { mat [ i ] [ k ] = mat [ i ] [ k + 1 ] ; } } n -- ; a -- ; brojac = 0 ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , mat [ 200 ] [ 200 ] , i , j , k , a , brojac = 0 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( n <= 0 || n > 200 || m <= 0 || m > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( n <= 0 || n > 200 || m <= 0 || m > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( a = i + 1 ; a < m ; a ++ ) { brojac = 0 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] == mat [ a ] [ j ] ) brojac ++ ; } if ( brojac == n ) { for ( k = a ; k < m - 1 ; k ++ ) { for ( j = 0 ; j < n ; j ++ ) { mat [ k ] [ j ] = mat [ k + 1 ] [ j ] ; } } m -- ; a -- ; brojac = 0 ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( a = j + 1 ; a < n ; a ++ ) { brojac = 0 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] == mat [ i ] [ a ] ) brojac ++ ; } if ( brojac == m ) { for ( k = a ; k < n - 1 ; k ++ ) { for ( i = 0 ; i < m ; i ++ ) { mat [ i ] [ k ] = mat [ i ] [ k + 1 ] ; } } n -- ; a -- ; brojac = 0 ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3164,45,45,0,25,A2016/Z1/Z4/student8796,A2016/Z1/Z4/student3331,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i <= n - 1 ; i ++ ) { for ( j = 1 ; j <= i - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j < ( ( n - i ) * 2 ) ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j < ( ( n - i ) * 2 ) ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j < 2 * i - 2 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j < ( ( n - i ) * 2 ) ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j <= n - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j < 2 * n - 2 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
3176,82,82,0,29,A2016/Z2/Z4/student8110,A2016/Z2/Z4/student9805,"#include <stdio.h> int main ( ) { int i , j , m , n ; double mat [ 101 ] [ 101 ] ; greska : do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m >= 101 || m <= 0 || n >= 101 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; goto greska ; } } while ( ( m < 0 || m > 100 ) && ( n < 0 || n > 100 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i <= m - 2 ; i ++ ) { for ( j = 0 ; j <= n - 2 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } for ( i = 0 ; i <= m - 2 ; i ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } } printf ( ""matrica je cirkularna"" ) ; return 0 ; }","#include <stdio.h> #include <math.h> int main ( ) { int i , j ; int m , n ; double t [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & t [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( t [ i ] [ j ] != t [ i + 1 ] [ j + 1 ] ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( t [ i ] [ n - 1 ] != t [ i + 1 ] [ 0 ] ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } } printf ( ""matrica je cirkularna"" ) ; return 0 ; }"
3179,84,84,0,24,A2016/Z2/Z4/student6255,A2016/Z2/Z4/student1269,"#include <stdio.h> int main ( ) { int i , j , m , n ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d%d"" , & m , & n ) ; if ( m > 100 || m <= 0 || n > 100 || n <= 0 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m <= 0 || n > 100 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( mat [ i + 1 ] [ 0 ] != mat [ i ] [ n - 1 ] ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } } printf ( ""matrica je cirkularna"" ) ; return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j ; double mat [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || m <= 0 || n > 100 || n <= 0 ) printf ( ""pogresan unos!\n"" ) ; } while ( m > 100 || m <= 0 || n > 100 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } if ( n == 1 && m > 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( mat [ i ] [ j ] != mat [ i + 1 ] [ j + 1 ] ) { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; return 0 ; } } } for ( i = 0 ; i < m - 1 ; i ++ ) { if ( mat [ i ] [ n - 1 ] != mat [ i + 1 ] [ 0 ] ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } } printf ( ""matrica je cirkularna"" ) ; return 0 ; }"
3184,99,99,0,100,A2016/Z3/Z3/student3258,A2016/Z3/Z3/student5488,"#include <stdio.h> int dalisujednaki ( int p [ ] , int q [ ] , int velicina ) { int i ; i = 0 ; while ( i < velicina ) { if ( ! ( q [ i ] == p [ i ] ) ) return 0 ; i ++ ; } return 1 ; } int main ( ) { int m , n , i , j ; int matrica [ 200 ] [ 200 ] ; int velicina1 ; int a , broj , s , v ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m < 1 || n < 1 ) { printf ( ""brojevi nisu u trazenom opsegu."" ) ; printf ( ""\n"" ) ; } } while ( m > 200 || n > 200 || m < 1 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; velicina1 = m * n ; int niz_kolone [ 200 ] ; for ( i = 0 ; i < m ; i ++ ) { j = i + 1 ; while ( j < m ) { broj = 0 ; for ( a = 0 ; a < n ; a ++ ) if ( ! ( matrica [ j ] [ a ] == matrica [ i ] [ a ] ) ) broj ++ ; if ( broj == 0 ) { s = j ; while ( s < m - 1 ) { for ( v = 0 ; v < n ; v ++ ) matrica [ s ] [ v ] = matrica [ s + 1 ] [ v ] ; s ++ ; } velicina1 -= n ; j -- ; m -- ; } j ++ ; } } a = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < m ; j ++ ) { niz_kolone [ a ] = matrica [ j ] [ i ] ; a ++ ; } i = 0 ; while ( i < velicina1 ) { j = i + m ; while ( j < velicina1 ) { if ( dalisujednaki ( niz_kolone + j , niz_kolone + i , m ) ) { for ( s = j ; s < velicina1 - m ; s ++ ) niz_kolone [ s ] = niz_kolone [ s + m ] ; n -- ; j = j - m ; velicina1 -= m ; } j = j + m ; } i = i + m ; } s = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < m ; j ++ ) { matrica [ j ] [ i ] = niz_kolone [ s ] ; s ++ ; } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int dalisujednaki ( int p [ ] , int q [ ] , int velicina ) { int i ; i = 0 ; while ( i < velicina ) { if ( ! ( q [ i ] == p [ i ] ) ) return 0 ; i ++ ; } return 1 ; } int main ( ) { int m , n , i , j ; int matrica [ 200 ] [ 200 ] ; int velicina1 ; int a , broj , s , v ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 200 || n > 200 || m < 1 || n < 1 ) { printf ( ""brojevi nisu u trazenom opsegu."" ) ; printf ( ""\n"" ) ; } } while ( m > 200 || n > 200 || m < 1 || n < 1 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j < n ; j ++ ) scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; velicina1 = m * n ; int niz_kolone [ 200 ] ; for ( i = 0 ; i < m ; i ++ ) { j = i + 1 ; while ( j < m ) { broj = 0 ; for ( a = 0 ; a < n ; a ++ ) if ( ! ( matrica [ j ] [ a ] == matrica [ i ] [ a ] ) ) broj ++ ; if ( broj == 0 ) { s = j ; while ( s < m - 1 ) { for ( v = 0 ; v < n ; v ++ ) matrica [ s ] [ v ] = matrica [ s + 1 ] [ v ] ; s ++ ; } velicina1 -= n ; j -- ; m -- ; } j ++ ; } } a = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < m ; j ++ ) { niz_kolone [ a ] = matrica [ j ] [ i ] ; a ++ ; } i = 0 ; while ( i < velicina1 ) { j = i + m ; while ( j < velicina1 ) { if ( dalisujednaki ( niz_kolone + j , niz_kolone + i , m ) ) { for ( s = j ; s < velicina1 - m ; s ++ ) niz_kolone [ s ] = niz_kolone [ s + m ] ; n -- ; j = j - m ; velicina1 -= m ; } j = j + m ; } i = i + m ; } s = 0 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < m ; j ++ ) { matrica [ j ] [ i ] = niz_kolone [ s ] ; s ++ ; } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( ""%5d"" , matrica [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }"
3191,87,87,0,52,A2016/Z2/Z2/student8317,A2016/Z2/Z2/student3631,"#include<stdio.h> #include<stdlib.h> #include<math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; int i , j , n ; double stepeni , minute , sekunde ; double ugao ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { ugao = fabs ( ( niz [ i ] * 180 ) / pi ) ; minute = ( ugao - ( int ) ugao ) * 60 ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; if ( sekunde == 60 ) { sekunde = 0 , minute ++ ; } if ( sekunde > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { ugao = ( niz [ i ] * 180 ) / pi ; minute = fabs ( ( ugao - ( int ) ugao ) * 60 ) ; sekunde = round ( ( minute - ( int ) minute ) * 60 ) ; stepeni = ( int ) ugao ; minute = ( int ) minute ; sekunde = round ( sekunde ) ; if ( stepeni >= 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni ++ ; } } if ( stepeni < 0 ) { if ( sekunde == 60 ) { sekunde = 0 ; minute ++ ; } if ( minute == 60 ) { minute = 0 ; stepeni -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , stepeni , minute , sekunde ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int i , j , br ; double step , min , sek , ug ; double niz [ 500 ] ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & br ) ; for ( i = 0 ; i < br ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < br ; i ++ ) { ug = fabs ( ( niz [ i ] * 180 ) / pi ) ; min = ( ug - ( int ) ug ) * 60 ; sek = round ( ( min - ( int ) min ) * 60 ) ; if ( sek == 60 ) { sek = 0 ; min ++ ; } if ( sek > 30 ) { for ( j = i ; j < br - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } br -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < br ; i ++ ) { ug = ( niz [ i ] * 180 ) / pi ; min = fabs ( ( ug - ( int ) ug ) * 60 ) ; sek = round ( ( min - ( int ) min ) * 60 ) ; step = ( int ) ug ; min = ( int ) min ; sek = round ( sek ) ; if ( step >= 0 ) { if ( sek == 60 ) { sek = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step ++ ; } } if ( step < 0 ) { if ( sek == 60 ) { sek = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , step , min , sek ) ; } return 0 ; }"
3193,99,99,0,30,A2016/Z1/Z4/student2645,A2016/Z1/Z4/student8576,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( n == 1 ) { printf ( ""***"" ) ; } else if ( j == i || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) printf ( ""*"" ) ; else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( n == 1 ) { printf ( ""***"" ) ; } else if ( j == i || j == 2 * n - 2 - i || j == 2 * n - 2 + i || j == 4 * n - 4 - i ) printf ( ""*"" ) ; else { printf ( "" "" ) ; } } printf ( ""\n"" ) ; } return 0 ; }"
3194,99,99,0,40,A2016/Z2/Z4/student2160,A2016/Z2/Z4/student8189,"#include <stdio.h> #include <math.h> #define epsilon 0.0001 #define a 100 #define b 100 int main ( ) { int m , n , i , j , a , b ; int pret = 2 ; double mat [ a ] [ b ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( ( m <= 0 || m > 100 ) || ( n <= 0 || n > 100 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } if ( n == 1 && m != 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } for ( a = 0 ; a < m - 1 ; a ++ ) { for ( b = 0 ; b < n - 1 ; b ++ ) { if ( fabs ( mat [ a ] [ b ] - mat [ a + 1 ] [ b + 1 ] ) > epsilon ) { pret = 0 ; break ; } if ( fabs ( mat [ a ] [ n - 1 ] - mat [ a + 1 ] [ 0 ] ) > epsilon ) { pret = 1 ; break ; } } } if ( pret == 2 ) printf ( ""matrica je cirkularna "" ) ; else if ( pret == 1 ) printf ( ""matrica je teplicova "" ) ; else if ( pret == 0 ) printf ( ""matrica nije ni cirkularna ni teplicova "" ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.0001 #define a 100 #define b 100 int main ( ) { int m , n , i , j , a , b ; int pret = 2 ; double mat [ a ] [ b ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) printf ( ""pogresan unos!\n"" ) ; } while ( ( m <= 0 || m > 100 ) || ( n <= 0 || n > 100 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & mat [ i ] [ j ] ) ; } } if ( n == 1 && m != 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } for ( a = 0 ; a < m - 1 ; a ++ ) { for ( b = 0 ; b < n - 1 ; b ++ ) { if ( fabs ( mat [ a ] [ b ] - mat [ a + 1 ] [ b + 1 ] ) > epsilon ) { pret = 0 ; break ; } if ( fabs ( mat [ a ] [ n - 1 ] - mat [ a + 1 ] [ 0 ] ) > epsilon ) { pret = 1 ; break ; } } } if ( pret == 2 ) printf ( ""matrica je cirkularna "" ) ; else if ( pret == 1 ) printf ( ""matrica je teplicova "" ) ; else if ( pret == 0 ) printf ( ""matrica nije ni cirkularna ni teplicova "" ) ; return 0 ; }"
3204,88,88,0,87,A2016/Z3/Z3/student3872,A2016/Z3/Z3/student5581,"#include<stdio.h> #define broj_el 200 int main ( ) { int m , n ; int t ; int mat [ broj_el ] [ broj_el ] ; int i , j , k , r , q ; int isti ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( q = i + 1 ; q < m ; q ++ ) { isti = 1 ; for ( j = 0 ; j < n ; j ++ ) { if ( mat [ i ] [ j ] != mat [ q ] [ j ] ) { isti = 0 ; } } if ( isti == 1 && q != i ) { for ( k = q ; k < m - 1 ; k ++ ) { for ( r = 0 ; r < n ; r ++ ) { mat [ k ] [ r ] = mat [ k + 1 ] [ r ] ; } } m -- ; q -- ; } } } for ( j = 0 ; j < n ; j ++ ) { for ( t = j + 1 ; t < n ; t ++ ) { isti = 1 ; for ( i = 0 ; i < m ; i ++ ) { if ( mat [ i ] [ j ] != mat [ i ] [ t ] ) { isti = 0 ; } } if ( isti == 1 && t != j ) { for ( k = t ; k < n - 1 ; k ++ ) { for ( r = 0 ; r < m ; r ++ ) { mat [ r ] [ k ] = mat [ r ] [ k + 1 ] ; } } n -- ; t -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include<stdio.h> int main ( ) { int m , n ; int je_jednak ; int i , j , k , l ; int niz [ 200 ] [ 200 ] ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n <= 0 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m <= 0 || n <= 0 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & niz [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { je_jednak = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( niz [ i ] [ k ] != niz [ j ] [ k ] ) { je_jednak = 0 ; } } if ( je_jednak == 1 ) { for ( k = j ; k < m - 1 ; k ++ ) { for ( l = 0 ; l < n ; l ++ ) { niz [ k ] [ l ] = niz [ k + 1 ] [ l ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { je_jednak = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( niz [ k ] [ i ] != niz [ k ] [ j ] ) { je_jednak = 0 ; } } if ( je_jednak == 1 ) { for ( k = j ; k < n - 1 ; k ++ ) { for ( l = 0 ; l < m ; l ++ ) { niz [ l ] [ k ] = niz [ l ] [ k + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( "" %4d"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3209,89,89,0,29,A2016/Z2/Z3/student2645,A2016/Z2/Z3/student4420,"#include <stdio.h> int main ( ) { int n ; int i , j , x , y ; char zvjezdice [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 10 ) { printf ( ""pogresan unos"" ) ; printf ( ""\nunesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { zvjezdice [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; while ( ( x < 0 || x > 19 ) || ( y < 0 || y > 19 ) ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & x , & y ) ; } zvjezdice [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( zvjezdice [ i ] [ j ] != '*' ) zvjezdice [ i ] [ j ] = ' ' ; printf ( ""%c"" , zvjezdice [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bkt , i , j , ktacke ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; while ( bkt < 1 || bkt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bkt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( ktacke = 0 ; ktacke < bkt ; ktacke ++ ) { printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; while ( i < 0 || j < 0 || i > 19 || j > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , ktacke + 1 ) ; scanf ( ""%d %d"" , & i , & j ) ; } niz [ i ] [ j ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ j ] [ i ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3212,85,85,0,52,A2016/Z3/Z1/student3301,A2016/Z3/Z1/student5621,"#include <stdio.h> int daj_prost ( ) { int prost = 1 , i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a , b , suma = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( broj < b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int p = 0 , i ; static int q = 0 ; while ( 1 ) { q ++ ; if ( q == 2 ) { return q ; } else if ( q == 3 ) { return q ; } else { for ( i = 2 ; i < q ; i ++ ) { if ( q % i == 0 ) { p = 0 ; break ; } } if ( p ) { return q ; } else { p = 1 ; } } } } int main ( ) { int a , b , sum = 0 , q = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( q < b ) { q = daj_prost ( ) ; if ( q > a && q < b ) { sum += q ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , sum ) ; return 0 ; }"
3214,98,98,0,102,A2016/Z3/Z2/student8561,A2016/Z3/Z2/student8419,"#include <stdio.h> int fibonacijev_niz ( int p ) { int fniz [ 46 ] = { 1 , 1 } , a , b , c , r , i ; a = 1 ; b = 1 ; i = 0 ; r = 0 ; for ( i = 2 ; i < 46 ; i ++ ) { c = a + b ; a = b ; b = c ; fniz [ i ] = c ; } for ( i = 0 ; i < 46 ; i ++ ) { if ( p == fniz [ i ] ) { r = 1 ; break ; } else r = 0 ; } return r ; } int izbaci ( int * niz , int v ) { int t1 , t2 , i , j , x ; t1 = v ; t2 = v - 1 ; for ( j = 0 ; j < t1 ; j ++ ) { x = fibonacijev_niz ( * niz ) ; if ( x == 1 ) { if ( j == t1 - 1 ) { v -- ; return v ; } for ( i = 0 ; i < t2 ; i ++ ) { * niz = * ( niz + 1 ) ; niz ++ ; } v -- ; niz = niz - t2 ; } else { if ( j == t1 - 1 ) niz -- ; niz ++ ; } t2 -- ; } return v ; } int suma ( int br ) { int c , suma = 0 ; if ( br < 0 ) br *= - 1 ; while ( br > 0 ) { c = br % 10 ; suma += c ; br /= 10 ; } return suma ; } void ubaci ( int * p , int v ) { int p1 , i , j , t1 , t2 , suma = 0 ; ; t1 = v ; t2 = v ; for ( i = 0 ; i < t1 ; i ++ ) { if ( i = t1 - 1 ) { p1 = * p ; suma = suma ( p1 ) ; * ( p + 1 ) = suma ; return ; } p1 = * p ; suma = suma ( p1 ) ; for ( j = 0 ; j < t1 - 1 ; j ++ ) { while ( v > 0 ) { * ( p + v ) = * ( p + v - 1 ) ; v -- ; } } * ( p + 1 ) = suma ; p = p + 2 ; t2 -- ; v = t2 ; } } int main ( ) { int niz [ 20 ] , i = 0 , v ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; v = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; if ( v > 0 ) { for ( i = 0 ; i < v - 1 ; i ++ ) printf ( ""%d, "" , niz [ i ] ) ; printf ( ""%d."" , niz [ v - 1 ] ) ; } else printf ( "" "" ) ; return 0 ; }","#include <stdio.h> int fibonacijev_niz ( int p ) { int fniz [ 46 ] = { 1 , 1 } , a , b , c , r , i ; a = 1 ; b = 1 ; i = 0 ; r = 0 ; for ( i = 2 ; i < 46 ; i ++ ) { c = a + b ; a = b ; b = c ; fniz [ i ] = c ; } for ( i = 0 ; i < 46 ; i ++ ) { if ( p == fniz [ i ] ) { r = 1 ; break ; } else r = 0 ; } return r ; } int izbaci ( int * niz , int v ) { int t1 , t2 , i , j , x ; t1 = v ; t2 = v - 1 ; for ( j = 0 ; j < t1 ; j ++ ) { x = fibonacijev_niz ( * niz ) ; if ( x == 1 ) { if ( j == t1 - 1 ) { v -- ; return v ; } for ( i = 0 ; i < t2 ; i ++ ) { * niz = * ( niz + 1 ) ; niz ++ ; } v -- ; niz = niz - t2 ; } else { if ( j == t1 - 1 ) niz -- ; niz ++ ; } t2 -- ; } return v ; } int suma ( int br ) { int c , suma = 0 ; if ( br < 0 ) br *= - 1 ; while ( br > 0 ) { c = br % 10 ; suma += c ; br /= 10 ; } return suma ; } void ubaci ( int * p , int v ) { int p1 , i , j , t1 , t2 , suma = 0 ; ; t1 = v ; t2 = v ; for ( i = 0 ; i < t1 ; i ++ ) { if ( i = t1 - 1 ) { p1 = * p ; suma = suma ( p1 ) ; * ( p + 1 ) = suma ; return ; } p1 = * p ; suma = suma ( p1 ) ; for ( j = 0 ; j < t1 - 1 ; j ++ ) { while ( v > 0 ) { * ( p + v ) = * ( p + v - 1 ) ; v -- ; } } * ( p + 1 ) = suma ; p = p + 2 ; t2 -- ; v = t2 ; } } int main ( ) { int niz [ 20 ] , i = 0 , v ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; v = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; if ( v > 0 ) { for ( i = 0 ; i < v - 1 ; i ++ ) printf ( ""%d, "" , niz [ i ] ) ; printf ( ""%d."" , niz [ v - 1 ] ) ; } else printf ( "" "" ) ; return 0 ; }"
3221,96,96,0,36,A2016/Z2/Z1/student3978,A2016/Z2/Z1/student5829,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , a , o , k , br , mn ; mn = 1 ; br = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) { n = abs ( n ) ; while ( n > 9 ) { a = n % 10 ; n = n / 10 ; o = n % 10 ; k = abs ( a - o ) ; br = br + mn * k ; mn = mn * 10 ; } printf ( ""%d"" , br ) ; } else if ( n > 0 && n < 10 ) printf ( ""0"" ) ; else { while ( n > 9 ) { a = n % 10 ; n = n / 10 ; o = n % 10 ; k = abs ( a - o ) ; br = br + mn * k ; mn = mn * 10 ; } printf ( ""%d"" , br ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int n , a , o , k , br , mn ; mn = 1 ; br = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) { n = abs ( n ) ; while ( n > 9 ) { a = n % 10 ; n = n / 10 ; o = n % 10 ; k = abs ( a - o ) ; br = br + mn * k ; mn = mn * 10 ; } printf ( ""%d"" , br ) ; } else if ( n > 0 && n < 10 ) printf ( ""0"" ) ; else { while ( n > 9 ) { a = n % 10 ; n = n / 10 ; o = n % 10 ; k = abs ( a - o ) ; br = br + mn * k ; mn = mn * 10 ; } printf ( ""%d"" , br ) ; } return 0 ; }"
3226,98,98,0,44,A2016/Z3/Z1/student7507,A2016/Z3/Z1/student5162,"#include <stdio.h> int daj_prost ( ) { static int a = 1 ; int i ; a ++ ; for ( i = 2 ; i < a ; i ++ ) { if ( i == a ) return a ; if ( a % i == 0 ) { a ++ ; i = 1 ; } } if ( i == a ) return a ; } int main ( ) { int a , b , i , s = 0 , t , j ; while ( 1 == 1 ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; continue ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; continue ; } else if ( a <= 0 && b <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; continue ; } else if ( b <= 0 ) { printf ( ""b nije prirodan broj.\n"" ) ; continue ; } break ; } for ( i = a + 1 ; i < b ; i ++ ) { j = i ; t = daj_prost ( ) ; if ( t < i ) { while ( t != i ) { t = daj_prost ( ) ; } s += t ; } if ( t > i ) { while ( j < b ) { j ++ ; if ( j == t ) s += t ; } } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , s ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int a = 1 ; int i ; a ++ ; for ( i = 2 ; i < a ; i ++ ) { if ( i == a ) return a ; if ( a % i == 0 ) { a ++ ; i = 1 ; } } if ( i == a ) return a ; } int main ( ) { int a , b , i , s = 0 , t , j ; while ( 1 == 1 ) { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; continue ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; continue ; } else if ( a <= 0 && b <= 0 ) { printf ( ""a nije prirodan broj.\n"" ) ; continue ; } else if ( b <= 0 ) { printf ( ""b nije prirodan broj.\n"" ) ; continue ; } break ; } for ( i = a + 1 ; i < b ; i ++ ) { j = i ; t = daj_prost ( ) ; if ( t < i ) { while ( t != i ) { t = daj_prost ( ) ; } s += t ; } if ( t > i ) { while ( j < b ) { j ++ ; if ( j == t ) s += t ; } } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , s ) ; return 0 ; }"
3239,98,98,0,65,A2016/Z2/Z2/student9758,A2016/Z2/Z2/student5863,"#include <stdio.h> #include<math.h> #define pi 3.1415926 int main ( ) { int n ; float st , stepeni , minute , sekunde , y ; float niz [ 500 ] ; int i , j ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { st = niz [ i ] * 180 / pi ; stepeni = ( int ) st ; minute = ( int ) ( ( st - stepeni ) * 60 ) ; sekunde = ( st - stepeni - minute / 60. ) * 3600 ; y = round ( sekunde ) ; if ( y == 60 ) { minute = minute + 1 ; y == 0 ; } if ( minute == 60 ) { stepeni = stepeni + 1 ; minute == 0 ; } if ( y == - 60 ) { minute = minute - 1 ; y == 0 ; } if ( minute == - 60 ) { stepeni = stepeni - 1 ; minute == 0 ; } if ( y > 30 || y < - 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { st = niz [ i ] * 180 / pi ; stepeni = ( int ) st ; minute = ( int ) ( ( st - stepeni ) * 60 ) ; sekunde = ( st - stepeni - minute / 60. ) * 3600 ; if ( sekunde == 60 ) { minute = minute + 1 ; sekunde == 0 ; } if ( minute == 60 ) { stepeni = stepeni + 1 ; minute == 0 ; } printf ( ""%.f stepeni "" , stepeni ) ; printf ( ""%.f minuta "" , fabs ( minute ) ) ; printf ( ""%.f sekundi \n"" , fabs ( sekunde ) ) ; } return 0 ; }","#include <stdio.h> #include<math.h> #define pi 3.1415926 int main ( ) { int n ; float st , stepeni , minute , sekunde , y ; float niz [ 500 ] ; int i , j ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { st = niz [ i ] * 180 / pi ; stepeni = ( int ) st ; minute = ( int ) ( ( st - stepeni ) * 60 ) ; sekunde = ( st - stepeni - minute / 60. ) * 3600 ; y = round ( sekunde ) ; if ( y == 60 ) { minute = minute + 1 ; y == 0 ; } if ( minute == 60 ) { stepeni = stepeni + 1 ; minute == 0 ; } if ( y == - 60 ) { minute = minute - 1 ; y == 0 ; } if ( minute == - 60 ) { stepeni = stepeni - 1 ; minute == 0 ; } if ( y > 30 || y < - 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { st = niz [ i ] * 180 / pi ; stepeni = ( int ) st ; minute = ( int ) ( ( st - stepeni ) * 60 ) ; sekunde = ( st - stepeni - minute / 60. ) * 3600 ; if ( sekunde == 60 ) { minute = minute + 1 ; sekunde == 0 ; } if ( minute == 60 ) { stepeni = stepeni + 1 ; minute == 0 ; } printf ( ""%.f stepeni "" , stepeni ) ; printf ( ""%.f minuta "" , fabs ( minute ) ) ; printf ( ""%.f sekundi \n"" , fabs ( sekunde ) ) ; } return 0 ; }"
3242,95,95,0,15,A2016/Z1/Z2/student8133,A2016/Z1/Z2/student3415,"#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; x = ( b2 - b1 ) * 1. / ( a1 - a2 ) ; y = ( a1 * ( ( b2 - b1 ) * 1. / ( a1 - a2 ) ) ) + b1 ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; return 0 ; } else if ( fabs ( a1 - a2 ) < e ) { printf ( ""paralelne su"" ) ; return 0 ; } else printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.00001 int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; x = ( b2 - b1 ) * 1. / ( a1 - a2 ) ; y = ( a1 * ( ( b2 - b1 ) * 1. / ( a1 - a2 ) ) ) + b1 ; if ( fabs ( a1 - a2 ) < e && fabs ( b1 - b2 ) < e ) { printf ( ""poklapaju se"" ) ; return 0 ; } else if ( fabs ( a1 - a2 ) < e ) { printf ( ""paralelne su"" ) ; return 0 ; } else printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; return 0 ; }"
3253,59,59,0,33,A2016/Z2/Z2/student5612,A2016/Z2/Z2/student5380,"#include <stdio.h> #include <math.h> #define pi 3.1415926 #include<stdlib.h> int main ( ) { double rad [ 500 ] ; double stepen ; double minuta ; double sekunda ; double ugao ; int x , i , j ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & x ) ; for ( i = 0 ; i < x ; i ++ ) { scanf ( ""%lf"" , & rad [ i ] ) ; } for ( i = 0 ; i < x ; i ++ ) { ugao = fabs ( ( rad [ i ] * 180 ) / pi ) ; minuta = ( ugao - ( int ) ugao ) * 60 ; sekunda = round ( ( minuta - ( int ) minuta ) * 60 ) ; if ( sekunda == 60 ) { sekunda = 0 ; minuta ++ ; } if ( sekunda > 30 ) { for ( j = i ; j < x - 1 ; j ++ ) { rad [ j ] = rad [ j + 1 ] ; } i -- ; x -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < x ; i ++ ) { ugao = ( rad [ i ] * 180 ) / pi ; minuta = fabs ( ( ugao - ( int ) ugao ) * 60 ) ; sekunda = round ( ( minuta - ( int ) minuta ) * 60 ) ; stepen = ( int ) ugao ; sekunda = round ( sekunda ) ; minuta = ( int ) minuta ; if ( stepen < 0 ) { if ( sekunda == 60 ) { sekunda = 0 ; minuta ++ ; } if ( minuta == 60 ) { minuta = 0 ; stepen -- ; } } if ( stepen >= 0 ) { if ( sekunda == 60 ) { sekunda = 0 ; minuta ++ ; } if ( minuta == 60 ) { minuta = 0 ; stepen ++ ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , stepen , minuta , sekunda ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define pi 3.1415926 int main ( ) { double niz [ 500 ] ; double step , min , sec , x ; int i , j , n ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { x = fabs ( ( niz [ i ] ) * ( 180 / pi ) ) ; min = ( ( x - ( int ) x ) * 60 ) ; sec = ( round ( ( min - ( int ) min ) * 60 ) ) ; if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { x = ( niz [ i ] * ( 180 / pi ) ) ; min = fabs ( ( x - ( int ) x ) * 60 ) ; sec = ( ( min - ( int ) min ) * 60 ) ; step = ( int ) x ; min = ( int ) min ; sec = round ( sec ) ; if ( step >= 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step ++ ; } } if ( step < 0 ) { if ( sec == 60 ) { sec = 0 ; min ++ ; } if ( min == 60 ) { min = 0 ; step -- ; } } printf ( ""%.f stepeni %.f minuta %.f sekundi\n"" , step , min , sec ) ; } return 0 ; }"
3254,96,96,0,22,A2016/Z2/Z1/student6604,A2016/Z2/Z1/student1477,"#include <stdio.h> int main ( ) { int n , c , d , razlika , b , p , broj = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n *= - 1 ; if ( n >= 0 && n < 10 ) { printf ( ""0"" ) ; return 0 ; } p = 1 ; do { c = n % 10 ; b = n / 10 ; d = b % 10 ; razlika = c - d ; if ( razlika < 0 ) razlika *= - 1 ; broj += razlika * p ; p *= 10 ; n = b ; } while ( n > 10 ) ; printf ( ""%d"" , broj ) ; return 0 ; }","#include <stdio.h> int main ( ) { int n , c , d , razlika , b , p , broj = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 0 ) n *= - 1 ; if ( n >= 0 && n < 10 ) { printf ( ""0"" ) ; return 0 ; } p = 1 ; do { c = n % 10 ; b = n / 10 ; d = b % 10 ; razlika = c - d ; if ( razlika < 0 ) razlika *= - 1 ; broj += razlika * p ; p *= 10 ; n = b ; } while ( n > 10 ) ; printf ( ""%d"" , broj ) ; return 0 ; }"
3264,99,99,0,184,A2016/Z1/Z1/student9463,A2016/Z1/Z1/student4389,"#include <stdio.h> #define e 0.0001 int main ( ) { float s1p1 , s1p2 , s1pr , s1dz , s1zi , s2p1 , s2p2 , s2pr , s2dz , s2zi , s3p1 , s3p2 , s3pr , s3dz , s3zi , s1zb , s2zb , s3zb , s1oc , s2oc , s3oc ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & s1p1 ) ; if ( s1p1 < 0 || s1p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & s1p2 ) ; if ( s1p2 < 0 || s1p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & s1pr ) ; if ( s1pr < 0 || s1pr > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & s1dz ) ; if ( s1dz < 0 || s1dz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & s1zi ) ; if ( s1zi < 0 || s1zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & s2p1 ) ; if ( s2p1 < 0 || s2p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & s2p2 ) ; if ( s2p2 < 0 || s2p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & s2pr ) ; if ( s2pr < 0 || s2pr > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & s2dz ) ; if ( s2dz < 0 || s2dz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & s2zi ) ; if ( s2zi < 0 || s2zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & s3p1 ) ; if ( s3p1 < 0 || s3p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & s3p2 ) ; if ( s3p2 < 0 || s3p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & s3pr ) ; if ( s3pr < 0 || s3pr > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & s3dz ) ; if ( s3dz < 0 || s3dz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & s3zi ) ; if ( s3zi < 0 || s3zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } s1zb = s1p1 + s1p2 + s1dz + s1pr + s1zi ; s2zb = s2p1 + s2p2 + s2dz + s2pr + s2zi ; s3zb = s3p1 + s3p2 + s3dz + s3pr + s3zi ; if ( s1zb >= 55 && s1zb < 65 ) { s1oc = 6 ; } else if ( s1zb >= 65 && s1zb < 75 ) { s1oc = 7 ; } else if ( s1zb >= 75 && s1zb < 85 ) { s1oc = 8 ; } else if ( s1zb >= 85 && s1zb < 92 ) { s1oc = 9 ; } else if ( s1zb >= 92 && s1zb <= 100 ) { s1oc = 10 ; } else { s1oc = 1 ; } if ( s2zb >= 55 && s2zb < 65 ) { s2oc = 6 ; } else if ( s2zb >= 65 && s2zb < 75 ) { s2oc = 7 ; } else if ( s2zb >= 75 && s2zb < 85 ) { s2oc = 8 ; } else if ( s2zb >= 85 && s2zb < 92 ) { s2oc = 9 ; } else if ( s2zb >= 92 && s2zb <= 100 ) { s2oc = 10 ; } else { s2oc = 1 ; } if ( s3zb >= 55 && s3zb < 65 ) { s3oc = 6 ; } else if ( s3zb >= 65 && s3zb < 75 ) { s3oc = 7 ; } else if ( s3zb >= 75 && s3zb < 85 ) { s3oc = 8 ; } else if ( s3zb >= 85 && s3zb < 92 ) { s3oc = 9 ; } else if ( s3zb >= 92 && s3zb <= 100 ) { s3oc = 10 ; } else { s3oc = 1 ; } if ( ( s1zb + e ) < 55 && ( s2zb + e ) < 55 && ( s3zb + e ) < 55 ) { printf ( ""nijedan student nije polozio.\n"" ) ; } else if ( ( s1zb + e ) >= 55 && ( s2zb + e ) >= 55 && ( s3zb + e ) >= 55 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; } else if ( ( s1zb + e ) >= 55 && ( s2zb + e ) < 55 && ( s3zb + e ) < 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( ( s1zb + e ) < 55 && ( s2zb + e ) >= 55 && ( s3zb + e ) < 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( ( s1zb + e ) < 55 && ( s2zb + e ) < 55 && ( s3zb + e ) >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else { printf ( ""dva studenta su polozila."" ) ; } if ( ( s1zb + e ) >= 55 && ( s2zb + e ) >= 55 && ( s3zb + e ) >= 55 ) { if ( ( s1oc == s2oc ) && ( s2oc == s3oc ) && ( s3oc == s1oc ) ) { printf ( ""sva tri studenta imaju istu ocjenu."" ) ; } else if ( ( s1oc != s2oc ) && ( s2oc != s3oc ) && ( s3oc != s1oc ) ) { printf ( ""svaki student ima razlicitu ocjenu."" ) ; } else { printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; } } }","#include <stdio.h> #define e 0.0001 int main ( ) { float s1p1 , s1p2 , s1pr , s1dz , s1zi , s2p1 , s2p2 , s2pr , s2dz , s2zi , s3p1 , s3p2 , s3pr , s3dz , s3zi , s1zb , s2zb , s3zb , s1oc , s2oc , s3oc ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & s1p1 ) ; if ( s1p1 < 0 || s1p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & s1p2 ) ; if ( s1p2 < 0 || s1p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & s1pr ) ; if ( s1pr < 0 || s1pr > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & s1dz ) ; if ( s1dz < 0 || s1dz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & s1zi ) ; if ( s1zi < 0 || s1zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & s2p1 ) ; if ( s2p1 < 0 || s2p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & s2p2 ) ; if ( s2p2 < 0 || s2p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & s2pr ) ; if ( s2pr < 0 || s2pr > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & s2dz ) ; if ( s2dz < 0 || s2dz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & s2zi ) ; if ( s2zi < 0 || s2zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%f"" , & s3p1 ) ; if ( s3p1 < 0 || s3p1 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%f"" , & s3p2 ) ; if ( s3p2 < 0 || s3p2 > 20 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%f"" , & s3pr ) ; if ( s3pr < 0 || s3pr > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%f"" , & s3dz ) ; if ( s3dz < 0 || s3dz > 10 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%f"" , & s3zi ) ; if ( s3zi < 0 || s3zi > 40 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } s1zb = s1p1 + s1p2 + s1dz + s1pr + s1zi ; s2zb = s2p1 + s2p2 + s2dz + s2pr + s2zi ; s3zb = s3p1 + s3p2 + s3dz + s3pr + s3zi ; if ( s1zb >= 55 && s1zb < 65 ) { s1oc = 6 ; } else if ( s1zb >= 65 && s1zb < 75 ) { s1oc = 7 ; } else if ( s1zb >= 75 && s1zb < 85 ) { s1oc = 8 ; } else if ( s1zb >= 85 && s1zb < 92 ) { s1oc = 9 ; } else if ( s1zb >= 92 && s1zb <= 100 ) { s1oc = 10 ; } else { s1oc = 1 ; } if ( s2zb >= 55 && s2zb < 65 ) { s2oc = 6 ; } else if ( s2zb >= 65 && s2zb < 75 ) { s2oc = 7 ; } else if ( s2zb >= 75 && s2zb < 85 ) { s2oc = 8 ; } else if ( s2zb >= 85 && s2zb < 92 ) { s2oc = 9 ; } else if ( s2zb >= 92 && s2zb <= 100 ) { s2oc = 10 ; } else { s2oc = 1 ; } if ( s3zb >= 55 && s3zb < 65 ) { s3oc = 6 ; } else if ( s3zb >= 65 && s3zb < 75 ) { s3oc = 7 ; } else if ( s3zb >= 75 && s3zb < 85 ) { s3oc = 8 ; } else if ( s3zb >= 85 && s3zb < 92 ) { s3oc = 9 ; } else if ( s3zb >= 92 && s3zb <= 100 ) { s3oc = 10 ; } else { s3oc = 1 ; } if ( ( s1zb + e ) < 55 && ( s2zb + e ) < 55 && ( s3zb + e ) < 55 ) { printf ( ""nijedan student nije polozio.\n"" ) ; } else if ( ( s1zb + e ) >= 55 && ( s2zb + e ) >= 55 && ( s3zb + e ) >= 55 ) { printf ( ""sva tri studenta su polozila.\n"" ) ; } else if ( ( s1zb + e ) >= 55 && ( s2zb + e ) < 55 && ( s3zb + e ) < 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( ( s1zb + e ) < 55 && ( s2zb + e ) >= 55 && ( s3zb + e ) < 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else if ( ( s1zb + e ) < 55 && ( s2zb + e ) < 55 && ( s3zb + e ) >= 55 ) { printf ( ""jedan student je polozio.\n"" ) ; } else { printf ( ""dva studenta su polozila."" ) ; } if ( ( s1zb + e ) >= 55 && ( s2zb + e ) >= 55 && ( s3zb + e ) >= 55 ) { if ( ( s1oc == s2oc ) && ( s2oc == s3oc ) && ( s3oc == s1oc ) ) { printf ( ""sva tri studenta imaju istu ocjenu."" ) ; } else if ( ( s1oc != s2oc ) && ( s2oc != s3oc ) && ( s3oc != s1oc ) ) { printf ( ""svaki student ima razlicitu ocjenu."" ) ; } else { printf ( ""dva od tri studenta imaju istu ocjenu."" ) ; } } }"
3265,82,82,0,106,A2016/Z4/Z1/student6877,A2016/Z4/Z1/student1453,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak ; int i = 0 ; znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * string1 , char * string2 , int velicina1 , int velicina2 ) { char * p1 = string1 ; char * p2 = string2 ; int i ; if ( velicina1 != velicina2 ) return 0 ; else { for ( i = 0 ; i < velicina1 - 1 ; i ++ ) { if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p2 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pokazivac [ 100 ] ; int i = 0 , j = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 100 ] = { 0 } ; p = s ; pokazivac [ j ] = p ; if ( * p != '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; i ++ ; j ++ ; pokazivac [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pokazivac [ i ] , pokazivac [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pokazivac [ max ] , pokazivac [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pokazivac [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * p ( brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pokazivac [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pokazivac [ j ] -= brojac_slova [ i ] ; } } } p = pokazivac [ max ] ; while ( * p != '\0' ) { * p = * p ( brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""asd ddd asd  ddd asd trzhrth"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * rijec1 , char * rijec2 , int vel1 , int vel2 ) { int i ; char * p1 = rijec1 , * p2 = rijec2 ; if ( vel1 != vel2 ) return 0 ; else { for ( i = 0 ; i < vel1 - 1 ; i ++ ) { if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' && * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p1 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pok [ 500 ] ; int i = 0 , j = 0 , brojac_slova [ 500 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 500 ] = { 0 } ; p = s ; pok [ j ] = p ; if ( * p == '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , pok [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pok [ max ] , pok [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * ( p + brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pok [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac_slova [ i ] ; } } } p = pok [ max ] ; while ( * p != '\0' ) { * p = * ( p + brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""1pst1 pst2 3pst pstpst pst"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }"
3275,98,98,0,80,A2016/Z3/Z2/student3978,A2016/Z3/Z2/student5829,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }"
3278,73,73,0,61,A2016/Z3/Z2/student5624,A2016/Z3/Z2/student8886,"#include <stdio.h> int suma ( int n ) { int cifra , s = 0 ; if ( n < 0 ) n = - n ; while ( n != 0 ) { cifra = n % 10 ; s += cifra ; n /= 10 ; } return s ; } void ubaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = vel - 1 ; j > i ; j -- ) niz [ j + 1 ] = niz [ j ] ; niz [ i + 1 ] = suma ( niz [ i ] ) ; vel ++ ; i ++ ; } } int fibonacijev_niz ( int m ) { int a = 1 , b = 1 ; if ( m < 1 ) return 0 ; while ( a < m && b < m ) { a = a + b ; b = a + b ; } if ( a == m || b == m ) return 1 ; return 0 ; } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacijev_niz ( niz [ i ] ) ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int i , niz [ 20 ] , vel = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , vel ) ; vel = izbaci ( niz , vel * 2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == vel - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> int suma ( int n ) { int c , sum = 0 ; while ( n != 0 ) { c = abs ( n % 10 ) ; sum += c ; n = n / 10 ; } return sum ; } void ubaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { for ( j = vel - 1 ; j > i ; j -- ) niz [ j + 1 ] = niz [ j ] ; niz [ i + 1 ] = suma ( niz [ i ] ) ; vel ++ ; i ++ ; } } int fibonaci ( int n ) { int x , y ; x = 1 ; y = 1 ; while ( x < n && y < n ) { x = x + y ; y = x + y ; } if ( x == n || y == n ) return 1 ; else return 0 ; } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonaci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 1000 ] , i , vel = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , vel ) ; vel = vel * 2 ; vel = izbaci ( niz , vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == vel - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }"
3281,17,17,0,14,A2016/Z4/Z2/student6029,A2016/Z4/Z2/student7180,"#include <stdio.h> void sortiraj1 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] < s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } void sortiraj2 ( char * s , int * niz , int vel ) { int temp = 0 , i = 0 , j = 0 ; char t = 32 ; for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] < niz [ j ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } for ( i = 0 ; i < vel - 1 ; i ++ ) for ( j = i + 1 ; j < vel ; j ++ ) if ( niz [ i ] == niz [ j ] ) if ( s [ j ] > s [ i ] ) { temp = niz [ i ] ; niz [ i ] = niz [ j ] ; niz [ j ] = temp ; t = s [ i ] ; s [ i ] = s [ j ] ; s [ j ] = t ; } } char * kodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = { ' ' } , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , j = 0 , br = 0 , vel = 0 , da = 0 , pret = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj1 ( slova , brojevi , vel ) ; for ( i = 0 ; i < vel ; i ++ ) { * t = slova [ i ] ; t ++ ; } for ( i = 32 ; i < 127 ; i ++ ) { pret = 1 ; for ( j = 0 ; j < vel ; j ++ ) if ( i == slova [ j ] ) pret = 0 ; if ( pret ) { * t = i ; t ++ ; * t = '\0' ; } } s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = 126 - i ; break ; } s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * tablica ) { char * s = tekst , * t = tablica , * p ; char slova [ 100 ] = """" , znak = 32 ; int brojevi [ 100 ] = { 0 } ; int i = 0 , br = 0 , vel = 0 , da = 0 ; while ( * s != '\0' ) { br = 0 ; znak = * s ; p = s ; while ( * p != '\0' ) { if ( * p == znak ) br ++ ; p ++ ; } da = 1 ; for ( i = 0 ; i < vel ; i ++ ) if ( znak == slova [ i ] ) da = 0 ; if ( da ) { slova [ vel ] = znak ; brojevi [ vel ] = br ; vel ++ ; } s ++ ; } sortiraj2 ( slova , brojevi , vel ) ; s = tekst ; while ( * s != '\0' ) { for ( i = 0 ; i < vel ; i ++ ) if ( * s == slova [ i ] ) { * s = * ( t + i ) ; break ; } s ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] = ""llmlnlnmonm"" , tablica [ 200 ] = """" ; printf ( ""%s\n%s"" , kodiraj ( tekst , tablica ) , tablica ) ; printf ( ""\n%s"" , dekodiraj ( tekst , tablica ) ) ; return 0 ; }","#include <stdio.h> void sortiranje ( int * sortiraj , int * index ) { int i = 0 , j , temp1 , temp2 ; i = 0 ; while ( i < 95 ) { j = 0 ; while ( j < 95 ) { if ( sortiraj [ j ] < sortiraj [ i ] ) { temp1 = sortiraj [ i ] ; sortiraj [ i ] = sortiraj [ j ] ; sortiraj [ j ] = temp1 ; temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } if ( sortiraj [ i ] == sortiraj [ j ] && index [ i ] < index [ j ] ) { temp2 = index [ i ] ; index [ i ] = index [ j ] ; index [ j ] = temp2 ; } j ++ ; } i ++ ; } } void stvori ( char * kljuc , int * sortiraj , int * index ) { int i ; i = 0 ; do { if ( sortiraj [ i ] != 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; i = 0 ; do { if ( sortiraj [ i ] == 0 ) { * kljuc = index [ i ] + 32 ; kljuc ++ ; } i ++ ; } while ( i < 95 ) ; * kljuc = '\0' ; } char * kodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; char * q ; int niz [ 95 ] , sort [ 95 ] , in [ 95 ] ; int i , br ; i = 0 ; while ( i < 95 ) { niz [ i ] = 0 ; i ++ ; } do { q = p ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) br ++ ; q ++ ; } if ( niz [ * p - 32 ] == 0 ) { niz [ * p - 32 ] = br ; } p ++ ; } while ( * p != '\0' ) ; i = 0 ; while ( i < 95 ) { sort [ i ] = niz [ i ] ; in [ i ] = i ; i ++ ; } sortiranje ( sort , in ) ; stvori ( kljuc , sort , in ) ; p = tekst ; q = kljuc ; do { q = kljuc ; br = 0 ; while ( * q != '\0' ) { if ( * p == * q ) { * p = 126 - br ; break ; } br ++ ; q ++ ; } p ++ ; } while ( * p != '\0' ) ; return tekst ; } char * dekodiraj ( char * tekst , char * kljuc ) { char * p = tekst ; do { * p = kljuc [ 126 - * p ] ; p ++ ; } while ( * p != '\0' ) ; return tekst ; } int main ( ) { char primjer [ ] = ""llmlnlnmonm"" ; char sifra [ 100 ] = """" ; printf ( ""%s"" , kodiraj ( primjer , sifra ) ) ; return 0 ; }"
3282,48,48,0,20,A2016/Z2/Z2/student5830,A2016/Z2/Z2/student2513,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { double a [ 500 ] , us ; int n , i , j , step , min , sec ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & a [ i ] ) ; } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < 0 ) { us = - ( ( ( a [ i ] * 180 ) / pi ) * 3600 ) ; } else { us = ( ( ( a [ i ] * 180 ) / pi ) * 3600 ) ; } us = ( int ) ( us + 0.5 ) ; step = us / 3600 ; min = ( us - step * 3600 ) / 60 ; sec = ( us - 3600 * step - 60 * min ) ; if ( sec >= 60 ) { min ++ ; sec = sec - 60 ; } if ( min >= 60 ) { step ++ ; min = min - 60 ; } if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { a [ j ] = a [ j + 1 ] ; } n -- ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { if ( a [ i ] < 0 ) { us = - ( ( ( a [ i ] * 180 ) / pi ) * 3600 ) ; } else { us = ( ( ( a [ i ] * 180 ) / pi ) * 3600 ) ; } us = ( int ) ( us + 0.5 ) ; step = us / 3600 ; min = ( us - step * 3600 ) / 60 ; sec = us - 3600 * step - 60 * min ; if ( sec >= 60 ) { min ++ ; sec = sec - 60 ; } if ( min >= 60 ) { step ++ ; min = min - 60 ; } if ( a [ i ] < 0 ) { step = - step ; } printf ( ""%d stepeni %d minuta %d sekundi\n"" , step , min , sec ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define pi 3.1415926 int main ( ) { int a , deg , min , sec , j , i ; double niz [ 500 ] , tot = 0 ; printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & a ) ; for ( j = 0 ; j < a ; j ++ ) { scanf ( ""%lf"" , & niz [ j ] ) ; } printf ( ""uglovi su:\n"" ) ; for ( j = 0 ; j < a ; j ++ ) { tot = fabs ( niz [ j ] ) * ( 180 / pi ) * 3600 ; tot = ( int ) ( tot + 0.5 ) ; deg = tot / 3600 ; min = ( tot - deg * 3600 ) / 60 ; sec = ( tot - deg * 3600 - min * 60 ) ; if ( sec >= 60 ) { min ++ ; sec = sec - 60 ; } if ( min >= 60 ) { deg ++ ; min = min - 60 ; } if ( sec <= 30 ) { if ( niz [ j ] < 0 ) printf ( ""-%d stepeni %d minuta %d sekundi\n"" , deg , min , sec ) ; else { printf ( ""%d stepeni %d minuta %d sekundi\n"" , deg , min , sec ) ; } } if ( sec > 30 ) { for ( i = j ; i < a - 1 ; i ++ ) { niz [ i ] = niz [ i + 1 ] ; } a -- ; j -- ; } } return 0 ; }"
3284,45,45,0,25,A2016/Z1/Z4/student7735,A2016/Z1/Z4/student8796,"#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i < n ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j <= 2 * i - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= ( ( n - i ) * 2 ) - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j < n ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j <= 2 * n - 3 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; while ( n < 1 || n > 50 ) { printf ( ""pogresan unos \n"" ) ; printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; } if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 1 ; i <= n - 1 ; i ++ ) { for ( j = 1 ; j <= i - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j < ( ( n - i ) * 2 ) ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; if ( i < 2 ) { for ( j = 1 ; j < ( ( n - i ) * 2 ) ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } if ( i >= 2 ) { for ( j = 1 ; j < 2 * i - 2 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j < ( ( n - i ) * 2 ) ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } } if ( i == n ) { for ( j = 1 ; j <= n - 1 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*"" ) ; for ( j = 1 ; j < 2 * n - 2 ; j ++ ) { printf ( "" "" ) ; } printf ( ""*\n"" ) ; } return 0 ; }"
3285,82,82,0,97,A2016/Z4/Z2/student6877,A2016/Z4/Z2/student8540,"#include <stdio.h> char * kodiraj ( char * string , char tablica [ 96 ] ) { int znakovi [ 97 ] = { 0 } , i , max , * p , kraj = 0 , pozicija = 97 ; char * temp = string , * temptab = tablica ; p = znakovi ; while ( * string != '\0' ) { znakovi [ * string - 32 ] ++ ; string ++ ; } while ( kraj == 0 ) { max = 0 ; kraj = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( znakovi [ i ] > max ) { max = znakovi [ i ] ; pozicija = i ; } if ( max != 0 ) kraj = 0 ; } znakovi [ pozicija ] = - 1 ; if ( max != 0 ) { * tablica = ( char ) ( pozicija + 32 ) ; tablica ++ ; } } p = znakovi ; for ( i = 0 ; i < 95 ; i ++ ) { if ( * p == 0 ) { * tablica = ( char ) ( i + 32 ) ; tablica ++ ; } p ++ ; } * tablica = '\0' ; tablica = temptab ; string = temp ; pozicija = 0 ; while ( * string != '\0' ) { tablica = temptab ; pozicija = 0 ; while ( * string != * tablica && * tablica != '\0' ) { tablica ++ ; pozicija ++ ; } * string = ( char ) ( 126 + pozicija ) ; string ++ ; } string = temp ; return string ; } char * dekodiraj ( char * string , char * tablica ) { char * temp = string ; char zamjeni = * string ; int max = 0 , i ; int tabela [ 96 ] = { - 1 } ; int checked [ 96 ] = { 0 } ; int x = 1 ; while ( * string != '\0' ) { checked [ * string - 32 ] ++ ; string ++ ; } max = 0 ; do { max = 0 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( checked [ i ] >= max ) max = checked [ i ] ; } for ( i = 95 ; i <= 0 ; i -- ) { if ( checked [ i ] == max ) { zamjeni = i + 32 ; break ; } } tabela [ zamjeni - 32 ] = * tablica ; checked [ zamjeni - 32 ] = 0 ; tablica ++ ; x = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( checked [ i ] != 0 ) x = 0 ; } } while ( x == 0 ) ; string = temp ; while ( * string != '\0' ) { * string = tabela [ * string - 32 ] ; string ++ ; } return temp ; } int main ( ) { char string [ ] = """" ; char kodovi [ 100 ] = """" ; kodiraj ( string , kodovi ) ; printf ( ""%s"" , string ) ; printf ( ""\n"" ) ; printf ( ""%s"" , kodovi ) ; dekodiraj ( string , kodovi ) ; printf ( ""%s"" , string ) ; return 0 ; }","#include <stdio.h> char * kodiraj ( char * s , char tablica [ 96 ] ) { int znakovi [ 97 ] = { 0 } , * d , end = 0 , poz = 97 , max , i = 0 ; char * temp = s ; char * tmptab = tablica ; d = znakovi ; while ( * s != '\0' ) { znakovi [ * s - 32 ] ++ ; s ++ ; } while ( end == 0 ) { max = 0 ; end = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( znakovi [ i ] > max ) { max = znakovi [ i ] ; poz = i ; } if ( max != 0 ) { end = 0 ; } } znakovi [ poz ] = - 1 ; if ( max != 0 ) { * tablica = ( char ) ( poz + 32 ) ; tablica ++ ; } } d = znakovi ; for ( i = 0 ; i < 95 ; i ++ ) { if ( * d == 0 ) { * tablica = ( char ) ( i + 32 ) ; tablica ++ ; } d ++ ; } * tablica = '\0' ; tablica = tmptab ; s = temp ; poz = 0 ; while ( * s != '\0' ) { tablica = tmptab ; poz = 0 ; while ( * s != * tablica && * tablica != '\0' ) { tablica ++ ; poz ++ ; } * s = ( char ) ( 126 - poz ) ; s ++ ; } s = temp ; return s ; } char * dekodiraj ( char * s , char * tablica ) { char * temp = s ; char c = * s ; int i , max = 0 , a = 1 ; int cd [ 96 ] = { 0 } , tbl [ 96 ] = { - 1 } ; while ( * s != '\0' ) { cd [ * s - 32 ] ++ ; s ++ ; } max = 0 ; do { max = 0 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( cd [ i ] >= max ) { max = cd [ i ] ; } } for ( i = 95 ; i >= 0 ; i -- ) { if ( cd [ i ] == max ) { c = i + 32 ; break ; } } tbl [ c - 32 ] = * tablica ; cd [ c - 32 ] = 0 ; tablica ++ ; a = 1 ; for ( i = 0 ; i < 96 ; i ++ ) { if ( cd [ i ] != 0 ) a = 0 ; } } while ( a == 0 ) ; s = temp ; while ( * s != '\0' ) { * s = tbl [ * s - 32 ] ; s ++ ; } return temp ; } int main ( ) { char t [ ] = ""llmlnlnmonm"" ; char b [ 100 ] = """" ; kodiraj ( t , b ) ; printf ( ""%s"" , t ) ; printf ( ""\n"" ) ; printf ( ""%s\n"" , b ) ; dekodiraj ( t , b ) ; printf ( ""%s"" , t ) ; return 0 ; }"
3297,84,84,0,55,A2016/Z2/Z4/student5789,A2016/Z2/Z4/student3671,"#include <stdio.h> #include<stdlib.h> int main ( ) { int m , n ; int i , j ; int cirkularna , teplicova ; cirkularna = 1 ; teplicova = 1 ; double m [ 100 ] [ 100 ] ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m > 100 || n > 100 || m <= 0 || n <= 0 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m > 100 || n > 100 || m <= 0 || n <= 0 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & m [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( ( m [ i ] [ j ] != m [ i - 1 ] [ j - 1 ] ) ) { teplicova = 0 ; } } } for ( i = 1 ; i < m ; i ++ ) { if ( ( m [ i ] [ 0 ] != m [ i - 1 ] [ n - 1 ] ) ) { cirkularna = 0 ; break ; } } if ( cirkularna && teplicova ) { printf ( ""matrica je cirkularna\n"" ) ; } else if ( teplicova && cirkularna == 0 ) { printf ( ""matrica je teplicova\n"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { double matrica [ 100 ] [ 100 ] ; int i , j , m , n , teplicova = 1 , cirkularna = 1 ; do { printf ( ""unesite m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 100 || n <= 0 || n > 100 ) { printf ( ""pogresan unos!\n"" ) ; } } while ( m <= 0 || m > 100 || n <= 0 || n > 100 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrica [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { for ( j = 1 ; j < n ; j ++ ) { if ( matrica [ i ] [ j ] != matrica [ i - 1 ] [ j - 1 ] ) { teplicova = 0 ; } } } for ( i = 1 ; i < m ; i ++ ) { if ( matrica [ i ] [ 0 ] != matrica [ i - 1 ] [ n - 1 ] ) { cirkularna = 0 ; break ; } } if ( cirkularna && teplicova ) { printf ( ""matrica je cirkularna"" ) ; } else if ( teplicova && cirkularna == 0 ) { printf ( ""matrica je teplicova"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }"
3298,43,43,0,27,A2016/Z3/Z1/student3301,A2016/Z3/Z1/student3567,"#include <stdio.h> int daj_prost ( ) { int prost = 1 , i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a , b , suma = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d"" , & a ) ; scanf ( ""%d"" , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= 0 ) ; while ( broj < b ) { broj = daj_prost ( ) ; if ( broj > a && broj < b ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { int prost = 1 , i ; static int broj = 1 ; while ( 1 ) { broj ++ ; if ( broj == 2 ) { return broj ; } else { for ( i = 2 ; i < broj ; i ++ ) { if ( broj % i == 0 ) { prost = 0 ; break ; } } if ( prost ) { return broj ; } else { prost = 1 ; } } } } int main ( ) { int a , b , i , suma = 0 , broj = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 1 ) { printf ( ""a nije prirodan broj.\n"" ) ; } else if ( a >= b ) { printf ( ""a nije manje od b.\n"" ) ; } } while ( a < 1 || a >= b || b <= a ) ; for ( i = 0 ; i < b ; i ++ ) { broj = daj_prost ( ) ; if ( broj < b && broj > a ) { suma += broj ; } } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
3300,99,99,0,78,A2016/Z3/Z2/student2142,A2016/Z3/Z2/student5961,"#include <stdio.h> int fibonacci ( int broj ) { int i = 0 , niz [ 20000 ] , jeste = 0 ; do { if ( i == 0 || i == 1 ) { niz [ i ] = 1 ; } else niz [ i ] = niz [ i - 1 ] + niz [ i - 2 ] ; if ( broj == niz [ i ] ) { jeste = 1 ; break ; } } while ( niz [ i ++ ] < broj ) ; return jeste ; } void ubaci ( int * p , int vel ) { int var , djeljitelj , * q , * d , i = 0 ; q = p ; while ( q < p + 2 * vel - 1 ) { djeljitelj = 1 ; d = q + vel - i - 1 ; while ( d >= q ) { * ( d + 1 ) = * d ; d -- ; } if ( * q < 0 ) var = - * q ; else var = * q ; while ( var >= 10 ) { var /= 10 ; djeljitelj *= 10 ; } if ( * q < 0 ) var = - * q ; else var = * q ; * ( q + 1 ) = 0 ; while ( djeljitelj >= 1 ) { * ( q + 1 ) += var / djeljitelj ; var = var - ( var / djeljitelj ) * djeljitelj ; djeljitelj /= 10 ; } i ++ ; q += 2 ; } } int izbaci ( int * p , int vel ) { int * q , * d ; q = p ; while ( q < p + vel ) { if ( fibonacci ( * q ) ) { d = q ; while ( d < ( p + vel - 1 ) ) { * d = * ( d + 1 ) ; d ++ ; } q -- ; vel -- ; } q ++ ; } return vel ; } int main ( ) { int niz [ 20000 ] , i , j ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , i ) ; i = i * 2 ; i = izbaci ( niz , i ) ; printf ( ""modificirani niz glasi: "" ) ; for ( j = 0 ; j < i ; j ++ ) { printf ( ""%d"" , niz [ j ] ) ; if ( j != i - 1 ) { printf ( "", "" ) ; } if ( j == i - 1 ) printf ( ""."" ) ; } return 0 ; }","#include <stdio.h> int fibonacci ( int broj ) { int i = 0 , niz [ 20000 ] , jeste = 0 ; do { if ( i == 0 || i == 1 ) { niz [ i ] = 1 ; } else niz [ i ] = niz [ i - 1 ] + niz [ i - 2 ] ; if ( broj == niz [ i ] ) { jeste = 1 ; break ; } } while ( niz [ i ++ ] < broj ) ; return jeste ; } void ubaci ( int * p , int vel ) { int var , djeljitelj , * q , * d , i = 0 ; q = p ; while ( q < p + 2 * vel - 1 ) { djeljitelj = 1 ; d = q + vel - i - 1 ; while ( d >= q ) { * ( d + 1 ) = * d ; d -- ; } if ( * q < 0 ) var = - * q ; else var = * q ; while ( var >= 10 ) { var /= 10 ; djeljitelj *= 10 ; } if ( * q < 0 ) var = - * q ; else var = * q ; * ( q + 1 ) = 0 ; while ( djeljitelj >= 1 ) { * ( q + 1 ) += var / djeljitelj ; var = var - ( var / djeljitelj ) * djeljitelj ; djeljitelj /= 10 ; } i ++ ; q += 2 ; } } int izbaci ( int * p , int vel ) { int * q , * d ; q = p ; while ( q < p + vel ) { if ( fibonacci ( * q ) ) { d = q ; while ( d < ( p + vel - 1 ) ) { * d = * ( d + 1 ) ; d ++ ; } q -- ; vel -- ; } q ++ ; } return vel ; } int main ( ) { int niz [ 20000 ] , i , j ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , i ) ; i = i * 2 ; i = izbaci ( niz , i ) ; printf ( ""modificirani niz glasi: "" ) ; for ( j = 0 ; j < i ; j ++ ) { printf ( ""%d"" , niz [ j ] ) ; if ( j != i - 1 ) { printf ( "", "" ) ; } if ( j == i - 1 ) printf ( ""."" ) ; } return 0 ; }"
3307,99,99,0,82,A2016/Z3/Z3/student3301,A2016/Z3/Z3/student2526,"#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , j , m , n , i , k = 0 , m , n , temp ; int brojac = 0 ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 200 || n < 1 || n > 200 ) printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || m > 200 || n < 1 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & matrica [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < n ; k ++ ) { if ( matrica [ i ] [ k ] == matrica [ j ] [ k ] ) { brojac ++ ; } if ( brojac == n ) { for ( m = j + 1 ; m < m ; m ++ ) { for ( n = 0 ; n < n ; n ++ ) { temp = matrica [ m - 1 ] [ n ] ; matrica [ m - 1 ] [ n ] = matrica [ m ] [ n ] ; matrica [ m ] [ n ] = temp ; } } m -- ; j -- ; } } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { brojac = 0 ; for ( k = 0 ; k < m ; k ++ ) { if ( matrica [ k ] [ i ] == matrica [ k ] [ j ] ) { brojac ++ ; } if ( brojac == m ) { for ( m = j + 1 ; m < n ; m ++ ) { for ( n = 0 ; n < m ; n ++ ) { temp = matrica [ n ] [ m - 1 ] ; matrica [ n ] [ m - 1 ] = matrica [ n ] [ m ] ; matrica [ n ] [ m ] = temp ; } } n -- ; j -- ; } } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi: \n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , matrica [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3311,96,96,0,47,A2016/Z3/Z1/student4804,A2016/Z3/Z1/student2508,"#include <stdio.h> int daj_prost ( ) { static int br = 1 ; int i , prost ; br ++ ; do { prost = 1 ; for ( i = 2 ; i < br ; i ++ ) { if ( br % i == 0 ) { prost = 0 ; br ++ ; break ; } } } while ( prost == 0 ) ; return br ; } int main ( ) { int a , b , i , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( b <= a ) printf ( ""a nije manje od b.\n"" ) ; } while ( a <= 0 || a >= b ) ; for ( i = 0 ; i < b ; i = daj_prost ( ) ) { if ( i > a ) suma = suma + i ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int daj_prost ( ) { static int br = 1 ; int i , prost ; br ++ ; do { prost = 1 ; for ( i = 2 ; i < br ; i ++ ) { if ( br % i == 0 ) { prost = 0 ; br ++ ; break ; } } } while ( prost == 0 ) ; return br ; } int main ( ) { int a , b , i , suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a <= 0 ) printf ( ""a nije prirodan broj.\n"" ) ; if ( b <= a ) printf ( ""a nije manje od b.\n"" ) ; } while ( a <= 0 || a >= b ) ; for ( i = 0 ; i < b ; i = daj_prost ( ) ) { if ( i > a ) suma = suma + i ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
3336,99,99,0,99,A2016/Z3/Z2/student7823,A2016/Z3/Z2/student1639,"#include <stdio.h> #include <stdlib.h> int izbaci ( int * niz , int duzinaniza ) ; void ubaci ( int * niz , int duzinaniza ) ; int sumacifara ( int broj ) ; int pomjeriniz ( int * niz , int duzinaniza , int pocetakpomjeranja ) ; int dalijefibonacijevbroj ( int broj ) ; void zamijenibrojeve ( int * a , int * b ) ; void ispisiniz ( int * niz , int duzinaniza ) ; void pomjeriniznazad ( int * niz , int duzina , int pocetakpomjeranja ) ; int main ( ) { int broj , i , j ; int niz [ 20 ] ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , niz + i ) ; ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; ispisiniz ( niz , broj ) ; return 0 ; } int izbaci ( int * niz , int duzinaniza ) { int i ; for ( i = 0 ; i < duzinaniza ; i ++ ) { if ( dalijefibonacijevbroj ( * ( niz + i ) ) == 1 ) { pomjeriniznazad ( niz , duzinaniza , i ) ; duzinaniza -- ; i -- ; } } return duzinaniza ; } void ubaci ( int * niz , int duzinaniza ) { int i ; for ( i = 0 ; i < duzinaniza ; i += 2 ) { duzinaniza = pomjeriniz ( niz , duzinaniza , i + 1 ) ; } for ( i = 1 ; i < duzinaniza ; i += 2 ) { * ( niz + i ) = sumacifara ( * ( niz + ( i - 1 ) ) ) ; } } int sumacifara ( int broj ) { int suma = 0 ; broj = abs ( broj ) ; while ( broj != 0 ) { suma += broj % 10 ; broj /= 10 ; } return suma ; } int pomjeriniz ( int * niz , int duzinaniza , int pocetakpomjeranja ) { int i ; for ( i = duzinaniza + 1 ; i > pocetakpomjeranja ; i -- ) * ( niz + i ) = * ( niz + i - 1 ) ; * ( niz + pocetakpomjeranja ) = 0 ; return ++ duzinaniza ; } int dalijefibonacijevbroj ( int broj ) { int fibonacijev1 = 1 ; int fibonacijev2 = 1 ; int temp ; if ( broj < 1 ) return 0 ; while ( broj >= fibonacijev2 ) { if ( broj == fibonacijev1 || broj == fibonacijev2 ) return 1 ; temp = fibonacijev1 + fibonacijev2 ; fibonacijev1 = fibonacijev2 ; fibonacijev2 = temp ; } return 0 ; } void zamijenibrojeve ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } void ispisiniz ( int * niz , int duzinaniza ) { int i ; for ( i = 0 ; i < duzinaniza ; i ++ ) { printf ( ""%d"" , * ( niz + i ) ) ; if ( i == duzinaniza - 1 ) break ; printf ( "", "" ) ; } printf ( ""."" ) ; } void pomjeriniznazad ( int * niz , int duzina , int pocetakpomjeranja ) { int i ; for ( i = pocetakpomjeranja + 1 ; i < duzina ; i ++ ) { * ( niz + ( i - 1 ) ) = * ( niz + i ) ; } }","#include <stdio.h> #include <stdlib.h> int izbaci ( int * niz , int duzinaniza ) ; void ubaci ( int * niz , int duzinaniza ) ; int sumacifara ( int broj ) ; int pomjeriniz ( int * niz , int duzinaniza , int pocetakpomjeranja ) ; int dalijefibonacijevbroj ( int broj ) ; void zamijenibrojeve ( int * a , int * b ) ; void ispisiniz ( int * niz , int duzinaniza ) ; void pomjeriniznazad ( int * niz , int duzina , int pocetakpomjeranja ) ; int main ( ) { int broj , i , j ; int niz [ 20 ] ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , niz + i ) ; ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; ispisiniz ( niz , broj ) ; return 0 ; } int izbaci ( int * niz , int duzinaniza ) { int i ; for ( i = 0 ; i < duzinaniza ; i ++ ) { if ( dalijefibonacijevbroj ( * ( niz + i ) ) == 1 ) { pomjeriniznazad ( niz , duzinaniza , i ) ; duzinaniza -- ; i -- ; } } return duzinaniza ; } void ubaci ( int * niz , int duzinaniza ) { int i ; for ( i = 0 ; i < duzinaniza ; i += 2 ) { duzinaniza = pomjeriniz ( niz , duzinaniza , i + 1 ) ; } for ( i = 1 ; i < duzinaniza ; i += 2 ) { * ( niz + i ) = sumacifara ( * ( niz + ( i - 1 ) ) ) ; } } int sumacifara ( int broj ) { int suma = 0 ; broj = abs ( broj ) ; while ( broj != 0 ) { suma += broj % 10 ; broj /= 10 ; } return suma ; } int pomjeriniz ( int * niz , int duzinaniza , int pocetakpomjeranja ) { int i ; for ( i = duzinaniza + 1 ; i > pocetakpomjeranja ; i -- ) * ( niz + i ) = * ( niz + i - 1 ) ; * ( niz + pocetakpomjeranja ) = 0 ; return ++ duzinaniza ; } int dalijefibonacijevbroj ( int broj ) { int fibonacijev1 = 1 ; int fibonacijev2 = 1 ; int temp ; if ( broj < 1 ) return 0 ; while ( broj >= fibonacijev2 ) { if ( broj == fibonacijev1 || broj == fibonacijev2 ) return 1 ; temp = fibonacijev1 + fibonacijev2 ; fibonacijev1 = fibonacijev2 ; fibonacijev2 = temp ; } return 0 ; } void zamijenibrojeve ( int * a , int * b ) { int temp ; temp = * a ; * a = * b ; * b = temp ; } void ispisiniz ( int * niz , int duzinaniza ) { int i ; for ( i = 0 ; i < duzinaniza ; i ++ ) { printf ( ""%d"" , * ( niz + i ) ) ; if ( i == duzinaniza - 1 ) break ; printf ( "", "" ) ; } printf ( ""."" ) ; } void pomjeriniznazad ( int * niz , int duzina , int pocetakpomjeranja ) { int i ; for ( i = pocetakpomjeranja + 1 ; i < duzina ; i ++ ) { * ( niz + ( i - 1 ) ) = * ( niz + i ) ; } }"
3350,61,61,0,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8753,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> void dbr ( char * p , char * k , float * x , float * y ) { char * q = p ; int min ; float a , b ; * x = 0 ; * y = 0 ; while ( q != k ) { q ++ ; min = 0 ; if ( * q == '-' ) { min = 1 ; q ++ ; } * x = 0 ; while ( * q >= '0' && * q <= '9' ) { * x = * x * 10 + ( * q - '0' ) ; q ++ ; } if ( * q == '.' ) { q ++ ; a = 0 ; while ( * q >= '0' && * q <= '9' ) { a = a * 10 + ( * q - '0' ) ; q ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( min == 1 ) * x *= - 1 ; if ( * q == ',' ) q ++ ; min = 0 ; if ( * q == '-' ) { min = 1 ; q ++ ; } * y = 0 ; while ( * q >= '0' && * q <= '9' ) { * y = * y * 10 + ( * q - '0' ) ; q ++ ; } if ( * q == '.' ) { q ++ ; b = 0 ; while ( * q >= '0' && * q <= '9' ) { b = b * 10 + ( * q - '0' ) ; q ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( min == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * q = s ; char * p , * k , * i ; float x , y ; while ( * q != '\0' ) { if ( * q == '(' ) { p = q ; while ( * q != ')' ) q ++ ; k = q ; dbr ( p , k , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { q ++ ; while ( * q == ',' ) q ++ ; i = q ; while ( * i != '\0' ) { * p ++ = * i ++ ; } * p = '\0' ; q = q - ( i - p ) ; } } else q ++ ; } if ( q != s ) q -- ; if ( * q == ',' ) * q = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0,-3.1),(-15.09,4),(2.,2),(-1.1,217)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
3354,99,99,0,155,A2016/Z4/Z2/student9315,A2016/Z4/Z2/student4766,"#include <stdio.h> #include <stdlib.h> char * kodiraj ( char * kodiraj , char * sifra ) ; char * dekodiraj ( char * kodiraj , char * sifra ) ; void popunisifru ( char * kodiraj , char * sifra ) ; void swap ( char a , char b , char * niz ) ; void izbaciizniza ( char znak , char * niz ) ; void popunisifru ( char * kodiraj , char * sifra ) { char * startkod = kodiraj ; char * startsifra = sifra ; char * temp ; char * max ; int size = 1 ; int num = 0 ; int maxval = 0 ; char * niz ; char * startniz ; char * pokniz ; int i = 0 , j ; int min ; char trade ; char location = ' ' ; while ( * kodiraj ++ != '\0' ) { size ++ ; } kodiraj = startkod ; niz = ( char * ) malloc ( size * sizeof ( char ) ) ; startniz = niz ; pokniz = niz ; while ( * kodiraj != '\0' ) { niz [ i ++ ] = * kodiraj ++ ; } niz [ i ] = '\0' ; kodiraj = startkod ; for ( i = 32 ; i <= 126 ; i ++ ) { * sifra ++ = i ; } * sifra = '\0' ; while ( * niz != '\0' ) { startniz = niz ; maxval = 0 ; while ( * startniz != '\0' ) { temp = pokniz ; num = 0 ; while ( * pokniz != '\0' ) { if ( * pokniz == * startniz ) { num ++ ; } pokniz ++ ; } if ( num >= maxval ) { if ( num > maxval ) { maxval = num ; max = startniz ; } else if ( num == maxval && * startniz < * max ) { max = startniz ; } } pokniz = temp ; startniz ++ ; } swap ( location ++ , * max , startsifra ) ; izbaciizniza ( * max , niz ) ; } for ( i = location - ' ' ; i < 95 ; i ++ ) { min = i ; for ( j = i + 1 ; j < 95 ; j ++ ) { if ( startsifra [ j ] < startsifra [ min ] ) min = j ; } trade = startsifra [ i ] ; startsifra [ i ] = startsifra [ min ] ; startsifra [ min ] = trade ; } free ( niz ) ; } void izbaciizniza ( char znak , char * niz ) { char * p = niz ; char * temp ; while ( * p != '\0' ) { if ( * p == znak ) { temp = p ; while ( * p != '\0' ) { * p = * ( p + 1 ) ; p ++ ; } p = temp - 1 ; } p ++ ; } } void swap ( char a , char b , char * niz ) { char * p = niz ; while ( * p != '\0' ) { if ( * p == a ) * p = b ; else if ( * p == b ) * p = a ; p ++ ; } } char * kodiraj ( char * kodiraj , char * sifra ) { char * ret = kodiraj ; char * startsifra = sifra ; int i = 0 ; popunisifru ( kodiraj , sifra ) ; while ( * kodiraj != '\0' ) { for ( i = 0 ; i < 96 ; i ++ ) { if ( * kodiraj == sifra [ i ] ) { * kodiraj = 126 - i ; break ; } } kodiraj ++ ; } return ret ; } char * dekodiraj ( char * kodiraj , char * sifra ) { char * ret = kodiraj ; int i = 0 ; while ( * kodiraj != '\0' ) { for ( i = 0 ; i < 96 ; i ++ ) { if ( * kodiraj == 126 - i ) { * kodiraj = sifra [ i ] ; break ; } } kodiraj ++ ; } return ret ; } int main ( ) { return 0 ; }","#include <stdio.h> #include <stdlib.h> char * kodiraj ( char * kodiraj , char * sifra ) ; char * dekodiraj ( char * kodiraj , char * sifra ) ; void popunisifru ( char * kodiraj , char * sifra ) ; void swap ( char a , char b , char * niz ) ; void izbaciizniza ( char znak , char * niz ) ; void popunisifru ( char * kodiraj , char * sifra ) { char * startkod = kodiraj ; char * startsifra = sifra ; char * temp ; char * max ; int size = 1 ; int num = 0 ; int maxval = 0 ; char * niz ; char * startniz ; char * pokniz ; int i = 0 , j ; int min ; char trade ; char location = ' ' ; while ( * kodiraj ++ != '\0' ) { size ++ ; } kodiraj = startkod ; niz = ( char * ) malloc ( size * sizeof ( char ) ) ; startniz = niz ; pokniz = niz ; while ( * kodiraj != '\0' ) { niz [ i ++ ] = * kodiraj ++ ; } niz [ i ] = '\0' ; kodiraj = startkod ; for ( i = 32 ; i <= 126 ; i ++ ) { * sifra ++ = i ; } * sifra = '\0' ; while ( * niz != '\0' ) { startniz = niz ; maxval = 0 ; while ( * startniz != '\0' ) { temp = pokniz ; num = 0 ; while ( * pokniz != '\0' ) { if ( * pokniz == * startniz ) { num ++ ; } pokniz ++ ; } if ( num >= maxval ) { if ( num > maxval ) { maxval = num ; max = startniz ; } else if ( num == maxval && * startniz < * max ) { max = startniz ; } } pokniz = temp ; startniz ++ ; } swap ( location ++ , * max , startsifra ) ; izbaciizniza ( * max , niz ) ; } for ( i = location - ' ' ; i < 95 ; i ++ ) { min = i ; for ( j = i + 1 ; j < 95 ; j ++ ) { if ( startsifra [ j ] < startsifra [ min ] ) min = j ; } trade = startsifra [ i ] ; startsifra [ i ] = startsifra [ min ] ; startsifra [ min ] = trade ; } free ( niz ) ; } void izbaciizniza ( char znak , char * niz ) { char * p = niz ; char * temp ; while ( * p != '\0' ) { if ( * p == znak ) { temp = p ; while ( * p != '\0' ) { * p = * ( p + 1 ) ; p ++ ; } p = temp - 1 ; } p ++ ; } } void swap ( char a , char b , char * niz ) { char * p = niz ; while ( * p != '\0' ) { if ( * p == a ) * p = b ; else if ( * p == b ) * p = a ; p ++ ; } } char * kodiraj ( char * kodiraj , char * sifra ) { char * ret = kodiraj ; char * startsifra = sifra ; int i = 0 ; popunisifru ( kodiraj , sifra ) ; while ( * kodiraj != '\0' ) { for ( i = 0 ; i < 96 ; i ++ ) { if ( * kodiraj == sifra [ i ] ) { * kodiraj = 126 - i ; break ; } } kodiraj ++ ; } return ret ; } char * dekodiraj ( char * kodiraj , char * sifra ) { char * ret = kodiraj ; int i = 0 ; while ( * kodiraj != '\0' ) { for ( i = 0 ; i < 96 ; i ++ ) { if ( * kodiraj == 126 - i ) { * kodiraj = sifra [ i ] ; break ; } } kodiraj ++ ; } return ret ; } int main ( ) { return 0 ; }"
3366,57,57,0,39,A2016/Z3/Z2/student1180,A2016/Z3/Z2/student4526,"#include <stdio.h> #include <math.h> void ubaci ( int niz [ ] , int vel ) { int i , x , y , suma ; x = 2 * vel - 2 ; for ( i = vel - 1 ; i >= 0 ; i -- ) { niz [ x ] = niz [ i ] ; x = x - 2 ; } for ( i = 0 ; i < 2 * vel ; i += 2 ) { suma = 0 ; y = fabs ( niz [ i ] ) ; do { suma = suma + y % 10 ; y = y / 10 ; } while ( y != 0 ) ; niz [ i + 1 ] = suma ; } } int izbaci ( int niz [ ] , int vel ) { int i , j , niz1 [ 100 ] , k , l , m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( i = 2 ; i < 100 ; i ++ ) { niz1 [ i ] = niz1 [ i - 1 ] + niz1 [ i - 2 ] ; } for ( l = 0 ; l < vel ; l ++ ) { if ( niz [ l ] == 1 ) { for ( m = l ; m < vel - 1 ; m ++ ) { niz [ m ] = niz [ m + 1 ] ; } vel -- ; l -- ; } else { for ( j = 2 ; j < 100 ; j ++ ) { if ( niz [ l ] == niz1 [ j ] ) { for ( k = l ; k < vel - 1 ; k ++ ) { niz [ k ] = niz [ k + 1 ] ; } vel -- ; l -- ; break ; } } } } return vel ; } int main ( ) { int niz [ 100 ] , i , z ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; z = izbaci ( niz , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < z ; i ++ ) { if ( i < z - 1 ) { printf ( ""%d, "" , niz [ i ] ) ; } else { printf ( ""%d."" , niz [ i ] ) ; } } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> void ubaci ( int niz11 [ ] , int duzina ) { int i , j , k , l , m , n = 0 , c , d ; m = duzina * 2 - 2 ; for ( j = duzina - 1 ; j >= 0 ; j -- ) { niz11 [ m ] = niz11 [ j ] ; m = m - 2 ; } for ( k = 0 ; k < 2 * duzina ; k = k + 2 ) { n = 0 ; l = fabs ( niz11 [ k ] ) ; do { n = n + l % 10 ; l = l / 10 ; } while ( l != 0 ) ; niz11 [ k + 1 ] = n ; } } int izbaci ( int niz11 [ ] , int duzina ) { int a , b , c , d , e , f , g , i , j , k ; int niz12 [ 100 ] ; niz12 [ 0 ] = 1 ; niz12 [ 1 ] = 1 ; for ( j = 2 ; j < 100 ; j ++ ) { niz12 [ j ] = niz12 [ j - 1 ] + niz12 [ j - 2 ] ; } for ( i = 0 ; i < duzina ; i ++ ) { if ( niz11 [ i ] == 1 ) { for ( k = i ; k < duzina - 1 ; k ++ ) { niz11 [ k ] = niz11 [ k + 1 ] ; } duzina -- ; i -- ; k -- ; } else { for ( a = 2 ; a < 100 ; a ++ ) { if ( niz11 [ i ] == niz12 [ a ] ) { g = duzina - 1 ; for ( b = i ; b < g ; b ++ ) { niz11 [ b ] = niz11 [ b + 1 ] ; } duzina -- ; i -- ; b -- ; break ; } } } } return duzina ; } int main ( ) { int niz11 [ 100 ] , i , j , k , l , m = 10 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( j = 0 ; j < m ; j ++ ) { scanf ( ""%d"" , & niz11 [ j ] ) ; } ubaci ( niz11 , 10 ) ; l = izbaci ( niz11 , 20 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < l ; i ++ ) { if ( i != l - 1 ) { printf ( ""%d, "" , niz11 [ i ] ) ; } else printf ( ""%d."" , niz11 [ i ] ) ; } return 0 ; }"
3367,99,99,0,24,A2016/Z1/Z4/student8580,A2016/Z1/Z4/student4852,"#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int n , i , j ; do { printf ( ""unesite broj n: "" ) ; scanf ( ""%d"" , & n ) ; if ( n <= 0 || n > 50 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 50 ) ; if ( n == 1 ) { printf ( ""***"" ) ; return 0 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < 4 * n - 3 ; j ++ ) { if ( i == j || 2 * n - 2 - i == j || 2 * n - 2 + i == j || 4 * n - 4 - i == j ) { printf ( ""*"" ) ; } else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3370,81,81,0,40,A2016/Z1/Z3/student1278,A2016/Z1/Z3/student9498,"#include <stdio.h> int main ( ) { int c = 0 , p = 0 , b = 0 , s = 0 , v = 0 , uk = 0 ; float pr ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c = c + 1 ; uk = uk + 1 ; } if ( boja == 'b' || boja == 'b' ) { b = b + 1 ; uk = uk + 1 ; } if ( boja == 's' || boja == 's' ) { s = s + 1 ; uk = uk + 1 ; } if ( boja == 'v' || boja == 'v' ) { v = v + 1 ; uk = uk + 1 ; } if ( boja == 'p' || boja == 'p' ) { p = p + 1 ; uk = uk + 1 ; } if ( boja != 'c' && boja != 'c' && boja != 'b' && boja != 'b' && boja != 's' && boja != 's' && boja != 'v' && boja != 'v' && boja != 'p' && boja != 'p' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos\n"" ) ; } if ( boja == 'k' || boja == 'k' ) { goto l1 ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c > b && c > s && c > v && c > p ) { pr = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , pr ) ; } if ( c < b && b > s && b > v && b > p ) { pr = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , pr ) ; } if ( c < s && b < s && s > v && s > p ) { pr = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , pr ) ; } if ( c < v && b < v && s < v && v > p ) { pr = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , pr ) ; } if ( c < p && b < p && s < p && v < p ) { pr = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , pr ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int c = 0 , p = 0 , b = 0 , s = 0 , v = 0 , uk = 0 ; float procenat ; char boja = ' ' ; printf ( ""unesite vozila: "" ) ; while ( boja != 'k' || boja != 'k' ) { scanf ( ""%c"" , & boja ) ; if ( boja == 'c' || boja == 'c' ) { c ++ ; uk ++ ; } if ( boja == 'b' || boja == 'b' ) { b ++ ; uk ++ ; } if ( boja == 's' || boja == 's' ) { s ++ ; uk ++ ; } if ( boja == 'v' || boja == 'v' ) { v ++ ; uk ++ ; ; } if ( boja == 'p' || boja == 'p' ) { p ++ ; uk ++ ; } if ( boja != 'c' && boja != 'c' && boja != 'b' && boja != 'b' && boja != 's' && boja != 's' && boja != 'v' && boja != 'v' && boja != 'p' && boja != 'p' && boja != 'k' && boja != 'k' ) { printf ( ""neispravan unos\n"" ) ; } if ( boja == 'k' || boja == 'k' ) { goto l1 ; } } l1 : printf ( ""ukupno evidentirano %d vozila.\n"" , uk ) ; if ( uk == 0 ) { printf ( ""najpopularnija boja je crna (0.00%%)."" ) ; return 0 ; } if ( c >= b && c >= s && c >= v && c >= p ) { procenat = ( ( float ) c / uk ) * 100 ; printf ( ""najpopularnija boja je crna (%.2f%%)."" , procenat ) ; } if ( c < b && b >= s && b >= v && b >= p ) { procenat = ( ( float ) b / uk ) * 100 ; printf ( ""najpopularnija boja je bijela (%.2f%%)."" , procenat ) ; } if ( c < s && b < s && s >= v && s >= p ) { procenat = ( ( float ) s / uk ) * 100 ; printf ( ""najpopularnija boja je siva (%.2f%%)."" , procenat ) ; } if ( c < v && b < v && s < v && v >= p ) { procenat = ( ( float ) v / uk ) * 100 ; printf ( ""najpopularnija boja je crvena (%.2f%%)."" , procenat ) ; } if ( c < p && b < p && s < p && v < p ) { procenat = ( ( float ) p / uk ) * 100 ; printf ( ""najpopularnija boja je plava (%.2f%%)."" , procenat ) ; } return 0 ; }"
3376,98,98,0,24,A2016/Z1/Z2/student5673,A2016/Z1/Z2/student2111,"#include <stdio.h> int main ( ) { float a , b , c , d , e , f ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a , & b , & c , & d ) ; if ( ( a == c ) && ( b == d ) ) { printf ( ""poklapaju se"" ) ; return 0 ; } if ( a == c ) { printf ( ""paralelne su"" ) ; return 0 ; } else { e = ( d - b ) / ( a - c ) ; f = a * e + b ; if ( f == 0.0 && e == 0.0 ) { printf ( ""prave se sijeku u tacci(0.00,0.00"" ) ; return 0 ; } printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , e , f ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a , b , c , d , xp , yp ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a , & b , & c , & d ) ; if ( ( a == c ) && ( b == d ) ) { printf ( ""poklapaju se"" ) ; return 0 ; } if ( a == c ) { printf ( ""paralelne su"" ) ; return 0 ; } else { xp = ( d - b ) / ( a - c ) ; yp = a * xp + b ; if ( yp == 0.0 && xp == 0.0 ) { printf ( ""prave se sijeku u tacci (0.00,0.00)"" ) ; return 0 ; } printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , xp , yp ) ; } return 0 ; }"
3380,98,98,0,76,A2016/Z4/Z2/student8085,A2016/Z4/Z2/student4526,"#include <stdio.h> char * kodiraj ( char * tekst , char * tabela ) { char * pomocni = tekst ; char * pomocnitabela ; int max , j , index ; int i , temp , brojac = 0 ; int pomocniniz [ 127 ] = { 0 } ; while ( * pomocni != '\0' ) { temp = * pomocni ; pomocniniz [ temp ] ++ ; pomocni ++ ; } for ( i = 0 ; i < 127 ; i ++ ) { max = pomocniniz [ i ] ; index = i ; for ( j = i ; j < 127 ; j ++ ) if ( pomocniniz [ j ] > max ) { max = pomocniniz [ j ] ; index = j ; } if ( max != 0 ) { tabela [ brojac ] = index ; pomocniniz [ index ] = - 1 ; brojac ++ ; } } for ( i = 32 ; i < 127 ; i ++ ) { if ( pomocniniz [ i ] == 0 ) { tabela [ brojac ] = i ; brojac ++ ; } } tabela [ brojac ] = '\0' ; pomocni = tekst ; pomocnitabela = tabela ; brojac = 0 ; while ( * pomocni != '\0' ) { pomocnitabela = tabela ; brojac = 0 ; while ( * pomocnitabela != '\0' ) { if ( * pomocnitabela == * pomocni ) break ; else brojac ++ ; pomocnitabela ++ ; } * pomocni = 126 - brojac ; pomocni ++ ; } pomocni = '\0' ; return tekst ; } char * dekodiraj ( char * tekst , char * tabela ) { char * pomocni = tekst ; while ( * pomocni != '\0' ) { * pomocni = tabela [ 126 - * pomocni ] ; pomocni ++ ; } return tekst ; } int main ( ) { char tekst [ ] = ""ovo cemo sifrirati 2 puta"" ; char sifrarnik [ 100 ] = """" ; char sifrarnik2 [ 100 ] = """" ; int i ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik [ i ] ) ; kodiraj ( tekst , sifrarnik2 ) ; printf ( ""%s"" , tekst ) ; return 0 ; }","#include <stdio.h> char * kodiraj ( char * tekst , char * tabela ) { char * pomocni = tekst ; char * pomocnitabela ; int max , j , index ; int i , temp , brojac = 0 ; int pomocniniz [ 127 ] = { 0 } ; while ( * pomocni != '\0' ) { temp = * pomocni ; pomocniniz [ temp ] ++ ; pomocni ++ ; } for ( i = 0 ; i < 127 ; i ++ ) { max = pomocniniz [ i ] ; index = i ; for ( j = i ; j < 127 ; j ++ ) if ( pomocniniz [ j ] > max ) { max = pomocniniz [ j ] ; index = j ; } if ( max != 0 ) { tabela [ brojac ] = index ; pomocniniz [ index ] = - 1 ; brojac ++ ; } } for ( i = 32 ; i < 127 ; i ++ ) { if ( pomocniniz [ i ] == 0 ) { tabela [ brojac ] = i ; brojac ++ ; } } tabela [ brojac ] = '\0' ; pomocni = tekst ; pomocnitabela = tabela ; brojac = 0 ; while ( * pomocni != '\0' ) { pomocnitabela = tabela ; brojac = 0 ; while ( * pomocnitabela != '\0' ) { if ( * pomocnitabela == * pomocni ) break ; else brojac ++ ; pomocnitabela ++ ; } * pomocni = 126 - brojac ; pomocni ++ ; } pomocni = '\0' ; return tekst ; } char * dekodiraj ( char * tekst , char * tabela ) { char * pomocni = tekst ; while ( * pomocni != '\0' ) { * pomocni = tabela [ 126 - * pomocni ] ; pomocni ++ ; } return tekst ; } int main ( ) { char tekst [ ] = ""ovo cemo sifrirati 2 puta"" ; char sifrarnik [ 100 ] = """" ; char sifrarnik2 [ 100 ] = """" ; int i ; kodiraj ( tekst , sifrarnik ) ; printf ( ""%s"" , tekst ) ; for ( i = 0 ; i < 10 ; i ++ ) printf ( ""%c"" , sifrarnik [ i ] ) ; kodiraj ( tekst , sifrarnik2 ) ; printf ( ""%s"" , tekst ) ; return 0 ; }"
3383,91,91,0,35,A2016/Z2/Z3/student6550,A2016/Z2/Z3/student7255,"#include <stdio.h> int main ( ) { int n , x , y , i , j , k ; char a [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; while ( n <= 0 || n > 10 ) { printf ( ""pogresan unos "" ) ; printf ( ""\nunesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; } for ( i = 0 ; i < 20 ; i ++ ) for ( j = 0 ; j < 20 ; j ++ ) a [ i ] [ j ] = ' ' ; for ( k = 0 ; k < n ; k ++ ) { printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & x , & y ) ; while ( x < 0 || x > 19 || y < 0 || y > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , k + 1 ) ; scanf ( ""%d%d"" , & x , & y ) ; } a [ y ] [ x ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) printf ( ""%c"" , a [ i ] [ j ] ) ; printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int bt , n , i , j ; int p , d ; char niz [ 20 ] [ 20 ] ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; while ( bt < 1 || bt > 10 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & bt ) ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { niz [ i ] [ j ] = ' ' ; } } for ( i = 0 ; i < bt ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; while ( p < 0 || p > 19 || d < 0 || d > 19 ) { printf ( ""pogresan unos\n"" ) ; printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & p , & d ) ; } niz [ d ] [ p ] = '*' ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { printf ( ""%c"" , niz [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3387,97,97,0,110,A2016/Z4/Z4/student8631,A2016/Z4/Z4/student8753,"#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }","#include <stdio.h> void dbr ( char * p , char * k , float * x , float * y ) { char * q = p ; int min ; float a , b ; * x = 0 ; * y = 0 ; while ( q != k ) { q ++ ; min = 0 ; if ( * q == '-' ) { min = 1 ; q ++ ; } * x = 0 ; while ( * q >= '0' && * q <= '9' ) { * x = * x * 10 + ( * q - '0' ) ; q ++ ; } if ( * q == '.' ) { q ++ ; a = 0 ; while ( * q >= '0' && * q <= '9' ) { a = a * 10 + ( * q - '0' ) ; q ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( min == 1 ) * x *= - 1 ; if ( * q == ',' ) q ++ ; min = 0 ; if ( * q == '-' ) { min = 1 ; q ++ ; } * y = 0 ; while ( * q >= '0' && * q <= '9' ) { * y = * y * 10 + ( * q - '0' ) ; q ++ ; } if ( * q == '.' ) { q ++ ; b = 0 ; while ( * q >= '0' && * q <= '9' ) { b = b * 10 + ( * q - '0' ) ; q ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( min == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * q = s ; char * p , * k , * i ; float x , y ; while ( * q != '\0' ) { if ( * q == '(' ) { p = q ; while ( * q != ')' ) q ++ ; k = q ; dbr ( p , k , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { q ++ ; while ( * q == ',' ) q ++ ; i = q ; while ( * i != '\0' ) { * p ++ = * i ++ ; } * p = '\0' ; q = q - ( i - p ) ; } } else q ++ ; } if ( q != s ) q -- ; if ( * q == ',' ) * q = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0,-3.1),(-15.09,4),(2.,2),(-1.1,217)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
3391,99,99,0,32,A2016/Z2/Z3/student1180,A2016/Z2/Z3/student4973,"#include <stdio.h> int main ( ) { int i , j , n , a , b ; int mat [ 20 ] [ 20 ] = { { 0 } } ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & n ) ; if ( n > 10 || n <= 0 ) printf ( ""pogresan unos\n"" ) ; } while ( n > 10 || n <= 0 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a < 0 || a >= 20 || b < 0 || b >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else mat [ b ] [ a ] = 1 ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int a , b , c , i , j ; int mat [ 20 ] [ 20 ] = { 0 } ; do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%d"" , & a ) ; if ( a <= 0 || a > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( a <= 0 || a > 10 ) ; for ( i = 0 ; i < a ; i ++ ) { printf ( ""unesite %d. tacku: "" , i + 1 ) ; scanf ( ""%d%d"" , & b , & c ) ; if ( b < 0 || b >= 20 || c < 0 || c >= 20 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } else mat [ c ] [ b ] = 1 ; } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { if ( mat [ i ] [ j ] == 1 ) printf ( ""*"" ) ; else printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3392,82,82,0,20,A2016/Z1/Z2/student7980,A2016/Z1/Z2/student5122,"#include <stdio.h> #include<math.h> #define epsilon 0.0001 int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) < epsilon ) { printf ( ""poklapaju se"" ) ; } else if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) > epsilon ) { printf ( ""paralelne su"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a2 * x + b2 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define epsilon 0.00001 int main ( ) { float a1 , b1 , a2 , b2 ; float x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( fabs ( a1 - a2 ) < epsilon && fabs ( b1 - b2 ) >= epsilon ) { printf ( ""paralelne su"" ) ; } else if ( fabs ( a1 - a2 ) < epsilon && fabs ( b2 - b1 ) < epsilon ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
3398,99,99,0,52,A2016/Z2/Z2/student9524,A2016/Z2/Z2/student4644,"#include <stdio.h> #define pi 3.1415926 int main ( ) { int n , i , j ; float sec , min , step ; float niz [ 500 ] = { 0 } ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 500 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { niz [ i ] = niz [ i ] * 180. / pi ; } for ( i = 0 ; i < n ; i ++ ) { step = ( int ) niz [ i ] ; min = ( niz [ i ] - ( int ) niz [ i ] ) * 60 ; sec = ( min - ( int ) min ) * 60 ; if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; n -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { step = ( int ) niz [ i ] ; min = ( niz [ i ] - ( int ) niz [ i ] ) * 60 ; sec = ( min - ( int ) min ) * 60 ; if ( sec + 0.5 > ( int ) sec + 1 ) sec = ( int ) sec + 1 ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , ( int ) step , ( int ) min , ( int ) sec ) ; } return 0 ; }","#include <stdio.h> #define pi 3.1415926 int main ( ) { int n , i , j ; float sec , min , step ; float niz [ 500 ] = { 0 } ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; if ( n < 1 || n > 500 ) printf ( ""pogresan unos\n"" ) ; } while ( n < 1 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%f"" , & niz [ i ] ) ; } for ( i = 0 ; i < n ; i ++ ) { niz [ i ] = niz [ i ] * 180. / pi ; } for ( i = 0 ; i < n ; i ++ ) { step = ( int ) niz [ i ] ; min = ( niz [ i ] - ( int ) niz [ i ] ) * 60 ; sec = ( min - ( int ) min ) * 60 ; if ( sec > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { niz [ j ] = niz [ j + 1 ] ; } i -- ; n -- ; } } printf ( ""uglovi su: \n"" ) ; for ( i = 0 ; i < n ; i ++ ) { step = ( int ) niz [ i ] ; min = ( niz [ i ] - ( int ) niz [ i ] ) * 60 ; sec = ( min - ( int ) min ) * 60 ; if ( sec + 0.5 > ( int ) sec + 1 ) sec = ( int ) sec + 1 ; printf ( ""%d stepeni %d minuta %d sekundi\n"" , ( int ) step , ( int ) min , ( int ) sec ) ; } return 0 ; }"
3409,86,86,0,105,A2016/Z4/Z3/student3116,A2016/Z4/Z3/student8753,"#include <stdio.h> #include <ctype.h> int jesuisti ( char * p , char * temp ) { int isti = 1 ; while ( * temp != '\0' ) { if ( * temp ++ != * p ++ ) { isti = 0 ; break ; } if ( * temp == '\0' && ( * p != ' ' && * p != '\0' ) ) { isti = 0 ; break ; } } return isti ; } void zamijenirijeci ( char * recenica , char * rijec ) { while ( * rijec != '\0' ) { * recenica ++ = * rijec ++ ; } recenica ++ ; } int rjecnik ( char * * rijeci , char * * zamjene , int broj_rijeci ) { int i , isti = 1 ; char * pom , * pom1 ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { pom = rijeci [ i ] ; pom1 = zamjene [ i ] ; while ( * pom != '\0' || * pom1 != '\0' ) { if ( * pom ++ != * pom1 ++ ) isti = 0 ; } if ( isti == 0 ) break ; } return isti ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * temp , * pt , * kt , * ht ; int i , br ; if ( rjecnik ( rijeci , zamjene , broj_rijeci ) ) return tekst ; while ( * p != '\0' ) { if ( p == tekst || * ( p - 1 ) == ' ' ) { while ( * p == ' ' ) p ++ ; pt = p ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { br = 0 ; p = pt ; temp = rijeci [ i ] ; if ( jesuisti ( p , temp ) ) { kt = pt ; while ( * p != '\0' && * p != ' ' ) p ++ ; while ( * p != '\0' ) { * kt ++ = * p ++ ; } * kt = '\0' ; p = pt ; temp = zamjene [ i ] ; while ( * temp != '\0' ) { br ++ ; temp ++ ; } ht = kt + br ; p -- ; while ( kt != p ) { * ht -- = * kt -- ; } temp = zamjene [ i ] ; zamijenirijeci ( pt , temp ) ; } } } p ++ ; } return tekst ; } int main ( ) { char * rijeci [ 3 ] = { ""proba"" , ""ovo"" , ""je"" } ; char * zamjene [ 3 ] = { """" , """" , """" } ; char tekst [ 100 ] = ""ovo je proba"" ; printf ( ""'%s'"" , zamjena_rijeci ( tekst , rijeci , zamjene , 3 ) ) ; return 0 ; }","#include <stdio.h> int provjera ( char * p , char * q ) { int jesu = 1 ; while ( * q != '\0' ) { if ( * q ++ != * p ++ ) { jesu = 0 ; break ; } if ( * q == '\0' && ( * p != ' ' && * p != '\0' ) ) { jesu = 0 ; break ; } } return jesu ; } void zamjena ( char * rec , char * rijec ) { while ( * rijec != '\0' ) { * rec ++ = * rijec ++ ; } rec ++ ; } int dict ( char * * rijeci , char * * zamjene , int broj_rijeci ) { int i = 0 , jesu = 1 ; char * s , * s1 ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { s = rijeci [ i ] ; s1 = zamjene [ i ] ; while ( * s != '\0' || * s1 != '\0' ) { if ( * s ++ != * s1 ) jesu = 0 ; } if ( jesu == 0 ) break ; } return jesu ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { char * p = tekst ; char * s , * t , * k , * h ; int i , brojac ; if ( dict ( rijeci , zamjene , broj_rijeci ) ) return tekst ; while ( * p != '\0' ) { if ( p == tekst || * ( p - 1 ) == ' ' ) { while ( * p == ' ' ) p ++ ; t = p ; for ( i = 0 ; i < broj_rijeci ; i ++ ) { brojac = 0 ; p = t ; s = rijeci [ i ] ; if ( provjera ( p , s ) ) { k = t ; while ( * p != '\0' && * p != ' ' ) p ++ ; while ( * p != '\0' ) { * k ++ = * p ++ ; } * k = '\0' ; p = t ; s = zamjene [ i ] ; while ( * s != '\0' ) { brojac ++ ; s ++ ; } h = k + brojac ; p -- ; while ( k != p ) { * h -- = * k -- ; } s = zamjene [ i ] ; zamjena ( t , s ) ; } } } p ++ ; } return tekst ; } int main ( ) { char tekst [ 100 ] = ""beli sneg je pokrio beli breg"" ; char * rijeci [ 2 ] = { ""beli"" , ""sneg"" } ; char * zamjene [ 2 ] = { ""bijeli"" , ""snijeg"" } ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 2 ) ) ; return 0 ; }"
3410,98,98,0,47,A2016/Z2/Z4/student3301,A2016/Z2/Z4/student1976,"#include <stdio.h> #include <stdlib.h> #include <math.h> #define eps 0.000001 int main ( ) { int m , n , i , j , t = 0 , c = 0 ; double matrix [ 100 ] [ 100 ] ; printf ( ""unesite m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 100 || n < 1 || n > 100 ) printf ( ""pogresan unos!\nunesite m i n: "" ) ; else if ( m > 0 || m <= 100 || n > 0 || n <= 100 ) break ; } while ( 1 ) ; printf ( ""unesite elemente matrice: "" ) ; if ( m == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } if ( n == 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrix [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { if ( fabs ( matrix [ i ] [ 0 ] - matrix [ i - 1 ] [ j - 1 ] ) > eps ) c = 1 ; for ( j = 1 ; j < n ; j ++ ) { if ( fabs ( matrix [ i ] [ j ] - matrix [ i - 1 ] [ j - 1 ] ) > eps ) c = 1 ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( matrix [ i ] [ j ] - matrix [ i + 1 ] [ j + 1 ] ) > eps ) t = 0 ; else t = 1 ; if ( m > 1 && n > 1 && n - m <= 1 && fabs ( matrix [ m - 2 ] [ 0 ] - matrix [ 0 ] [ n - 2 ] ) > eps ) t = 0 ; } } if ( c == 0 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( t == 1 ) { printf ( ""matrica je teplicova"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> #define eps 0.000001 int main ( ) { int m , n , i , j , t = 0 , c = 0 ; double matrix [ 100 ] [ 100 ] ; printf ( ""unesite m i n: "" ) ; do { scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || m > 100 || n < 1 || n > 100 ) printf ( ""pogresan unos!\nunesite m i n: "" ) ; else if ( m > 0 || m <= 100 || n > 0 || n <= 100 ) break ; } while ( 1 ) ; printf ( ""unesite elemente matrice: "" ) ; if ( m == 1 ) { printf ( ""matrica je cirkularna"" ) ; return 0 ; } if ( n == 1 ) { printf ( ""matrica je teplicova"" ) ; return 0 ; } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%lf"" , & matrix [ i ] [ j ] ) ; } } for ( i = 1 ; i < m ; i ++ ) { if ( fabs ( matrix [ i ] [ 0 ] - matrix [ i - 1 ] [ j - 1 ] ) > eps ) c = 1 ; for ( j = 1 ; j < n ; j ++ ) { if ( fabs ( matrix [ i ] [ j ] - matrix [ i - 1 ] [ j - 1 ] ) > eps ) c = 1 ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = 0 ; j < n - 1 ; j ++ ) { if ( fabs ( matrix [ i ] [ j ] - matrix [ i + 1 ] [ j + 1 ] ) > eps ) t = 0 ; else t = 1 ; if ( m > 1 && n > 1 && n - m <= 1 && fabs ( matrix [ m - 2 ] [ 0 ] - matrix [ 0 ] [ n - 2 ] ) > eps ) t = 0 ; } } if ( c == 0 ) { printf ( ""matrica je cirkularna"" ) ; } else if ( t == 1 ) { printf ( ""matrica je teplicova"" ) ; } else { printf ( ""matrica nije ni cirkularna ni teplicova"" ) ; } return 0 ; }"
3413,99,99,0,152,A2016/Z1/Z1/student2717,A2016/Z1/Z1/student8043,"#include <stdio.h> #include <math.h> #define e 0.01 int main ( ) { float itarik , ibojan , imirza , iitarik , iibojan , iimirza , prisustvotarik , prisustvobojan , prisustvomirza , zadacetarik , zadacebojan , zadacemirza , zavrsnitarik , zavrsnibojan , zavrsnimirza , ukupnotarik , ukupnobojan , ukupnomirza , ocjenatarik , ocjenabojan , ocjenamirza ; printf ( ""unesite bodove za tarika:"" ) ; printf ( ""\ni parcijalni ispit:"" ) ; scanf ( ""%f"" , & itarik ) ; if ( itarik >= 0 && itarik <= 20 ) { printf ( "" ii parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & iitarik ) ; if ( iitarik >= 0 && iitarik <= 20 ) { printf ( "" prisustvo:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & prisustvotarik ) ; if ( prisustvotarik >= 0 && prisustvotarik <= 10 ) { printf ( "" zadace:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zadacetarik ) ; if ( zadacetarik >= 0 && zadacetarik <= 10 ) { printf ( "" zavrsni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zavrsnitarik ) ; if ( zavrsnitarik >= 0 && zavrsnitarik <= 40 ) { printf ( "" unesite bodove za bojana:"" ) ; printf ( ""\ni parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & ibojan ) ; if ( ibojan >= 0 && ibojan <= 20 ) { printf ( "" ii parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & iibojan ) ; if ( iibojan >= 0 && iibojan <= 20 ) { printf ( "" prisustvo:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & prisustvobojan ) ; if ( prisustvobojan >= 0 && prisustvobojan <= 10 ) { printf ( "" zadace:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zadacebojan ) ; if ( zadacebojan >= 0 && zadacebojan <= 10 ) { printf ( "" zavrsni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zavrsnibojan ) ; if ( zavrsnibojan >= 0 && zavrsnibojan <= 40 ) { printf ( "" unesite bodove za mirzu:"" ) ; printf ( ""\ni parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & imirza ) ; if ( imirza >= 0 && imirza <= 20 ) { printf ( "" ii parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & iimirza ) ; if ( iimirza >= 0 && iimirza <= 20 ) { printf ( "" prisustvo:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & prisustvomirza ) ; if ( prisustvomirza >= 0 && prisustvomirza <= 10 ) { printf ( "" zadace:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zadacemirza ) ; if ( zadacemirza >= 0 && zadacemirza <= 10 ) { printf ( "" zavrsni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zavrsnimirza ) ; if ( zavrsnimirza < 0 && zavrsnimirza > 40 ) { printf ( "" neispravan broj bodova"" ) ; return 0 ; } ukupnotarik = ( itarik + iitarik + prisustvotarik + zadacetarik + zavrsnitarik ) ; ukupnobojan = ( ibojan + iibojan + prisustvobojan + zadacebojan + zavrsnibojan ) ; ukupnomirza = ( imirza + iimirza + prisustvomirza + zadacemirza + zavrsnimirza ) ; if ( ukupnotarik >= ( 55 - e ) && ukupnotarik < ( 65 - e ) ) { ocjenatarik = 6 ; } else if ( ukupnotarik >= ( 65 - e ) && ukupnotarik < ( 75 - e ) ) { ocjenatarik = 7 ; } else if ( ukupnotarik >= ( 75 - e ) && ukupnotarik < ( 85 - e ) ) { ocjenatarik = 8 ; } else if ( ukupnotarik >= ( 85 - e ) && ukupnotarik < ( 92 - e ) ) { ocjenatarik = 9 ; } else if ( ukupnotarik >= ( 92 - e ) && ukupnotarik < ( 100 - e ) ) { ocjenatarik = 10 ; } if ( ukupnobojan >= ( 55 - e ) && ukupnobojan < ( 65 - e ) ) { ocjenabojan = 6 ; } else if ( ukupnobojan >= ( 65 - e ) && ukupnobojan < ( 75 - e ) ) { ocjenabojan = 7 ; } else if ( ukupnobojan >= ( 75 - e ) && ukupnobojan < ( 85 - e ) ) { ocjenabojan = 8 ; } else if ( ukupnobojan >= ( 85 - e ) && ukupnobojan < ( 92 - e ) ) { ocjenabojan = 9 ; } else if ( ukupnobojan >= ( 92 - e ) && ukupnobojan < ( 100 - e ) ) { ocjenabojan = 10 ; } if ( ukupnomirza >= ( 55 - e ) && ukupnomirza < ( 65 - e ) ) { ocjenamirza = 6 ; } else if ( ukupnomirza >= ( 65 - e ) && ukupnomirza < ( 75 - e ) ) { ocjenamirza = 7 ; } else if ( ukupnomirza >= ( 75 - e ) && ukupnomirza < ( 85 - e ) ) { ocjenamirza = 8 ; } else if ( ukupnomirza >= ( 85 - e ) && ukupnomirza < ( 92 - e ) ) { ocjenamirza = 9 ; } else if ( ukupnomirza >= ( 92 - e ) && ukupnomirza < ( 100 - e ) ) { ocjenamirza = 10 ; } if ( ( ukupnotarik < 55 - e ) && ( ukupnobojan < 55 - e ) && ( ukupnomirza < 55 - e ) ) { printf ( "" nijedan student nije polozio."" ) ; } else if ( ( ( ukupnotarik >= 55 - e ) && ( ukupnobojan < 55 - e ) && ( ukupnomirza < 55 - e ) ) || ( ( ukupnotarik < 55 - e ) && ( ukupnobojan >= 55 - e ) && ( ukupnomirza < 55 - e ) ) || ( ( ukupnotarik < 55 - e ) && ( ukupnobojan < 55 - e ) && ( ukupnomirza >= 55 - e ) ) ) { printf ( "" jedan student je polozio."" ) ; } else if ( ( ( ukupnotarik >= 55 - e ) && ( ukupnomirza >= 55 - e ) && ( ukupnobojan < 55 - e ) ) || ( ( ukupnotarik < 55 - e ) && ( ukupnomirza >= 55 - e ) && ( ukupnobojan >= 55 - e ) ) || ( ( ukupnotarik >= 55 - e ) && ( ukupnomirza < 55 - e ) && ( ukupnobojan >= 55 - e ) ) ) { printf ( "" dva studenta su polozila."" ) ; } if ( ( ukupnotarik >= 55 - e ) && ( ukupnobojan >= 55 - e ) && ( ukupnomirza >= 55 - e ) ) { printf ( "" sva tri studenta su polozila."" ) ; if ( ( fabs ( ocjenatarik - ocjenamirza ) < e ) && ( fabs ( ocjenatarik - ocjenabojan ) < e ) ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ocjenabojan != ocjenamirza ) && ( ocjenatarik != ocjenamirza ) && ( ocjenabojan != ocjenatarik ) ) printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; if ( ( fabs ( ocjenatarik - ocjenamirza ) < e ) || ( fabs ( ocjenatarik - ocjenabojan ) < e ) || ( fabs ( ocjenamirza - ocjenabojan < e ) ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #define e 0.01 int main ( ) { float itarik , ibojan , imirza , iitarik , iibojan , iimirza , prisustvotarik , prisustvobojan , prisustvomirza , zadacetarik , zadacebojan , zadacemirza , zavrsnitarik , zavrsnibojan , zavrsnimirza , ukupnotarik , ukupnobojan , ukupnomirza , ocjenatarik , ocjenabojan , ocjenamirza ; printf ( ""unesite bodove za tarika:"" ) ; printf ( ""\ni parcijalni ispit:"" ) ; scanf ( ""%f"" , & itarik ) ; if ( itarik >= 0 && itarik <= 20 ) { printf ( "" ii parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & iitarik ) ; if ( iitarik >= 0 && iitarik <= 20 ) { printf ( "" prisustvo:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & prisustvotarik ) ; if ( prisustvotarik >= 0 && prisustvotarik <= 10 ) { printf ( "" zadace:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zadacetarik ) ; if ( zadacetarik >= 0 && zadacetarik <= 10 ) { printf ( "" zavrsni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zavrsnitarik ) ; if ( zavrsnitarik >= 0 && zavrsnitarik <= 40 ) { printf ( "" unesite bodove za bojana:"" ) ; printf ( ""\ni parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & ibojan ) ; if ( ibojan >= 0 && ibojan <= 20 ) { printf ( "" ii parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & iibojan ) ; if ( iibojan >= 0 && iibojan <= 20 ) { printf ( "" prisustvo:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & prisustvobojan ) ; if ( prisustvobojan >= 0 && prisustvobojan <= 10 ) { printf ( "" zadace:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zadacebojan ) ; if ( zadacebojan >= 0 && zadacebojan <= 10 ) { printf ( "" zavrsni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zavrsnibojan ) ; if ( zavrsnibojan >= 0 && zavrsnibojan <= 40 ) { printf ( "" unesite bodove za mirzu:"" ) ; printf ( ""\ni parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & imirza ) ; if ( imirza >= 0 && imirza <= 20 ) { printf ( "" ii parcijalni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & iimirza ) ; if ( iimirza >= 0 && iimirza <= 20 ) { printf ( "" prisustvo:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & prisustvomirza ) ; if ( prisustvomirza >= 0 && prisustvomirza <= 10 ) { printf ( "" zadace:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zadacemirza ) ; if ( zadacemirza >= 0 && zadacemirza <= 10 ) { printf ( "" zavrsni ispit:"" ) ; } else { printf ( "" neispravan broj bodova"" ) ; return 0 ; } scanf ( ""%f"" , & zavrsnimirza ) ; if ( zavrsnimirza < 0 && zavrsnimirza > 40 ) { printf ( "" neispravan broj bodova"" ) ; return 0 ; } ukupnotarik = ( itarik + iitarik + prisustvotarik + zadacetarik + zavrsnitarik ) ; ukupnobojan = ( ibojan + iibojan + prisustvobojan + zadacebojan + zavrsnibojan ) ; ukupnomirza = ( imirza + iimirza + prisustvomirza + zadacemirza + zavrsnimirza ) ; if ( ukupnotarik >= ( 55 - e ) && ukupnotarik < ( 65 - e ) ) { ocjenatarik = 6 ; } else if ( ukupnotarik >= ( 65 - e ) && ukupnotarik < ( 75 - e ) ) { ocjenatarik = 7 ; } else if ( ukupnotarik >= ( 75 - e ) && ukupnotarik < ( 85 - e ) ) { ocjenatarik = 8 ; } else if ( ukupnotarik >= ( 85 - e ) && ukupnotarik < ( 92 - e ) ) { ocjenatarik = 9 ; } else if ( ukupnotarik >= ( 92 - e ) && ukupnotarik < ( 100 - e ) ) { ocjenatarik = 10 ; } if ( ukupnobojan >= ( 55 - e ) && ukupnobojan < ( 65 - e ) ) { ocjenabojan = 6 ; } else if ( ukupnobojan >= ( 65 - e ) && ukupnobojan < ( 75 - e ) ) { ocjenabojan = 7 ; } else if ( ukupnobojan >= ( 75 - e ) && ukupnobojan < ( 85 - e ) ) { ocjenabojan = 8 ; } else if ( ukupnobojan >= ( 85 - e ) && ukupnobojan < ( 92 - e ) ) { ocjenabojan = 9 ; } else if ( ukupnobojan >= ( 92 - e ) && ukupnobojan < ( 100 - e ) ) { ocjenabojan = 10 ; } if ( ukupnomirza >= ( 55 - e ) && ukupnomirza < ( 65 - e ) ) { ocjenamirza = 6 ; } else if ( ukupnomirza >= ( 65 - e ) && ukupnomirza < ( 75 - e ) ) { ocjenamirza = 7 ; } else if ( ukupnomirza >= ( 75 - e ) && ukupnomirza < ( 85 - e ) ) { ocjenamirza = 8 ; } else if ( ukupnomirza >= ( 85 - e ) && ukupnomirza < ( 92 - e ) ) { ocjenamirza = 9 ; } else if ( ukupnomirza >= ( 92 - e ) && ukupnomirza < ( 100 - e ) ) { ocjenamirza = 10 ; } if ( ( ukupnotarik < 55 - e ) && ( ukupnobojan < 55 - e ) && ( ukupnomirza < 55 - e ) ) { printf ( "" nijedan student nije polozio."" ) ; } else if ( ( ( ukupnotarik >= 55 - e ) && ( ukupnobojan < 55 - e ) && ( ukupnomirza < 55 - e ) ) || ( ( ukupnotarik < 55 - e ) && ( ukupnobojan >= 55 - e ) && ( ukupnomirza < 55 - e ) ) || ( ( ukupnotarik < 55 - e ) && ( ukupnobojan < 55 - e ) && ( ukupnomirza >= 55 - e ) ) ) { printf ( "" jedan student je polozio."" ) ; } else if ( ( ( ukupnotarik >= 55 - e ) && ( ukupnomirza >= 55 - e ) && ( ukupnobojan < 55 - e ) ) || ( ( ukupnotarik < 55 - e ) && ( ukupnomirza >= 55 - e ) && ( ukupnobojan >= 55 - e ) ) || ( ( ukupnotarik >= 55 - e ) && ( ukupnomirza < 55 - e ) && ( ukupnobojan >= 55 - e ) ) ) { printf ( "" dva studenta su polozila."" ) ; } if ( ( ukupnotarik >= 55 - e ) && ( ukupnobojan >= 55 - e ) && ( ukupnomirza >= 55 - e ) ) { printf ( "" sva tri studenta su polozila."" ) ; if ( ( fabs ( ocjenatarik - ocjenamirza ) < e ) && ( fabs ( ocjenatarik - ocjenabojan ) < e ) ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ocjenabojan != ocjenamirza ) && ( ocjenatarik != ocjenamirza ) && ( ocjenabojan != ocjenatarik ) ) printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; if ( ( fabs ( ocjenatarik - ocjenamirza ) < e ) || ( fabs ( ocjenatarik - ocjenabojan ) < e ) || ( fabs ( ocjenamirza - ocjenabojan < e ) ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; } return 0 ; }"
3415,78,78,0,16,A2016/Z2/Z1/student9160,A2016/Z2/Z1/student5621,"#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int c1 , c2 , broj , broj2 = 0 , sum , stepen = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; broj = abs ( broj ) ; if ( broj < 10 ) { broj2 = 0 ; printf ( ""%d"" , broj2 ) ; } else { do { c1 = broj % 10 ; broj /= 10 ; if ( broj != 0 ) { c2 = broj % 10 ; sum = abs ( c2 - c1 ) ; broj2 = broj2 + sum * pow ( 10 , stepen ) ; stepen ++ ; } } while ( broj != 0 ) ; printf ( ""%d"" , broj2 ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <math.h> int main ( ) { int a , b , p , p1 = 0 , suma , n = 0 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & p ) ; p = abs ( p ) ; if ( p < 10 ) { p1 = 0 ; printf ( ""%d"" , p1 ) ; } else { n = 1 ; while ( p >= 10 ) { a = p % 10 ; p /= 10 ; if ( p != 0 ) { b = p % 10 ; suma = abs ( b - a ) ; p1 = p1 + suma * pow ( 10 , n - 1 ) ; n ++ ; } } printf ( ""%d"" , p1 ) ; } return 0 ; }"
3418,99,99,0,62,A2016/Z2/Z2/student6720,A2016/Z2/Z2/student4628,"#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int n , i , j ; double niz [ 500 ] , stepen [ 500 ] , min [ 500 ] , sec [ 500 ] , usec [ 500 ] = { 0 } ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; usec [ i ] = ( ( niz [ i ] * 180 ) / pi ) * 3600 ; usec [ i ] = round ( usec [ i ] ) ; stepen [ i ] = usec [ i ] / 3600 ; stepen [ i ] = ( int ) stepen [ i ] ; min [ i ] = ( usec [ i ] - stepen [ i ] * 3600 ) / 60 ; min [ i ] = ( int ) min [ i ] ; sec [ i ] = ( usec [ i ] - min [ i ] * 60 - stepen [ i ] * 3600 ) ; if ( sec [ i ] >= 60 ) { min [ i ] ++ ; sec [ i ] -= 60 ; } if ( sec [ i ] <= - 60 ) { min [ i ] -- ; sec [ i ] += 60 ; } if ( min [ i ] >= 60 ) { stepen [ i ] ++ ; min [ i ] -= 60 ; } if ( min [ i ] <= - 60 ) { stepen [ i ] -- ; min [ i ] += 60 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( fabs ( sec [ i ] ) > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { sec [ j ] = sec [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; stepen [ j ] = stepen [ j + 1 ] ; niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""%g stepeni %g minuta %g sekundi\n"" , stepen [ i ] , fabs ( min [ i ] ) , fabs ( sec [ i ] ) ) ; } return 0 ; }","#include <stdio.h> #include <math.h> #include <stdlib.h> #define pi 3.1415926 int main ( ) { int n , i , j ; double niz [ 500 ] , stepen [ 500 ] , min [ 500 ] , sec [ 500 ] , usec [ 500 ] = { 0 } ; do { printf ( ""unesite broj uglova: "" ) ; scanf ( ""%d"" , & n ) ; } while ( n < 1 || n > 500 ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%lf"" , & niz [ i ] ) ; usec [ i ] = ( ( niz [ i ] * 180 ) / pi ) * 3600 ; usec [ i ] = round ( usec [ i ] ) ; stepen [ i ] = usec [ i ] / 3600 ; stepen [ i ] = ( int ) stepen [ i ] ; min [ i ] = ( usec [ i ] - stepen [ i ] * 3600 ) / 60 ; min [ i ] = ( int ) min [ i ] ; sec [ i ] = ( usec [ i ] - min [ i ] * 60 - stepen [ i ] * 3600 ) ; if ( sec [ i ] >= 60 ) { min [ i ] ++ ; sec [ i ] -= 60 ; } if ( sec [ i ] <= - 60 ) { min [ i ] -- ; sec [ i ] += 60 ; } if ( min [ i ] >= 60 ) { stepen [ i ] ++ ; min [ i ] -= 60 ; } if ( min [ i ] <= - 60 ) { stepen [ i ] -- ; min [ i ] += 60 ; } } for ( i = 0 ; i < n ; i ++ ) { if ( fabs ( sec [ i ] ) > 30 ) { for ( j = i ; j < n - 1 ; j ++ ) { sec [ j ] = sec [ j + 1 ] ; min [ j ] = min [ j + 1 ] ; stepen [ j ] = stepen [ j + 1 ] ; niz [ j ] = niz [ j + 1 ] ; } n -- ; i -- ; } } printf ( ""uglovi su:\n"" ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""%g stepeni %g minuta %g sekundi\n"" , stepen [ i ] , fabs ( min [ i ] ) , fabs ( sec [ i ] ) ) ; } return 0 ; }"
3423,99,99,0,43,A2016/Z2/Z3/student4903,A2016/Z2/Z3/student5713,"#include <stdio.h> int niz1 [ 10 ] = { 0 } , niz2 [ 10 ] = { 0 } , i , j , n , k , brojac , temp , isti_j = 0 , isti_i = 0 ; int main ( ) { do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%i"" , & n ) ; if ( n <= 0 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 10 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %i. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & niz1 [ i ] , & niz2 [ i ] ) ; if ( niz1 [ i ] > 19 || niz1 [ i ] < 0 || niz2 [ i ] > 19 || niz2 [ i ] < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( niz1 [ i ] == niz1 [ j ] && niz2 [ i ] == niz2 [ j ] ) { niz1 [ j ] = niz1 [ n - 1 ] ; niz2 [ j ] = niz2 [ n - 1 ] ; n -- ; j -- ; } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { k = 1 ; for ( brojac = 0 ; brojac < n ; brojac ++ ) { if ( j == niz1 [ brojac ] && i == niz2 [ brojac ] ) { printf ( ""*"" ) ; k = 0 ; } } if ( k != 0 ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int niz1 [ 10 ] = { 0 } , niz2 [ 10 ] = { 0 } , i , j , n , k , brojac , temp , isti_j = 0 , isti_i = 0 ; int main ( ) { do { printf ( ""unesite broj tacaka: "" ) ; scanf ( ""%i"" , & n ) ; if ( n <= 0 || n > 10 ) printf ( ""pogresan unos\n"" ) ; } while ( n <= 0 || n > 10 ) ; for ( i = 0 ; i < n ; i ++ ) { printf ( ""unesite %i. tacku: "" , i + 1 ) ; scanf ( ""%d %d"" , & niz1 [ i ] , & niz2 [ i ] ) ; if ( niz1 [ i ] > 19 || niz1 [ i ] < 0 || niz2 [ i ] > 19 || niz2 [ i ] < 0 ) { printf ( ""pogresan unos\n"" ) ; i -- ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { if ( niz1 [ i ] == niz1 [ j ] && niz2 [ i ] == niz2 [ j ] ) { niz1 [ j ] = niz1 [ n - 1 ] ; niz2 [ j ] = niz2 [ n - 1 ] ; n -- ; j -- ; } } } for ( i = 0 ; i < 20 ; i ++ ) { for ( j = 0 ; j < 20 ; j ++ ) { k = 1 ; for ( brojac = 0 ; brojac < n ; brojac ++ ) { if ( j == niz1 [ brojac ] && i == niz2 [ brojac ] ) { printf ( ""*"" ) ; k = 0 ; } } if ( k != 0 ) printf ( "" "" ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3433,82,82,0,106,A2016/Z4/Z1/student4473,A2016/Z4/Z1/student6877,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\0' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * rijec1 , char * rijec2 , int vel1 , int vel2 ) { int i ; char * p1 = rijec1 , * p2 = rijec2 ; if ( vel1 != vel2 ) return 0 ; else { for ( i = 0 ; i < vel1 - 1 ; i ++ ) { if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' && * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p1 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pok [ 500 ] ; int i = 0 , j = 0 , brojac_slova [ 500 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 500 ] = { 0 } ; p = s ; pok [ j ] = p ; if ( * p == '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; j ++ ; i ++ ; pok [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pok [ i ] , pok [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pok [ max ] , pok [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pok [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * ( p + brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pok [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pok [ j ] -= brojac_slova [ i ] ; } } } p = pok [ max ] ; while ( * p != '\0' ) { * p = * ( p + brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""1pst1 pst2 3pst pstpst pst"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak ; int i = 0 ; znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int uporedi ( char * string1 , char * string2 , int velicina1 , int velicina2 ) { char * p1 = string1 ; char * p2 = string2 ; int i ; if ( velicina1 != velicina2 ) return 0 ; else { for ( i = 0 ; i < velicina1 - 1 ; i ++ ) { if ( * ( p1 + i ) >= 'a' && * ( p1 + i ) <= 'z' ) { if ( * ( p1 + i ) + 32 != * ( p2 + i ) ) return 0 ; continue ; } if ( * ( p2 + i ) >= 'a' && * ( p2 + i ) <= 'z' ) { if ( * ( p2 + i ) != * ( p2 + i ) + 32 ) return 0 ; continue ; } if ( * ( p1 + i ) != * ( p2 + i ) ) return 0 ; } } return 1 ; } char * izbaci_najcescu ( char * s ) { char * p , * pokazivac [ 100 ] ; int i = 0 , j = 0 , brojac_slova [ 100 ] = { 0 } , brojac_rijeci = 1 , brojac_najcesce [ 100 ] = { 0 } ; p = s ; pokazivac [ j ] = p ; if ( * p != '\0' ) return null ; while ( * p != '\0' ) { if ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) { brojac_rijeci ++ ; do { p ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; i ++ ; j ++ ; pokazivac [ j ] = p ; continue ; } brojac_slova [ i ] ++ ; p ++ ; } for ( i = 0 ; i < brojac_rijeci - 1 ; i ++ ) { for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { if ( uporedi ( pokazivac [ i ] , pokazivac [ j ] , brojac_slova [ i ] , brojac_slova [ j ] ) ) brojac_najcesce [ i ] ++ ; } } int max ; max = 0 ; for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( brojac_najcesce [ i ] > brojac_najcesce [ max ] ) max = i ; } for ( i = 0 ; i < brojac_rijeci ; i ++ ) { if ( max == i ) i ++ ; if ( uporedi ( pokazivac [ max ] , pokazivac [ i ] , brojac_slova [ max ] , brojac_slova [ i ] ) ) { p = pokazivac [ i ] ; if ( i == brojac_rijeci - 1 ) { * p = '\0' ; break ; } while ( * p != '\0' ) { * p = * p ( brojac_slova [ i ] ) ; if ( * p == '\0' ) break ; p ++ ; } do { pokazivac [ i ] ++ ; } while ( ( * p > 31 && * p < 'a' ) || ( * p > 'z' && * p < 'a' ) || ( * p > 'z' && * p < 127 ) ) ; for ( j = i + 1 ; j < brojac_rijeci ; j ++ ) { pokazivac [ j ] -= brojac_slova [ i ] ; } } } p = pokazivac [ max ] ; while ( * p != '\0' ) { * p = * p ( brojac_slova [ max ] ) ; if ( * p == '\0' ) break ; p ++ ; } return s ; } int main ( ) { char tekst [ ] = ""asd ddd asd  ddd asd trzhrth"" ; printf ( ""%s"" , izbaci_najcescu ( tekst ) ) ; return 0 ; }"
3435,37,37,0,36,A2016/Z3/Z2/student9188,A2016/Z3/Z2/student7090,"#include <stdio.h> int suma ( int n ) { int suma = 0 ; if ( n < 0 ) n *= - 1 ; while ( n != 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int i , j ; niz [ 2 * vel - 1 ] = suma ( niz [ vel - 1 ] ) ; for ( i = vel - 1 ; i != 0 ; i -- ) { for ( j = vel ; j != i ; j -- ) niz [ j ] = niz [ j - 1 ] ; vel ++ ; niz [ i ] = suma ( niz [ i - 1 ] ) ; } } int fibonaci ( int n ) { int a = 1 , b = 1 , c ; if ( n == 1 || n == 2 ) return 1 ; while ( a + b <= n ) { if ( a + b == n ) return 1 ; c = a ; a = b ; b = c + b ; } return 0 ; } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonaci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 100 ] ; int i ; int vel = 20 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) scanf ( ""%d"" , & niz [ i ] ) ; ubaci ( niz , 10 ) ; vel = izbaci ( niz , vel ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < vel ; i ++ ) { if ( i == vel - 1 ) printf ( ""%d."" , niz [ i ] ) ; else printf ( ""%d, "" , niz [ i ] ) ; } return 0 ; }","#include <stdio.h> #include <math.h> void ubaci ( int * a , int velicina ) { int k , s , pom , l ; for ( k = 0 ; k < 2 * velicina ; k ++ ) { s = 0 ; pom = a [ k ] ; if ( pom < 0 ) pom = pom * ( - 1 ) ; while ( pom != 0 ) { s = s + pom % 10 ; pom = pom / 10 ; } for ( l = ( 2 * velicina ) - 1 ; l > k ; l -- ) { a [ l ] = a [ l - 1 ] ; } k ++ ; a [ k ] = s ; } } int jelfibonacijev ( int y ) { int pr = 1 ; int dr = 1 ; int zbir = pr + dr ; if ( y == 1 ) return 1 ; if ( y < 1 ) return 0 ; while ( zbir <= y ) { if ( zbir == y ) return 1 ; pr = dr ; dr = zbir ; zbir = pr + dr ; } return 0 ; } int izbaci ( int * a , int velicina ) { int k , l , y , pr , dr , zbir ; for ( k = 0 ; k < velicina ; k ++ ) { y = 0 ; pr = 1 ; dr = 1 ; zbir = pr + dr ; if ( a [ k ] == 1 ) y = 1 ; else if ( a [ k ] < 1 ) y = 0 ; else while ( zbir <= a [ k ] ) { if ( zbir == a [ k ] ) y = 1 ; pr = dr ; dr = zbir ; zbir = pr + dr ; } if ( y ) { for ( l = k ; l < velicina - 1 ; l ++ ) a [ l ] = a [ l + 1 ] ; velicina -- ; k -- ; } } return velicina ; } int main ( ) { int velicina , k ; int a [ 20 ] ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( k = 0 ; k < 10 ; k ++ ) { scanf ( ""%d"" , & a [ k ] ) ; } ubaci ( a , 10 ) ; velicina = izbaci ( a , 10 * 2 ) ; printf ( ""modificirani niz glasi: "" ) ; for ( k = 0 ; k < velicina ; k ++ ) if ( k == velicina - 1 ) printf ( ""%d. "" , a [ k ] ) ; else printf ( ""%d, "" , a [ k ] ) ; return 0 ; }"
3440,99,99,0,123,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student9175,"#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * string ) { char * max = string , * p = string , * pocetak , * kraj , * temp , * sljedecipocetak , * sljedecikraj , * temp1 , * p2 , * p3 ; int vel1 , brojrijeci = 0 , vel2 , jednaka , vel3 , maxbrojrijeci = 0 , maxvelicina = 0 , znak ; char znak1 , znak2 ; if ( * p == '\0' ) return string ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } brojrijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljedecipocetak = temp ; while ( ( * sljedecipocetak < 'a' || ( * sljedecipocetak > 'z' && * sljedecipocetak < 'a' ) || * sljedecipocetak > 'z' ) && * ( sljedecipocetak + 1 ) != '\0' ) sljedecipocetak ++ ; sljedecikraj = sljedecipocetak ; vel2 = 1 ; while ( ( ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) || ( * ( sljedecikraj + 1 ) >= 'a' && * ( sljedecikraj + 1 ) <= 'z' ) ) && * ( sljedecikraj + 1 ) != '\0' ) { vel2 ++ ; sljedecikraj ++ ; } jednaka = 1 ; vel3 = 0 ; temp1 = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * temp1 >= 'a' && * temp1 <= 'z' ) znak1 = ( * temp1 ) + ( 'a' - 'a' ) ; else znak1 = * temp1 ; if ( * sljedecipocetak >= 'a' && * sljedecipocetak <= 'z' ) znak2 = ( * sljedecipocetak ) + ( 'a' - 'a' ) ; else znak2 = * sljedecipocetak ; if ( znak1 != znak2 ) jednaka = 0 ; temp1 ++ ; sljedecipocetak ++ ; vel3 ++ ; } if ( jednaka ) brojrijeci ++ ; temp = sljedecikraj + 1 ; } if ( brojrijeci > maxbrojrijeci ) { maxbrojrijeci = brojrijeci ; max = kraj ; maxvelicina = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= string ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) znak1 = ( * p ) + ( 'a' - 'a' ) ; else znak1 = * p ; if ( * max >= 'a' && * max <= 'z' ) znak2 = ( * max ) + ( 'a' - 'a' ) ; else znak2 = * max ; if ( znak1 == znak2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= string && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= string ) { if ( * p2 >= 'a' && * p2 <= 'z' ) znak1 = ( * p2 ) + ( 'a' - 'a' ) ; else znak1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) znak2 = ( * p2 ) + ( 'a' - 'a' ) ; else znak2 = * p2 ; if ( znak1 != znak2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvelicina != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return string ; } int main ( ) { char str1ng [ 400 ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }","#include <stdio.h> void izbacivanje ( char * str1ng , int vel ) { while ( * ( str1ng + vel ) ) { * str1ng = * ( str1ng + vel ) ; str1ng ++ ; } * str1ng = * ( str1ng + vel ) ; } char * izbaci_najcescu ( char * str ) { char * max = str , * p = str , * pocetak , * kraj , * temp , * sljpocetak , * sljkraj , * tempoc , * p2 , * p3 ; int vel1 , broj_rijeci = 0 , vel2 , jednaka , vel3 , max_broj_rijeci = 0 , maxvel = 0 , znak ; char c1 , c2 ; if ( * p == '\0' ) return str ; while ( * p != '\0' ) { while ( ( * p < 'a' || ( * p > 'z' && * p < 'a' ) || * p > 'z' ) && * ( p + 1 ) != '\0' ) p ++ ; if ( * p != '\0' ) { pocetak = p ; kraj = p ; vel1 = 1 ; while ( ( ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) || ( * ( kraj + 1 ) >= 'a' && * ( kraj + 1 ) <= 'z' ) ) && * ( kraj + 1 ) != '\0' ) { vel1 ++ ; kraj ++ ; } broj_rijeci = 1 ; temp = kraj + 1 ; while ( * temp != '\0' ) { sljpocetak = temp ; while ( ( * sljpocetak < 'a' || ( * sljpocetak > 'z' && * sljpocetak < 'a' ) || * sljpocetak > 'z' ) && * ( sljpocetak + 1 ) != '\0' ) sljpocetak ++ ; sljkraj = sljpocetak ; vel2 = 1 ; while ( ( ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) || ( * ( sljkraj + 1 ) >= 'a' && * ( sljkraj + 1 ) <= 'z' ) ) && * ( sljkraj + 1 ) != '\0' ) { vel2 ++ ; sljkraj ++ ; } jednaka = 1 ; vel3 = 0 ; tempoc = pocetak ; if ( vel1 != vel2 ) jednaka = 0 ; else while ( vel3 < vel2 ) { if ( * tempoc >= 'a' && * tempoc <= 'z' ) c1 = ( * tempoc ) + ( 'a' - 'a' ) ; else c1 = * tempoc ; if ( * sljpocetak >= 'a' && * sljpocetak <= 'z' ) c2 = ( * sljpocetak ) + ( 'a' - 'a' ) ; else c2 = * sljpocetak ; if ( c1 != c2 ) jednaka = 0 ; tempoc ++ ; sljpocetak ++ ; vel3 ++ ; } if ( jednaka ) broj_rijeci ++ ; temp = sljkraj + 1 ; } if ( broj_rijeci > max_broj_rijeci ) { max_broj_rijeci = broj_rijeci ; max = kraj ; maxvel = vel1 ; } } p = kraj + 1 ; } p = temp - 1 ; while ( p >= str ) { znak = 0 ; if ( ( * ( p + 1 ) < 'a' || ( * ( p + 1 ) > 'z' && * ( p + 1 ) < 'a' ) || * ( p + 1 ) > 'z' ) || * ( p + 1 ) == '\0' ) znak = 1 ; if ( * p >= 'a' && * p <= 'z' ) c1 = ( * p ) + ( 'a' - 'a' ) ; else c1 = * p ; if ( * max >= 'a' && * max <= 'z' ) c2 = ( * max ) + ( 'a' - 'a' ) ; else c2 = * max ; if ( c1 == c2 && znak ) { p3 = p ; p2 = max ; vel2 = 0 ; jednaka = 1 ; while ( p3 >= str && ( ( * p3 >= 'a' && * p3 <= 'z' ) || ( * p3 >= 'a' && * p3 <= 'z' ) ) ) { if ( p2 >= str ) { if ( * p2 >= 'a' && * p2 <= 'z' ) c1 = ( * p2 ) + ( 'a' - 'a' ) ; else c1 = * p2 ; if ( * p2 >= 'a' && * p2 <= 'z' ) c2 = ( * p2 ) + ( 'a' - 'a' ) ; else c2 = * p2 ; if ( c1 != c2 ) jednaka = 0 ; } vel2 ++ ; p3 -- ; p2 -- ; } p3 ++ ; if ( maxvel != vel2 ) jednaka = 0 ; if ( jednaka == 1 ) { izbacivanje ( p3 , vel2 ) ; } } p -- ; } return str ; } int main ( ) { char str1ng [ 400 ] = "" zghklkvedza zvezda zdvdwa"" ; printf ( ""%s"" , izbaci_najcescu ( str1ng ) ) ; return 0 ; }"
3446,98,98,0,46,A2016/Z3/Z1/student8561,A2016/Z3/Z1/student8419,"#include <stdio.h> int ifprost ( int prost_br ) { int i , n , r ; n = 1 ; i = 2 ; for ( i = 2 ; i < prost_br ; i ++ ) { if ( prost_br % i == 0 ) { n = 0 ; break ; } } if ( n == 1 ) r = 1 ; else r = 0 ; return r ; } int daj_prost ( ) { static int prost_br = 2 ; while ( ifprost ( prost_br ) == 0 ) { prost_br ++ ; } prost_br ++ ; return prost_br - 1 ; } int main ( ) { int a , b , suma , prost , i ; suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a <= 1 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( b <= 1 ) printf ( ""b nije prirodan broj.\n"" ) ; } while ( a >= b || b <= 1 || a <= 1 ) ; while ( ( prost = daj_prost ( ) ) <= a ) suma = 0 ; for ( i = a + 1 ; i < b ; i ++ ) { if ( prost >= b ) break ; suma += prost ; prost = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }","#include <stdio.h> int ifprost ( int prost_br ) { int i , n , r ; n = 1 ; i = 2 ; for ( i = 2 ; i < prost_br ; i ++ ) { if ( prost_br % i == 0 ) { n = 0 ; break ; } } if ( n == 1 ) r = 1 ; else r = 0 ; return r ; } int daj_prost ( ) { static int prost_br = 2 ; while ( ifprost ( prost_br ) == 0 ) { prost_br ++ ; } prost_br ++ ; return prost_br - 1 ; } int main ( ) { int a , b , suma , prost , i ; suma = 0 ; do { printf ( ""unesite brojeve a i b: "" ) ; scanf ( ""%d %d"" , & a , & b ) ; if ( a >= b ) printf ( ""a nije manje od b.\n"" ) ; else if ( a <= 1 ) printf ( ""a nije prirodan broj.\n"" ) ; else if ( b <= 1 ) printf ( ""b nije prirodan broj.\n"" ) ; } while ( a >= b || b <= 1 || a <= 1 ) ; while ( ( prost = daj_prost ( ) ) <= a ) suma = 0 ; for ( i = a + 1 ; i < b ; i ++ ) { if ( prost >= b ) break ; suma += prost ; prost = daj_prost ( ) ; } printf ( ""suma prostih brojeva izmedju %d i %d je %d."" , a , b , suma ) ; return 0 ; }"
3449,99,99,0,81,A2016/Z4/Z3/student2142,A2016/Z4/Z3/student5961,"#include <stdio.h> int duzinarijeci ( char * rijec ) { int duzina = 0 ; while ( * rijec ++ != '\0' ) duzina ++ ; return duzina ; } void izbacirijecsalokacije ( char * tekst , int index ) { int i = index ; while ( tekst [ i ] != ' ' && tekst [ i ] != '\0' ) { int j = i + 1 ; while ( tekst [ j - 1 ] != '\0' ) tekst [ j - 1 ] = tekst [ j ++ ] ; } } void ubacirijecnalokaciju ( char * tekst , char * rijec , int index ) { int i = 0 ; int duzina_rijeci = duzinarijeci ( rijec ) ; while ( tekst [ i ] != '\0' ) i ++ ; int temp = i ; while ( duzina_rijeci -- > 0 ) { i = temp ++ ; while ( i >= index ) { tekst [ i + 1 ] = tekst [ i ] ; i -- ; } } i = 0 ; while ( rijec [ i ] != '\0' ) { tekst [ index + i ] = rijec [ i ++ ] ; } } int poredirijeci ( char * rijec1 , char * rijec2 ) { while ( ( * ( rijec1 ) != '\0' || * ( rijec2 ) != '\0' ) && ( * rijec1 == * rijec2 ) ) { rijec1 ++ ; rijec2 ++ ; } if ( * rijec1 == '\0' && * rijec2 == '\0' ) return 1 ; return 0 ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { if ( broj_rijeci == 0 || tekst [ 0 ] == '\0' ) return tekst ; int i = 0 ; while ( tekst [ i ] != '\0' ) { while ( tekst [ i ] == ' ' ) i ++ ; if ( tekst [ i ] == '\0' ) break ; int j = 0 ; char temp ; while ( tekst [ i + j ] != ' ' && tekst [ i + j ] != '\0' ) j ++ ; temp = tekst [ i + j ] ; tekst [ i + j ] = '\0' ; int indeksrijec = - 1 , brojac_rijeci = 0 ; while ( brojac_rijeci < broj_rijeci ) { if ( poredirijeci ( tekst + i , rijeci [ brojac_rijeci ] ) ) { indeksrijec = brojac_rijeci ; break ; } brojac_rijeci ++ ; } tekst [ i + j ] = temp ; if ( indeksrijec != - 1 ) { izbacirijecsalokacije ( tekst , i ) ; ubacirijecnalokaciju ( tekst , zamjene [ indeksrijec ] , i ) ; i += duzinarijeci ( zamjene [ indeksrijec ] ) ; } else i += j ; } return tekst ; } int main ( ) { char * rijeci [ 2 ] = { ""prijestolonasljednikovica"" } ; char * zamjene [ 2 ] = { ""c"" } ; char tekst [ 100 ] = ""prijestolonasljednikovica"" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ) ; return 0 ; }","#include <stdio.h> int duzinarijeci ( char * rijec ) { int duzina = 0 ; while ( * rijec ++ != '\0' ) duzina ++ ; return duzina ; } void izbacirijecsalokacije ( char * tekst , int index ) { int i = index ; while ( tekst [ i ] != ' ' && tekst [ i ] != '\0' ) { int j = i + 1 ; while ( tekst [ j - 1 ] != '\0' ) tekst [ j - 1 ] = tekst [ j ++ ] ; } } void ubacirijecnalokaciju ( char * tekst , char * rijec , int index ) { int i = 0 ; int duzina_rijeci = duzinarijeci ( rijec ) ; while ( tekst [ i ] != '\0' ) i ++ ; int temp = i ; while ( duzina_rijeci -- > 0 ) { i = temp ++ ; while ( i >= index ) { tekst [ i + 1 ] = tekst [ i ] ; i -- ; } } i = 0 ; while ( rijec [ i ] != '\0' ) { tekst [ index + i ] = rijec [ i ++ ] ; } } int poredirijeci ( char * rijec1 , char * rijec2 ) { while ( ( * ( rijec1 ) != '\0' || * ( rijec2 ) != '\0' ) && ( * rijec1 == * rijec2 ) ) { rijec1 ++ ; rijec2 ++ ; } if ( * rijec1 == '\0' && * rijec2 == '\0' ) return 1 ; return 0 ; } char * zamjena_rijeci ( char * tekst , char * * rijeci , char * * zamjene , int broj_rijeci ) { if ( broj_rijeci == 0 || tekst [ 0 ] == '\0' ) return tekst ; int i = 0 ; while ( tekst [ i ] != '\0' ) { while ( tekst [ i ] == ' ' ) i ++ ; if ( tekst [ i ] == '\0' ) break ; int j = 0 ; char temp ; while ( tekst [ i + j ] != ' ' && tekst [ i + j ] != '\0' ) j ++ ; temp = tekst [ i + j ] ; tekst [ i + j ] = '\0' ; int indeksrijec = - 1 , brojac_rijeci = 0 ; while ( brojac_rijeci < broj_rijeci ) { if ( poredirijeci ( tekst + i , rijeci [ brojac_rijeci ] ) ) { indeksrijec = brojac_rijeci ; break ; } brojac_rijeci ++ ; } tekst [ i + j ] = temp ; if ( indeksrijec != - 1 ) { izbacirijecsalokacije ( tekst , i ) ; ubacirijecnalokaciju ( tekst , zamjene [ indeksrijec ] , i ) ; i += duzinarijeci ( zamjene [ indeksrijec ] ) ; } else i += j ; } return tekst ; } int main ( ) { char * rijeci [ 2 ] = { ""prijestolonasljednikovica"" } ; char * zamjene [ 2 ] = { ""c"" } ; char tekst [ 100 ] = ""prijestolonasljednikovica"" ; printf ( ""%s"" , zamjena_rijeci ( tekst , rijeci , zamjene , 1 ) ) ; return 0 ; }"
