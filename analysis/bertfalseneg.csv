,percent,label,plagiarized,lines,filename0,filename1,source0,source1
44,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
127,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
277,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
325,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
519,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
690,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
784,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
794,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
810,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
991,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
1009,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
1094,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
1276,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
1313,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
1644,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
1741,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
1886,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
1903,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
1906,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
1918,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
1991,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
2044,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
2228,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
2238,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
2275,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
2503,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
2557,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
2676,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
2749,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
2877,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
3055,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
3062,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
3160,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
3389,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
3456,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
3458,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
3472,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3477,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
3481,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3482,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
3486,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
3492,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
3503,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
3508,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
3514,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
3516,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
3519,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
3521,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
3523,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
3534,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
3536,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
3546,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
3554,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
3560,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
3563,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
3564,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
3567,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
3568,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
3569,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
3577,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
3578,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
3582,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
3586,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
3594,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
3597,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
3600,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
3601,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
3606,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
3607,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
3615,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
3618,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
3622,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
3624,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
3632,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
3638,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
3655,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
3657,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
3667,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
3670,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
3672,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
3680,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
3686,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
3688,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3694,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
3697,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
3700,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
3701,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
3705,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
3708,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
3715,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
3716,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
3717,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
3718,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3719,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
3723,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
3725,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
3734,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
3741,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
3742,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3747,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
3750,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
3754,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
3757,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
3764,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
3778,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
3781,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
3783,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3792,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
3804,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
3805,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3807,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
3817,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
3831,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
3833,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
3834,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
3840,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
3844,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
3850,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
3851,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
3853,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
3855,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
3862,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
3863,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
3865,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3866,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
3868,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
3870,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
3873,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
3875,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
3883,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3887,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
3890,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
3893,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
3896,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
3898,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
3901,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
3902,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
3904,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
3905,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
3917,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
3929,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
3931,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
3938,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
3949,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
3952,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
3958,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
3960,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
3965,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
3966,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
3968,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
3969,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
3970,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
3971,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
3977,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
3982,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
3991,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
3995,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
3996,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
3999,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4013,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
4015,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
4017,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
4020,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
4026,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
4027,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
4033,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
4034,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
4038,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
4039,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
4046,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4053,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
4057,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
4067,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4068,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
4081,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4086,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4093,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4102,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
4103,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
4114,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
4116,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
4117,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4120,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4124,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4125,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
4129,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
4131,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
4141,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4146,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4150,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
4156,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4169,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
4171,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4176,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4177,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4180,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
4182,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4184,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4185,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
4189,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4193,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
4194,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4199,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
4200,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4204,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
4206,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
4212,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4229,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
4249,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
4255,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
4260,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
4263,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
4278,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4280,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4284,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4289,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
4297,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
4306,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4311,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
4321,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
4323,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
4325,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4335,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
4339,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4340,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
4342,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
4351,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
4365,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4366,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
4368,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4378,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4379,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4383,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4393,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
4394,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
4397,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4401,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
4402,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
4405,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
4409,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
4415,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
4418,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4419,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
4423,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
4428,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
4439,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4444,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4453,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4455,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4456,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
4460,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4461,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4480,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
4484,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
4491,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
4493,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
4496,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
4499,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
4501,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4502,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
4503,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
4516,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
4527,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4533,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4536,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
4539,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4546,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4551,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4562,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
4564,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
4566,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4579,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
4580,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4581,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4594,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4595,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4598,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
4600,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4605,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
4606,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
4608,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
4610,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4616,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
4622,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
4629,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
4635,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
4639,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4645,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
4648,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
4651,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4653,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
4656,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
4660,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4662,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
4666,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
4678,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4684,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4687,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
4691,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4694,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4704,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4705,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4709,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
4714,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
4724,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4727,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
4729,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4738,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4740,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4741,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
4743,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
4748,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
4755,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
4758,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4759,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
4764,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
4787,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
4797,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
4803,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4812,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4813,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
4814,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4815,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
4824,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
4826,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
4830,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
4832,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4834,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
4835,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
4838,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4840,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4842,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4843,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
4845,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
4848,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4851,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4852,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4853,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
4861,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
4863,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4865,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4867,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
4868,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
4882,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
4885,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
4890,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4896,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4897,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4910,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4923,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4929,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
4934,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
4935,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
4938,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
4946,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
4949,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4951,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4958,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
4961,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4978,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
4990,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
4992,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
4994,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
5000,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5001,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5007,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
5011,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5028,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
5033,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
5045,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
5047,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5057,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5061,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
5066,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
5069,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
5086,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
5087,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5088,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
5096,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5104,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5109,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
5113,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
5117,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
5122,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5123,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
5127,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5133,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
5135,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
5139,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
5147,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5150,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
5151,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5162,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
5165,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5171,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5175,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5178,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
5183,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5186,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5187,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
5195,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5199,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5212,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5214,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
5220,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
5224,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
5227,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
5232,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
5236,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
5238,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5239,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
5240,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5241,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
5242,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
5250,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5251,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5252,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
5258,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
5263,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
5273,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5274,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5276,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
5278,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
5280,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5282,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5289,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5291,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
5292,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5300,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5309,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5314,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5321,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
5331,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
5335,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5344,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
5348,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
5355,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5356,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
5368,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
5372,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5375,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
5379,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
5380,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
5384,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5391,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5393,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5395,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5396,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
5405,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5406,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
5408,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5410,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5418,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5430,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
5431,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
5432,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
5435,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
5437,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5440,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
5446,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5449,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5461,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
5471,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5472,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5474,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5483,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
5490,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5492,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5497,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
5517,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
5527,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
5528,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5539,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
5544,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
5549,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
5557,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
5563,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
5569,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5570,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5572,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5581,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
5591,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
5593,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
5602,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5608,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5617,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
5623,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5630,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
5635,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
5639,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
5650,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5653,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
5655,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5659,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
5665,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
5666,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5668,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5670,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
5671,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
5674,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
5675,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
5678,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
5687,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
5689,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5694,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
5711,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5717,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5720,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
5724,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
5725,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5728,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5730,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
5731,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5738,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
5748,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
5750,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
5751,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5753,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5754,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
5761,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5766,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
5767,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
5773,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5784,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5785,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
5786,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5787,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
5804,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
5811,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
5816,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
5819,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5820,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
5821,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5823,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
5833,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
5834,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
5835,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5840,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
5860,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5864,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5866,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
5868,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5869,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5880,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5881,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
5882,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5883,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
5895,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
5896,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5903,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
5906,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
5907,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
5911,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
5927,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
5931,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
5933,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
5937,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
5939,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5943,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
5948,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
5949,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
5954,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
5956,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
5959,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
5961,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
5964,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
5971,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
5974,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
5977,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
5990,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
5996,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
6006,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
6008,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
6009,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
6020,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
6022,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6023,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
6026,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
6040,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
6041,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
6047,67,67,1,32,A2016/Z2/Z2/student9931,A2016/Z2/Z2/student5961,"#include <stdio.h>
#include <math.h>
#define PI 3.1415926
#define q 500
int main() {
	int n=0,i=0,y=0;
    double niz[q],h=0,m=0,a=0,j=0,e=0,w=0;
	printf(""Unesite broj uglova: "");
do{scanf(""%d"",&n);
}	while(n<=0 || n>=500);
do{scanf(""%lf"",&niz[i]);
		i++;
	}while(i<n);
		printf(""Uglovi su: "");
    for(i=0;i<n;i++){
    j=fabs(niz[i]);
    m=floor(j*180/PI);
    h=j*180/PI;
    e=floor((h-m)*60);
    a=(h-m)*60;
    w=round((a-e)*60);
  if(w>=60){
   w-=60;
   e+=1;
   if(e>=60){
    e-=60;
    m+=1;}}
     if(w>30){
       for(y=i;y<n-1;y++){
        niz[y]=niz[y+1];
    }
    n--;
    i--;
   }
   else{
   	if(niz[i]<0) {printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"",m,e,w);}
    else {printf(""\n%0.f stepeni %0.f minuta %0.f sekundi"",m,e,w);}
    } }
	return 0;
}","#include <stdio.h>
#include <math.h>
#define PI 3.1415926
int main() {
	int i=0, j, n;
	double niz[500], m1, s1;
	printf(""Unesite broj uglova: "");
	do{
		scanf(""%d"", &n);
	}while(n<1 || n>500);
	do{
		scanf(""%lf"", &niz[i]);
		i++;
	}while(i<n);
	printf(""Uglovi su: "");
	for(i=0; i<n; i++){
		double radijan=fabs(niz[i]);
		double degrease=floor(radijan*180/PI);
		m1=radijan*180/PI;
		double minutes=floor((m1-degrease)*60);
		s1=(m1-degrease)*60;
		double seconds=round((s1-minutes)*60);
		if(seconds>=60){
			seconds-=60;
			minutes+=1;
			if(minutes>=60){
				minutes-=60;
				degrease+=1;
			}
		}
		if(seconds>30){
			for(j=i; j<n-1; j++){
				niz[j]=niz[j+1];
			}
			i--;
			n--;
		}
		else{
			if(niz[i]<0) printf(""\n-%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
			else printf(""\n%.0f stepeni %.0f minuta %.0f sekundi"", degrease, minutes, seconds);
		}
	}
	return 0;
}"
6050,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6062,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
6063,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
6065,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
6071,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
6079,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6081,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6088,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
6089,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
6090,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
6091,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
6092,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6095,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6098,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
6117,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
6130,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
6131,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
6137,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6154,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
6159,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
6165,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
6167,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
6170,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6174,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
6175,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
6178,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>
 
int main() {
	int n,m=0,x=1,c1,c2,r;
	printf(""Unesite broj: "");
	scanf(""%d"",&n);
	n=abs(n);
	if(n<10){
		printf(""0""); return 0;
	}
	do {
		c1=n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while(n>9);
	printf(""%d"",m);
    return 0;
}","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
6179,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
6196,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
6198,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6199,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
6210,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
6211,86,86,1,109,A2016/Z4/Z1/student4420,A2016/Z4/Z1/student2676,"#include <stdio.h>
 

 
void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				//Odredivanje prvog i posljednjeg slova trenutne rijeci
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}

	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
6212,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
6213,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
6217,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
6218,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
6234,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
6243,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
6249,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
6254,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
6257,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6261,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6262,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
6272,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
6277,96,96,1,42,A2016/Z3/Z1/student8886,A2016/Z3/Z1/student1616,"#include <stdio.h>

/*Trazimo sljedeci prost broj u datom intervalu*/
int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

/*Funkcija vraca prost broj*/	    
int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	
	/*Racunanje sume prostih brojeva u intervalu (A,B)*/
	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
","#include<stdio.h>


int provjeri_je_li_prost(int n) { 
	int i, br=0;
	for (i=1; i<=n; i++) 
		if (n%i==0) 
		br++;
		if (br==2) return 1; 
	    else return 0;
}	    

int daj_prost() {
	static int x=1;
	x++;
	while (provjeri_je_li_prost(x)==0)
	x++;
	return x;
}

int main () {
	int A, B, i, suma=0;
	do {
	printf (""Unesite brojeve A i B: "");
	scanf (""%d %d"", &A, &B);
	if (A<=0) printf (""A nije prirodan broj.\n"");
	else if (B<=A) printf (""A nije manje od B.\n"");
	else if (B<=0) printf (""B nije prirodan broj.\n"");
	} while (A<=0 || B<=0 || A>=B); 
	

	i=daj_prost();
	while (i<=A) {
		i=daj_prost();
	}
	
	while (i<B) {
		if (provjeri_je_li_prost(i)==1) { 
		suma=suma+i;
		i=daj_prost();
		}
	}

printf (""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
return 0; 
}
"
6297,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
6300,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
6301,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
6303,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
6306,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
6314,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
6315,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
6319,99,99,1,24,A2016/Z1/Z4/student2939,A2016/Z1/Z4/student5649,"#include <stdio.h>
int main() {
	int i,j,n;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 ||n>50){
		printf(""Pogresan unos"");
		printf(""\nUnesite broj n: "");
		scanf(""%d"", &n);}
	if(n==1){
		printf(""***"");}
	else {
	for(i=0; i<n; i++){
	for(j=0; j<=4*n-4; j++){
	if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i){
		printf(""*"");}
	else{printf("" "");}} 
	   	printf(""\n"");}}
	return 0;
	}
","#include <stdio.h>

int main() {
	int n, j, i;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while(n<=0 || n>50) {
	printf(""Pogresan unos"");
	printf(""\nUnesite broj n: "");
	scanf(""%d"", &n);}
	if(n==1) {
		printf(""***"");}
		else {
		for(i=0;i<n;i++)
		{
			for(j=0;j<=4*n-4;j++)
		{
			if(i==j || j==2*n-2-i || j==2*n-2+i || j==4*n-4-i) {
			printf(""*"");}
			else{
			printf("" "");}
		}
		printf(""\n"");
	}
	}
	return 0;
}






"
6322,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
6324,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
6331,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
6333,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
6334,90,90,1,81,A2016/Z3/Z3/student9097,A2016/Z3/Z3/student8051,"#include <stdio.h>

int main() {
	int m, n, i, j, k, q, x[200][200], p=0;
	/*x[200][200] jer je to najveci format matrice*/
	do{
	printf(""Unesite brojeve M i N: "");
	scanf (""%d %d"", &m, &n);
	if (n<=0||m<=0||n>200||m>200)
	{
		printf (""Brojevi nisu u trazenom opsegu.\n"");
	}
	}while(n<=0||m<=0||n>200||m>200); /*Osiguravamo da su dimenzije u zadanom opsegu*/
	printf (""Unesite elemente matrice: "");
	for (i=0; i<m; i++)
	{
		for (j=0; j<n; j++)
		{
			scanf (""%d"", &x[i][j]);
		}
	}
	for (i=1; i<m; i++)
	{
		for (j=0; j<i; j++)
		{
			p=0;
			for (k=0; k<n; k++)
			{
				if (x[i][k]!=x[j][k]) /*Provjerava se da li su elementi dvije kolone jednaki*/
				{
					p=1;
					break;
				}
			}
			if (p==0)
			{
				/*Ako postoje jednake kolone izbacujemo jednu*/
				for (q=i; q<m-1; q++)
				{
					for (k=0; k<n; k++)
					{
						x[q][k]=x[q+1][k];
					}
				}
				m--;
				i--; 
				/*Ocuvanje redoslijeda*/
			}
		}
	}
		for (k=1; k<n; k++)
		{
			for (j=0; j<k; j++)
			{
				p=0;
				for (i=0; i<m; i++)
				{
					if (x[i][k]!=x[i][j]) /*Provjera jednakosti elemenata kod redova na slican nacin kao kod kolona*/
					{
						p=1;
						break;
					}
				}
				if (p==0)
				{
					for (q=k; q<n-1; q++)
					{
						for (i=0; i<m; i++)
						{
							x[i][q]=x[i][q+1];
							/*Ako postoje isti redovi izbacuje se jedan*/
						}
					}
					k--;
					n--; 
					/*Ocuvanje redoslijeda*/
				}
			}
		}
		printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
		for (i=0; i<m; i++)
		{
			printf ("" "");
			for (j=0; j<n; j++)
			{
				printf (""%4d "", x[i][j]); /*Ispis je na 5 mjesta sirine*/
			}
			printf (""\n""); 
			/*Buduci da je u pitanju matrica moramo imati 2 for petlje, jedna za ispis elemenata u redove i druga za prebacivanje u novi red*/
		}
	return 0;
}
","#include <stdio.h>



int main() {
    int a[200][200],m,n,i,j;
    //Preko do-while petlje osiguravam unos brojeva u trazenom opsegu...
    do{
        printf(""Unesite brojeve M i N: "");
        scanf(""%d %d"",&m,&n);
        if(n<=0||n>200||m<=0||m>200)
        {
            printf(""Brojevi nisu u trazenom opsegu.\n"");
        }
    }while(n<=0||n>200||m<=0||m>200);
    
	printf(""Unesite elemente matrice: "");
	for(i=0;i<m;i++)
	    for(j=0;j<n;j++)
	        scanf(""%d"",&a[i][j]);
	
	int logik=0,k,q;
	//logik je ustvari logicka varijabla koja nam govori da li su uporedjeni elementi jednaki. Ona ce biti 1 ukoliko nisu, a 0 ukoliko jesu.
	for(i=1;i<m;i++)
	{
	    for(k=0;k<i;k++)
	   {
	   		//Ovdje i petlja ide od 1 do m-1 (ubrajajuci i m-1), dok k ide od 0 do i-1 (ubrajajuci i-1). 
	   		//Odnosno, ovdje se uporedjuju donji redovi sa gornjim. Ukoliko su jednaki, taj ""donji"" red se izbacuje.
	        logik=0;
	        for(j=0;j<n;j++)
	        {
	           if(a[i][j]!=a[k][j])
	           {
	               logik=1;
	               break;
	           }
	        }
	        //Ukoliko logicka varijabla je jednaka 0, to znaci da su uporedjivani elementi isti, odnosno da je red ""i"" i red ""k"" jednaki.
	        if(logik==0){
	        	//Izbacivanje tog ""duplikata"" iz matrice...
	            for(q=i;q<m-1;q++)
	            {
	                for(j=0;j<n;j++)
	                {
	                    a[q][j]=a[q+1][j];
	                }
	            }
	            m--;
	            i--;
	        }
	   }
	
	}
	//Naime, ovdje se koristi potpuna ista taktika kao u kodu iznad za provjeravanje redova, samo su ovdje kolone.
	//I ukoliko su 2 kolone jednake, ona koja je ""desnija"", ta se izbacuje.
	for(j=1;j<n;j++)
	{
		for(k=0;k<j;k++)
		{
			logik=0;
			for(i=0;i<m;i++)
			{
				if(a[i][j]!=a[i][k])
				{
					logik=1;
					break;
				}
			}
			if(logik==0)
			{
				for(q=j;q<n-1;q++)
				{
					for(i=0;i<m;i++)
						a[i][q]=a[i][q+1];
				}
				j--;
				n--;
			}
			
		}
	}
	
	//I na kraj ispisivanje krajnje matrice i to je to :)
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<m;i++){
		printf("" "");
	    for(j=0;j<n;j++)
	        {
	            printf(""%4d "",a[i][j]);
	        }
	        printf(""\n"");
	}
	return 0;
}
"
6337,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
6339,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
6342,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
6354,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h>

int main() {
	int mat[200][200], i, j, l, k, a, z;
	int M, N;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (i=1;i<=M;i++){
		for (j=1;j<=N;j++)
		{
			scanf (""%d"",&mat[i][j]);
		}
	}
	for (l=1;l<=M;l++){
		for(i=l+1;i<=M;i++){
			a=1;
			for(j=1;j<=N;j++){
				if (mat[l][j]!=mat[i][j]) a=0;
			}
			/*izbacivanje reda*/
			if (a) {
				for(z=i;z<=M;z++){
					for(j=1;j<=N;j++){
						mat[z][j]=mat[z+1][j];
					}
				}
				i--;
				M--;
			}
		}
	}

	for (k=1;k<=N;k++){
		for(j=k+1;j<=N;j++){
			a=1;
			for(i=1;i<=M;i++){
				if (mat[i][k]!=mat[i][j]) a=0;
			}
			if (a) {
				/*izbacivanje kolone*/
				for(i=1;i<=M;i++){
					for(z=j;z<=N;z++){
						mat[i][z]=mat[i][z+1];
					}
				}
				j--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (i=1;i<=M;i++){
		printf("" "");
		for (j=1;j<=N;j++){
			printf(""%4d "", mat[i][j]);
		}
		printf (""\n"");
	}
	return 0;
}","#include <stdio.h>

int main() {
	int matrica[200][200],M,N,red,kolona,pocetnired,pocetnakolona,jednakost,zavrsni;
	do{
		printf(""Unesite brojeve M i N:"");
		scanf(""%d %d"",&M,&N);
		if (M<=0 || M>200 || N<=0 || N>200){
			printf ("" Brojevi nisu u trazenom opsegu.\n"");
			continue;
		}
	} while (M<=0 || M>200 || N<=0 || N>200);
	printf ("" Unesite elemente matrice: "");
	for (red=1;red<=M;red++){
		for (kolona=1;kolona<=N;kolona++){
			scanf (""%d"",&matrica[red][kolona]);
		}
	}
	for (pocetnired=1;pocetnired<=M;pocetnired++){
		for(red=pocetnired+1;red<=M;red++){
			//Uslov za jednakost redova//
			jednakost=1;
			for(kolona=1;kolona<=N;kolona++){
				if (matrica[pocetnired][kolona]!=matrica[red][kolona]) jednakost=0;
			}
			//izbacivanje reda uz ocuvanje redoslijeda//
			if (jednakost) {
				for(zavrsni=red;zavrsni<=M;zavrsni++){
					for(kolona=1;kolona<=N;kolona++){
						matrica[zavrsni][kolona]=matrica[zavrsni+1][kolona];
					}
				}
				red--;
				M--;
			}
		}
	}

	for (pocetnakolona=1;pocetnakolona<=N;pocetnakolona++){
		for(kolona=pocetnakolona+1;kolona<=N;kolona++){
			//uslov za jednakost kolone//
			jednakost=1;
			for(red=1;red<=M;red++){
				if (matrica[red][pocetnakolona]!=matrica[red][kolona]) jednakost=0;
			}
			if (jednakost) {
				//izbacivanje kolone uz ocuvanje redoslijeda//
				for(red=1;red<=M;red++){
					for(zavrsni=kolona;zavrsni<=N;zavrsni++){
						matrica[red][zavrsni]=matrica[red][zavrsni+1];
					}
				}
				kolona--;
				N--;
			}
		}
	}
	printf (""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	for (red=1;red<=M;red++){
		printf ("" "");
		for (kolona=1;kolona<=N;kolona++){
			printf(""%4d "", matrica[red][kolona]);
		}
		printf (""\n"");
	}
	return 0;
}
"
6361,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
6364,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
6372,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
6381,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
6395,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6400,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
6401,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6409,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
6413,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>




int ProvjeriString(char *s)
{
	char *p=s;
	
		while(*p!='\0')
		{
			if(*p!='(') return 0;
			else p++;
				
				if(*p==',') return 0;
				
				while(*p!=',')
				{
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)=='(') return 0;
				    p++;
				}
				
				
				if(*p!=',') return 0;
				else p++;
				
				if(*p==')') return 0;
				
				while(*p!=')')
				{
					
					if((*p<'0' || *p>'9') && (*p!='.' && *p!='-')) return 0;
				   	if(*p=='.' && *(p-1)==',') return 0;
				    p++;	
				}
				
				if(*p!=')') return 0;
			    else p++;
				
				if(*p!='\0') p++;
		
				if(*p=='\0' && *(p-1)!=')') return 0;
				
		}
		
return 1;	
}


void DajBroj(char *pt,char *kt,float *x,float *y)
{
	
	char *p=pt;
	int neg;
	float a,b;
	
	*x=0;*y=0;
	
		while(p!=kt)
		{
			p++;neg=0;
			
			if(*p=='-'){neg=1; if(*p=='\0') break; else p++;}
		
			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;
			
		}
		
	
}


char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
	
	
	if (ProvjeriString(s)==0) return 0;


		while(*p!='\0')
		{ 
			
			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;
			
			DajBroj(pt,kt,&x,&y);
			
		
			if(x<x1 || x>x2 || y<y1 || y>y2)
			{   
				p++;
				while(*p==',')p++;
				izb=p;
				
				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}
			
		
			}else p++;
				
		}
		
	    if(p!=s) p--;
		if(*p==',') *p='\0';
	
	return s;	
}

int main() {
	
	char s[] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"";
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s);
	return 0;
}
"
6426,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon  0.0001
struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};
int uporedidouble(double a,double b){
	if(fabs(a-b)<epsilon)return 1;
	return 0;
}
double dajprosjek(int ocjene[],int brojocjena){
	int sumaocjena=0,i;
	double prosjek;
	if(brojocjena>0){
		sumaocjena=0;
		for(i=0;i<brojocjena;i++){
			if(ocjene[i]==5){prosjek=5.0; return prosjek;}
			sumaocjena+=ocjene[i];
		}
		prosjek=(double)sumaocjena/brojocjena;
	}
	else{prosjek=5.0;}
	return prosjek;
}
int genijalci(struct Student *studenti,int brojstud,double potrebanprosjek){
	int i=0,j=0,k;
	char das[41];
	double prosjek=0;
	struct Majmun{
		char prezimeime[41];
		double prosjekocjena;
	};
	struct Majmun celavi_majmuni[3];
	for(i=0;i<3;i++){
		celavi_majmuni[i].prezimeime[0]='\0';
		celavi_majmuni[i].prosjekocjena=0;
	}
	for(i=0;i<brojstud;i++){
			prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
			if(prosjek<potrebanprosjek){
				for(j=i;j<brojstud-1;j++){
					studenti[j]=studenti[j+1];
				}
				i--;
				brojstud--;
			}
	}
	for(i=0;i<brojstud;i++){
		prosjek=dajprosjek(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek>celavi_majmuni[j].prosjekocjena){
				for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
                strcpy(celavi_majmuni[j].prezimeime,das);
                celavi_majmuni[j].prosjekocjena=prosjek;
                break;
			}
			else if(uporedidouble(prosjek,celavi_majmuni[j].prosjekocjena)){
				strcpy(das,studenti[i].prezime);
				strcat(das,"" "");
				strcat(das,studenti[i].ime);
				if(strcmp(das,celavi_majmuni[j].prezimeime)<0){
					for(k=2;k>j;k--)celavi_majmuni[k]=celavi_majmuni[k-1];
					strcpy(das,studenti[i].prezime);
					strcat(das,"" "");
					strcat(das,studenti[i].ime);
	                strcpy(celavi_majmuni[j].prezimeime,das);
	                celavi_majmuni[j].prosjekocjena=prosjek;
	                break;
				}
			}
		}
		
	}
	for(j=0;j<3;j++){
		printf(""%s\n"",celavi_majmuni[j].prezimeime);
	}
	return brojstud;
}
int main() {
{//AT1: da li je izbacivanje ispravno? (Gleda se samo podstring, ne gledaju najbolja 3)
        struct Student studenti[] = {

            {""Meho"", ""Behic"", {10, 9}, 2},
            {""Meho"", ""Aehic"", {10, 8}, 2},
            {""Meho"", ""Cehic"", {10, 9, 8, 7, 6}, 5},
            {""Meho"", ""Dehic"", {6, 9}, 2},
            {""Meho"", ""Zehic"", {10}, 1},
            {""Meho"", ""Oehic"", {10, 9, 9, 9}, 4}
        };
        int vel = sizeof studenti / sizeof studenti[0], i;
        vel = genijalci(studenti, vel, 9.);
        printf(""Vel: %d\nStudenti:\n"", vel);
        for (i = 0; i < vel; ++i)
            printf (""%s %s\n"", studenti[i].prezime, studenti[i].ime);
    }
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define FABS 0.0001
void Strcat(char *s, char *t){
	while(*s!='\0')s++;
	for(;*t!='\0';s++,t++)*s=*t;
	*s='\0';
 
}
int Strcmp(char *s, char *t){
	for(; *s==*t;s++,t++){
		if(*s=='\0')return 0;
	}
 return *s-*t;
}
void Strcpy(char *s, char *t){
	while((*s=*t)!='\0'){
		 s++;
		 t++;
	}
}
struct Student {
char ime[20], prezime[20];
int ocjene[50];
int br_ocjena;
};
double prosjek_(int* ocjene, int br_ocjena){
	double prosjek;
	int i;
	if(br_ocjena>0){
		prosjek=0;
		for(i=0;i<br_ocjena;i++){
			if(ocjene[i]==5){
				prosjek=5.00;
				return prosjek;
			}
			prosjek+=ocjene[i];
		}
		prosjek/=br_ocjena;
    }
    else prosjek=5.00;
    
 return prosjek;
}
int genijalci(struct Student *studenti,int velicina_niza,double prosjek){
	int i,j,k;
	char niz[45]; /* 20 + 20 +1(za razmak) i visak mali*/
	double prosjek_o=0;
	char ime_pre[3][45]; 
	double prosjekk[3];
	for(i=0;i<3;i++){
		ime_pre[i][0]='\0';
		prosjekk[i]=0;
	}
	
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene, studenti[i].br_ocjena);
		if(prosjek_o<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
		prosjek_o=prosjek_(studenti[i].ocjene,studenti[i].br_ocjena);
		for(j=0;j<3;j++){
			if(prosjek_o>prosjekk[j]){
				for(k=2;k>j;k--){
					Strcpy(ime_pre[k],ime_pre[k-1]);
					prosjekk[k]=prosjekk[k-1];
				}
			  Strcpy(niz, studenti[i].prezime);
			  Strcat(niz, "" "");
			  Strcat(niz, studenti[i].ime);
			  Strcpy(ime_pre[j], niz);
		      prosjekk[j]=prosjek_o;
			  break;
			}
		    else if(fabs(prosjek_o-prosjekk[j])<FABS){
		    	Strcpy(niz, studenti[i].prezime);
		    	Strcat(niz, "" "");
		    	Strcat(niz, studenti[i].ime);
		    	if(Strcmp(niz, ime_pre[j])<0){
		    		for(k=2;k>j;k--){
		    			Strcpy(ime_pre[k],ime_pre[k-1]);
		    			prosjekk[k]=prosjekk[k-1];
		    		}
		    		Strcpy(niz, studenti[i].prezime);
		    		Strcat(niz, "" "");
		    		Strcat(niz, studenti[i].ime);
		    	    Strcpy(ime_pre[j], niz);
		    	    prosjekk[j]=prosjek_o;
		    	    break;
		    	}
		    	
		    }
		}
	}
/*ispis*/
  for(j=0;j<3;j++){
  	 printf(""%s\n"", ime_pre[j]);
	}
 return velicina_niza;
}

/*struct Student studenti[100];
  int genijalci(struct Student *studenti, int velicina_niza, double prosjek){
		if(velicina_niza==3 ) {
		printf(""%s %s"", studenti[1].prezime, studenti[1].ime);
		return 1;
	}
	if(velicina_niza==5){
		printf(""%s %s\n"", studenti[1].prezime,studenti[1].ime);
		printf(""%s %s\n"", studenti[4].prezime,studenti[4].ime);
		printf(""%s %s"", studenti[3].prezime,studenti[3].ime);
	return 3;
	}
	if(velicina_niza==6 && prosjek==6.5){
		printf(""%s %s\n"", studenti[2].prezime,studenti[2].ime);
		printf(""%s %s\n"", studenti[5].prezime,studenti[5].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		return 3;
		}
	double prosjek_o[100];
	int i,j;
	int max_i=-1,max_j=-1,max_k=-1;
	double max=prosjek,max1=prosjek,max2=prosjek;
	char niz1[50], niz2[50], niz3[50];
	for(i=0;i<velicina_niza;i++){
		prosjek_o[i]=0;
		for(j=0;j<studenti[i].br_ocjena;j++){
			if(studenti[i].ocjene[j]==5 || velicina_niza==0){
				prosjek_o[i] = 5.00;
				break;
			}
			prosjek_o[i]+=studenti[i].ocjene[j];
		}
		if(prosjek_o[i]+FABS>=6) prosjek_o[i]=prosjek_o[i]/studenti[i].br_ocjena;
		
		if(prosjek_o[i]+FABS<prosjek){
			for(j=i;j<velicina_niza-1;j++){
				studenti[j]=studenti[j+1];
			}
			i--;
			velicina_niza--;
		}
	}
	for(i=0;i<velicina_niza;i++){
	
		if(prosjek_o[i]>=max){
			max=prosjek_o[i];
			max_i=i;
		}
	
		if(prosjek_o[i]>=max1 && prosjek_o[i]<max){
			max1=prosjek_o[i];
			max_j=i;
		}

		if(prosjek_o[i]>=max2 && prosjek_o[i]<=max1 && prosjek_o[i]<=max ){
			max2=prosjek_o[i];
			max_k=i;
		}
		
	}
	if( prosjek==6.5 && velicina_niza==3){
		
		printf(""%s %s\n"", studenti[3].prezime,studenti[3].ime);
		printf(""%s %s\n"", studenti[0].prezime,studenti[0].ime);
		printf(""%s %s"", studenti[1].prezime,studenti[1].ime);
		
		
		return 3;
		
	}
	
	if(max_j==max_i && max_i!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_i] && i!=max_j)max_i=i;
			}
	}
	if(max_k==max_j && max_k!=-1 && max_j!=-1){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_j] && i!=max_k)max_j=i;
			
			}
	}
	if(max_k==max_i && max_i!=-1 && max_k!=-1 ){
		for(i=0;i<velicina_niza;i++){
			if(prosjek_o[i]==prosjek_o[max_k] && i!=max_i)max_k=i;
			
			}
	}


	
	if(max_i!=-1 && max_j!=-1 && max_k!=-1){
		strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2, "" "");
		strcpy(niz2, studenti[max_j].ime);
		strcpy(niz3, studenti[max_k].prezime);
		strcpy(niz3, "" "");
		strcpy(niz3, studenti[max_k].ime);
		if(strcmp(niz1,niz2)>0 && strcmp(niz1,niz3)>0){
			printf(""\n%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			if(strcmp(niz2,niz3)>0){
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
				printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
		    else{
		    	printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		    }
		}
		else if(strcmp(niz2,niz1)>0 && strcmp(niz2,niz3)>0){
			printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
			if(strcmp(niz1,niz3)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
		    	printf(""%s %s"",studenti[max_k].prezime, studenti[max_k].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_k].prezime, studenti[max_k].ime);
		    	printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
		else if(strcmp(niz3,niz2)>0 && strcmp(niz3,niz1)>0){
			printf(""%s %s\n"",studenti[max_k].ime, studenti[max_k].prezime);
			if(strcmp(niz1,niz2)>0){
				printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
				printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
			}
			else{
				printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].prezime);
				printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
			}
		}
	}

	if(max_i!=-1 && max_j!=-1 && max_k==-1){
	    strcpy(niz1, studenti[max_i].prezime);
		strcpy(niz1, "" "");
		strcpy(niz1, studenti[max_i].ime);
		strcpy(niz2, studenti[max_j].prezime);
		strcpy(niz2,"" "");
		strcpy(niz2, studenti[max_j].ime);
		if(strcmp(niz1, niz2)>0){
			printf(""%s %s\n"",studenti[max_i].prezime, studenti[max_i].ime);
			printf(""%s %s"",studenti[max_j].prezime, studenti[max_j].ime);
		}
		else{ 
		     printf(""%s %s\n"",studenti[max_j].prezime, studenti[max_j].ime);
		     printf(""%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	    }
	}
	
	if(max_i!=-1 && max_j==-1 && max_k==-1){
		printf(""\n%s %s"",studenti[max_i].prezime, studenti[max_i].ime);
	}
 
  printf(""%d %d %d"", max_i,max_j,max_k);
	return velicina_niza;
}*/
int main() {
	
	{/* AT3: Test sortiranja po prosjeku */
struct Student studenti[5] ={
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Pero"", ""Peric"", { 8,8,8,8,7}, 5}, 
	{ ""Beba"", ""Bebic"", { 6,6,6,6,6}, 5},
	{ ""Mujo"", ""Mujic"", { 7,7,7,7,8}, 5}, 
	{ ""Fata"", ""Fatic"", { 7,7,7,8,8}, 5}, 
};
genijalci(studenti, 5, 6.5);
}
return 0;
}

/*	printf(""Zadaća 5, Zadatak 1"");
struct Student studenti[100];
double prosjek=7.90;

printf(""Vel: "", genijalci(studenti,100,prosjek));
	return 0;*/

"
6431,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
6432,98,98,1,49,A2016/Z3/Z1/student8199,A2016/Z3/Z1/student4100,"#include <stdio.h>

/*Trazenje prostog broja*/

int daj_prost () {
	static int x = 1;
	int i;
	x++;
	for(i = 2; i < x; i++){
		if (x % i == 0){
			i = 2;
			x++;
		}
	}
	return x;
}


int main() {
	int i, j, A, B, sum = 0;
	
	/*Unos i provjera unosa*/
	
	do {
		printf (""Unesite brojeve A i B: "");
		scanf (""%d %d"", &A, &B);
		if (A >= B) {
			printf (""A nije manje od B.\n"");
		}
		else if (A <= 0) {
			printf (""A nije prirodan broj.\n"");
		}
		else if (B <= 0) {
			printf (""B nije prirodan broj\n"");
		}
	}
	while(A >= B || A<=0 || B <= 0);
	
	/*Sabiranje prostih brojeva u rasponu*/
	
	for(i = 0; i < B; i++){
		j = daj_prost();
		
		if (j > A && j < B){
			sum = sum + j;
		}
		
		else continue;
	}
	
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, sum);
	
	return 0;
}","#include <stdio.h>

int daj_prost () {
	static int v=1;
	int k;
	v++;
	for (k=2; k<v; k++){
		if (v%k==0){
			k=2;
			v++;
		}
	}
	return v;
}
int main () {
	int k, y, A, B, suma=0;
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"", &A, &B);
		if (A>=B){ printf(""A nije manje od B.\n"");}
		else if (A<=0){ printf(""A nije prirodan broj.\n"");}
		else if(B<=0){ printf(""B nije prirodan broj.\n"");}
	}while ( A>=B || A<=0 || B<=0);
	for (k=0; k<B; k++){
		y= daj_prost();
		if(y>A && y<B){ suma=suma + y;}
		else continue;
	}
	printf(""Suma prostih brojeva izmedju %d i %d je %d."", A, B, suma);
	return 0;
}

"
6436,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
6438,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
6443,76,76,1,172,A2016/Z1/Z1/student7704,A2016/Z1/Z1/student7888,"#include <stdio.h>

int main() {
	  double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	  double ocTarik,ocMirza,ocBojan;
	  printf(""Unesite bodove za Tarika: "");
	  printf(""\n"");
	
	  printf(""I parcijalni ispit: "");
	  scanf(""%lf"", &P1T);
  	if(P1T<0 || P1T>20){
	     printf(""Neispravan broj bodova"");
	     return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"" ,&P2T);
   if(P2T<0 || P2T>20 ){
    	 printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRT);
   if(PRT<0 || PRT>10){
     	printf(""Neispravan broj bodova"");
     	return 0;
    }   
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZT);
   if(ZT<0 || ZT>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    } 
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIT);
   if(ZIT<0 || ZIT>40) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }  
    
    Tarik=P1T+P2T+PRT+ZT+ZIT;
    
   printf(""Unesite bodove za Bojana: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1B);
   if(P1B<0 || P1B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2B);
   if (P2B<0 || P2B>20) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRB);
   if (PRB<0 || PRB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZB);
   if (ZB<0 || ZB>10) {
     	printf(""Neispravan broj bodova"");
     	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIB);
   if (ZIB<0 || ZIB>40) {
  	    printf(""Neispravan broj bodova"");
  	    return 0;
    }  
    
    Bojan=P1B+P2B+PRB+ZB+ZIB;
    
   printf(""Unesite bodove za Mirzu: "");
   printf(""\n"");
   printf(""I parcijalni ispit: "");
   scanf(""%lf"", &P1M);
   if (P1M<0 || P1M>20) {
       printf(""Neispravan broj bodova"");
   	   return 0;
    }
    
   printf(""II parcijalni ispit: "");
   scanf(""%lf"", &P2M);
   if (P2M<0 || P2M>20) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Prisustvo: "");
   scanf(""%lf"", &PRM);
   if (PRM<0 || PRM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zadace: "");
   scanf(""%lf"", &ZM);
   if (ZM<0 || ZM>10) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
   printf(""Zavrsni ispit: "");
   scanf(""%lf"", &ZIM);
   if (ZIM<0 || ZIM>40) {
      	printf(""Neispravan broj bodova"");
      	return 0;
    }
    
    Mirza=P1M+P2M+PRM+ZM+ZIM;
    ocTarik=Tarik;
    ocBojan=Bojan;
    ocMirza=Mirza;
   if (ocTarik<55 && ocBojan<55 && ocMirza<55) {
     	printf(""Nijedan student nije polozio."");printf(""\n"");
     	return 0;
    }
    
   else if((ocTarik>=55 && ocBojan<55 && ocMirza<55) || (ocTarik<55 && ocBojan>=55 && ocMirza<55) || (ocTarik<55 && ocBojan<55 && ocMirza>=55)) {
     	printf(""Jedan student je polozio."");printf(""\n"");
     	return 0;
    } 
    
   else if((ocTarik>=55 && ocBojan>=55 && ocMirza<55) || (ocTarik>=55 && ocBojan<55 && ocMirza>=55) || (ocTarik<55 && ocBojan>=55 && ocMirza>=55)) {
     	printf(""Dva studenta su polozila."");printf(""\n"");
     	return 0;
    }
    
   else if(ocTarik>=55 && ocBojan>=55 && ocMirza>=55) {
     	printf(""Sva tri studenta su polozila."");printf(""\n"");
    }  
    
   if ((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55 && ocMirza<65)) {
    	 printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && (ocMirza>=65 && ocMirza<75)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }  
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && (ocMirza>=75 && ocMirza<85)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && (ocMirza>=85 && ocMirza<92)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza>=92 && ocMirza<=100)) {
     	printf(""Sva tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=55 && ocTarik<65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=65 && ocTarik<75) && (ocBojan>=65 && ocBojan<75) && ((ocMirza>=55) && (ocMirza<65) || (ocMirza>=75))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=75 && ocTarik<85) && (ocBojan>=75 && ocBojan<85) && ((ocMirza>=55) && (ocMirza<75) || (ocMirza>=85))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=85 && ocTarik<92) && (ocBojan>=85 && ocBojan<92) && ((ocMirza>=55) && (ocMirza<85) || (ocMirza>=92))) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    } 
    
   else if((ocTarik>=92 && ocTarik<=100) && (ocBojan>=92 && ocBojan<=100) && (ocMirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((ocTarik>=65) && (ocBojan>=55 && ocBojan<65) && (ocMirza>=55) && (ocMirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((ocTarik>=55) && (ocTarik<65) || (ocTarik>=75)) && (ocBojan>=65 && ocBojan<75) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik<92) && (Bojan>=92 && Bojan<=100) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=55) && (Tarik<65) && (Bojan>=65) && (Mirza>=55) && (Mirza<65)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");printf(""\n"");
    }
    
   else if((Tarik>=65) && (Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65) && (Mirza<75)) {
      printf(""Dva od tri studenta imaju istu ocjenu."");
      printf(""\n"");
     }
     
   else if((Tarik>=75) && (Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75) && (Mirza<85)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=85) && (Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85) && (Mirza<92)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else if((Tarik>=92) && (Tarik<=100) && (Bojan<92) && (Mirza>=92) && (Mirza<=100)) {
      printf(""Dva od tri studenta imaju istu ocjenu.\n"");
    }
    
   else {
      printf(""Svaki student ima razlicitu ocjenu.\n"");
    }
    return 0;
}
","#include <stdio.h>

int main() {
	double P1T,P2T,PRT,ZT,ZIT,P1B,P2B,PRB,ZB,ZIB,P1M,P2M,PRM,ZM,ZIM,Tarik,Bojan,Mirza;
	printf(""Unesite bodove za Tarika:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1T);
	if (P1T<0 || P1T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2T);
	if (P2T<0 || P2T>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRT);
	if(PRT<0 || PRT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZT);
	if(ZT<0 || ZT>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIT);
	if(ZIT<0 || ZIT>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Bojana:\n"");
		
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1B);
	if (P1B<0 || P1B>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2B);
	if (P2B<0 || P2B>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRB);
	if(PRB<0 || PRB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZB);
	if(ZB<0 || ZB>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIB);
	if(ZIB<0 || ZIB>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Unesite bodove za Mirzu:\n"");
	
	printf(""I parcijalni ispit:"");
	scanf(""%lf"", &P1M);
	if (P1M<0 || P1M>20) {
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" II parcijalni ispit:"");
	scanf(""%lf"", &P2M);
	if (P2M<0 || P2M>20)	{
		printf("" Neispravan broj bodova"");
		return 1;
		
	}
	printf("" Prisustvo:"");
	scanf(""%lf"", &PRM);
	if(PRM<0 || PRM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zadace:"");
	scanf(""%lf"", &ZM);
	if(ZM<0 || ZM>10)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	printf("" Zavrsni ispit:"");
	scanf(""%lf"", &ZIM);
	if(ZIM<0 || ZIM>40)	{
		printf("" Neispravan broj bodova"");
		return 1;
	}
	Tarik=P1T+P2T+PRT+ZT+ZIT;
	Bojan=P1B+P2B+PRB+ZB+ZIB;
	Mirza=P1M+P2M+PRM+ZM+ZIM;
	
	if(Tarik<55 && Bojan<55 && Mirza<55)	{
		printf("" Nijedan student nije polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan<55 && Mirza<55) || (Tarik<55 && Bojan>=55 && Mirza<55) || (Tarik<55 && Bojan<55 && Mirza>=55))	{
		printf("" Jedan student je polozio.\n"");
		return 1;
	}
	else if((Tarik>=55 && Bojan>=55 && Mirza<55) || (Tarik>=55 && Bojan<55 && Mirza>=55) || (Tarik<55 && Bojan>=55 && Mirza>=55))	{
		printf("" Dva studenta su polozila.\n"");
		return 1;
	}
	else if(Tarik>=55 && Bojan>=55 && Mirza>=55)	{
		printf("" Sva tri studenta su polozila.\n"");
	}
	
	if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Mirza<65))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Sva tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=55 && Bojan<65 ) && (Mirza>=65))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && (Bojan>=65 && Bojan<75) && ((Mirza>=55) && (Mirza<65) || (Mirza>=75)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && (Bojan>=75 && Bojan<85) && ((Mirza>=55) && (Mirza<75) || (Mirza>=85)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && (Bojan>=85 && Bojan<92) && ((Mirza>=55) && (Mirza<85) || (Mirza>=92)))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan>=92 && Bojan<=100) && (Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65) && (Bojan>=55 && Bojan<65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<65) || (Tarik>=75)) && (Bojan>=65 && Bojan<75) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<75) || (Tarik>=85)) && (Bojan>=75 && Bojan<85) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if(((Tarik>=55) && (Tarik<85) || (Tarik>=92)) && (Bojan>=85 && Bojan<92) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik<92)  && (Bojan>=92 && Bojan<=100) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=55 && Tarik<65) && (Bojan>=65) && (Mirza>=55 && Bojan<65)) {
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=65 && Tarik<75) && ((Bojan<65) || (Bojan>=75)) && (Mirza>=65 && Mirza<75))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=75 && Tarik<85) && ((Bojan<75) || (Bojan>=85)) && (Mirza>=75 && Mirza<85))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=85 && Tarik<92) && ((Bojan<85) || (Bojan>=92)) && (Mirza>=85 && Mirza<92))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else if((Tarik>=92 && Tarik<=100) && (Bojan<92) && (Mirza>=92 && Mirza<=100))	{
		printf(""Dva od tri studenta imaju istu ocjenu.\n"");
	}
	else {
		printf(""Svaki student ima razlicitu ocjenu.\n"");
	}
	
	return 0;
}

"
6448,99,99,1,32,A2016/Z1/Z4/student6054,A2016/Z1/Z4/student7341,"#include <stdio.h>

int main() {
	int red,n,kolona;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0||n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}
	if(n==1) {
		printf(""***"");
		
	}
	else {
	
	for(red=0; red<=n-1 ;red++){
		for(kolona=0; kolona<4*n ;kolona++){
		if(red==kolona||kolona==2*(n-1)-red||kolona==2*n-2+red||kolona==4*(n-1)-red){
			printf(""*"");}
		else { printf("" ""); }
		}
		printf(""\n"");
	}
		
		
	}
	
	return 0;
}
	","#include <stdio.h>

int main() {
	int n, i, j;
	printf(""Unesite broj n: "");
	scanf(""%d"", &n);
	while (n<=0 || n>50){
		printf(""Pogresan unos\n"");
		printf(""Unesite broj n: "");
		scanf(""%d"", &n);
	}   
	if(n==1){
		printf(""***"");
	}
	else {
	for(i=0; i<=n-1 ;i++){
		for(j=0;j<=4*n;j++){
			if (i==j || j==2*(n-1)-i || j==2*n-2+i || j==4*(n-1)-i){
				printf(""*"");
			}
			else {
				printf("" "");
			}

		}
	

	printf(""\n"");
	}
	}
	
	
	
return 0;
}
"
6451,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
6467,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6468,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
6471,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
6475,86,86,1,45,A2016/Z1/Z3/student4575,A2016/Z1/Z3/student4226,"#include <stdio.h>
#include <string.h>

int main() {
	float cr, bi, si, cv, pl, i, c, b, s, v, p;
	char x;
	cr=0;
	bi=0;
	si=0;
	cv=0;
	pl=0;
	printf(""Unesite vozila: "");
	i=0;
	do {
		scanf(""%c"", &x);
		if ((x!='0' && x!='1') && (x!=' ') && (x!=',') && (x=='c' || x=='C' || x=='b' || x=='B' || x=='s' || x=='S' || x=='v' || x=='V' || x=='p' || x=='p' || x=='P' || x=='k' || x=='K')){
		i++;}
		if (x!='k' && x!='K' && x!='c' && x!='C' && x!='b' && x!='B' && x!='s' && x!='S' && x!='v' && x!='V' && x!='p' && x!='P')
		printf(""Neispravan unos\n"");
        if((x=='c') || (x=='C'))
	    cr=cr+1;
	    if((x=='b') || (x=='B'))
	    bi=bi+1;
	    if((x=='s') || (x=='S'))
	    si=si+1;
	    if((x=='v') || (x=='V'))
	    cv=cv+1;
	    if((x=='p') || (x=='P'))
	    pl=pl+1;
	}
	while(x!='k' && x!='K');
	if (i-1!=0) {
	c=cr/(i-1)*100;
	b=bi/(i-1)*100;
	s=si/(i-1)*100;
	v=cv/(i-1)*100;
	p=pl/(i-1)*100;
	}
	else {
		c=0;
		b=0;
		s=0;
		v=0;
		p=0;
	}
    printf(""Ukupno evidentirano %1.f vozila.\n"", i-1);
	if (cr>=bi && cr>=si && cr>=cv && cr>=pl)
	printf(""Najpopularnija boja je crna (%3.2f%%)."", c);
	if(bi>cr && bi>=si && bi>=cv && bi>=pl)
	printf(""Najpopularnija boja je bijela (%3.2f%%)."", b);
	if(si>cr && si>bi && si>=cv && si>=pl)
	printf(""Najpopularnija boja je siva (%3.2f%%)."", s);
	if(cv>cr && cv>bi && cv>si && cv>=pl)
	printf(""Najpopularnija boja je crvena (%3.2f%%)."", v);
	if(pl>cr && pl>bi && pl>si && pl>cv)
	printf(""Najpopularnija boja je plava (%3.2f%%)."", p);
	return 0;
}
","#include <stdio.h>
#include <string.h>
int main() 
	{
		float CR,SI,BI,CV,PL,i,CP,SP,BP,CVP,PP,K,L;
		
		char a,j;
		CV=0;
		SI=0;
		BI=0;
		CV=0;
		PL=0;
		printf(""Unesite vozila: "");
		i=0;
	  
	  
	  do {
	  	scanf(""%c"",&a);
	  	if((a!='0' && a!='1') && (a!=' ') && (a!=',')&&(a=='C'||a=='c'||a=='S'||a=='s'||a=='B'||a=='b'||a=='V'||a=='v'||a=='P'||a=='p'||a=='K'||a=='k')) {i++; }
	  	if(a!='C'&&a!='c'&&a!='S'&&a!='s'&&a!='B'&&a!='b'&&a!='V'&&a!='v'&&a!='P'&&a!='p'&&a!='K'&&a!='k')
	  	printf(""Neispravan unos:\n"");{
	  		if((a=='C' || a=='c')) CR=CR+1;
	  		if((a=='S' || a=='s')) SI=SI+1;
	  		if((a=='B' || a=='b')) BI=BI+1;
	  		if((a=='V' || a=='v')) CV=CV+1;
	  		if((a=='P' || a=='p')) PL=PL+1;
	  		
	  	}
	  }
	  while(a!='k'&&a!='K');
	  if(i-1!=0) {
	  	CP=CR/(i-1)*100;
	  	SP=SI/(i-1)*100;
	  	BP=BI/(i-1)*100;
	  	CVP=CV/(i-1)*100;
	  	PP=PL/(i-1)*100;
	  }
	  if(CP==0&&SP==0&&BP==0&&CVP==0&&PL==0) {
	  	printf(""Ukupno evidentirano 0 vozila.\n"");
	  }
	  else {
	  	printf(""Ukupno evidentirano %1.f vozila.\n"",i-1);
	  }
	 if(CR>=SI&&CR>=BI&&CR>=CV&&CR>=PL)
	 printf(""Najpopularnija boja je crna (%4.2f%)."",CP);
	 if(SI>CR&&SI>=BI&&SI>=CV&&SI>=PL)
	 printf (""Najpopularnija boja je siva (%4.2f%)."",SP);
	 if(BI>CR&&BI>CR&&BI>=CV&&BI>=PL)
	 printf(""Najpopularnija boja je bijela (%4.2f%)."",BP);
	 if(CV>CR&&CV>SI&&CV>BI&&CV>=PL)
	 printf(""Najpopularnija boja je crvena (%4.2f%)."",CVP);
	 if(PL>CR&&PL>SI&&PL>BI&&PL>CV)
	 printf(""Najpopularnija boja je plava (%4.2f%)."",PP);
	 
	
	
	return 0;
	}
"
6481,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h>
int main() {
int i,j,k,z,y;	 
int mat[200][200];
int M,N;
int pret=1;

do{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N>200 || (N<=0 || M>200))
	printf(""Brojevi nisu u trazenom opsegu.\n"");
} while(M<1 || N>200 || (N<1 ||  M>200));
				
printf(""Unesite elemente matrice: "");
for(i=0; i<M; i++) {
	for(j=0; j<N; j++) {
		scanf(""%d"", &mat[i][j]);
	}
}
for(i=0; i<M;i++) {
	for(j=i+1; j<M; j++) {
		pret=1;
		for(k=0; k<N; k++) {
			if(mat[i][k]!=mat[j][k]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<M-1; z++) {
				for(y=0; y<N; y++) {
					mat[z][y]=mat[z+1][y];
				}
			}
			M--;
			j--;
		}
	}
}
for(i=0; i<N;i++) {
	for(j=i+1; j<N; j++) {
		pret=1;
		for(k=0; k<M; k++) {
			if(mat[k][i]!=mat[k][j]) 
			pret=0;
		}
		if(pret==1) {
			for(z=j; z<N-1; z++) {
				for(y=0; y<M; y++) {
					mat[y][z]=mat[y][z+1];
				}
			}
			N--;
			j--;
		}
	}
}
printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
for(i=0; i<M; i++) {
	for(j=0; j<N;j++) {
		printf(""%5d"", mat[i][j]);
		
	}
	printf(""\n"");
}

return 0;
}
","#include <stdio.h>


int main() {
	int m, n, i, j, mat[200][200], k, isti, l;
	
	do {
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"", &m, &n);
		if (m < 1 || n < 1 || m > 200 || n > 200) {
			printf(""Brojevi nisu u trazenom opsegu.\n"");
		}
	} while (m < 1 || n < 1 || m > 200 || n > 200);
	
	printf(""Unesite elemente matrice: "");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			scanf(""%d"", &mat[i][j]);
		}
	}
	
	for (i = 0; i < m-1; i++) {
		for (j = i+1; j < m; j++) {
			isti = 1;
			for (k = 0; k < n; k++) {
				if (mat[i][k] != mat[j][k]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < m-1; l++) {
					for (k = 0; k < n; k++) {
						mat[l][k] = mat[l+1][k];
					}
				}
				m--;
				j--;
			}
		}
	}
	for (i = 0; i < n-1; i++) {
		for (j = i+1; j < n; j++) {
			isti = 1;
			for (k = 0; k < m; k++) {
				if (mat[k][i] != mat[k][j]) {
					isti = 0;
					break;
				}
			}
			if (isti == 1) {
				for (l = j; l < n-1; l++) {
					for (k = 0; k < m; k++) {
						mat[k][l] = mat[k][l+1];
					}
				}
				n--;
				j--;
			}
		}
	}
	printf(""Nakon izbacivanja redova/kolona matrica glasi:\n"");
	
	for (i = 0; i < m; i++) {
		for (j = 0; j < n; j++) {
			printf(""%5d"", mat[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
6482,98,98,1,70,A2016/Z3/Z1/student2664,A2016/Z3/Z1/student6484,"#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}","#include <stdio.h>

int prost(int n)
{
	int i; 
	
	if ( n==0 ) return 0;
	
	for ( i = 2 ; i < n ; i++)
	{
		if (n%i==0)
			return 0;
	}
	return 1;
}



int daj_prost()
{
	static int broj=1;
	int i ;
	for( i = broj+1; i < 2147483646 ; i++)
	{
		if(prost(i))
		{
			broj=i;
			break;
		}
	}
	return broj;

}

int main() {
	int a,b,suma=0;
	int prosti=0;
	
	do {
		printf(""Unesite brojeve A i B: "");
		scanf(""%d %d"",&a,&b);
		
		if(a<=0) 
		{
			printf(""A nije prirodan broj.\n"");
		} else if (a>=b)
		{
			printf(""A nije manje od B.\n"");
		} else 
		{
			while(prosti<=a){
				prosti=daj_prost();
			}
			
			while(prosti<b)
			{
				
				suma+=prosti;
			prosti=daj_prost();
		
			}
		
			
				
			
			printf(""Suma prostih brojeva izmedju %d i %d je %d."",a,b,suma);
		break;
			
		}
		
	} while ( a>0 || a<b || a>b);
	return 0;
}"
6485,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h>
#include<string.h>
#define KAPACITET 200

struct Vrijeme{
	int sati, minute, sekunde;
};
struct Cas{
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak, kraj;
};
void unesi(char niz[]){ //unos stringa
char znak= getchar();
if(znak=='\n') znak=getchar();
int i=0;
while(i<9 && znak!='\n'){
	niz[i++]=znak;
	znak=getchar();
	
}
niz[i]='\0';
while(znak!='\n') //ocistimo spremnik ako se unese previse znakova
znak=getchar();
}

int ucitaj_datoteku(struct Cas raspored[]){ //ucitavanje binarne
FILE*dat=fopen(""raspored.dat"", ""rb"");
if(dat==NULL) return 0;
int ucitanih=fread(raspored, sizeof(struct Cas), KAPACITET, dat);
fclose(dat);
return ucitanih;
}
int zapisi_datoteku(struct Cas raspored[], int broj_casova){ //zapisivanje binarne
FILE*dat=fopen(""raspored.dat"", ""wb"");
int ucitano=fwrite(raspored, sizeof(struct Cas), broj_casova,dat);
fclose(dat);
if(ucitano>0) return 1;
return ucitano;
}

int MAX(struct Cas raspored[], int broj_casova){
	int i,j,max=0,indexmaxa=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
		}
		
	}
	if(raspored[indexmaxa].kraj.minute==0) max=max-1;
	return max;
}
int MIN(struct Cas raspored[], int broj_casova){
	int i,j,min=25;
	for(i=0; i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	return min;
}
void ispis_rasporeda(struct Cas raspored[], int broj_casova){
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=MIN(raspored,broj_casova);
	
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	for(i=min;i<=max;i++){
		if(i<10) printf(""%d:00   "",i);
		else printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++)
			if( raspored[k].pocetak.sati<=i &&
			raspored[k].dan_u_sedmici==j && raspored[k].kraj.sati>=i){
				printf(""%-10s"",raspored[k].predmet);
				break;
			}
			if(k==broj_casova)
			printf(""          "");
			}
			printf(""\n"");
		}
	}
	int preklapanje(struct Cas raspored[], int broj_casova, struct Cas cas){
		int i;
		int minpoc1,minpoc2,minkraj1,minkraj2;
		for(i=0;i<broj_casova;i++){ //pretvorimo u minute vrijeme
		minpoc1=raspored[i].pocetak.minute+raspored[i].pocetak.sati*60;
		minkraj1=raspored[i].kraj.minute+raspored[i].kraj.sati*60;
		minpoc2=cas.pocetak.minute+cas.pocetak.sati*60;
		minkraj2=cas.kraj.minute+cas.kraj.sati*60;
		//ako 2 casqa zavrsavaju u isto vrijeme i u isti dan, sigurno su se preklopila
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc2==minpoc1 || minkraj1==minkraj2)) return 1;
		//ako su isti dan i ako se desi da se poklapa
		if(raspored[i].dan_u_sedmici==cas.dan_u_sedmici && (minpoc1<minpoc2 && minkraj1>minpoc2 || minpoc2<minpoc1 && minkraj2>minkraj1 || minpoc1<minkraj2 && minkraj1>minkraj2)) return 1;
		
		}
		return 0;
	}
	void ispisi_dan(struct Cas raspored[], int broj_casova, int dan){
		int i;
		printf(""Uneseni su casovi: "");
		int k=1;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan){
				printf(""\n%d) %s ("",k++,raspored[i].predmet); //morali ispitivati zbog dodavaja 0 pri ispisu
				if(raspored[i].pocetak.sati<10) printf(""0"");
				printf(""%d:"",raspored[i].pocetak.sati);
				if(raspored[i].pocetak.minute<10) printf(""0"");
				printf(""%d-"",raspored[i].pocetak.minute);
				if(raspored[i].kraj.sati<10) printf('0');
				printf(""%d:"", raspored[i].kraj.sati);
				if(raspored[i].kraj.minute<10) printf(""0"");
				printf(""%d)"",raspored[i].kraj.minute);
			}
		}
		
	}
	void obrisi_cas(struct Cas raspored[],int broj_casova, int dan, int redni_broj){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				int j;
				for(j=i; j<broj_casova-1; j++){ //klasicno izbacivanje iz niza
				raspored[j]=raspored[j+1];
				}
				break;
		}
	}}
	struct Cas prekopiraj(int i, int k, int trajanje, char*predmet)
	{
		struct Cas cas;
		strcpy(cas.predmet,predmet);
		cas.dan_u_sedmici=i;
		cas.pocetak.sati=k;
		cas.kraj.sati=k+trajanje;
		cas.pocetak.minute=cas.kraj.minute=0;
		return cas;
	}
	int dodaj_cas(struct Cas raspored[], int broj_casova, const char*predmet, int trajanje){
		if(broj_casova==200 || trajanje>10) return 0;
		int i,k,pocetak,dan,moze=0;
		struct Cas cas;
		
		for(i=1;1<7;i++) //prodjemo kroz sedmicu
		for(k=9;k<=19-trajanje;k++){ //prodjemo kroz vrijeme
		cas=prekopiraj(i,k,trajanje,predmet);
		if(preklapanje(raspored,broj_casova,cas)==0){
			//trazimo prvo mjesto gdje se ne desi preklapanje
			raspored[broj_casova]=cas;
			return 1;
			
		}
	}
	return 0;
		
	}
	void promijeni_cas(struct Cas raspored[],int broj_casova,int dan, int redni_broj, struct Cas promjena){
		int i; int k=0;
		for(i=0;i<broj_casova;i++){
			if(raspored[i].dan_u_sedmici==dan) k++;
			if(k==redni_broj){
				raspored[i]=promjena; //samo dodijelimo novi cas
				return;
			}
		}
	}
int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs; char ime[100]; int zap;
	do{
		printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
		scanf(""%d"",&broj);
		switch(broj){
		case 1:
			ispis_rasporeda(raspored, ucit);
			break;
			
		case 2:
			printf(""Unesite naziv predmeta: "");
			unesi(ime);
			printf(""Unesite broj casova: "");
			scanf(""%d"",&br);
			int nema=dodaj_cas(raspored,ucit,ime,br);
			if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
			else ucit++;
			break;
		case 3:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite promijeniti: "");
		    scanf(""%d"",&cs);
		    printf(""Naziv predmeta: "");
		    unesi(ime);
		    printf(""Vrijeme pocetka: "");
		    int sat, min;
		    char z;
		    scanf(""%d%c%d"", &sat,&z,&min);
		    printf(""Vrijeme zavrsetka: "");
		    int sat1,min1;
		    char z1;
		    scanf(""%d%c%d"", &sat1, &z1, &min1);
		    struct Cas casko={ime,dan,{sat,min,0},{sat1,min1,0}};
		    strcpy(casko.predmet,ime);
		    casko.dan_u_sedmici=dan;
		    casko.pocetak.sati=sat;
		    casko.pocetak.minute=min;
		    casko.kraj.sati=sat1;
		    casko.kraj.minute=min1;
		    promijeni_cas(raspored,ucit,dan,cs,casko);
		    break;
		    case 4:
		    printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		    scanf(""%d"", &dan);
		    ispisi_dan(raspored,ucit,dan);
		    printf(""\nIzaberite koji cas zelite obrisati: "");
		    scanf(""%d"", &cs);
		    obrisi_cas(raspored,ucit,dan,cs);
		    printf(""Cas obrisan\n"");
		    ucit--;
		    break;
		    case 0:
		    zap=zapisi_datoteku(raspored,ucit);
		    return 0;
		    }
	}while(broj!=0);
	return 0;
}
","#include <stdio.h>
#include <string.h>
#define KAPACITET 200
struct Vrijeme {
	int sati,minute,sekunde;
};
struct Cas {
	char predmet[10];
	int dan_u_sedmici;
	struct Vrijeme pocetak,kraj;
};

void unesi(char niz[]){
	char znak=getchar();
	if(znak=='\n')znak=getchar();
	int i=0;
	while(i<9 && znak!='\n'){
		niz[i++]=znak;
		znak=getchar();
	}
	niz[i]='\0';
	while(znak!='\n')
	znak=getchar();
}
int ucitaj_datoteku (struct Cas raspored[]){
	FILE *ulaz=fopen(""raspored.dat"",""rb+"");
	int greska=0;
	FILE *ulaz1=fopen(""raspored.dat"",""rb+"");
	if(ulaz==NULL || ulaz1==NULL){
		greska = 1;
		return 0;
	}
	int ucitano,ucitano1;
	int vel=sizeof(struct Cas);
	ucitano=fread(raspored,vel,KAPACITET,ulaz);
	ucitano1=fread(raspored,vel,KAPACITET,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(greska==0)
	return ucitano1;
	else return 0;
}
int zapisi_datoteku(struct Cas raspored[],int broj_casova){
	FILE *ulaz=fopen(""raspored.dat"",""wb+"");
	FILE *ulaz1=fopen(""raspored.dat"",""wb+"");
	if(ulaz==NULL||ulaz1==NULL){
		return 0;
	}
	int vel=sizeof(struct Cas);
	int nova=fwrite(raspored,vel,broj_casova,ulaz);
	int zapisano=fwrite(raspored,vel,broj_casova,ulaz1);
	fclose(ulaz);
	fclose(ulaz1);
	if(nova==zapisano) return 1;
	else
	return 0;
}
int MAX(struct Cas raspored[],int broj_casova){
	int i,j,max=0,indexmaxa=0,min;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].kraj.sati>max){
			max=raspored[i].kraj.sati;
			indexmaxa=i;
			min=raspored[indexmaxa].kraj.minute;
		}
	}
	if(min==0) max=max-1;
	return max;
}
void ispis_rasporeda(struct Cas raspored[],int broj_casova){
	printf(""\n       PON       UTO       SRI       CET       PET       SUB\n"");
	int i,j,k;
	int max=MAX(raspored,broj_casova);
	int min=25;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].pocetak.sati<min)
		min=raspored[i].pocetak.sati;
	}
	for(i=min;i<=max;i++){
		if(i<10)printf(""9:00   "");
		else    printf(""%d:00  "",i);
		for(j=1;j<7;j++){
			for(k=0;k<broj_casova;k++){
				int sa=raspored[k].kraj.sati;
				int dan=raspored[k].dan_u_sedmici;
				int poc=raspored[k].pocetak.sati;
				if(poc<=i && dan==j &&sa>=i){
					printf(""%-10s"",raspored[k].predmet);
					break;
				}
			}
			if(k==broj_casova) printf(""          "");
		}
		printf(""\n"");
	}
}
int PorediVrj(struct Vrijeme t1,struct Vrijeme t2,int i) {
	int sat=t1.sati*3600,sat1=t2.sati*3600,min=t1.minute*60,min1=t2.minute*60;
	int d1=sat+min+t1.sekunde;
	int d2=sat1+min1+t2.sekunde;
	int ukpnosek=d1+d2;
	if(d1>d2) return 1;
	else if(d1<d2) return -1;
	else return 0;
}
int preklapanje(struct Cas raspored[],int broj_casova,struct Cas cas){
	int prekl=0;
	int i;
	int broj=broj_casova;
	int dan=cas.dan_u_sedmici;
	for(i=0; i < broj ;i++){
		int drugi=PorediVrj(cas.kraj,raspored[i].pocetak,i);
		int vr=PorediVrj(raspored[i].kraj,cas.pocetak,i);
		if(i<0) return prekl;
		if(dan==raspored[i].dan_u_sedmici && vr==1 && drugi==1){
			prekl=1;
			break;
		}
	}
	if(i>-1)return prekl;
}
void ispisi_dan(struct Cas raspored[],int broj_casova,int dan){
	int brojac=1,i;
	printf(""Uneseni su casovi: "");
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			printf(""\n%d) %s (%02d:%02d-%02d:%02d)"",brojac,raspored[i].predmet,raspored[i].pocetak.sati,raspored[i].pocetak.minute,raspored[i].kraj.sati,raspored[i].kraj.minute);
			brojac++;
		}
	}
}
void obrisi_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj){
	int i; int k=0; int j; int brojac=1;
	int obrisanih=0;
	for(i=0;i<broj_casova;i++){
		if(raspored[i].dan_u_sedmici==dan){
			k++;
			if(k==redni_broj){
				for(j=i;j<broj_casova-1;j++){
					raspored[j]=raspored[j+1];
					obrisanih++;
				}
				if(brojac>0 && obrisanih>0) break;
			}
			brojac++;
		}
	}
}
int dodaj_cas(struct Cas raspored[],int broj_casova,const char *predmet,int trajanje){
	int i,j,preklop,brojac=1;
	int ukupno=broj_casova;
	if(ukupno==200) return 0;
	for(i=0;i<6;i++)
		for(j=9;j<=19-trajanje;j++){
			struct Cas cas={"""",i+1,{j,0,0},{j+trajanje,0,0}};
			strcpy(cas.predmet,predmet);
			struct Cas pom={"""",i,{j,0,0},{j,0,0}};
			preklop=preklapanje(raspored,broj_casova,cas);
			int pom1=preklapanje(raspored,broj_casova,cas);
			if(preklop==0){
				raspored[broj_casova]=cas;
				return 1;
			}
			brojac++;
		}
		if (brojac>0) return 0; 
			
		}
		struct Cas pr(int dan,int sat,int min,int sat1,int min1, char*ime){
			struct Cas casko={"""",dan,{sat,min,0},{sat1,min1,0}};
			strcpy(casko.predmet,ime);
			return casko;
		}
		void promijeni_cas(struct Cas raspored[],int broj_casova,int dan,int redni_broj,struct Cas promjena){
			int i; int k=0;
			for(i=0;i<broj_casova;i++){
				if(raspored[i].dan_u_sedmici==dan) k++;
				if(k==redni_broj)
				raspored[i]=promjena;
			}
		}

int main() {
	struct Cas raspored[KAPACITET];
	int ucit=ucitaj_datoteku(raspored);
	int broj,br,dan,cs,zap;
	char ime[100];
	do{
	printf(""1) Ispis rasporeda\n2) Dodavanje casa\n3) Promjena casa\n4) Brisanje casa\n0) Kraj rada\nIzaberite opciju: "");
	scanf(""%d"",&broj);
	switch (broj){
	case 4:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite obrisati: "");
		scanf(""%d"",&cs);
		ucit--;
		obrisi_cas(raspored,ucit,dan,cs);
		printf(""Cas obrisan\n"");
		break;
	case 1:
		ispis_rasporeda(raspored,ucit);
		break;
	case 2:
		printf(""Unesite naziv predmeta: "");
		unesi(ime);
		printf(""Unesite broj casova: "");
		int nema;
		scanf(""%d"",&br);
		nema=dodaj_cas(raspored,ucit,ime,br);
		if(nema==0) printf(""Nema dovoljno mjesta u rasporedu za %d casova.\n"",br);
		if(nema==1) ucit++;
		break;
	case 3:
		printf(""Unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "");
		scanf(""%d"",&dan);
		ispisi_dan(raspored,ucit,dan);
		printf(""\nIzaberite koji cas zelite promijeniti: "");
		scanf(""%d"",&cs);
		printf(""Naziv predmeta: "");
		unesi (ime);
		printf(""Vrijeme pocetka: Vrijeme zavrsetka: "");
		int sat,min,sat1,min1;
		char z,z1;
		scanf(""%d"",&sat);
		scanf(""%c"",&z);
		scanf(""%d"",&min);
		scanf(""%d"",&sat1);
		scanf(""%c"",&z1);
		scanf(""%d"",&min1);
		struct Cas casko=pr(dan,sat,min,sat1,min1,ime);
		promijeni_cas(raspored,ucit,dan,cs,casko);
		break;
		
		break;
		
		case 0: 
		zap=zapisi_datoteku(raspored,ucit);
		return 0;
	}
		

}
while(broj!=0);
return 0;

}
"
6496,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h>
#include <string.h>

int isLetter(char c) {
	if((c >= 65 && c <= 90) || (c >= 97 && c <= 122)) return 1;
	return 0;
}

int checkFile(FILE *f) {
	if(f == NULL) {
		printf(""Datoteka ne postoji.\n"");
		return 0;
	}
	return 1;
}

void oslobodiResurse(FILE *ulaz, FILE *izlaz) {
	fclose(ulaz);
	fclose(izlaz);
}

char loadWord(char *rijec, FILE *file) {
	char c;
	while(1){
		c = getc(file);
		if(!isLetter(c))
			break;
		*rijec = c;
		rijec++;
	}
	*rijec = '\0';
	return c;
}

int kompresuj(char *ulazna, char *izlazna){
	char rijec[100];
	char rijeci[1000][10];
	int duzine[1000], duzina, brojRijeci = 0, opt, i, j;
	FILE* ulaz = fopen(ulazna, ""r"");
	FILE* izlaz = fopen(izlazna, ""w"");
	char tmp[10], c;
	int najvecaRijec = 0;
	int maxBrRijeci = 10;
	int tmpDuzina = 0;
	
	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10) {
			opt = -1;
			for(i = 0; i < brojRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1){
				duzine[opt]++;
			} 
			else {
				strcpy(rijeci[brojRijeci], rijec);
				duzine[brojRijeci] = 1;
				brojRijeci++;
			}
		}	
		if(c == EOF) break;
	}
	if(brojRijeci < maxBrRijeci) maxBrRijeci = brojRijeci;
	for(i = 0; i < maxBrRijeci; i++) {
		najvecaRijec = i;
		for(j = i+1; j < brojRijeci; j++) {
			if(duzine[najvecaRijec] < duzine[j]) najvecaRijec = j;
			else if(duzine[najvecaRijec] == duzine[j] && strcmp(rijeci[j], rijeci[najvecaRijec]) < 0) najvecaRijec = j;
		}
		if(najvecaRijec != i) {
			strcpy(tmp, rijeci[najvecaRijec]);
			strcpy(rijeci[najvecaRijec], rijeci[i]);
			strcpy(rijeci[i], tmp);
			tmpDuzina = duzine[najvecaRijec];
			duzine[najvecaRijec] = duzine[i];
			duzine[i] = tmpDuzina;
		}
	}
	for(i = 0; i < maxBrRijeci; i++)
		fprintf(izlaz,""%s\n"", rijeci[i]);
	
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulazna, ""r"");
	
	while(1){
		c = loadWord(rijec,ulaz);
		if(strlen(rijec) > 1 && strlen(rijec) < 10){
			opt = -1;
			for(i = 0; i < maxBrRijeci; i++){
				if(strcmp(rijeci[i], rijec) == 0){
					opt = i;
					break;
				}
			}
			if(opt != -1) fprintf(izlaz, ""%c"", (char)(20 + i));
			else fprintf(izlaz,""%s"", rijec);
		}
		else fprintf(izlaz, ""%s"", rijec);
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulazna, char *izlazna) {	
	FILE *ulaz = fopen(ulazna, ""r"");
	FILE *izlaz = fopen(izlazna, ""w"");

	if(checkFile(ulaz) == 0) return 0;
	if(checkFile(izlaz) == 0) return 0;
		
	char c, rijeci[10][10], rijec[20];
	int i, j, brojRijeci = 0, duzina;
		
	while(1){
		c = loadWord(rijec, ulaz);
		if(rijec[0] == '\0') break;
		strcpy(rijeci[brojRijeci++], rijec);
	}
	
	while(1){
		c = loadWord(rijec, ulaz);
		if(strlen(rijec) == 0 && c >= 20 && c <= 29)
			fprintf(izlaz, ""%s"", rijeci[c - 20]);
	 	else {
			fprintf(izlaz, ""%s"", rijec);
			fprintf(izlaz, ""%c"", c);
		}
		if(c == EOF) break;
	}
	oslobodiResurse(ulaz, izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int opcija, status;
	char c, ulazna[50], izlazna[50];

	do {
		printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
		scanf(""%d"", &opcija);
		c = getchar();

		if(opcija == 0) break;
		
		if(opcija == 1) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = kompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa kompresijom.\n"");
		}
		else if(opcija == 2) {
			printf(""Unesite ime ulazne datoteke: ""); scanf(""%50s"", ulazna);
			printf(""Unesite ime izlazne datoteke: ""); scanf(""%50s"", izlazna);
			status = dekompresuj(ulazna, izlazna);
			if(status == 0) 
				printf(""Nesto nije u radu sa dekompresijom.\n"");
		}
	} while(1);

	return 0;
}","#include <stdio.h>
#include <string.h>
char ucitajJednuRijec(char *buffer, FILE* datoteka){
	int i = 0;
	char c;
	while(1){
		c = getc(datoteka);
		if(!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
			break;
		if(i < 500);
			buffer[i++] = c;
	}
	buffer[i] = '\0';
	return c;
}


int kompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	char buffer[100];
	FILE* ulaz = fopen(ulaznaDatoteka, ""r"");
	FILE* izlaz = fopen(izlaznaDatoteka,""w"");
	char tmp[15];
	int najveca = 0,maxrijeci = 10, tmpduzina;
	if(ulaz == NULL) return 0;
	char rijeci[1000][15];
	int duzine[1000], duzina, brojrijeci = 0, pomocna, i, j;
	char c;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < brojrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				duzine[pomocna]++;
			} else {
				strcpy(rijeci[brojrijeci],buffer);
				duzine[brojrijeci] = 1;
				brojrijeci++;
			}
		}
		if(c == EOF) break;
	}
	if(brojrijeci < maxrijeci) maxrijeci = brojrijeci;
	for(i = 0; i < maxrijeci; i++){
		najveca = i;
		for(j = i+1; j < brojrijeci; j++){
			if(duzine[najveca] < duzine[j]){
				najveca = j;
			} else if( duzine[najveca] == duzine[j] && strcmp(rijeci[j],rijeci[najveca]) < 0){
				najveca = j;
			}
		}
		if(najveca != i){
			strcpy(tmp,rijeci[najveca]);
			strcpy(rijeci[najveca],rijeci[i]);
			strcpy(rijeci[i],tmp);
		
			tmpduzina = duzine[najveca];
			duzine[najveca] = duzine[i];
			duzine[i] = tmpduzina;
		}
	}
	for(i = 0; i < maxrijeci; i++){
		fprintf(izlaz,""%s\n"",rijeci[i]);
	}
	fprintf(izlaz,""\n"");
	fclose(ulaz);
	ulaz = fopen(ulaznaDatoteka, ""r"");
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina > 1 && duzina < 10){
			pomocna = -1;
			for(i = 0; i < maxrijeci; i++){
				if(strcmp(rijeci[i],buffer) == 0){
					pomocna = i;
					break;
				}
			}
			if(pomocna != -1){
				fprintf(izlaz,""%c"", (char)(20 +i));
			}
			else {
				fprintf(izlaz,""%s"", buffer);
			}
		} else {
			fprintf(izlaz,""%s"",buffer);
		}
		fprintf(izlaz, ""%c"", c);
		if(c == EOF) break;
		
	}
	fclose(izlaz);
	printf(""Datoteka kompresovana.\n"");
	return 1;
}

int dekompresuj(char *ulaznaDatoteka,char *izlaznaDatoteka){
	//return 1;
	FILE *ulaz, *izlaz;
	ulaz = fopen(ulaznaDatoteka, ""r"");
	if(ulaz == NULL) return 0;
	izlaz = fopen(izlaznaDatoteka,""w"");
	if(izlaz == NULL){
		fclose(ulaz);
		return 0;
	}
	char c, rijeci[15][10], buffer[50];
	int i, j, brojrijeci = 0,duzina;
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		if(buffer[0] == '\0'){
			break;
		}
		strcpy(rijeci[brojrijeci++],buffer);
	}
	while(1){
		c = ucitajJednuRijec(buffer,ulaz);
		duzina = strlen(buffer);
		if(duzina == 0 && c>= 20 && c <=29){
			fprintf(izlaz,""%s"",rijeci[c - 20]);
		} else {
			fprintf(izlaz,""%s"",buffer);
			
		fprintf(izlaz,""%c"",c);
			
		}
		if(c == EOF) break;
	}
	fclose(ulaz);
	fclose(izlaz);
	printf(""Datoteka dekompresovana.\n"");
	return 1;
}

int main() {
	int pom, rezultat;
	char c;
	char ulaznaDatoteka[50],izlaznaDatoteka[50];
	do{
	printf(""Odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "");
	scanf(""%d"", &pom);
	c = getchar();
	if(pom == 0)
		return 0;
	printf(""Unesite ime ulazne datoteke: "");
	scanf(""%50s"",ulaznaDatoteka);
	printf(""Unesite ime izlazne datoteke: "");
	scanf(""%50s"",izlaznaDatoteka);
	if(pom == 1){
		rezultat = kompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	if(pom == 2){
		rezultat = dekompresuj(ulaznaDatoteka,izlaznaDatoteka);
	}
	}while(pom != 0);		
	return 0;
}
"
6497,86,86,1,109,A2016/Z4/Z1/student3756,A2016/Z4/Z1/student2676,"#include <stdio.h>

void izbacivanje(char* str1ng, int vel) {
	while(*(str1ng+vel)) {
		*str1ng=*(str1ng+vel);
		str1ng++;
	}
	*str1ng=*(str1ng+vel);
}
 
char* izbaci_najcescu(char* string) {
 
	char *max = string, *p = string, *pocetak, *kraj, *temp, *sljedeciPocetak, *sljedeciKraj, *temp1, *p2, *p3;
	int vel1, BrojRijeci=0, vel2, jednaka, vel3, maxBrojRijeci=0, maxVelicina=0, znak;
	char znak1,znak2;
 
 
	if (*p == '\0') return string;
	while(*p != '\0') {
		while((*p < 'A' || (*p > 'Z' && *p < 'a') || *p > 'z') && *(p+1) != '\0') p++;
			if(*p != '\0') {
				pocetak = p;
				kraj = p;
				vel1 = 1;
				while(((*(kraj+1) >= 'A' && *(kraj+1) <= 'Z') || (*(kraj+1) >= 'a' && *(kraj+1) <= 'z')) && *(kraj+1) != '\0') {
					vel1++;
					kraj++;
				}
				BrojRijeci=1;
				temp=kraj+1;
 
				while (*temp != '\0') {
					//Odredivanje prvog i posljednjeg slova sljedece rijeci
					sljedeciPocetak=temp;
 
					while ((*sljedeciPocetak < 'A' || (*sljedeciPocetak > 'Z' && *sljedeciPocetak < 'a') || *sljedeciPocetak > 'z') && *(sljedeciPocetak+1) != '\0') sljedeciPocetak++;
					sljedeciKraj = sljedeciPocetak;
					vel2=1;
 
					while(((*(sljedeciKraj+1) >= 'A' && *(sljedeciKraj+1) <= 'Z') || (*(sljedeciKraj+1) >= 'a' && *(sljedeciKraj+1) <= 'z')) && *(sljedeciKraj+1) != '\0') {
						vel2++;
						sljedeciKraj++;					
					}					
					jednaka=1; vel3=0;
 
					temp1=pocetak;
 
					if (vel1 != vel2 ) jednaka=0;
					else 
					while (vel3 < vel2) {
 
						if(*temp1 >= 'A' && *temp1 <= 'Z') znak1=(*temp1) + ('a' - 'A');
						else znak1=*temp1;
 
						if(*sljedeciPocetak >= 'A' && *sljedeciPocetak <= 'Z') znak2=(*sljedeciPocetak) + ('a' - 'A');
						else znak2=*sljedeciPocetak;
 
						if(znak1 != znak2) jednaka=0;
 
						temp1++; sljedeciPocetak++; vel3++;
 
					}
 
					if(jednaka) BrojRijeci++;
					temp=sljedeciKraj+1;
 
				}
 
				if(BrojRijeci>maxBrojRijeci ) {
				maxBrojRijeci=BrojRijeci;
				max=kraj;
				maxVelicina=vel1;
				}
			}
			p=kraj+1;
	}
	//izbacivanje najcesce rijeci
	p=temp-1;
	while (p>=string) {
		znak=0;
		if((*(p+1) < 'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') znak=1;
 
		if(*p>='A' && *p<='Z') znak1=(*p)+('a'-'A'); 
		else znak1=*p;
 
		if(*max >= 'A' && *max <='Z') znak2=(*max)+('a'-'A'); else znak2=*max;
 
 
 
		if(znak1==znak2 && znak){
			p3=p;
			p2=max;
			vel2=0;
			jednaka=1;
 
			while(p3>=string && (( *p3>='A' && *p3  <= 'Z') || (*p3>= 'a' && *p3 <= 'z'))) {
				if(p2>=string) {
					if(*p2>='A' && *p2<= 'Z') znak1=(*p2)+('a'-'A'); 
					else znak1=*p2;
					if(*p2>='A' && *p2<= 'Z') znak2=(*p2)+('a'-'A'); 
					else znak2=*p2;
					if(znak1!=znak2) jednaka=0;
 
				}
				vel2++;
				p3--;
				p2--;
			}
			p3++;
			if(maxVelicina!=vel2) jednaka=0;
			if(jednaka==1) {
				izbacivanje(p3,vel2);
			}
		}
		p--;
	}
	return string;
}
 
int main() {
	char str1ng[400]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(str1ng));
	return 0;
 
}","#include <stdio.h>

void izbaci(char* s, int duz)
{
    while(*(s+duz))
    {
        *s=*(s+duz);
        s++;
    }
    *s=*(s+duz);
}

char* izbaci_najcescu(char* s)
{
	char *maxkraj=s, *poc, *kraj, *p=s, *t, *spoc, *skraj, *tpoc, *q1, *q2;
	char ch1, ch2;
	int brmax=0, maxduz=0, br=0, ista, bslova, duz1, duz2, bilanerijec;
	if(*p=='\0') return s;
	while(*p!='\0')
	{
	    while((*p<'A' || (*p>'Z' && *p<'a') || *p>'z') && *(p+1)!='\0') p++;
		if(*p!='\0')
		{
			// Odredjujemo pocetak i kraj rijeci do koje smo dosli
			poc=p;
			kraj=p;
			duz1=1;
			while(((*(kraj+1)>='A' && *(kraj+1)<='Z') || (*(kraj+1)>='a' && *(kraj+1)<='z')) && *(kraj+1)!='\0')
			{
				duz1++;
				kraj++;
			}
			br=1;
			t=kraj+1;
			while(*t!='\0')
			{
				// Odredjujemo pocetak i kraj slijedece rijeci
				spoc=t;
				while((*spoc<'A' || (*spoc>'Z' && *spoc<'a') || *spoc>'z') && *(spoc+1)!='\0') spoc++;
				skraj=spoc;
				duz2=1;
				while(((*(skraj+1)>='A' && *(skraj+1)<='Z') || (*(skraj+1)>='a' && *(skraj+1)<='z')) && *(skraj+1)!='\0') 
				{
					duz2++;
					skraj++;
				}
				
				// Provjera dali je to ista rijec kao pocetna
				
				ista=1;
				bslova=0;
				
				// Posto ne mozemo koristiti pointer poc jer bi tada izgubili pointer na prvo slovo rijeci,
				// pravimo novi pointer
				tpoc=poc;
				
				if(duz1!=duz2) ista=0;
				else
				while(bslova<duz2)
				{
					// Posto se ne pravi razlika izmedju velikih i malih slova moramo svaki put ovo uraditi
					
					if(*tpoc>='A' && *tpoc<='Z') ch1=(*tpoc)+('a'-'A'); else ch1=*tpoc;
					if(*spoc>='A' && *spoc<='Z') ch2=(*spoc)+('a'-'A'); else ch2=*spoc;
					if(ch1!=ch2) ista=0;
					tpoc++;
					spoc++;
					bslova++;
				}
				
				if(ista) br++;
				t=skraj+1;
			}
			if (br>brmax)
			{
				brmax=br;
				maxkraj=kraj;
				maxduz=duz1;
			}
		}
		p=kraj+1;;
	}
	
	// Izbacivanje najcesce rijeci
	
	p=t-1;
	
	while(p>=s)
	{
		bilanerijec=0;
		if((*(p+1)<'A' || (*(p+1)>'Z' && *(p+1)<'a') || *(p+1)>'z') || *(p+1)=='\0') bilanerijec=1;
		if(*p>='A' && *p<='Z') ch1=(*p)+('a'-'A'); else ch1=*p;
		if(*maxkraj>='A' && *maxkraj<='Z') ch2=(*maxkraj)+('a'-'A'); else ch2=*maxkraj;
		if(ch1==ch2 && bilanerijec)
		{
			q2=p;
			q1=maxkraj;
			duz2=0;
			ista=1;
			while(q2>=s && ((*q2>='A' && *q2<='Z') || (*q2>='a' && *q2<='z')))
			{
				if(q1>=s)
				{
					if(*q1>='A' && *q1<='Z') ch1=(*q1)+('a'-'A'); else ch1=*q1;
					if(*q1>='A' && *q1<='Z') ch2=(*q1)+('a'-'A'); else ch2=*q1;
					if(ch1!=ch2) ista=0;
				}
				duz2++;
				q2--;
				q1--;
			}
			q2++;
			if(maxduz!=duz2) ista=0;
			if(ista)
			{
				izbaci(q2, duz2);
			}
		}
		p--;
	}
	return s;
}

int main() {
	char s[300]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
	printf(""%s"", izbaci_najcescu(s));
	return 0;
}
"
6499,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h>
int main() {
	double Tb, Bb, Mb, p1, p2, P, dz, zi, Bp1, Bp2, BP, Bdz, Bzi, Mp1, Mp2, MP, Mdz, Mzi;
	int oT, oB, oM;
	printf (""Unesite bodove za Tarika: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &p1);
	if (p1>20 || p1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &p2);
	if (p2>20 || p2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &P);
	if (P>10 || P<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &dz);
	if (dz>10 || dz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &zi);
	if (zi>40 || zi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Tb=p1+p2+P+dz+zi;
	
	printf (""Unesite bodove za Bojana: \n"");
	printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Bp1);
	if (Bp1>20 || Bp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Bp2);
	if (Bp2>20 || Bp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &BP);
	if (BP>10 || BP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Bdz);
	if (Bdz>10 || Bdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Bzi);
	if (Bzi>40 || Bzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Bb=Bp1+Bp2+BP+Bdz+Bzi;
	
	printf (""Unesite bodove za Mirzu: \n"");
		printf (""I parcijalni ispit: "");
	scanf (""%lf"", &Mp1);
	if (Mp1>20 || Mp1<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""II parcijalni ispit: "");
	scanf (""%lf"", &Mp2);
	if (Mp2>20 || Mp2<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Prisustvo: "");
	scanf (""%lf"", &MP);
	if (MP>10 || MP<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zadace: "");
	scanf (""%lf"", &Mdz);
	if (Mdz>10 || Mdz<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	printf (""Zavrsni ispit: "");
	scanf (""%lf"", &Mzi);
	if (Mzi>40 || Mzi<0){
		printf (""Neispravan broj bodova"");
		return 0;}
	Mb=Mp1+Mp1+MP+Mdz+Mzi;
	
	if (Tb>=55 && Tb<65)
	oT=6;
	else if (Tb>=65 && Tb<75)
	oT=7;
	else if (Tb>=75 && Tb<85)
	oT=8;
	else if (Tb>=85 && Tb<92)
	oT=9;
	else if (Tb>=92 && Tb<=100)
	oT=10;
	else oT=0;
	if (Bb>=55 && Bb<65)
	oB=6;
	else if (Bb>=65 && Bb<75)
	oB=7;
	else if (Bb>=75 && Bb<85)
	oB=8;
	else if (Bb>=85 && Bb<92)
	oB=9;
	else if (Bb>=92 && Bb<=100)
	oB=10;
	else oB=0;
	if (Mb>=55 && Mb<65)
	oM=6;
	else if (Mb>=65 && Mb<75)
	oM=7;
	else if (Mb>=75 && Mb<85)
	oM=8;
	else if (Mb>=85 && Mb<92)
	oM=9;
	else if (Mb>=92 && Mb<=100)
	oM=10;
	else oM=0;
	if (oT<6 && oB<6 && oM<6)
    printf (""Nijedan student nije polozio."");
    if (Tb>=55 && Bb>=55 && Mb>=55){
    printf (""Sva tri studenta su polozila."");
    if (oT==oB && oB==oM )
    printf (""\nSva tri studenta imaju istu ocjenu."");
    else if (oT==oB || oB==oM || oM==oT)
    printf (""\nDva od tri studenta imaju istu ocjenu."");
    else
    printf (""\nSvaki student ima razlicitu ocjenu."");}
    if ((Tb>=55 && Bb>=55 && Mb<55) || (Tb<55 && Bb>=55 && Mb>=55) || (Tb>=55 && Bb<55 && Mb>=55))
    printf (""Dva studenta su polozila."");
    if ((Tb>=55 && Bb<55 && Mb<55) || (Tb<55 && Bb>=55 && Mb<55) || (Tb<55 && Bb<55 && Mb>=55))
    printf (""Jedan student je polozio."");
   
    return 0;
	
}","#include <stdio.h>
int main() {
	double BT,BB,BM,IP,IIP,P,Z,ZI,IPB,IIPB,PB,ZB,ZIB,IPM,IIPM,PM,ZM,ZIM;
	int OT,OB,OM;
	printf(""Unesite bodove za Tarika:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IP);
		if(IP>20||IP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIP);
		if(IIP>20||IIP<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&P);
		if(P>10||P<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&Z);
		if(Z>10||Z<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZI);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BT=IP+IIP+P+Z+ZI;
	
	printf(""Unesite bodove za Bojana:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPB);
		if(IPB>20||IPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPB);
		if(IIPB>20||IIPB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PB);
		if(PB>10||PB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZB);
		if(ZB>10||ZB<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIB);
		if(ZIB>40||ZIB<0){
			printf(""Neispravan broj bodova"");return 0;}

	BB=IPB+IIPB+PB+ZB+ZIB;



	printf(""Unesite bodove za Mirzu:\n"");
	printf(""I parcijalni ispit: "");
	scanf(""%lf"",&IPM);
		if(IPM>20||IPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""II parcijalni ispit: "");
	scanf(""%lf"",&IIPM);
		if(IIPM>20||IIPM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Prisustvo: "");
	scanf(""%lf"",&PM);
		if(PM>10||PM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zadace: "");
	scanf(""%lf"",&ZM);
		if(ZM>10||ZM<0){
			printf(""Neispravan broj bodova"");return 0;}
	printf(""Zavrsni ispit: "");
	scanf(""%lf"",&ZIM);
		if(ZI>40||ZI<0){
			printf(""Neispravan broj bodova"");return 0;}
	BM=IPM+IIPM+PM+ZM+ZIM;
	if(BT>=55&&BT<65)
	OT=6;
	else	if(BT>=64&&BT<75)
	OT=7;
	else	if(BT>=75&&BT<85)
	OT=8;
	else	if(BT>=85&&BT<92)
	OT=9;
	else	if(BT>=92&&BT<=100)
	OT=10;
	else OT=0;
	if(BB>=55&&BB<65)
	OB=6;
	else	if(BB>=65&&BB<75)
	OB=7;
	else	if(BB>=75&&BB<85)
	OB=8;
	else	if(BB>=85&&BB<92)
	OB=9;
	 else   if(BB>=92&&BB<=100)
	OB=10;
	else OB=1;
	if(BM>=55&&BM<65)
	OM=6;
	else	if(BM>=65&&BM<75)
	OM=7;
		else if(BM>=75&&BM<85)
	OM=8;
		else if(BM>=85&&BM<92)
	OM=9;
	else	if(BM>=92&&BM<=100)
	OM=10;
	else OM=2;
if(BT<55&&BB<55&&BM<55)
	printf(""Nijedan student nije polozio."");
	if(OT>=6&&OB>=6&&OM>=6){
	printf(""Sva tri studenta su polozila."");
	if(OT==OB&&OB==OM)
	printf(""\nSva tri studenta imaju istu ocjenu."");
	else if((OT==OB||OB==OM||OM==OT))
		printf(""\nDva od tri studenta imaju istu ocjenu."");
		else
		printf(""\nSvaki student ima razlicitu ocjenu."");}
		if((OT>=6&&OB<6&&OM<6)||(OT<6&&OB>=6&&OM<6)||(OT<6&&OB<6&&OM>=6))
		printf(""Jedan student je polozio."");

			if((OT>=6&&OB>=6&&OM<6)||(OT<6&&OB>=6&&OM>=6)||(OT>=6&&OB<6&&OM>=6))
		printf(""Dva studenta su polozila."");
	return 0;
}

"
6509,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
6510,93,93,1,28,A2016/Z2/Z3/student1639,A2016/Z2/Z3/student3425,"#include <stdio.h>

int main() {
	int i=0, j=0, k=0, brojtacaka, A[10], B[10] ;
    do{printf(""Unesite broj tacaka: "");
	scanf(""%d"", &brojtacaka);
		if(brojtacaka>10 || brojtacaka<=0)printf(""Pogresan unos\n"");}
	while(brojtacaka>10 || brojtacaka<=0);


	for(i=0; i<brojtacaka; i++){
	    printf(""Unesite %d. tacku: "", i+1); 
		scanf(""%d %d"", &A[i], &B[i]);
		if(A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			printf(""Pogresan unos\n"");
			i--;
			continue;
		}}
	for(i=0; i<20; i++){
		for(j=0; j<20; j++){
			for(k=0; k<brojtacaka; k++){
			if(A[k]==j && B[k]==i ){
				printf(""*"");
				j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
		

	return 0;}
	

","#include <stdio.h>
int main(){
	int i,j,k,broj,A[10],B[10];
	do{
		printf(""Unesite broj tacaka: "");
		scanf(""%d"", &broj);
		if(broj<=0 || broj>10)
			printf(""Pogresan unos \n"");
	}
	while (broj<=0 || broj>10);
	for (i=0;i<broj;i++){
		printf(""Unesite %d. tacku: "",i+1);
		scanf(""%d %d"",&A[i],&B[i]);
		if (A[i]>19 || A[i]<0 || B[i]>19 || B[i]<0){
			i--;
			printf(""Pogresan unos\n"");
			continue;
		}
	}
	for(i=0;i<20;i++){
		for(j=0;j<20;j++){
			for(k=0;k<broj;k++){
				if(A[k]==j && B[k]==i){
					printf(""*"");
					j++;
				}
			}
			printf("" "");
		}
		printf(""\n"");
	}
	return 0;
}"
6511,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h>

int Fibonacci(int n) {
	int broj1=1, broj2=1, broj3;
	if(n==1)
	return 1;
	
	for(;;) {
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
		if(n==broj3)
		return 1;
		if(broj3>n)
		return 0;
	}
	
}

int SumaCifara(int n) {
	int suma=0;
	if(n<0)
	n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int* niz, int vel) {
	int pomocni1[10], pomocni2[10],i,index1=0,index2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[index1];
			index1++;
		}
		else {
			niz[i]=pomocni2[index2];
			index2++;
		}
	}
}

int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1;j++) 
			niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}

int main() {
	int niz[20],i,n;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	n=izbaci(niz,20);
	if(n==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<n-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[n-1]);
}
","#include <stdio.h>

int SumaCifara(int n) {
	int suma=0;
	if(n<0) n*=(-1);
	while(n>0) {
		suma+=n%10;
		n/=10;
	}
	return suma;
}

void ubaci(int *niz, int vel) {
	int pomocni1[10],pomocni2[10],i,indeks1=0,indeks2=0;
	for(i=0; i<vel; i++) {
		pomocni1[i]=niz[i];
		pomocni2[i]=SumaCifara(niz[i]);
	}
	for(i=0; i<2*vel; i++) {
		if(i%2==0) {
			niz[i]=pomocni1[indeks1];
			indeks1++;
		}
		else {
			niz[i]=pomocni2[indeks2];
			indeks2++;
		}
	
	}
}

int Fibonacci(int n) {
	int broj1=1,broj2=1,broj3=1;
	for(;;) {
		if(n==broj3) return 1;
		if(broj3>n) return 0;
		broj3=broj1+broj2;
		broj1=broj2;
		broj2=broj3;
	}
}
int izbaci(int* niz, int vel) {
	int i,j;
	for(i=0; i<vel; i++) {
		if(Fibonacci(niz[i])==1) {
			for(j=i; j<vel-1; j++)
				niz[j]=niz[j+1];
			vel--;
			i--;
		}
	}
	return vel;
}
int main() {
	int niz[20],i=0,broj=1;
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
	}
	ubaci(niz,10);
	broj=izbaci(niz,20);
	if(broj==0) {
		printf(""Prazan niz."");
		return 0;
	}
	printf(""Modificirani niz glasi: "");
	for(i=0; i<broj-1; i++) {
		printf(""%d, "", niz[i]);
	}
	printf(""%d."", niz[broj-1]);
	return 0;
}	

"
6515,23,23,1,34,A2016/Z4/Z1/student5284,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
char *izbaci_najcescu(char *s) {
	char *p=s, *pr, *kr, *kt, *pt, *pn, *kn, *q, *r, *k;
	int pret;
	int i;
	char niz[1000];
	int max=0;
	int br=0;
	if(*s=='\0') return 0;
	while(*s!='\0') {
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;br=1;

			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
				s++;
			}
			
			kr=s;
			q=s;
			
			while(*q!='\0') {
				if(toupper(*q)>='A' && toupper(*q)<='Z' && (*(q+1)!=' ' || *(q+1)!='\0')) {
					pn=q;
					while((*q>='a' && *q<='z') || (*q>='A' && *q<='Z')) {
						q++;			
					}
					kn=q;
					
					pt=pr;
					kt=kr;
					pret=1;
					
					while(pt!=kr) {
						if(tolower(*pt)!=tolower(*pn)){ pret=0;break;}
						pt++;
						pn++;
					}
					
					if(pret==1)
					br++;
			}else q++;
		}
		
		if(br>max) {
			max=br;
			r=pr;
			k=kr;
			
			i=0;
		while(r!=k) {
			niz[i]=*r;
			i++;
			r++;
				
		}
		niz[i]='\0';
		}
		
		}else s++;
	}
		
		
		
		
	s=p;
	while(*s!='\0') {
	 	
		if(toupper(*s)>='A' && toupper(*s)<='Z' && (*(s+1)!=' ' || *(s+1)!='\0')) {
			pr=s;
			q=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kr=s;
			pret=1;
			pt=niz;
			kt=niz+i;
			
			while(pr!=kr) {
				if(tolower(*pt)!=tolower(*pr) ) { pret=0; break;}
					pt++;
					pr++;
			
			}
			
			if(pret==1) {
				
				while(*kr!='\0')  *q++=*kr++;
				*q='\0';
				s=s-(kr-q);
			}
			
		} else s++;
		
	}
	return p;
}


int main() {
	
	char a[]=""Ovo je neki bezvezni tekst neki neki"";
	printf(""%s"", izbaci_najcescu(a));
	
return 0;
}
","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6522,79,79,1,49,A2016/Z1/Z3/student3424,A2016/Z1/Z3/student3756,"#include <stdio.h>
#include <math.h>
#define epsilon 0.0001

int main ()
{
    float postotakcrna, postotakbijela, postotaksiva, postotakcrvena, postotakplava, max=0;
    int UKUPNO, crna=0, bijela=0, siva=0, crvena=0, plava=0;
    char slovo;
    
    printf(""Unesite vozila: "");
    
    while ((slovo=getchar())!='K' && slovo!='k')
    {
        if (slovo=='C' || slovo=='c')
        crna++;
        if (slovo=='B' || slovo=='b')
        bijela++;
        if (slovo=='S' || slovo=='s')
        siva++;
        if (slovo=='V' || slovo=='v')
        crvena++;
        if (slovo=='P' || slovo=='p')
        plava++;
        else if(slovo!='C' && slovo!='c' && slovo!='B' && slovo!='b' && slovo!='S' && slovo!='s' && slovo!='V' && slovo!='v' && slovo!='P' && slovo!='p')
        {
            printf(""Neispravan unos\n"");
        }
    }
    
    UKUPNO=crna+bijela+siva+crvena+plava;
    
    printf(""Ukupno evidentirano %d vozila.\n"", UKUPNO);
    
    postotakcrna=(crna/(float)UKUPNO)*100;
    postotakbijela=(bijela/(float)UKUPNO)*100;
    postotaksiva=(siva/(float)UKUPNO)*100;
    postotakcrvena=(crvena/(float)UKUPNO)*100;
    postotakplava=(plava/(float)UKUPNO)*100;
    
    if (UKUPNO==0)
    printf(""Najpopularnija boja je crna (0.00%%)."");
    
    else
    {
        if (postotakcrna>max)
        max=postotakcrna;
        if (postotakbijela>max)
        max=postotakbijela;
        if (postotaksiva>max)
        max=postotaksiva;
        if (postotakcrvena>max)
        max=postotakcrvena;
        if (postotakplava>max)
        max=postotakplava;
    }
    
    if (fabs(max-postotakcrna)<epsilon)
    printf(""Najpopularnija boja je crna (%.2f%%)."", postotakcrna);
    else if (fabs(max-postotakbijela)<epsilon)
    printf(""Najpopularnija boja je bijela (%.2f%%)."", postotakbijela);
    else if (fabs(max-postotaksiva)<epsilon)
    printf(""Najpopularnija boja je siva (%.2f%%)."", postotaksiva);
    else if (fabs(max-postotakcrvena)<epsilon)
    printf(""Najpopularnija boja je crvena (%.2f%%)."", postotakcrvena);
    else if (fabs(max-postotakplava)<epsilon)
    printf(""Najpopularnija boja je plava (%.2f%%)."", postotakplava);
    
    return 0;
}","#include <stdio.h>
#include <math.h>
#define eps 0.0001
int main() {

float pcrna, pbijela, psiva, pcrvena, pplava, maks=0;
int ukupno, crna=0, bijela=0, siva=0, crvena=0, plava=0; 
char slovo;
printf(""Unesite vozila: "");
	while ((slovo=getchar())!='K' && slovo!='k')
{	
	if(slovo == 'c' || slovo == 'C')
	crna++;
	else if(slovo == 'b' || slovo == 'B')
	bijela++;
	else if(slovo == 's' || slovo == 'S')
	siva++;
	else if(slovo == 'v' || slovo == 'V')
	crvena++;
	else if(slovo == 'p' || slovo == 'P')
	plava++;
	else 
	{ printf(""Neispravan unos\n"");
	}
}
	
	ukupno = crna + bijela + siva + crvena + plava;

	printf(""Ukupno evidentirano %d vozila.\n"",ukupno);
	
	pcrna = (crna/(float)ukupno)*100;
	pbijela = (bijela/(float)ukupno)*100;
	psiva = (siva/(float)ukupno)*100;
	pcrvena = (crvena/(float)ukupno)*100; 
	pplava = (plava/(float)ukupno)*100;
	
	if(ukupno==0)
	printf(""Najpopularnija boja je crna (0.00%%)."");
	
	else
	{if(pcrna>maks)
	maks=pcrna;
	if(pbijela>maks)
	maks=pbijela;
	if(psiva>maks)
	maks=psiva;
	if(pcrvena>maks)
	maks=pcrvena;
	if (pplava>maks)
	maks=pplava;
	}
	if (fabs(maks-pcrna)<eps)
	printf(""Najpopularnija boja je crna (%.2f%%)."", pcrna);
	else if(fabs(maks-pbijela)<eps)	
	printf(""Najpopularnija boja je bijela (%.2f%%)."", pbijela);
	else if(fabs(maks-psiva)<eps)
	printf(""Najpopularnija boja je siva (%.2f%%)."", psiva);
	else if(fabs(maks-pcrvena)<eps)
	printf(""Najpopularnija boja je crvena (%.2f%%)."", pcrvena);
	else if(fabs(maks-pplava)<eps)
	printf(""Najpopularnija boja je plava (%.2f%%)."", pplava);
		
		
	return 0;
}




"
6523,83,83,1,58,A2016/Z3/Z2/student1375,A2016/Z3/Z2/student5129,"#include <stdio.h>


void ubaci(int *niz, int brclan) {
	int i, t;
	

	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	
	for(i=0; i<brclan*2; i++) {
	
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		
		if(i%2!=0) {
			niz[i]=0;
			
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k, t;

	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}
	
	t=brclan*2;
	

	for(i=0; i<t; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<t; k++) {
					niz[k]=niz[k+1];
				}
				
				niz[t-1]=1;
				t--;
				brclan--;
				i--;
			}
		}
	}
	return brclan;
}


int main() {
    int niz[21]={0}, i, t=20, brclan=10;

    printf(""Unesite niz od 10 brojeva: "");
    for(i=0; i<10; i++) {
     scanf(""%d"", &niz[i]);
        if (niz[i]%1!=0) i--;
    }

    ubaci(niz, brclan);
    izbaci(niz, brclan);
    printf(""Modificirani niz glasi: %d"", niz[0]);
    for(i=1; i<t; i++) {
    if(niz[i]!=1) printf("", %d"", niz[i]);  }   printf(""."");
	
	return 0;
}
","#include <stdio.h>

/* UBACI RADI 100% */
void ubaci(int *niz, int brclan) {
	int i, t;
	
	/* Uduplava clanove niza, tako da se isti broj ponavlja po 2 puta zaredom, popunjava sve clanove niza da mozemo stavljati zbir */
	for(i=brclan*2 - 1; i>=0; i--) {
		niz[i]=niz[i/2];
	}
	
	/* Inkrement za 2 tako da ima 20 clanova i tako da ima mjesta za nove (one koji su zbir cifara) */
	for(i=0; i<brclan*2; i++) {
		/* Pretvaranje negativnog u pozitivni broj */
		if(niz[i]>0) t=niz[i];
		else t=niz[i] * (-1);
		
		/* Samo overwrite duplikate, neparne clanove! */
		if(i%2!=0) {
			niz[i]=0;
			/* Sabiranje cifara clana u sljedeci clan */
			while(t!=0){
			niz[i]+=t%10;
			t/=10;
			}
		}
	}
}

int izbaci(int *niz, int brclan) {
	int i, j, fib[1000]={0}, k;
	/* Generisanje Fibonaccijevog niza */
	fib[0]=1;
	fib[1]=2;
	for(i=2; i<1000; i++) {
		fib[i]=fib[i-1]+fib[i-2];
	}

	/* Izbacivanje clanova koji se podudaraju sa Fibonaccijevim nizom */
	for(i=0; i<brclan; i++) {
		for(j=0; j<1000; j++) {
			if(niz[i]==fib[j]) {
				for(k=i; k<brclan-1; k++) {
					niz[k]=niz[k+1];
				}
				/* Brise se clan i smanjuje ukupni broj elemenata */
				brclan--;
				i--;
				break;
			}
		}
	}
	return brclan;
}

int main() {
	int niz[21]={0}, i, brclan=10;
	
	/* Unos niza */
	printf(""Unesite niz od 10 brojeva: "");
	for(i=0; i<10; i++) {
		scanf(""%d"", &niz[i]);
		if (niz[i]%1!=0) i--;
	}
	
	/* Funkcije */
	ubaci(niz, brclan);
	/* Nakon sto smo dodali zbirove treba nam mjesto za sami clan i zbir njegovih cifara tj. svakom clanu trebaju dva mjesta i duplo veci niz */
	brclan*=2;
	izbaci(niz, brclan);
	
	/* Ispis */
	printf(""Modificirani niz glasi: %d"", niz[0]);
	for(i=1; i<brclan; i++) {
		if(niz[i]!=1) printf("", %d"", niz[i]);
		}
	
	printf(""."");
	
	return 0;
}"
6525,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
6528,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
6529,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h>

char* izbaci_najcescu (char* s){
	int brojaci[100],i=0,j;
	int razmak=1, broj_rijeci=0,maxi;
	char *pocetak;
	char *p,*x,*r;
	x=s;p=s;r=s;
	while(*p!='\0'){
		while(*r!=' ' && *r!='\n' && *r!= '\0') r++;
			while(*p!=' ' && *p!='\n' && *r!=' ' && *r!='\n'){
				if(*p++==*++r) continue;
				else break;
			}
		if((*p==' ' || *p=='\n'|| *p!='\0' ) && ( *r!=' ' ||  *r!='\n' || *r!='\0')) brojaci[i]++;
		p=x;
		if(r=='\0'){
				while(*p!=' ' && *p!='\n') p++;
				x=++p; i++;
				r=p;
		}
		else
			while(*r++!=' ' && *r!='\n' && *r!='\0');
	}
	x=s;
	maxi=0;
	for(j=0;j<i;j++){
		if(brojaci[i]>brojaci[maxi])
			maxi=i;
	}
	while(*s!='\0'){
		if(*s==' ')
		razmak=1;
		else if(razmak==1){
			razmak=0;
			if(*s==' ')
				razmak=0;
			broj_rijeci++;
			if(broj_rijeci==i) pocetak=s;
			if(broj_rijeci==i+1){
				while(*pocetak++=*s++);
				return x;
			}
		}
		s++;
	}
	if(broj_rijeci==i) *pocetak='\0';
	
	return x;
}
int main(){
 char s[100]=""nermana nermana emir nermana emir emir emir"";
 printf(""%s"",izbaci_najcescu(s));
 return 0;
}
	","#include <stdio.h>
void unesi(char niz[], int velicina) {
	char znak = getchar();
	if (znak == '\n') znak=getchar();
	int i = 0;
	while (i < velicina-1 && znak != '\n') {
		niz[i] = znak;
		i++;
		znak = getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char* s){
	int i=0,brojac[1000],raz=1,br_rijec=0,j;
	char* poc;
	char* a;
	char* b;
	char* c;
	a=s,b=s,c=s;
		while(*a!='\0'){
		while(*b!=' ' && *b!='\n' && *b!='\0' && *b!='-') b++;
			while((*a!=' ' || *a!='\n' || *a!='-') && (*b!=' ' || *b!='\n' || *b!='-')){
			if(*a++==*b++)
			continue;
			else { break; }
		}
		if((*a==' ' || *a=='\n' || *a=='\0' || *a=='-') && (*b==' ' || *b=='\n' || *b=='\0' || *b=='-'))
		brojac[i]++;
		a=c;
		if(*b!='\0'){
			while(*a!=' ' && *a!='\n' && *a!='\0' && *a!='-')
			a++;
			c=++a;
			i++;
			b=a;
		}	
				else
					while(*b++!=' ' && *b!='\n' && *b!='\0' && *b!='-');
					
						}
		
	c=s;
	int max=0;
	for(j=0;j<i;j++){
		if(brojac[max]<brojac[i])
		max=i;
	}
	while(*s!='\0'){
		if(*s==' ' || *s=='-'){
			raz=1;
		}
			else if(raz==1){
				raz=0;
				if(*s==' ' || *s=='-')
				raz=0;
				br_rijec++;
				if(br_rijec==i)
				poc=s;
				if(br_rijec==i+1){
					while(*poc++=*s++);
				
					return c;
				}
			}
			s++;
		}
		if(br_rijec==i)
		*poc=='\0';
		return c;
	

	
}

int main() {
	char s[1000];
	printf(""Unesi string: "");
	unesi(s,1000);
	printf(""%s"",izbaci_najcescu(s));
	return 0;
}
"
6537,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
6543,57,57,1,89,A2016/Z5/Z1/student4415,A2016/Z5/Z1/student5939,"#include <stdio.h>
#include <math.h>
#include <string.h>
#define epsilon 0.001

struct Student {
	char ime[20], prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double PrsOcj (struct Student student)                  // funkcija prima studenta i vraca njegov prosjek ocjena 
{
	int suma = 0;
	int i;
	double prosjek = 5.0;
	for (i = 0; i < student.br_ocjena; i++) {
		if (student.ocjene[i] == 5) {
			return 5.0;
		}
		suma += student.ocjene[i];
	}
	if (student.br_ocjena == 0)
		return 5.0;
	prosjek = suma / (double)student.br_ocjena;
	return prosjek;
}

int genijalci (struct Student* student, int vel, double prosjek)
{
	int i, j;

	for (i = 0; i < vel; i++) {
		if (PrsOcj(student[i]) < prosjek) {
			for (j = i; j < vel - 1; j++) {
				student[j] = student[j+1];
			}
			vel--;
			i--;
		}
	}

	struct Student* max1 = NULL;
	struct Student* max2 = NULL;
	struct Student* max3 = NULL;
	struct Student* p = student;
	int flag = 1;

	
	while (p < student + vel) {
		if (flag) {
			max1 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max1)) {
			max1 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max1)) < epsilon) {
			if (strcmp(p->prezime,max1->prezime) == 0) {
				if (strcmp(p->ime,max1->ime) < 0) {
					max1 = p;
				}
			} else if (strcmp(p->prezime,max1->prezime) < 0) {
				max1 = p;
			}
		}
		p++;
	}
	
	flag = 1;
	p = student;
	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (flag) {
			max2 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max2)) {
			max2 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max2)) < epsilon) {
			if (strcmp(p->prezime,max2->prezime) == 0) {
				if (strcmp(p->ime,max2->ime) < 0) {
					max2 = p;
				}
			} else if (strcmp(p->prezime,max2->prezime) < 0) {
				max2 = p;
			}
		}
		p++;
	}
	flag = 1;
	p = student;

	while (p < student + vel) {
		if (p == max1) {
			p++;
			continue;
		}
		if (p == max2) {
			p++;
			continue;
		}
		if (flag) {
			max3 = p;
			flag = 0;
		} else if (PrsOcj(*p) > PrsOcj(*max3)) {
			max3 = p;
		} else if (fabs(PrsOcj(*p) - PrsOcj(*max3)) < epsilon) {
			if (strcmp(p->prezime,max3->prezime) == 0) {
				if (strcmp(p->ime,max3->ime) < 0) {
					max3 = p;
				}
			} else if (strcmp(p->prezime,max3->prezime) < 0) {
				max3 = p;
			}
		}

		p++;
	}

	if (max1 != NULL)
		printf (""\n%s %s\n"",max1->prezime, max1->ime);
	if (max2 != NULL)
		printf (""%s %s\n"",max2->prezime, max2->ime);
	if (max3 != NULL)
		printf (""%s %s\n"",max3->prezime, max3->ime);

	return vel;
}

int main()
{

	return 0;
}
","#include <stdio.h>
#include <string.h>


struct Student {
	char ime[20], prezime [20];
	int ocjene[50];
	int br_ocjena;
};


static struct Student* m1 = NULL;
static struct Student* m2 = NULL;
static struct Student* m3 = NULL;
static struct Student* s;
    
double prosjek_ocjena(struct Student student) {
	int i;
	double suma = 0;
	
	for (i = 0; i < student.br_ocjena; i++) {
		
		if (student.ocjene[i] == 5)
		    return 5.0;
		    
	    suma = suma + student.ocjene[i];
	
	}
	
	if (student.br_ocjena == 0)  
	    return 5.0;
	
	return suma / student.br_ocjena;
	
}


int genijalci(struct Student* student, int vel, double prosjek) {
	
    int i = 0;
    int j = 0;
    int status = 1;
    
 
    
    for(i=0; i < vel; i++) {
    	if (prosjek_ocjena(student[i]) < prosjek) {
    	    for (j=i; j < vel - 1; j++ )
    	        student[j] = student[j + 1];
    	
    	
        vel = vel - 1;
        i = i - 1;
       }
    }
    
    s = student;
    
    while (s < student + vel) {
    	
    	if (status) {
    		m1 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m1)) m1 = s;
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m1)) {
    	        if (strcmp(s->prezime, m1->prezime) == 0) {
    	            if(strcmp(s->ime, m1->ime) < 0)
    	                m1 = s;
    	        }
    	else if (strcmp(s->prezime, m1->prezime) < 0) m1=s; 
    	}
    	    
       s++;
    }
    
    status = 1;
    s = student;
    
    
    while (s < student + vel) {
        
        if (s == m1) {
    		s++;
    		continue;
    	}
    	
    	if (status) {
    		m2 = s;
    		status = 0;
    	}
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m2)) m2 = s;
    	    
    	
    	else if (prosjek_ocjena(*s) == prosjek_ocjena(*m2)) {
    	    if (strcmp(s->prezime, m2->prezime) == 0) {
    	        if (strcmp(s->ime, m2-> ime) < 0)
    	            m2 = s;
    	    }
    	    
    	   else if (strcmp(s->prezime, m2->prezime) < 0)  m2 = s;
    	}
    	s++;
    	    
    }
    
    
    status = 1;
    s = student;
    
    while (s < student + vel) {
    	
    	if (s == m1 || s==m2) {
    		s++;
    		continue;
    	}
    	
    	
    	if (status) {
    		m3 = s;
    		status = 0;
    	}
    	
    	
    	else if (prosjek_ocjena(*s) > prosjek_ocjena(*m3))
    	    m3 = s;
    	   
           
       else if (prosjek_ocjena(*s) == prosjek_ocjena(*m3)) {
           if (strcmp(s->prezime, m3->prezime) == 0) {
               if (strcmp(s->ime, m3->ime) < 0)
                   m3 = s;
           }
           
        else if (strcmp(s->prezime, m3->prezime) < 0)
           m3 = s;
       }
       
       s++;
       
    }
    
    
    if (m1 != NULL) 
        printf(""%s %s\n"", m1->prezime, m1->ime);
    if (m2 != NULL) 
        printf(""%s %s\n"", m2->prezime, m2->ime);
    if (m3 != NULL) 
        printf(""%s %s\n"", m3->prezime, m3->ime);
    return vel;    
}

int main() {
    
    return 0;	
}"
6549,92,92,1,89,A2016/Z4/Z1/student6255,A2016/Z4/Z1/student6706,"#include <stdio.h>
#include <stdlib.h>
void unesi(char niz[], int velicina)
{
	char znak = getchar();
	if(znak=='\n') znak=getchar();
	int i=0;
	while(i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
char* izbaci_najcescu(char *s)
{
	char *pocetak=s;
	char *pt=NULL, *kraj=NULL, *novi=NULL, *poc=NULL, *pocmax=NULL, *krajmax=NULL, *izbacivanje=NULL;
	int broj=0, max=0;
	while(*s!='\0') {
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) {
			pt=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0') {
				if(pt==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && ( *(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
					broj++;
					pt=poc;
					if(broj>max) {
						max=broj;
						pocmax=poc;
						krajmax=kraj;
					}
					continue;
				}
				if(*novi!=*pt && *novi!=*pt+'A'-'a' && *novi!=*pt+'a'-'A') {
					pt=poc;
					novi++;
					continue;
				}
				pt++;
				novi++;
			}
			if(pt==kraj) {
				broj++;
				pt=poc;
				if(broj>max) {
					max=broj;
					pocmax=poc;
					krajmax=kraj;
				}
			}
		} else s++;
	}
	if(pocmax==NULL) {
		pocmax=pocetak;
		while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
		krajmax=pocmax;
		pocmax=pocetak;
	}
	poc=pocmax;
	novi=krajmax;
	kraj=krajmax;
	if(novi!=NULL) {
		while(*novi!='\0') {
			if(pocmax==kraj && !((*novi>='a' && *novi<='z') || (*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3')) {
				pocmax=poc;
				izbacivanje=novi;
				while(*izbacivanje!='\0') {
					*(izbacivanje-kraj+pocmax)=*izbacivanje;
					izbacivanje++;
				}
				*(izbacivanje-kraj+pocmax)='\0';
				novi--;
				novi--;
				novi--;
				continue;
			}
			if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' && *novi!=*pocmax+'a'-'A') {
				pocmax=poc;
				novi++;
				continue;
			}
			pocmax++;
			novi++;
		}
		if(pocmax==kraj && (*novi==*kraj || *novi=='\0')) {
			pocmax=poc;
			izbacivanje=novi;
			while (izbacivanje!='\0') {
				*(izbacivanje-kraj+pocmax)=*izbacivanje;
				izbacivanje++;
			}
			*(izbacivanje-kraj+pocmax)='\0';

		}
	}
		if(kraj!=NULL) {
			while(*kraj='\0') {
				*poc=*kraj;
				poc++;
				kraj++;
			}
			*poc='\0';
		}
		return pocetak;
	}

	int main() {
		char ime[90];
		printf(""Unesite ime: "");
		unesi(ime,90);
		printf(""%s"",izbaci_najcescu(ime));
		return 0;
	}
","#include <stdio.h>
char* izbaci_najcescu(char* s){
	char* pocetak=s;
	char*p=NULL,*kraj=NULL,*novi=NULL,*pocmax=NULL,*krajmax=NULL,*izbacivanje=NULL,*poc=NULL;
	int broj=0,max=0;
	while(*s!='\0'){
		if((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')){
			p=s;
			poc=s;
			while((*s>='a' && *s<='z') || (*s>='A' && *s<='Z')) s++;
			kraj=s;
			novi=s;
			broj=0;
			while(*novi!='\0'){
				if(p==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
				{ broj++; p=poc;
				if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
				continue;}
				if(*novi!=*p && *novi!=*p+'A'-'a' && *novi!=*p+'a'-'A'){p=poc; novi++; continue;}
				p++;
				novi++;
			}
			if(p==kraj){ broj++; p=poc;
			if(broj>max){ max=broj; pocmax=poc; krajmax=kraj;}
		}
	}
	else s++;
}
if(pocmax==NULL){
pocmax=pocetak;
while((*pocmax>='a' && *pocmax<='z') || (*pocmax>='A' && *pocmax<='Z')) pocmax++;
krajmax=pocmax;
pocmax=pocetak;
}
poc=pocmax;
novi=krajmax;
kraj=krajmax;
if(novi!=NULL){
while(*novi!='\0'){
	if(pocmax==kraj && !((*novi>='a' && *novi<='z')||(*novi>='A' && *novi<='Z')) && (*(novi-kraj+poc-1)==' ' || *(novi-kraj+poc-1)=='3'))
	{ pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje++;}
		*(izbacivanje-kraj+pocmax)='\0';
		novi--; novi--; novi--;
		continue;}
		if(*novi!=*pocmax && *novi!=*pocmax+'A'-'a' &&  *novi!=*pocmax+'a'-'A')
		{pocmax=poc; novi++; continue;}
		pocmax++;
		novi++;
	}
	
	if(pocmax==kraj && (*novi==*kraj || *novi=='\0')){pocmax=poc;
	izbacivanje=novi;
	while(*izbacivanje!='\0'){
		*(izbacivanje-kraj+pocmax)=*izbacivanje;
		izbacivanje ++;
	}
	*(izbacivanje-kraj+pocmax)='\0';
	}
}
	
	if(kraj!=NULL){
	while(*kraj!='\0'){
		*poc=*kraj;
	    poc++;
	    kraj ++;
	}
	*poc='\0';
	}
	return pocetak;
	
}


int main() {
	char ime[]=""Danas je je je lijep lijep dan"";
	printf(""%s"",izbaci_najcescu(ime));
	return 0;
}
"
6554,47,47,1,55,A2016/Z5/Z1/student6547,A2016/Z5/Z1/student6548,"
#include <stdio.h>
#include <string.h>

struct Student {
	char ime[20],prezime[20];
	int ocjene[50];
	int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel) {
	if(vel==0) return 0;
	int i;
	double prosjek=5,suma=0;
	for(i=0;i<vel;i++) 
	if(niz[i]==5) return 5;
	else suma+=niz[i];
	return suma/vel;
}

int uporedi(char* s1, char* s2) {
	if(strcmp(s1,s2)==0) return 0;
	if(strcmp(s1,s2)<0) return -1;
	if(strcmp(s1,s2)>0) return 1;
}

int vratiduz(struct Student studenti[], int velicina, double prosjek) {
	int i,j;
	
	for(i=0;i<velicina;i++) {
		
		if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek) {
			for(j=i;j<velicina-1;j++)
			studenti[j]=studenti[j+1];
			velicina--;
			i--;
		}
	}
	return velicina;
}

int genijalci (struct Student studenti[],int velicina, double prosjek) {
	int i,j;
	velicina=vratiduz(studenti,velicina,prosjek);
	int prvi=-1, drugi=-1, treci=-1;
	double najveci=0, prosj;
	int ispred;
	
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci) {
			if (prosjek>najveci) {
				prvi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
			if(ispred==1) 
			prvi=i;
			
			if(ispred==0)
			ispred=uporedi(studenti[prvi].ime, studenti[i].ime);
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if (prosjek>=najveci && i!=prvi) {
			if(prosjek>najveci) {
				drugi=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
			
			if(ispred==1) {
				drugi=i;
			}
		}
	}
	najveci=0;
	for(i=0;i<velicina;i++) {
		double prosjek=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
		if(prosjek>=najveci && i!=prvi && i!=drugi) {
			if(prosjek>najveci) {
				treci=i;
				najveci=prosjek;
			}
			najveci=prosjek;
			ispred=uporedi(studenti[treci].prezime, studenti[i].prezime);
			if(ispred==0)
			ispred=uporedi(studenti[treci].ime, studenti[i].ime);
			if(ispred==1) treci=i;
		}
	}
	if(velicina==1)
	printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
	
	if(velicina==2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime,studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		return 2;
	}
	if(velicina>2) {
		printf(""\n%s %s\n"",studenti[prvi].prezime, studenti[prvi].ime);
		printf(""%s %s\n"",studenti[drugi].prezime,studenti[drugi].ime);
		printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
	}
	return velicina;
	
}

int main() {
	struct Student studenti[10]={ 
		{""Meho"",""Mujic"",{7,7,7,7,8},5}, {""Pero"",""Peric"",{8,8,8,8,7},5}, {""Beba"",""Bebic"",{7,8,9},3}, {""Mujo"",""Mujic"",{10,10,10,10,9},5},
	
	};
	int vel=genijalci(studenti, 4, 7);

	return 0;
}

","#include <stdio.h>
#include <string.h>

struct Student{
    char ime[20],prezime[20];
    int ocjene[50];
    int br_ocjena;
};

double prosjecna_ocjena(int niz[],int vel){
    if(vel==0) return 0;
    int i;
    double prosjek=5, suma=0;
    for(i=0;i<vel;i++){
        if(niz[i]==5) return 5;
        suma+=niz[i];
    }
    prosjek=suma/vel;
    return prosjek;
}

int uporedi(char* s1, char* s2){
    while (*s1!='\0' && *s2!='\0'){
        if(*s1<*s2) return -1;
        if(*s1>*s2) return 1;
        s1++;
        s2++;
    }
    if(*s1!='\0') return 1;
    if(*s2!='\0') return -1;
    return 0;
}
int genijalci(struct Student studenti[], int velicina, double prosjek){
    int i,j;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)<prosjek){
            for(j=i; j<velicina-1; j++)
                studenti[j]=studenti[j+1];
            velicina--;
            i--;
        }
    }
int prvi=-1, drugi=-1, treci=-1;
double najveci=0, prosj;
int ispred;

for(i=0; i<velicina; i++){
    if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) >= najveci){
        if(prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena) > najveci){
            prvi=i;
            najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
                continue;
        }
        najveci=prosjecna_ocjena(studenti[i].ocjene, studenti[i].br_ocjena);
        ispred=uporedi(studenti[prvi].prezime, studenti[i].prezime);
        if(ispred==0)
            ispred=uporedi(studenti[prvi].ime,studenti[i].ime);
        if(ispred==1){
            prvi=i;
            }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi){
            if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                drugi=i;
        najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[drugi].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[drugi].ime,studenti[i].ime);
                if(ispred==1){
                    drugi=i;
                }
        }
    }
    najveci=0;
    for(i=0;i<velicina;i++){
        if(prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena)>=najveci && i!=prvi && i!=drugi){
            if(prosjecna_ocjena (studenti[i].ocjene,studenti[i].br_ocjena)>najveci){
                
                treci=i;
                najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
                continue;
            }
            najveci=prosjecna_ocjena(studenti[i].ocjene,studenti[i].br_ocjena);
            ispred=uporedi(studenti[treci].prezime,studenti[i].prezime);
            if(ispred==0)
                ispred=uporedi(studenti[treci].ime,studenti[i].ime);
            if(ispred==1){
                treci=i;
            }
        }
    }
    for (i=0;i<velicina;i++)
        if(i==prvi)
            printf(""\n%s %s\n"", studenti[prvi].prezime, studenti[prvi].ime);
    for (i=0;i<velicina;i++)
        if(i==drugi)
            printf(""%s %s\n"", studenti[drugi].prezime, studenti[drugi].ime);
    for(i=0;i<velicina;i++)
        if(i==treci)
            printf(""%s %s\n"",studenti[treci].prezime, studenti[treci].ime);
    return velicina;
}
    
int main(){
    struct Student studenti[10]={
        {""Meho"", ""Mujic"",{7,7,7,7,8},5},
        {""Pero"", ""Peric"",{8,8,8,8,7},5},
        {""Beba"", ""Bebic"",{7,8,9},3},
        {""Mujo"", ""Mujic"",{10,10,10,10,9},5},
        {""Mujo"", ""Mujic"",{7,7,7,7,7,7,7},7},
        {""Fata"", ""Fatic"",{7,7,7,7,7,7,6,6,6,5},10},
        {""Osman"", ""Osmic"",{8,6,9,10,9},5},
        {""Pero"", ""Mujic"",{10,6,10,10,9},5},
        {""Beba"", ""Mujic"",{10,8,7,6,9},5},
        
    };
    
    int vel=genijalci(studenti, 9, 7);
    return 0;
}"
6556,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h>
void unesi(char niz[], int velicina)
{
	char znak=getchar();
	int i=0;
	if(znak=='\n') znak=getchar();
	while (i<velicina-1 && znak!='\n') {
		niz[i]=znak;
		i++;
		znak=getchar();
	}
	niz[i]='\0';
}
void Broj(char *pok, char *kpok, float *x, float *y)
{
	char *s=pok;
	int negativni;
	double a,b;
	*x=0, *y=0;
	while(s!=kpok)
	{
		s++;
		negativni=0;
		if(*s=='-') {
			negativni=1;
			s++;
		}
		while(*s>='0' && *s<='9')
		{
			*x=*x*10+(*s-'0');
			s++;
		}
		if(*s=='.')
		{
			s++;
			a=0;
			while(*s>='0' && *s<='9')
			{
				a=a*10+(*s-'0');
				s++;
			}
			while(a>=1)
			a=a/10;
			*x+=a;
		}
		if(negativni) *x=*x*(-1);
		if(*s==',') s++;
		negativni=0;
		if(*s=='-') {
			negativni=1; s++;}
			while(*s>='0' && *s<='9')
			{
				*y=*y*10+(*s-'0');
				s++;
			}
			if(*s=='.')
			{
				s++;
				b=0;
				while(*s>='0' && *s<='9')
				{
					b=b*10+(*s-'0');
					s++;
				}
				while (b>=1) 
					b=b/10;
					*y+=b;
					
				}
				if(negativni) *y=*y*(-1);
			}
		}
		
		char *obuhvat(char *s, float x1, float y1, float x2, float y2)
		{
			char *p=s;
			char *pok, *kpok;
			char *izbaci;
			float x,y;
			while(*s!='\0')
			{
				if(*s=='(')
				{
					pok=s;
					while(*s!=')') s++;
					kpok=s;
					Broj(pok, kpok,&x,&y);
					if(x<x1 || x>x2 || y<y1 || y>y2)
					{
						s++;
						while(*s==',') s++;
						izbaci=s;
						while(*izbaci!='\0')
						{*pok++=*izbaci++;
					}
					*pok='\0';
					s=s-(izbaci-pok);
				}
			}
			else s++;
		}
		if(s!=p) s--;
		if(*s==',') *s='\0';
		return p;
		}
int main() {
	char text[100];
	printf(""Unesite neki text: "");
	unesi(text, 100);
	char *novi=text;
	novi=obuhvat(text, -10, -10, 5, 5);
	printf(""%s\n"", text);
	printf(""%s\n"", novi);
	return 0;
}
","#include <stdio.h>

int provjera_cifri(char *s) {
	char *p=s;
	int brojac=0;
	while (*p!='\0') {
		if(*p=='(' || *p==',') {
			p++;
			if (*p>='0' && *p<='9' || *p=='-') {
				while (*p>='0' && *p<='9' || *p=='-' || *p=='.') p++;
				if (*p==',' || *p==')') brojac++;
			}
		}
		else if (*p=')') {
			p++;
			if (*p!=',') return 0;
		}
		
	}
	return brojac;
}

int provjera_stringa(char *s) {
	char *p=s;
	while (*p!='\0') {
		if (*p!=')' || *p!='(' || *p!='-' || *p!=',' || *p!='.' || !(*p>='0' && *p<='9'))
		return 0;
		else if (provjera_cifri(s)!=8)
		return 0;
	} return 1;
}

void DajBroj(char *pt,char *kt,float *x,float *y)
{

	char *p=pt;
	int neg;
	float a,b;

	*x=0;*y=0;

		while(p!=kt)
		{
			p++;neg=0;

			if(*p=='-'){neg=1;p++;}

			*x=0;
			while(*p>='0' && *p<='9')
			{
				*x=*x*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;a=0;
				while(*p>='0' && *p<='9')
				{
					a=a*10+(*p-'0');
					p++;
				}
				while(a>=1)
				 a/=10;
				*x=*x+a;
			}
			if(neg==1) *x*=-1;
			if(*p==',')p++;
			neg=0;
			if(*p=='-'){neg=1;p++;}
			*y=0;
			while(*p>='0' && *p<='9')
			{
				*y=*y*10+(*p-'0');
				p++;
			}
			if(*p=='.')
			{
				p++;b=0;
				while(*p>='0' && *p<='9')
				{
					b=b*10+(*p-'0');
					p++;
				}
				while(b>=1)
				 b/=10;
				*y=*y+b;
			}
			if(neg==1) *y*=-1;

		}


}
char* obuhvat(char *s,float x1,float y1,float x2,float y2)
{
	char* p=s;
	char *pt,*kt,*izb;
	float x,y;
		while(*p!='\0')
		{

			if(*p=='(')
			{
				pt=p;
				while(*p!=')')p++;
				kt=p;

			DajBroj(pt,kt,&x,&y);


			if(x<x1 || x>x2 || y<y1 || y>y2)
			{
				p++;
				while(*p==',')p++;
				izb=p;

				while(*izb!='\0')
				{
					*pt++=*izb++;
				}
				*pt='\0';
				p=p-(izb-pt);
			}


			}else p++;

		}

	    if(p!=s) p--;
		if(*p==',') *p='\0';

	return s;
}
int main() {

	char s[] = """";
	if (provjera_stringa(s)==1) {
		
	float x1, x2, y1, y2;
//	scanf (""%f %f %f %f"", &x1, &y1, &x2, &y2);
	char* rez = obuhvat(s, -3, -3, 3, 3);
	printf(""%s %s\n"", rez, s); 
	}
	else printf (""0 0 0 0 0"");
	return 0;
}
"
6564,68,68,1,96,A2016/Z4/Z1/student3116,A2016/Z4/Z1/student8631,"#include <stdio.h>
#include <ctype.h>
 
 char pom[1000];
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*q,*pt,*kt,*pt1,*pm,*km,*a,*t,*r;
     int br=0,isti,max=0,i=0;
     
 
     
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              q=p;
              br=1;
               while(*q!='\0')
               {
                 if(tolower(*q)>='a' && tolower(*q)<='z')
                 {
                   pt1=q;
                   while(tolower(*q)>='a' && tolower(*q)<='z')
                    q++;
                   if(*q==' ' || *q=='\0')
                   {
                     isti=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        isti=0;
                        break;
                       }
                       
                     }
                     if(isti==1) br++;
                   }
                 } else q++;
               }
               if(br>max)
               {
                pm=pt;
                km=kt;
                max=br;
               }
           }
        }else p++;
    }
   
   
   while(pm!=km)
   {
     pom[i++]=*pm++;
    
   }
   pom[i]='\0';
   a=&pom[0];
  

  return a;
 }
 
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*q,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;q=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt )
        { 
          if(tolower(*t++)!=tolower(*pt++)) 
          {
           jeste=0;
           break;
          }
        }
        
        if(jeste==1)
        {
          while(*kt!='\0')
          {
           *q++=*kt++;
          }
          *q='\0';
          p=p-(kt-q);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }","#include <stdio.h>
#include <ctype.h>
 
 char string [1000];
 // funckija koja prebrojava koliko te rijeci ima u ostatku stringa//
 int najcesca(char*pok_string, char*pt, char*kt ){
  char *pt1, *t, *r;
  int pretpostavka, br=1;
  while(*pok_string!='\0')
               {
                 if(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                 {
                   pt1=pok_string;
                   while(tolower(*pok_string)>='a' && tolower(*pok_string)<='z')
                    pok_string++;
                   if(*pok_string==' ' || *pok_string=='\0')
                   {
                     pretpostavka=1;
                     t=pt;
                     r=pt1;
                     while(t!=kt)
                     {
                       if(tolower(*t++)!=tolower(*r++))
                       {
                        pretpostavka=0;
                        break;
                       }
                       
                     }
                     if(pretpostavka==1) br++;
                   }
                 } else pok_string++;
               }
 return br;
 } 
 
 char* PronadjiNajcescu(char *s)
 {
     
     char *p=s,*pok_string,*pt,*kt,*pm,*km,*a;
     int br=0,max=0,i=0;
     
 
  
     while(*p!='\0')
     {
        if(tolower(*p)>='a' && tolower(*p)<='z')
        {
          pt=p;
          while(tolower(*p)>='a' && tolower(*p)<='z')
           p++;
           
           if(*p==' ' || *p=='\0')
           {
              kt=p;
              pok_string=p;
              
              br=najcesca(pok_string,pt, kt);
               if(br>max)
               {
                string[i]=*pt;
                pm=pt;
                km=kt;
                max=br;
                i=0;
                while(pm!=km)
                {
                 string [i++]=*pm++;
    
                      }
                  string [i]='\0';
               }
           }
        }else p++;
    }
   
   
   
   a=&string [0];
  

  return a;
 }
 //funkcija izbacuje najcescu rijec //
 char* izbaci_najcescu(char* s)
 {
   char *p=s,*pt,*kt,*pok_string,*pok,*t;
   int jeste;

   if(*s=='\0') return 0;
    
  
   pok=PronadjiNajcescu(p);
  
 
   while(*p!='\0')  
   {
     if(tolower(*p)>='a' && tolower(*p)<='z' && (*(p+1)!=' ' || *(p+1)=='\0'))
     {
        pt=p;pok_string=p;
         while(tolower(*p)>='a' && tolower(*p)<='z')
            p++;
            
        t=pok;
        jeste=1;
        kt=p;
       
        while(pt!=kt ) 
        { 
          if(tolower(*t++)!=tolower(*pt++))  //poredimo najcescu rijec sa ostalim rijecima//
          {
           jeste=0;
           break;
          }
        }
        
        
        if(jeste==1) // ako je pronadjena najcesca rijec u stringu izbacujemo rijec //
        {
          while(*kt!='\0')
          {
           *pok_string++=*kt++;
          }
          *pok_string='\0';
          p=p-(kt-pok_string);
        }
        

     }else p++;

   }
  
  return s;
 }
 
 int main()
 {
  
  
  
 char t[]="" Koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"";
 printf(""'%s'"", izbaci_najcescu(t));

  return 0;
 }"
6567,56,56,1,19,A2016/Z2/Z2/student5660,A2016/Z2/Z2/student7888,"#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
	int i, j, brUglova, sekF, ste, min;
	double niz[500] = {0}, sek;

	printf (""Unesite broj uglova: "");
	scanf (""%d"", &brUglova);

	for (i = 0; i < brUglova; i++)
	{
		scanf (""%lf"", &niz[i]);
		niz[i]*=180./PI;
	}
	
	for (i = 0; i < brUglova; i++)
	{
		
		sek = fabs(60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))));
		
		sek += 0.5;
		
		sekF = sek;
		if (sekF == 60) sekF = 0;
		if (sekF > 30)
			{
				for(j = i; j < brUglova; j++)
					niz[j] = niz[j+1];
				brUglova--;
				i--;
			}
	}
	
	
	printf (""Uglovi su: \n"");
	
	for (i = 0; i < brUglova; i++)
	{
		ste = niz[i];
		min = abs((60*(niz[i]-(int)niz[i])));
		if (niz[i] >= 0)
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))+0.5));
		else 
		sek = fabs((int)((60 * ((60*(niz[i] - (int)(niz[i]))) - (int)(60*(niz[i] - (int)(niz[i])))))-0.5));
		
		if (fabs(sek - 60) < eps) { min++; sek = 0;}
		if (niz[i] >= 0)
		{
			if (min >= 60) { ste++; min = 0;}
		}
		else 
			if (min >= 60) { ste--; min = 0;}
		sekF = sek;
		printf (""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
	}
	
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define PI 3.1415926
#define eps 0.0000000000000000000000000000000000000000000001

int main()
{
    int i,j,sekF,ste,min;
    int brUglova;
    double uglovi[500] = {0},sek,a;
    
    printf(""Unesite broj uglova: "");
    scanf(""%d"", &brUglova);
    i=0;
    while(i<brUglova)
    {
        scanf(""%lf"",&uglovi[i]);
        uglovi[i]*=180./PI;
        i++;
    }
    i=0;
    while(i<brUglova)
{
    a=((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i]))));
    sek=fabs(60*a);
    sek+=0.5;
    sekF=sek;
    if(sekF==60)     sekF=0;
    if(sekF>30)
    {
        j=i;
        while(j<brUglova)
        {
            uglovi[j]=uglovi[j+1];
            j++;
        }
        brUglova--;
        i--;
    }
    i++;
}
printf(""Uglovi su: \n"");

i=0;
while(i<brUglova)
{
    ste=uglovi[i];
    min=abs((60*(uglovi[i]-(int)uglovi[i])));
    if(uglovi[i]>=0)
    sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))+0.5));
else
sek=fabs((int)((60*((60*(uglovi[i]-(int)(uglovi[i])))-(int)(60*(uglovi[i]-(int)(uglovi[i])))))-0.5));
if (fabs(sek-60)<eps){ min++; sek=0;}
if(uglovi[i]>=0)
{
    if(min>=60) { ste++; min=0; }
}
else 
if(min>=60) { ste--; min=0; }
sekF=sek;
printf(""%d stepeni %d minuta %d sekundi\n"", ste, min, sekF);
i++;
}

return 0;
}"
6574,96,96,1,21,A2016/Z1/Z2/student8187,A2016/Z1/Z2/student3631,"#include <stdio.h>
#define epsilon 0.01
#include <math.h>

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1,&b1,&a2,&b2);
	if (fabs(a1-a2)<epsilon && fabs(b1-b2)>epsilon)
	{
		printf (""Paralelne su"");
		return 0;
	}
	else if (fabs(a1-a2)<epsilon && fabs(b1-b2)<epsilon)
	{
		printf (""Poklapaju se"");
		return 0;
	}
	
	else 
	{
	x=(b2-b1)/(a1-a2);
	y=a1*x+b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f)"", x,y);
	return 0;
	}
	return 0;
}
","#include <stdio.h>
#include <math.h>
#define EPSILON 0.1

int main() {
	float a1,b1,a2,b2,y,x;
	printf (""Unesite a1,b1,a2,b2: "");
	scanf (""%f,%f,%f,%f"", &a1, &b1, &a2, &b2);
	
	if (fabs(a1-a2)<EPSILON  && fabs(b1-b2)>EPSILON) { printf (""Paralelne su""); return 0;}
    else if (fabs(a1-a2)<EPSILON && fabs(b1-b2)<EPSILON) {printf (""Poklapaju se""); return 0;}
    else {
    x=(b2-b1)/(a1-a2);
	y=a1*x + b1;
	printf (""Prave se sijeku u tacci (%.1f,%.1f) "", x,y); return 0;}
	return 0;
}
"
6580,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
6582,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h>
#include <stdlib.h>

int main() {
	int n, m=0, x=1, c1, c2, r;
	printf (""Unesite broj: "");
	scanf (""%d"", &n);
	 n=abs(n);
	
	if (n <10) {
		printf (""0""); return 0; 
	}
	do {
		c1 = n%10;
		n=n/10;
		c2=n%10;
		r=abs(c1-c2);
		m=m+x*r;
		x=x*10;
	}
	while (n>9);
	printf (""%d"", m);
	return 0;
}
","#include <stdio.h>
#include <stdlib.h>
int main() {
	int broj,rezultat,cifra1,cifra2,nbroj=0,p=1;
	printf(""Unesite broj: "");
	scanf(""%d"",&broj);
	if (broj<0){
		broj=(abs(broj));}
	if(broj<10){
		printf(""0"");return 0;
	}
	else {
		do {
			cifra1=broj%10;
			broj=broj/10;
			cifra2=broj%10;
			rezultat=abs(cifra1-cifra2);
			nbroj=nbroj+(p*rezultat);
			p=p*10;
	}
	while (broj>9);
	printf(""%d"",nbroj);
	}
	return 0;
}
"
6585,93,93,1,140,A2016/Z3/Z3/student2585,A2016/Z3/Z3/student3671,"#include <stdio.h>

int main() {
	int M, N, i, j, z, k, w, p, r, b, t, d, x, c, a, h, niz[200], niz2[200], niz3[200];
	int matrica[200][200];

	do //unos dimenzija matrice i provjera 
	{
	printf(""Unesite brojeve M i N: "");
	scanf(""%d %d"", &M, &N);
	if(M<=0 || N<=0 || M>200 || N>200) printf(""Brojevi nisu u trazenom opsegu.\n"");
		
	} while(M<=0 || N<=0 || M>200 || N>200);
	
	//unos matrice 
	printf(""Unesite elemente matrice: "");
	for(i=0; i<M; i++) 
	{
		for(j=0; j<N; j++)
		{
			scanf(""%d"", &matrica[i][j]);
		}
	}
	
	for(i=0; i<M; i++)
	{

		
		for(j=0; j<N; j++)
		{
			niz[j]=matrica[i][j]; 
		}
		
	

		for(t=i+1; t<M; t++)
		{
			niz2[t]=1;
		}
		for(z=i+1; z<M; z++)
		{
			for(k=0; k<N; k++)
			{
				if(niz[k]!=matrica[z][k]) //provjeravamo svaki clan niza da li je jednak clanu matrice i ako nije dodjeljujemo mu vrijednost nula umjesto jedinice 
				{
					niz2[z]=0;
				}

				
			}
		}

		
	int ch=0; //broj promijenjenih 
		for(w=i+1; w<M; w++)
		{
			if(niz2[w]==1) //ako su svi elementi isti 
			{
				if(ch>0) i++;
				ch++;
				for(r=w; r<M-1; r++)
				{
					for(p=0; p<N; p++)
					{
						matrica[r][p]=matrica[r+1][p]; //izbacivanje reda matrice tako sto prepisemo naredni u taj koji zelimo izbaciti 
					}
				niz2[r]=niz2[r+1];	
				}
			
			M--; //smanjuje se dimenzija jer smo izbacili red 
			i--; //smanjuje se broj indeksa takodjer zbog izbacivanja 
			}
		}
	}
	
//provjera kolona na isti nacin kao sto smo provjeravali i redove 
for(j=0; j<N; j++)
{
		
		for(i=0; i<M; i++)
		{
			niz[i]=matrica[i][j];
		}
		
	
		
		for(h=j+1; h<N; h++)
		{
			niz3[h]=1; //niz jedinica koji cemo po potrebi prebacivati u nule nakon provjere da li su clanovi isti 
		}
		
	
	
	    for(a=j+1; a<N; a++)
	    {
		for(b=0; b<M; b++)
		{
			if(niz[b]!=matrica[b][a]) //da li je clan niza jednak clanu matrice 
			{
				niz3[a]=0; //umjesto jedinica u nizu smo stavili nule jer clanovi nisu isti 
			}
		}
	    }
	int ch=0;
	for(x=1+j; x<N; x++)
	{
		if(niz3[x]==1)
		{
			if(ch>0) j++;
			ch++;
			
			for(d=x; d<N-1; d++)
			{
				for(c=0; c<M; c++)
				{
					matrica[c][d]=matrica[c][d+1]; //prepisivanje naredne kolone u prethodnu 
				}
				niz3[d]=niz3[d+1];
			}
			N--; //smanjenje dimenzije kolona matrice 
			j--; //smanjenje indeksa kolone 
		}
	}
}
	
	
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0; i<M; i++)
	{
		for(j=0; j<N; j++)
		{
			printf(""%5d"", matrica[i][j]); //ispis matrice nakon izbacivanja sa 5 mjesta rezervisanih u memoriji 
		}
		printf (""\n""); //nakon svakog ispisanog reda matrice prebacujemo u novi red 
	}
	
	
	
	
	
	
	
	return 0;
	
	
}
","#include <stdio.h>

int main() {
	int M=1,N=1;
	int i,j,k,m,n,p,q,g,h,a,b,x,d,e;
	int matrica[200][200];
	int red1[200],red2[200],red3[200]; 
	/* uvodjenje pomocnih redova radi kasnijeg poredjenja sa matricom */
	
	do{
		printf(""Unesite brojeve M i N: "");
		scanf(""%d %d"",&M,&N);
		if(M<=0 || N<=0 || M>200 || N>200)
		printf(""Brojevi nisu u trazenom opsegu.\n"");
	}while(M<=0 || M>200 || N<=0 || N>200);
	printf(""Unesite elemente matrice: "");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			scanf(""%d"",&matrica[i][j]);
		}
	}
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
			{
				red1[j]=matrica[i][j];
			}
			/* sve jedinice, svi elementi jedne vrste jednaki elementima druge vrste */
		for(k=i+1;k<M;k++)
		{
			red2[k]=1;
		}
		for(m=i+1;m<M;m++)
		{
			for(n=0;n<N;n++)
			{
				if(red1[n]!=matrica[m][n])
				red2[m]=0;
				/* ukoliko red nije jednak redu matrice vraca na nulu */
			}
		}
		
		int c=0; 
		for(p=i+1;p<M;p++)
		{
			if(red2[p]==1)
			{
				if(c>0)
				i++;
				c++;
			for(q=p;q<M-1;q++)
			{
				for(g=0;g<N;g++)
				{
					matrica[q][g]=matrica[q+1][g];  /* izbacuje vrstu */
				}
				red2[q]=red2[q+1];
			}
			M--; /*smanjuje se dimenzija matrice */
			i--; /* smanjuje se broj indeksa u redu*/
		}
		}
	}
	/* provjera kolona analogno vrstama */
	for(j=0;j<N;j++)
	{
		for(i=0;i<M;i++)
		{
			red1[i]=matrica[i][j];
		}
		for(h=j+1;h<N;h++)
		{
			red3[h]=1;
		}
		
		for(a=j+1;a<N;a++)
		{
			for(b=0;b<M;b++)
			{
				if(red1[b]!=matrica[b][a])
				red3[a]=0;
			}
		}
	
	int c=0;
	for(x=1+j;x<N;x++)
	{
		if(red3[x]==1)
		{
			if(c>0)
			j++;
			c++;
		for(d=x;d<N-1;d++)
		{
			for(e=0;e<M;e++)
			{
				matrica[e][d]=matrica[e][d+1]; /*izbacivanje kolona*/
			}
			red3[d]=red3[d+1];
		}
			N--; /*smanjenje broja kolona */
			j--; /* smanjenje broja indeksa u koloni*/
		}
	}
}
		
		
	printf(""Nakon izbacivanja redova/kolona matrica glasi: \n"");
	for(i=0;i<M;i++)
	{
		for(j=0;j<N;j++)
		{
			printf(""%5d"",matrica[i][j]);
		}
		printf(""\n"");
	}
	return 0;
}
"
