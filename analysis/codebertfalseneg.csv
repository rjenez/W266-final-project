,percent,label,plagiarized,lines,filename0,filename1,source0,source1
44,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
277,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
991,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
1313,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
1886,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
1906,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
1991,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
2228,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
2238,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
2275,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
2452,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
2560,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
2749,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
2821,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
3046,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
3062,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3458,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3459,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
3482,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
3492,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
3495,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
3534,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
3541,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
3546,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
3560,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
3561,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
3563,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
3564,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
3568,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
3577,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
3578,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
3600,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
3606,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
3618,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
3632,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
3638,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
3655,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
3657,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
3667,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
3670,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
3676,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
3680,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
3694,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3697,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3702,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
3705,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3706,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
3715,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
3719,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
3738,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
3749,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
3750,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
3754,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
3756,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
3757,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
3759,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
3792,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
3807,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
3817,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
3831,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
3834,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3840,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
3844,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
3846,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
3850,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3853,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
3855,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3863,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
3868,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
3876,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
3887,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
3893,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
3918,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
3919,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
3922,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
3931,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
3938,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
3949,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
3952,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
3960,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
3968,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
3971,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4004,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4020,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4026,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
4034,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
4037,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
4053,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4067,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4068,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
4086,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4093,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
4097,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4102,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4116,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
4117,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4124,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
4125,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
4139,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4146,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4156,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4160,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4169,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4177,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4199,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
4200,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4230,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4237,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4278,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4297,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
4314,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4329,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4335,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
4351,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
4360,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4365,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4378,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4394,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
4402,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
4405,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
4409,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4410,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4422,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
4428,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
4444,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4447,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
4461,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
4462,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4475,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
4502,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
4505,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4508,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
4527,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4533,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4551,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4564,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
4566,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4568,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4581,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4595,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4598,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
4600,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4629,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
4635,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
4639,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4642,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
4645,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4651,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4684,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
4686,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4691,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
4694,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4704,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
4709,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4712,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4727,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4738,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4740,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4741,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
4758,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4759,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
4770,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
4815,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4831,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
4832,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4835,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4836,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
4848,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4853,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4863,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4865,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4867,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
4877,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4882,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
4896,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
4935,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
4946,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
4949,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4951,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4955,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
4961,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4990,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
4992,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
5011,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5019,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5033,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
5047,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5049,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5057,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5077,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5088,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
5096,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5108,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5109,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
5110,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5112,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5133,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
5135,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
5139,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
5150,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
5151,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5152,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5160,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5161,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5165,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5171,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5180,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5195,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5199,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5209,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5220,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
5227,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
5235,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5240,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5243,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5252,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
5254,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5263,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
5266,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5274,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5276,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
5280,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5289,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5291,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
5292,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5303,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5315,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5321,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
5324,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5331,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
5335,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5344,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
5350,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5355,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5368,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
5373,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5380,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
5402,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5405,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5408,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5418,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5424,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5430,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
5435,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
5443,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5446,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5462,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5472,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5479,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5497,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
5517,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
5539,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
5545,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5555,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5557,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
5570,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5573,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5581,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
5593,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
5616,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5617,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
5629,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5653,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
5665,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
5666,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5675,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
5701,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5713,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5720,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
5722,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5725,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5728,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5748,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
5754,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
5756,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5759,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
5761,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5778,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5804,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
5808,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
5815,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5819,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5821,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5823,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
5826,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5835,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5840,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
5858,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
5860,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5868,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5869,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5881,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
5892,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5897,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
5903,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
5907,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
5911,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
5933,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
5937,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
5959,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
5971,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
5974,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
5988,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
6005,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
6006,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
6020,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
6026,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
6038,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
6045,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
6061,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
6062,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
6089,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
6090,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
6126,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
6131,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
6165,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
6166,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
6167,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
6169,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
6174,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
6178,51,51,1,12,A2016/Z2/Z1/student7386,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
6179,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
6210,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
6217,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
6229,98,98,1,119,A2016/Z4/Z2/student5939,A2016/Z4/Z2/student5581,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int izbroji ( char * ptr , char znak ) { int br = 0 ; while ( * ptr != '\0' ) { if ( * ptr == znak ) { br ++ ; } ptr ++ ; } return br ; } char * kdr ( char * txt , char * kod ) { int i , j ; char temp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < i ; j ++ ) { if ( izbroji ( txt , * ( kod + j ) ) > izbroji ( txt , * ( kod + i ) ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } else if ( izbroji ( txt , * ( kod + j ) ) == izbroji ( txt , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { temp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = temp ; } } } } char * ptr = txt ; while ( * ptr != '\0' ) { int poz = 0 ; char * b = kod ; while ( * b != * ptr ) { b ++ ; poz ++ ; } * ptr = 126 - poz ; ptr ++ ; } return txt ; } char * dekdr ( char * txt , char * kod ) { char * b = txt ; char * c ; while ( * b != '\0' ) { int poz = 0 ; c = kod ; while ( * c != '\0' ) { if ( * b == 126 - poz ) { * b = * c ; break ; } c ++ ; poz ++ ; } b ++ ; } return txt ; } int main ( ) { char txt [ 200 ] ; char kod [ 100 ] ; unesi ( txt , 200 ) ; printf ( ""%s\n"" , txt ) ; kdr ( txt , kod ) ; printf ( ""%s\n%s"" , kod , txt ) ; dekdr ( txt , kod ) ; printf ( ""\n%s"" , txt ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) { znak = getchar ( ) ; } int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } int prebroji ( char * s , char znak ) { int broj = 0 ; while ( * s != '\0' ) { if ( * s == znak ) { broj ++ ; } s ++ ; } return broj ; } char * kodiraj ( char * tekst , char * kod ) { int i , j ; char tmp ; for ( i = 0 ; i < 96 ; i ++ ) { * ( kod + i ) = 32 + i ; } * ( kod + i - 1 ) = '\0' ; for ( i = 0 ; i < 95 ; i ++ ) { for ( j = i ; j < 95 ; j ++ ) { if ( prebroji ( tekst , * ( kod + j ) ) > prebroji ( tekst , * ( kod + i ) ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } else if ( prebroji ( tekst , * ( kod + j ) ) == prebroji ( tekst , * ( kod + i ) ) ) { if ( * ( kod + j ) < * ( kod + i ) ) { tmp = * ( kod + i ) ; * ( kod + i ) = * ( kod + j ) ; * ( kod + j ) = tmp ; } } } } char * s = tekst ; while ( * s != '\0' ) { int pozicija = 0 ; char * a = kod ; while ( * a != * s ) { a ++ ; pozicija ++ ; } * s = 126 - pozicija ; s ++ ; } return tekst ; } char * dekodiraj ( char * tekst , char * kod ) { char * a = tekst ; char * b ; while ( * a != '\0' ) { int pozicija = 0 ; b = kod ; while ( * b != '\0' ) { if ( * a == 126 - pozicija ) { * a = * b ; break ; } b ++ ; pozicija ++ ; } a ++ ; } return tekst ; } int main ( ) { char tekst [ 200 ] ; char kod [ 100 ] ; unesi ( tekst , 200 ) ; printf ( ""%s\n"" , tekst ) ; kodiraj ( tekst , kod ) ; printf ( ""%s\n%s"" , kod , tekst ) ; dekodiraj ( tekst , kod ) ; printf ( ""\n%s"" , tekst ) ; return 0 ; }"
6234,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
6243,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
6266,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
6300,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
6305,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
6315,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
6324,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
6339,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
6354,91,91,1,61,A2016/Z3/Z3/student2953,A2016/Z3/Z3/student9805,"#include <stdio.h> int main ( ) { int mat [ 200 ] [ 200 ] , i , j , l , k , a , z ; int m , n ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( i = 1 ; i <= m ; i ++ ) { for ( j = 1 ; j <= n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( l = 1 ; l <= m ; l ++ ) { for ( i = l + 1 ; i <= m ; i ++ ) { a = 1 ; for ( j = 1 ; j <= n ; j ++ ) { if ( mat [ l ] [ j ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( z = i ; z <= m ; z ++ ) { for ( j = 1 ; j <= n ; j ++ ) { mat [ z ] [ j ] = mat [ z + 1 ] [ j ] ; } } i -- ; m -- ; } } } for ( k = 1 ; k <= n ; k ++ ) { for ( j = k + 1 ; j <= n ; j ++ ) { a = 1 ; for ( i = 1 ; i <= m ; i ++ ) { if ( mat [ i ] [ k ] != mat [ i ] [ j ] ) a = 0 ; } if ( a ) { for ( i = 1 ; i <= m ; i ++ ) { for ( z = j ; z <= n ; z ++ ) { mat [ i ] [ z ] = mat [ i ] [ z + 1 ] ; } } j -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 1 ; i <= m ; i ++ ) { printf ( "" "" ) ; for ( j = 1 ; j <= n ; j ++ ) { printf ( ""%4d "" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int matrica [ 200 ] [ 200 ] , m , n , red , kolona , pocetnired , pocetnakolona , jednakost , zavrsni ; do { printf ( ""unesite brojeve m i n:"" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || m > 200 || n <= 0 || n > 200 ) { printf ( "" brojevi nisu u trazenom opsegu.\n"" ) ; continue ; } } while ( m <= 0 || m > 200 || n <= 0 || n > 200 ) ; printf ( "" unesite elemente matrice: "" ) ; for ( red = 1 ; red <= m ; red ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { scanf ( ""%d"" , & matrica [ red ] [ kolona ] ) ; } } for ( pocetnired = 1 ; pocetnired <= m ; pocetnired ++ ) { for ( red = pocetnired + 1 ; red <= m ; red ++ ) { jednakost = 1 ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { if ( matrica [ pocetnired ] [ kolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( zavrsni = red ; zavrsni <= m ; zavrsni ++ ) { for ( kolona = 1 ; kolona <= n ; kolona ++ ) { matrica [ zavrsni ] [ kolona ] = matrica [ zavrsni + 1 ] [ kolona ] ; } } red -- ; m -- ; } } } for ( pocetnakolona = 1 ; pocetnakolona <= n ; pocetnakolona ++ ) { for ( kolona = pocetnakolona + 1 ; kolona <= n ; kolona ++ ) { jednakost = 1 ; for ( red = 1 ; red <= m ; red ++ ) { if ( matrica [ red ] [ pocetnakolona ] != matrica [ red ] [ kolona ] ) jednakost = 0 ; } if ( jednakost ) { for ( red = 1 ; red <= m ; red ++ ) { for ( zavrsni = kolona ; zavrsni <= n ; zavrsni ++ ) { matrica [ red ] [ zavrsni ] = matrica [ red ] [ zavrsni + 1 ] ; } } kolona -- ; n -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( red = 1 ; red <= m ; red ++ ) { printf ( "" "" ) ; for ( kolona = 1 ; kolona <= n ; kolona ++ ) { printf ( ""%4d "" , matrica [ red ] [ kolona ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
6413,52,52,1,80,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student8631,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjeristring ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != '(' ) return 0 ; else p ++ ; if ( * p == ',' ) return 0 ; while ( * p != ',' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == '(' ) return 0 ; p ++ ; } if ( * p != ',' ) return 0 ; else p ++ ; if ( * p == ')' ) return 0 ; while ( * p != ')' ) { if ( ( * p < '0' || * p > '9' ) && ( * p != '.' && * p != '-' ) ) return 0 ; if ( * p == '.' && * ( p - 1 ) == ',' ) return 0 ; p ++ ; } if ( * p != ')' ) return 0 ; else p ++ ; if ( * p != '\0' ) p ++ ; if ( * p == '\0' && * ( p - 1 ) != ')' ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; if ( * p == '\0' ) break ; else p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; if ( provjeristring ( s ) == 0 ) return 0 ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = ""(0.25,),(-15.09,4),(2.,2),(-1.1,217.12)"" ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; return 0 ; }"
6426,43,43,1,45,A2016/Z5/Z1/student2553,A2016/Z5/Z1/student1202,"#include <stdio.h> #include <math.h> #include <string.h> #define epsilon  0.0001 struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; int uporedidouble ( double a , double b ) { if ( fabs ( a - b ) < epsilon ) return 1 ; return 0 ; } double dajprosjek ( int ocjene [ ] , int brojocjena ) { int sumaocjena = 0 , i ; double prosjek ; if ( brojocjena > 0 ) { sumaocjena = 0 ; for ( i = 0 ; i < brojocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.0 ; return prosjek ; } sumaocjena += ocjene [ i ] ; } prosjek = ( double ) sumaocjena / brojocjena ; } else { prosjek = 5.0 ; } return prosjek ; } int genijalci ( struct student * studenti , int brojstud , double potrebanprosjek ) { int i = 0 , j = 0 , k ; char das [ 41 ] ; double prosjek = 0 ; struct majmun { char prezimeime [ 41 ] ; double prosjekocjena ; } ; struct majmun celavi_majmuni [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { celavi_majmuni [ i ] . prezimeime [ 0 ] = '\0' ; celavi_majmuni [ i ] . prosjekocjena = 0 ; } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek < potrebanprosjek ) { for ( j = i ; j < brojstud - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; brojstud -- ; } } for ( i = 0 ; i < brojstud ; i ++ ) { prosjek = dajprosjek ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek > celavi_majmuni [ j ] . prosjekocjena ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } else if ( uporedidouble ( prosjek , celavi_majmuni [ j ] . prosjekocjena ) ) { strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; if ( strcmp ( das , celavi_majmuni [ j ] . prezimeime ) < 0 ) { for ( k = 2 ; k > j ; k -- ) celavi_majmuni [ k ] = celavi_majmuni [ k - 1 ] ; strcpy ( das , studenti [ i ] . prezime ) ; strcat ( das , "" "" ) ; strcat ( das , studenti [ i ] . ime ) ; strcpy ( celavi_majmuni [ j ] . prezimeime , das ) ; celavi_majmuni [ j ] . prosjekocjena = prosjek ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , celavi_majmuni [ j ] . prezimeime ) ; } return brojstud ; } int main ( ) { { struct student studenti [ ] = { { ""meho"" , ""behic"" , { 10 , 9 } , 2 } , { ""meho"" , ""aehic"" , { 10 , 8 } , 2 } , { ""meho"" , ""cehic"" , { 10 , 9 , 8 , 7 , 6 } , 5 } , { ""meho"" , ""dehic"" , { 6 , 9 } , 2 } , { ""meho"" , ""zehic"" , { 10 } , 1 } , { ""meho"" , ""oehic"" , { 10 , 9 , 9 , 9 } , 4 } } ; int vel = sizeof studenti / sizeof studenti [ 0 ] , i ; vel = genijalci ( studenti , vel , 9. ) ; printf ( ""vel: %d\nstudenti:\n"" , vel ) ; for ( i = 0 ; i < vel ; ++ i ) printf ( ""%s %s\n"" , studenti [ i ] . prezime , studenti [ i ] . ime ) ; } return 0 ; }","#include <stdio.h> #include <stdlib.h> #include <string.h> #include <math.h> #define fabs 0.0001 void strcat ( char * s , char * t ) { while ( * s != '\0' ) s ++ ; for ( ; * t != '\0' ; s ++ , t ++ ) * s = * t ; * s = '\0' ; } int strcmp ( char * s , char * t ) { for ( ; * s == * t ; s ++ , t ++ ) { if ( * s == '\0' ) return 0 ; } return * s - * t ; } void strcpy ( char * s , char * t ) { while ( ( * s = * t ) != '\0' ) { s ++ ; t ++ ; } } struct student { char ime [ 20 ] , prezime [ 20 ] ; int ocjene [ 50 ] ; int br_ocjena ; } ; double prosjek_ ( int * ocjene , int br_ocjena ) { double prosjek ; int i ; if ( br_ocjena > 0 ) { prosjek = 0 ; for ( i = 0 ; i < br_ocjena ; i ++ ) { if ( ocjene [ i ] == 5 ) { prosjek = 5.00 ; return prosjek ; } prosjek += ocjene [ i ] ; } prosjek /= br_ocjena ; } else prosjek = 5.00 ; return prosjek ; } int genijalci ( struct student * studenti , int velicina_niza , double prosjek ) { int i , j , k ; char niz [ 45 ] ; double prosjek_o = 0 ; char ime_pre [ 3 ] [ 45 ] ; double prosjekk [ 3 ] ; for ( i = 0 ; i < 3 ; i ++ ) { ime_pre [ i ] [ 0 ] = '\0' ; prosjekk [ i ] = 0 ; } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; if ( prosjek_o < prosjek ) { for ( j = i ; j < velicina_niza - 1 ; j ++ ) { studenti [ j ] = studenti [ j + 1 ] ; } i -- ; velicina_niza -- ; } } for ( i = 0 ; i < velicina_niza ; i ++ ) { prosjek_o = prosjek_ ( studenti [ i ] . ocjene , studenti [ i ] . br_ocjena ) ; for ( j = 0 ; j < 3 ; j ++ ) { if ( prosjek_o > prosjekk [ j ] ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } else if ( fabs ( prosjek_o - prosjekk [ j ] ) < fabs ) { strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; if ( strcmp ( niz , ime_pre [ j ] ) < 0 ) { for ( k = 2 ; k > j ; k -- ) { strcpy ( ime_pre [ k ] , ime_pre [ k - 1 ] ) ; prosjekk [ k ] = prosjekk [ k - 1 ] ; } strcpy ( niz , studenti [ i ] . prezime ) ; strcat ( niz , "" "" ) ; strcat ( niz , studenti [ i ] . ime ) ; strcpy ( ime_pre [ j ] , niz ) ; prosjekk [ j ] = prosjek_o ; break ; } } } } for ( j = 0 ; j < 3 ; j ++ ) { printf ( ""%s\n"" , ime_pre [ j ] ) ; } return velicina_niza ; } int main ( ) { { struct student studenti [ 5 ] = { { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""pero"" , ""peric"" , { 8 , 8 , 8 , 8 , 7 } , 5 } , { ""beba"" , ""bebic"" , { 6 , 6 , 6 , 6 , 6 } , 5 } , { ""mujo"" , ""mujic"" , { 7 , 7 , 7 , 7 , 8 } , 5 } , { ""fata"" , ""fatic"" , { 7 , 7 , 7 , 8 , 8 } , 5 } , } ; genijalci ( studenti , 5 , 6.5 ) ; } return 0 ; }"
6431,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
6476,59,59,1,88,A2016/Z4/Z1/student8886,A2016/Z4/Z1/student8631,"#include <stdio.h> #include <ctype.h> char prazan_string [ 10000 ] ; void unesi ( char * niz , int vel ) { int i = 0 ; char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < vel - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * pronadji_najcescu ( char * s ) { char * p = s , * poc1 , * poc2 , * pocmax , * kraj , * krajmax , * pom1 , * k , * z , * w ; int brojac = 0 , max = 0 , i = 0 , ista ; while ( * p != '\0' ) { if ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) { poc1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kraj = p ; pom1 = p ; brojac = 1 ; while ( * pom1 != '\0' ) { if ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) { poc2 = pom1 ; while ( toupper ( * pom1 ) >= 'a' && toupper ( * pom1 ) <= 'z' ) pom1 ++ ; if ( * pom1 == ' ' || * pom1 == '\0' ) { ista = 1 ; k = poc1 ; z = poc2 ; while ( k != kraj ) { if ( toupper ( * k ++ ) != toupper ( * z ++ ) ) { ista = 0 ; break ; } } if ( ista == 1 ) brojac ++ ; } } else pom1 ++ ; } if ( brojac > max ) { pocmax = poc1 ; krajmax = kraj ; max = brojac ; } } } else p ++ ; } while ( pocmax != krajmax ) { prazan_string [ i ] = * pocmax ; i ++ ; * pocmax ++ ; } prazan_string [ i ] = '\0' ; w = & prazan_string [ 0 ] ; return w ; } char * izbaci_najcescu ( char * s ) { char * p = s , * poc1 , * kraj , * pom1 , * k , * q ; int jeste ; if ( * s == '\0' ) return 0 ; q = pronadji_najcescu ( p ) ; while ( * p != '\0' ) { if ( ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { poc1 = p ; pom1 = p ; while ( toupper ( * p ) >= 'a' && toupper ( * p ) <= 'z' ) p ++ ; k = q ; jeste = 1 ; kraj = p ; while ( poc1 != kraj ) { if ( toupper ( * k ++ ) != toupper ( * poc1 ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kraj != '\0' ) * pom1 ++ = * kraj ++ ; * pom1 = '\0' ; p = p - ( kraj - pom1 ) ; } } else p ++ ; } return s ; } int main ( ) { char string [ 10000 ] ; unesi ( string , 10000 ) ; printf ( ""'%s'"" , izbaci_najcescu ( string ) ) ; return 0 ; }","#include <stdio.h> #include <ctype.h> char string [ 1000 ] ; int najcesca ( char * pok_string , char * pt , char * kt ) { char * pt1 , * t , * r ; int pretpostavka , br = 1 ; while ( * pok_string != '\0' ) { if ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) { pt1 = pok_string ; while ( tolower ( * pok_string ) >= 'a' && tolower ( * pok_string ) <= 'z' ) pok_string ++ ; if ( * pok_string == ' ' || * pok_string == '\0' ) { pretpostavka = 1 ; t = pt ; r = pt1 ; while ( t != kt ) { if ( tolower ( * t ++ ) != tolower ( * r ++ ) ) { pretpostavka = 0 ; break ; } } if ( pretpostavka == 1 ) br ++ ; } } else pok_string ++ ; } return br ; } char * pronadjinajcescu ( char * s ) { char * p = s , * pok_string , * pt , * kt , * pm , * km , * a ; int br = 0 , max = 0 , i = 0 ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) { pt = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; if ( * p == ' ' || * p == '\0' ) { kt = p ; pok_string = p ; br = najcesca ( pok_string , pt , kt ) ; if ( br > max ) { string [ i ] = * pt ; pm = pt ; km = kt ; max = br ; i = 0 ; while ( pm != km ) { string [ i ++ ] = * pm ++ ; } string [ i ] = '\0' ; } } } else p ++ ; } a = & string [ 0 ] ; return a ; } char * izbaci_najcescu ( char * s ) { char * p = s , * pt , * kt , * pok_string , * pok , * t ; int jeste ; if ( * s == '\0' ) return 0 ; pok = pronadjinajcescu ( p ) ; while ( * p != '\0' ) { if ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' && ( * ( p + 1 ) != ' ' || * ( p + 1 ) == '\0' ) ) { pt = p ; pok_string = p ; while ( tolower ( * p ) >= 'a' && tolower ( * p ) <= 'z' ) p ++ ; t = pok ; jeste = 1 ; kt = p ; while ( pt != kt ) { if ( tolower ( * t ++ ) != tolower ( * pt ++ ) ) { jeste = 0 ; break ; } } if ( jeste == 1 ) { while ( * kt != '\0' ) { * pok_string ++ = * kt ++ ; } * pok_string = '\0' ; p = p - ( kt - pok_string ) ; } } else p ++ ; } return s ; } int main ( ) { char t [ ] = "" koristio sam auto-stop da dodjem do znaka stop ali prije stopa sam otvorio dekstop kompjutera stop"" ; printf ( ""'%s'"" , izbaci_najcescu ( t ) ) ; return 0 ; }"
6481,86,86,1,60,A2016/Z3/Z3/student5284,A2016/Z3/Z3/student3219,"#include <stdio.h> int main ( ) { int i , j , k , z , y ; int mat [ 200 ] [ 200 ] ; int m , n ; int pret = 1 ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m <= 0 || n > 200 || ( n <= 0 || m > 200 ) ) printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } while ( m < 1 || n > 200 || ( n < 1 || m > 200 ) ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { pret = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < m - 1 ; z ++ ) { for ( y = 0 ; y < n ; y ++ ) { mat [ z ] [ y ] = mat [ z + 1 ] [ y ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { pret = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) pret = 0 ; } if ( pret == 1 ) { for ( z = j ; z < n - 1 ; z ++ ) { for ( y = 0 ; y < m ; y ++ ) { mat [ y ] [ z ] = mat [ y ] [ z + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }","#include <stdio.h> int main ( ) { int m , n , i , j , mat [ 200 ] [ 200 ] , k , isti , l ; do { printf ( ""unesite brojeve m i n: "" ) ; scanf ( ""%d %d"" , & m , & n ) ; if ( m < 1 || n < 1 || m > 200 || n > 200 ) { printf ( ""brojevi nisu u trazenom opsegu.\n"" ) ; } } while ( m < 1 || n < 1 || m > 200 || n > 200 ) ; printf ( ""unesite elemente matrice: "" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { scanf ( ""%d"" , & mat [ i ] [ j ] ) ; } } for ( i = 0 ; i < m - 1 ; i ++ ) { for ( j = i + 1 ; j < m ; j ++ ) { isti = 1 ; for ( k = 0 ; k < n ; k ++ ) { if ( mat [ i ] [ k ] != mat [ j ] [ k ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < m - 1 ; l ++ ) { for ( k = 0 ; k < n ; k ++ ) { mat [ l ] [ k ] = mat [ l + 1 ] [ k ] ; } } m -- ; j -- ; } } } for ( i = 0 ; i < n - 1 ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { isti = 1 ; for ( k = 0 ; k < m ; k ++ ) { if ( mat [ k ] [ i ] != mat [ k ] [ j ] ) { isti = 0 ; break ; } } if ( isti == 1 ) { for ( l = j ; l < n - 1 ; l ++ ) { for ( k = 0 ; k < m ; k ++ ) { mat [ k ] [ l ] = mat [ k ] [ l + 1 ] ; } } n -- ; j -- ; } } } printf ( ""nakon izbacivanja redova/kolona matrica glasi:\n"" ) ; for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) { printf ( ""%5d"" , mat [ i ] [ j ] ) ; } printf ( ""\n"" ) ; } return 0 ; }"
6485,17,17,1,49,A2016/Z5/Z3/student4082,A2016/Z5/Z3/student5378,"#include <stdio.h> #include<string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * dat = fopen ( ""raspored.dat"" , ""rb"" ) ; if ( dat == null ) return 0 ; int ucitanih = fread ( raspored , sizeof ( struct cas ) , kapacitet , dat ) ; fclose ( dat ) ; return ucitanih ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * dat = fopen ( ""raspored.dat"" , ""wb"" ) ; int ucitano = fwrite ( raspored , sizeof ( struct cas ) , broj_casova , dat ) ; fclose ( dat ) ; if ( ucitano > 0 ) return 1 ; return ucitano ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; } } if ( raspored [ indexmaxa ] . kraj . minute == 0 ) max = max - 1 ; return max ; } int min ( struct cas raspored [ ] , int broj_casova ) { int i , j , min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } return min ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = min ( raspored , broj_casova ) ; printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""%d:00   "" , i ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) if ( raspored [ k ] . pocetak . sati <= i && raspored [ k ] . dan_u_sedmici == j && raspored [ k ] . kraj . sati >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int i ; int minpoc1 , minpoc2 , minkraj1 , minkraj2 ; for ( i = 0 ; i < broj_casova ; i ++ ) { minpoc1 = raspored [ i ] . pocetak . minute + raspored [ i ] . pocetak . sati * 60 ; minkraj1 = raspored [ i ] . kraj . minute + raspored [ i ] . kraj . sati * 60 ; minpoc2 = cas . pocetak . minute + cas . pocetak . sati * 60 ; minkraj2 = cas . kraj . minute + cas . kraj . sati * 60 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc2 == minpoc1 || minkraj1 == minkraj2 ) ) return 1 ; if ( raspored [ i ] . dan_u_sedmici == cas . dan_u_sedmici && ( minpoc1 < minpoc2 && minkraj1 > minpoc2 || minpoc2 < minpoc1 && minkraj2 > minkraj1 || minpoc1 < minkraj2 && minkraj1 > minkraj2 ) ) return 1 ; } return 0 ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int i ; printf ( ""uneseni su casovi: "" ) ; int k = 1 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s ("" , k ++ , raspored [ i ] . predmet ) ; if ( raspored [ i ] . pocetak . sati < 10 ) printf ( ""0"" ) ; printf ( ""%d:"" , raspored [ i ] . pocetak . sati ) ; if ( raspored [ i ] . pocetak . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d-"" , raspored [ i ] . pocetak . minute ) ; if ( raspored [ i ] . kraj . sati < 10 ) printf ( '0' ) ; printf ( ""%d:"" , raspored [ i ] . kraj . sati ) ; if ( raspored [ i ] . kraj . minute < 10 ) printf ( ""0"" ) ; printf ( ""%d)"" , raspored [ i ] . kraj . minute ) ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { int j ; for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; } break ; } } } struct cas prekopiraj ( int i , int k , int trajanje , char * predmet ) { struct cas cas ; strcpy ( cas . predmet , predmet ) ; cas . dan_u_sedmici = i ; cas . pocetak . sati = k ; cas . kraj . sati = k + trajanje ; cas . pocetak . minute = cas . kraj . minute = 0 ; return cas ; } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { if ( broj_casova == 200 || trajanje > 10 ) return 0 ; int i , k , pocetak , dan , moze = 0 ; struct cas cas ; for ( i = 1 ; 1 < 7 ; i ++ ) for ( k = 9 ; k <= 19 - trajanje ; k ++ ) { cas = prekopiraj ( i , k , trajanje , predmet ) ; if ( preklapanje ( raspored , broj_casova , cas ) == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } } return 0 ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) { raspored [ i ] = promjena ; return ; } } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs ; char ime [ 100 ] ; int zap ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; scanf ( ""%d"" , & br ) ; int nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; else ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: "" ) ; int sat , min ; char z ; scanf ( ""%d%c%d"" , & sat , & z , & min ) ; printf ( ""vrijeme zavrsetka: "" ) ; int sat1 , min1 ; char z1 ; scanf ( ""%d%c%d"" , & sat1 , & z1 , & min1 ) ; struct cas casko = { ime , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; casko . dan_u_sedmici = dan ; casko . pocetak . sati = sat ; casko . pocetak . minute = min ; casko . kraj . sati = sat1 ; casko . kraj . minute = min1 ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; ucit -- ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }","#include <stdio.h> #include <string.h> #define kapacitet 200 struct vrijeme { int sati , minute , sekunde ; } ; struct cas { char predmet [ 10 ] ; int dan_u_sedmici ; struct vrijeme pocetak , kraj ; } ; void unesi ( char niz [ ] ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < 9 && znak != '\n' ) { niz [ i ++ ] = znak ; znak = getchar ( ) ; } niz [ i ] = '\0' ; while ( znak != '\n' ) znak = getchar ( ) ; } int ucitaj_datoteku ( struct cas raspored [ ] ) { file * ulaz = fopen ( ""raspored.dat"" , ""rb+"" ) ; int greska = 0 ; file * ulaz1 = fopen ( ""raspored.dat"" , ""rb+"" ) ; if ( ulaz == null || ulaz1 == null ) { greska = 1 ; return 0 ; } int ucitano , ucitano1 ; int vel = sizeof ( struct cas ) ; ucitano = fread ( raspored , vel , kapacitet , ulaz ) ; ucitano1 = fread ( raspored , vel , kapacitet , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( greska == 0 ) return ucitano1 ; else return 0 ; } int zapisi_datoteku ( struct cas raspored [ ] , int broj_casova ) { file * ulaz = fopen ( ""raspored.dat"" , ""wb+"" ) ; file * ulaz1 = fopen ( ""raspored.dat"" , ""wb+"" ) ; if ( ulaz == null || ulaz1 == null ) { return 0 ; } int vel = sizeof ( struct cas ) ; int nova = fwrite ( raspored , vel , broj_casova , ulaz ) ; int zapisano = fwrite ( raspored , vel , broj_casova , ulaz1 ) ; fclose ( ulaz ) ; fclose ( ulaz1 ) ; if ( nova == zapisano ) return 1 ; else return 0 ; } int max ( struct cas raspored [ ] , int broj_casova ) { int i , j , max = 0 , indexmaxa = 0 , min ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . kraj . sati > max ) { max = raspored [ i ] . kraj . sati ; indexmaxa = i ; min = raspored [ indexmaxa ] . kraj . minute ; } } if ( min == 0 ) max = max - 1 ; return max ; } void ispis_rasporeda ( struct cas raspored [ ] , int broj_casova ) { printf ( ""\n       pon       uto       sri       cet       pet       sub\n"" ) ; int i , j , k ; int max = max ( raspored , broj_casova ) ; int min = 25 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . pocetak . sati < min ) min = raspored [ i ] . pocetak . sati ; } for ( i = min ; i <= max ; i ++ ) { if ( i < 10 ) printf ( ""9:00   "" ) ; else printf ( ""%d:00  "" , i ) ; for ( j = 1 ; j < 7 ; j ++ ) { for ( k = 0 ; k < broj_casova ; k ++ ) { int sa = raspored [ k ] . kraj . sati ; int dan = raspored [ k ] . dan_u_sedmici ; int poc = raspored [ k ] . pocetak . sati ; if ( poc <= i && dan == j && sa >= i ) { printf ( ""%-10s"" , raspored [ k ] . predmet ) ; break ; } } if ( k == broj_casova ) printf ( ""          "" ) ; } printf ( ""\n"" ) ; } } int poredivrj ( struct vrijeme t1 , struct vrijeme t2 , int i ) { int sat = t1 . sati * 3600 , sat1 = t2 . sati * 3600 , min = t1 . minute * 60 , min1 = t2 . minute * 60 ; int d1 = sat + min + t1 . sekunde ; int d2 = sat1 + min1 + t2 . sekunde ; int ukpnosek = d1 + d2 ; if ( d1 > d2 ) return 1 ; else if ( d1 < d2 ) return - 1 ; else return 0 ; } int preklapanje ( struct cas raspored [ ] , int broj_casova , struct cas cas ) { int prekl = 0 ; int i ; int broj = broj_casova ; int dan = cas . dan_u_sedmici ; for ( i = 0 ; i < broj ; i ++ ) { int drugi = poredivrj ( cas . kraj , raspored [ i ] . pocetak , i ) ; int vr = poredivrj ( raspored [ i ] . kraj , cas . pocetak , i ) ; if ( i < 0 ) return prekl ; if ( dan == raspored [ i ] . dan_u_sedmici && vr == 1 && drugi == 1 ) { prekl = 1 ; break ; } } if ( i > - 1 ) return prekl ; } void ispisi_dan ( struct cas raspored [ ] , int broj_casova , int dan ) { int brojac = 1 , i ; printf ( ""uneseni su casovi: "" ) ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { printf ( ""\n%d) %s (%02d:%02d-%02d:%02d)"" , brojac , raspored [ i ] . predmet , raspored [ i ] . pocetak . sati , raspored [ i ] . pocetak . minute , raspored [ i ] . kraj . sati , raspored [ i ] . kraj . minute ) ; brojac ++ ; } } } void obrisi_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj ) { int i ; int k = 0 ; int j ; int brojac = 1 ; int obrisanih = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) { k ++ ; if ( k == redni_broj ) { for ( j = i ; j < broj_casova - 1 ; j ++ ) { raspored [ j ] = raspored [ j + 1 ] ; obrisanih ++ ; } if ( brojac > 0 && obrisanih > 0 ) break ; } brojac ++ ; } } } int dodaj_cas ( struct cas raspored [ ] , int broj_casova , const char * predmet , int trajanje ) { int i , j , preklop , brojac = 1 ; int ukupno = broj_casova ; if ( ukupno == 200 ) return 0 ; for ( i = 0 ; i < 6 ; i ++ ) for ( j = 9 ; j <= 19 - trajanje ; j ++ ) { struct cas cas = { """" , i + 1 , { j , 0 , 0 } , { j + trajanje , 0 , 0 } } ; strcpy ( cas . predmet , predmet ) ; struct cas pom = { """" , i , { j , 0 , 0 } , { j , 0 , 0 } } ; preklop = preklapanje ( raspored , broj_casova , cas ) ; int pom1 = preklapanje ( raspored , broj_casova , cas ) ; if ( preklop == 0 ) { raspored [ broj_casova ] = cas ; return 1 ; } brojac ++ ; } if ( brojac > 0 ) return 0 ; } struct cas pr ( int dan , int sat , int min , int sat1 , int min1 , char * ime ) { struct cas casko = { """" , dan , { sat , min , 0 } , { sat1 , min1 , 0 } } ; strcpy ( casko . predmet , ime ) ; return casko ; } void promijeni_cas ( struct cas raspored [ ] , int broj_casova , int dan , int redni_broj , struct cas promjena ) { int i ; int k = 0 ; for ( i = 0 ; i < broj_casova ; i ++ ) { if ( raspored [ i ] . dan_u_sedmici == dan ) k ++ ; if ( k == redni_broj ) raspored [ i ] = promjena ; } } int main ( ) { struct cas raspored [ kapacitet ] ; int ucit = ucitaj_datoteku ( raspored ) ; int broj , br , dan , cs , zap ; char ime [ 100 ] ; do { printf ( ""1) ispis rasporeda\n2) dodavanje casa\n3) promjena casa\n4) brisanje casa\n0) kraj rada\nizaberite opciju: "" ) ; scanf ( ""%d"" , & broj ) ; switch ( broj ) { case 4 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite obrisati: "" ) ; scanf ( ""%d"" , & cs ) ; ucit -- ; obrisi_cas ( raspored , ucit , dan , cs ) ; printf ( ""cas obrisan\n"" ) ; break ; case 1 : ispis_rasporeda ( raspored , ucit ) ; break ; case 2 : printf ( ""unesite naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""unesite broj casova: "" ) ; int nema ; scanf ( ""%d"" , & br ) ; nema = dodaj_cas ( raspored , ucit , ime , br ) ; if ( nema == 0 ) printf ( ""nema dovoljno mjesta u rasporedu za %d casova.\n"" , br ) ; if ( nema == 1 ) ucit ++ ; break ; case 3 : printf ( ""unesite dan (1=ponedjeljak, 2=utorak..., 6=subota): "" ) ; scanf ( ""%d"" , & dan ) ; ispisi_dan ( raspored , ucit , dan ) ; printf ( ""\nizaberite koji cas zelite promijeniti: "" ) ; scanf ( ""%d"" , & cs ) ; printf ( ""naziv predmeta: "" ) ; unesi ( ime ) ; printf ( ""vrijeme pocetka: vrijeme zavrsetka: "" ) ; int sat , min , sat1 , min1 ; char z , z1 ; scanf ( ""%d"" , & sat ) ; scanf ( ""%c"" , & z ) ; scanf ( ""%d"" , & min ) ; scanf ( ""%d"" , & sat1 ) ; scanf ( ""%c"" , & z1 ) ; scanf ( ""%d"" , & min1 ) ; struct cas casko = pr ( dan , sat , min , sat1 , min1 , ime ) ; promijeni_cas ( raspored , ucit , dan , cs , casko ) ; break ; break ; case 0 : zap = zapisi_datoteku ( raspored , ucit ) ; return 0 ; } } while ( broj != 0 ) ; return 0 ; }"
6496,55,55,1,90,A2016/Z5/Z2/student4438,A2016/Z5/Z2/student4973,"#include <stdio.h> #include <string.h> int isletter ( char c ) { if ( ( c >= 65 && c <= 90 ) || ( c >= 97 && c <= 122 ) ) return 1 ; return 0 ; } int checkfile ( file * f ) { if ( f == null ) { printf ( ""datoteka ne postoji.\n"" ) ; return 0 ; } return 1 ; } void oslobodiresurse ( file * ulaz , file * izlaz ) { fclose ( ulaz ) ; fclose ( izlaz ) ; } char loadword ( char * rijec , file * file ) { char c ; while ( 1 ) { c = getc ( file ) ; if ( ! isletter ( c ) ) break ; * rijec = c ; rijec ++ ; } * rijec = '\0' ; return c ; } int kompresuj ( char * ulazna , char * izlazna ) { char rijec [ 100 ] ; char rijeci [ 1000 ] [ 10 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , opt , i , j ; file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; char tmp [ 10 ] , c ; int najvecarijec = 0 ; int maxbrrijeci = 10 ; int tmpduzina = 0 ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) { duzine [ opt ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , rijec ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxbrrijeci ) maxbrrijeci = brojrijeci ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { najvecarijec = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najvecarijec ] < duzine [ j ] ) najvecarijec = j ; else if ( duzine [ najvecarijec ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najvecarijec ] ) < 0 ) najvecarijec = j ; } if ( najvecarijec != i ) { strcpy ( tmp , rijeci [ najvecarijec ] ) ; strcpy ( rijeci [ najvecarijec ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najvecarijec ] ; duzine [ najvecarijec ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxbrrijeci ; i ++ ) fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulazna , ""r"" ) ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) > 1 && strlen ( rijec ) < 10 ) { opt = - 1 ; for ( i = 0 ; i < maxbrrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , rijec ) == 0 ) { opt = i ; break ; } } if ( opt != - 1 ) fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; else fprintf ( izlaz , ""%s"" , rijec ) ; } else fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulazna , char * izlazna ) { file * ulaz = fopen ( ulazna , ""r"" ) ; file * izlaz = fopen ( izlazna , ""w"" ) ; if ( checkfile ( ulaz ) == 0 ) return 0 ; if ( checkfile ( izlaz ) == 0 ) return 0 ; char c , rijeci [ 10 ] [ 10 ] , rijec [ 20 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( rijec [ 0 ] == '\0' ) break ; strcpy ( rijeci [ brojrijeci ++ ] , rijec ) ; } while ( 1 ) { c = loadword ( rijec , ulaz ) ; if ( strlen ( rijec ) == 0 && c >= 20 && c <= 29 ) fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; else { fprintf ( izlaz , ""%s"" , rijec ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } oslobodiresurse ( ulaz , izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int opcija , status ; char c , ulazna [ 50 ] , izlazna [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & opcija ) ; c = getchar ( ) ; if ( opcija == 0 ) break ; if ( opcija == 1 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = kompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa kompresijom.\n"" ) ; } else if ( opcija == 2 ) { printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulazna ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlazna ) ; status = dekompresuj ( ulazna , izlazna ) ; if ( status == 0 ) printf ( ""nesto nije u radu sa dekompresijom.\n"" ) ; } } while ( 1 ) ; return 0 ; }","#include <stdio.h> #include <string.h> char ucitajjednurijec ( char * buffer , file * datoteka ) { int i = 0 ; char c ; while ( 1 ) { c = getc ( datoteka ) ; if ( ! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'a' && c <= 'z' ) ) ) break ; if ( i < 500 ) ; buffer [ i ++ ] = c ; } buffer [ i ] = '\0' ; return c ; } int kompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { char buffer [ 100 ] ; file * ulaz = fopen ( ulaznadatoteka , ""r"" ) ; file * izlaz = fopen ( izlaznadatoteka , ""w"" ) ; char tmp [ 15 ] ; int najveca = 0 , maxrijeci = 10 , tmpduzina ; if ( ulaz == null ) return 0 ; char rijeci [ 1000 ] [ 15 ] ; int duzine [ 1000 ] , duzina , brojrijeci = 0 , pomocna , i , j ; char c ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < brojrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { duzine [ pomocna ] ++ ; } else { strcpy ( rijeci [ brojrijeci ] , buffer ) ; duzine [ brojrijeci ] = 1 ; brojrijeci ++ ; } } if ( c == eof ) break ; } if ( brojrijeci < maxrijeci ) maxrijeci = brojrijeci ; for ( i = 0 ; i < maxrijeci ; i ++ ) { najveca = i ; for ( j = i + 1 ; j < brojrijeci ; j ++ ) { if ( duzine [ najveca ] < duzine [ j ] ) { najveca = j ; } else if ( duzine [ najveca ] == duzine [ j ] && strcmp ( rijeci [ j ] , rijeci [ najveca ] ) < 0 ) { najveca = j ; } } if ( najveca != i ) { strcpy ( tmp , rijeci [ najveca ] ) ; strcpy ( rijeci [ najveca ] , rijeci [ i ] ) ; strcpy ( rijeci [ i ] , tmp ) ; tmpduzina = duzine [ najveca ] ; duzine [ najveca ] = duzine [ i ] ; duzine [ i ] = tmpduzina ; } } for ( i = 0 ; i < maxrijeci ; i ++ ) { fprintf ( izlaz , ""%s\n"" , rijeci [ i ] ) ; } fprintf ( izlaz , ""\n"" ) ; fclose ( ulaz ) ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina > 1 && duzina < 10 ) { pomocna = - 1 ; for ( i = 0 ; i < maxrijeci ; i ++ ) { if ( strcmp ( rijeci [ i ] , buffer ) == 0 ) { pomocna = i ; break ; } } if ( pomocna != - 1 ) { fprintf ( izlaz , ""%c"" , ( char ) ( 20 + i ) ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; } } else { fprintf ( izlaz , ""%s"" , buffer ) ; } fprintf ( izlaz , ""%c"" , c ) ; if ( c == eof ) break ; } fclose ( izlaz ) ; printf ( ""datoteka kompresovana.\n"" ) ; return 1 ; } int dekompresuj ( char * ulaznadatoteka , char * izlaznadatoteka ) { file * ulaz , * izlaz ; ulaz = fopen ( ulaznadatoteka , ""r"" ) ; if ( ulaz == null ) return 0 ; izlaz = fopen ( izlaznadatoteka , ""w"" ) ; if ( izlaz == null ) { fclose ( ulaz ) ; return 0 ; } char c , rijeci [ 15 ] [ 10 ] , buffer [ 50 ] ; int i , j , brojrijeci = 0 , duzina ; while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; if ( buffer [ 0 ] == '\0' ) { break ; } strcpy ( rijeci [ brojrijeci ++ ] , buffer ) ; } while ( 1 ) { c = ucitajjednurijec ( buffer , ulaz ) ; duzina = strlen ( buffer ) ; if ( duzina == 0 && c >= 20 && c <= 29 ) { fprintf ( izlaz , ""%s"" , rijeci [ c - 20 ] ) ; } else { fprintf ( izlaz , ""%s"" , buffer ) ; fprintf ( izlaz , ""%c"" , c ) ; } if ( c == eof ) break ; } fclose ( ulaz ) ; fclose ( izlaz ) ; printf ( ""datoteka dekompresovana.\n"" ) ; return 1 ; } int main ( ) { int pom , rezultat ; char c ; char ulaznadatoteka [ 50 ] , izlaznadatoteka [ 50 ] ; do { printf ( ""odaberite: 1 - kompresuj, 2 - dekompresuj, 0 - izlaz: "" ) ; scanf ( ""%d"" , & pom ) ; c = getchar ( ) ; if ( pom == 0 ) return 0 ; printf ( ""unesite ime ulazne datoteke: "" ) ; scanf ( ""%50s"" , ulaznadatoteka ) ; printf ( ""unesite ime izlazne datoteke: "" ) ; scanf ( ""%50s"" , izlaznadatoteka ) ; if ( pom == 1 ) { rezultat = kompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } if ( pom == 2 ) { rezultat = dekompresuj ( ulaznadatoteka , izlaznadatoteka ) ; } } while ( pom != 0 ) ; return 0 ; }"
6499,99,99,1,136,A2016/Z1/Z1/student5512,A2016/Z1/Z1/student4852,"#include <stdio.h> int main ( ) { double tb , bb , mb , p1 , p2 , p , dz , zi , bp1 , bp2 , bp , bdz , bzi , mp1 , mp2 , mp , mdz , mzi ; int ot , ob , om ; printf ( ""unesite bodove za tarika: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p1 ) ; if ( p1 > 20 || p1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & p2 ) ; if ( p2 > 20 || p2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & dz ) ; if ( dz > 10 || dz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } tb = p1 + p2 + p + dz + zi ; printf ( ""unesite bodove za bojana: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp1 ) ; if ( bp1 > 20 || bp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & bp2 ) ; if ( bp2 > 20 || bp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & bp ) ; if ( bp > 10 || bp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & bdz ) ; if ( bdz > 10 || bdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & bzi ) ; if ( bzi > 40 || bzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = bp1 + bp2 + bp + bdz + bzi ; printf ( ""unesite bodove za mirzu: \n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp1 ) ; if ( mp1 > 20 || mp1 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & mp2 ) ; if ( mp2 > 20 || mp2 < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & mp ) ; if ( mp > 10 || mp < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & mdz ) ; if ( mdz > 10 || mdz < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & mzi ) ; if ( mzi > 40 || mzi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } mb = mp1 + mp1 + mp + mdz + mzi ; if ( tb >= 55 && tb < 65 ) ot = 6 ; else if ( tb >= 65 && tb < 75 ) ot = 7 ; else if ( tb >= 75 && tb < 85 ) ot = 8 ; else if ( tb >= 85 && tb < 92 ) ot = 9 ; else if ( tb >= 92 && tb <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 0 ; if ( mb >= 55 && mb < 65 ) om = 6 ; else if ( mb >= 65 && mb < 75 ) om = 7 ; else if ( mb >= 75 && mb < 85 ) om = 8 ; else if ( mb >= 85 && mb < 92 ) om = 9 ; else if ( mb >= 92 && mb <= 100 ) om = 10 ; else om = 0 ; if ( ot < 6 && ob < 6 && om < 6 ) printf ( ""nijedan student nije polozio."" ) ; if ( tb >= 55 && bb >= 55 && mb >= 55 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ot == ob || ob == om || om == ot ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( tb >= 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb >= 55 ) || ( tb >= 55 && bb < 55 && mb >= 55 ) ) printf ( ""dva studenta su polozila."" ) ; if ( ( tb >= 55 && bb < 55 && mb < 55 ) || ( tb < 55 && bb >= 55 && mb < 55 ) || ( tb < 55 && bb < 55 && mb >= 55 ) ) printf ( ""jedan student je polozio."" ) ; return 0 ; }","#include <stdio.h> int main ( ) { double bt , bb , bm , ip , iip , p , z , zi , ipb , iipb , pb , zb , zib , ipm , iipm , pm , zm , zim ; int ot , ob , om ; printf ( ""unesite bodove za tarika:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ip ) ; if ( ip > 20 || ip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iip ) ; if ( iip > 20 || iip < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & p ) ; if ( p > 10 || p < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & z ) ; if ( z > 10 || z < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zi ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bt = ip + iip + p + z + zi ; printf ( ""unesite bodove za bojana:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipb ) ; if ( ipb > 20 || ipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipb ) ; if ( iipb > 20 || iipb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pb ) ; if ( pb > 10 || pb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zb ) ; if ( zb > 10 || zb < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zib ) ; if ( zib > 40 || zib < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bb = ipb + iipb + pb + zb + zib ; printf ( ""unesite bodove za mirzu:\n"" ) ; printf ( ""i parcijalni ispit: "" ) ; scanf ( ""%lf"" , & ipm ) ; if ( ipm > 20 || ipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""ii parcijalni ispit: "" ) ; scanf ( ""%lf"" , & iipm ) ; if ( iipm > 20 || iipm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""prisustvo: "" ) ; scanf ( ""%lf"" , & pm ) ; if ( pm > 10 || pm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zadace: "" ) ; scanf ( ""%lf"" , & zm ) ; if ( zm > 10 || zm < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } printf ( ""zavrsni ispit: "" ) ; scanf ( ""%lf"" , & zim ) ; if ( zi > 40 || zi < 0 ) { printf ( ""neispravan broj bodova"" ) ; return 0 ; } bm = ipm + iipm + pm + zm + zim ; if ( bt >= 55 && bt < 65 ) ot = 6 ; else if ( bt >= 64 && bt < 75 ) ot = 7 ; else if ( bt >= 75 && bt < 85 ) ot = 8 ; else if ( bt >= 85 && bt < 92 ) ot = 9 ; else if ( bt >= 92 && bt <= 100 ) ot = 10 ; else ot = 0 ; if ( bb >= 55 && bb < 65 ) ob = 6 ; else if ( bb >= 65 && bb < 75 ) ob = 7 ; else if ( bb >= 75 && bb < 85 ) ob = 8 ; else if ( bb >= 85 && bb < 92 ) ob = 9 ; else if ( bb >= 92 && bb <= 100 ) ob = 10 ; else ob = 1 ; if ( bm >= 55 && bm < 65 ) om = 6 ; else if ( bm >= 65 && bm < 75 ) om = 7 ; else if ( bm >= 75 && bm < 85 ) om = 8 ; else if ( bm >= 85 && bm < 92 ) om = 9 ; else if ( bm >= 92 && bm <= 100 ) om = 10 ; else om = 2 ; if ( bt < 55 && bb < 55 && bm < 55 ) printf ( ""nijedan student nije polozio."" ) ; if ( ot >= 6 && ob >= 6 && om >= 6 ) { printf ( ""sva tri studenta su polozila."" ) ; if ( ot == ob && ob == om ) printf ( ""\nsva tri studenta imaju istu ocjenu."" ) ; else if ( ( ot == ob || ob == om || om == ot ) ) printf ( ""\ndva od tri studenta imaju istu ocjenu."" ) ; else printf ( ""\nsvaki student ima razlicitu ocjenu."" ) ; } if ( ( ot >= 6 && ob < 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob < 6 && om >= 6 ) ) printf ( ""jedan student je polozio."" ) ; if ( ( ot >= 6 && ob >= 6 && om < 6 ) || ( ot < 6 && ob >= 6 && om >= 6 ) || ( ot >= 6 && ob < 6 && om >= 6 ) ) printf ( ""dva studenta su polozila."" ) ; return 0 ; }"
6511,81,81,1,59,A2016/Z3/Z2/student3108,A2016/Z3/Z2/student8665,"#include <stdio.h> int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 ; if ( n == 1 ) return 1 ; for ( ; ; ) { broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; } } int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , index1 = 0 , index2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ index1 ] ; index1 ++ ; } else { niz [ i ] = pomocni2 [ index2 ] ; index2 ++ ; } } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i , n ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; n = izbaci ( niz , 20 ) ; if ( n == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < n - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ n - 1 ] ) ; }","#include <stdio.h> int sumacifara ( int n ) { int suma = 0 ; if ( n < 0 ) n *= ( - 1 ) ; while ( n > 0 ) { suma += n % 10 ; n /= 10 ; } return suma ; } void ubaci ( int * niz , int vel ) { int pomocni1 [ 10 ] , pomocni2 [ 10 ] , i , indeks1 = 0 , indeks2 = 0 ; for ( i = 0 ; i < vel ; i ++ ) { pomocni1 [ i ] = niz [ i ] ; pomocni2 [ i ] = sumacifara ( niz [ i ] ) ; } for ( i = 0 ; i < 2 * vel ; i ++ ) { if ( i % 2 == 0 ) { niz [ i ] = pomocni1 [ indeks1 ] ; indeks1 ++ ; } else { niz [ i ] = pomocni2 [ indeks2 ] ; indeks2 ++ ; } } } int fibonacci ( int n ) { int broj1 = 1 , broj2 = 1 , broj3 = 1 ; for ( ; ; ) { if ( n == broj3 ) return 1 ; if ( broj3 > n ) return 0 ; broj3 = broj1 + broj2 ; broj1 = broj2 ; broj2 = broj3 ; } } int izbaci ( int * niz , int vel ) { int i , j ; for ( i = 0 ; i < vel ; i ++ ) { if ( fibonacci ( niz [ i ] ) == 1 ) { for ( j = i ; j < vel - 1 ; j ++ ) niz [ j ] = niz [ j + 1 ] ; vel -- ; i -- ; } } return vel ; } int main ( ) { int niz [ 20 ] , i = 0 , broj = 1 ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , 10 ) ; broj = izbaci ( niz , 20 ) ; if ( broj == 0 ) { printf ( ""prazan niz."" ) ; return 0 ; } printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < broj - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ broj - 1 ] ) ; return 0 ; }"
6524,96,96,1,17,A2016/Z1/Z2/student5741,A2016/Z1/Z2/student1120,"#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }","#include <stdio.h> int main ( ) { float a1 , b1 , a2 , b2 , x , y ; printf ( ""unesite a1,b1,a2,b2: "" ) ; scanf ( ""%f,%f,%f,%f"" , & a1 , & b1 , & a2 , & b2 ) ; if ( a1 == a2 && b1 != b2 ) { printf ( ""paralelne su"" ) ; } else if ( a1 == a2 && b1 == b2 ) { printf ( ""poklapaju se"" ) ; } else { x = ( b2 - b1 ) / ( a1 - a2 ) ; y = a1 * x + b1 ; printf ( ""prave se sijeku u tacci (%.1f,%.1f)"" , x , y ) ; } return 0 ; }"
6527,41,41,1,47,A2016/Z3/Z2/student9097,A2016/Z3/Z2/student8864,"#include <stdio.h> #include <stdlib.h> int suma ( int p1 ) { int s = 0 ; while ( p1 > 0 ) { s = s + p1 % 10 ; p1 = p1 / 10 ; } return s ; } void ubaci ( int niz [ ] , int n ) { int * p , i , * q , p1 ; for ( i = n - 1 ; i >= 0 ; i -- ) { q = niz + i ; p = niz + i * 2 ; * p = ( * q ) ; } for ( i = 0 ; i < 2 * n ; i = i + 2 ) { p = niz + i ; q = p + 1 ; p1 = abs ( * p ) ; * q = suma ( p1 ) ; } } int izbaci ( int niz [ ] , int n ) { int niz1 [ 1111 ] = { 0 } , max , i = 0 , j , k = 2 , w , z , m = niz [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( m < niz [ i ] ) { m = niz [ i ] ; } } max = m ; niz1 [ 0 ] = 1 ; niz1 [ 1 ] = 1 ; for ( j = 2 ; j < 1111 ; j ++ ) { niz1 [ j ] = niz1 [ j - 2 ] + niz1 [ j - 1 ] ; k ++ ; if ( niz1 [ j ] > max ) { break ; } } k -- ; w = n ; i = 0 ; for ( i = 0 ; i < w ; i ++ ) { for ( j = 1 ; j < k ; j ++ ) { if ( niz [ i ] == niz1 [ j ] ) { for ( z = i ; z < w - 1 ; z ++ ) { niz [ z ] = niz [ z + 1 ] ; } w -- ; i -- ; break ; } } } return w ; } int main ( ) { int niz [ 20 ] , i , n = 10 , a , b ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; a = 2 * n ; b = izbaci ( niz , a ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < b - 1 ; i ++ ) { printf ( ""%d, "" , niz [ i ] ) ; } printf ( ""%d."" , niz [ i ] ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int sum ( int br ) { int suma = 0 , cifra = 0 ; while ( br > 0 ) { cifra = br % 10 ; suma += cifra ; br = br / 10 ; } return suma ; } void ubaci ( int p [ ] , int n ) { int * q , * z ; int i = 2 * n ; int k ; for ( i = n - 1 ; i >= 0 ; i -= 1 ) { z = p + i * 2 ; q = p + i ; * z = * q ; } for ( i = 0 ; i < 2 * n ; i += 2 ) { z = p + i ; q = z + 1 ; k = abs ( * z ) ; * q = sum ( k ) ; } } int izbaci ( int p [ ] , int n ) { int f [ 1000 ] = { 0 } ; int max , z = 2 , i , j , k , n2 ; max = p [ 0 ] ; for ( i = 0 ; i < n ; i ++ ) { if ( max < p [ i ] ) { max = p [ i ] ; } } f [ 0 ] = 1 ; f [ 1 ] = 1 ; for ( i = 2 ; i < 1000 ; i ++ ) { f [ i ] = f [ i - 1 ] + f [ i - 2 ] ; if ( f [ i ] > max ) break ; else ( z ++ ) ; } n2 = n ; for ( i = 0 ; i < n2 ; i ++ ) { for ( j = 0 ; j < z ; j ++ ) { if ( p [ i ] == f [ j ] ) { for ( k = i ; k < n2 - 1 ; k ++ ) { p [ k ] = p [ k + 1 ] ; } n2 -- ; i -- ; break ; } } } return n2 ; } int main ( ) { int i , niz [ 20 ] = { 0 } , n = 10 , izlaz ; printf ( ""unesite niz od 10 brojeva: "" ) ; for ( i = 0 ; i < 10 ; i ++ ) { scanf ( ""%d"" , & niz [ i ] ) ; } ubaci ( niz , n ) ; n = n * 2 ; izlaz = izbaci ( niz , n ) ; printf ( ""modificirani niz glasi: "" ) ; for ( i = 0 ; i < izlaz ; i ++ ) { if ( i == izlaz - 1 ) { printf ( ""%d."" , niz [ i ] ) ; } else { printf ( ""%d, "" , niz [ i ] ) ; } } return 0 ; }"
6529,34,34,1,29,A2016/Z4/Z1/student2908,A2016/Z4/Z1/student2210,"#include <stdio.h> char * izbaci_najcescu ( char * s ) { int brojaci [ 100 ] , i = 0 , j ; int razmak = 1 , broj_rijeci = 0 , maxi ; char * pocetak ; char * p , * x , * r ; x = s ; p = s ; r = s ; while ( * p != '\0' ) { while ( * r != ' ' && * r != '\n' && * r != '\0' ) r ++ ; while ( * p != ' ' && * p != '\n' && * r != ' ' && * r != '\n' ) { if ( * p ++ == * ++ r ) continue ; else break ; } if ( ( * p == ' ' || * p == '\n' || * p != '\0' ) && ( * r != ' ' || * r != '\n' || * r != '\0' ) ) brojaci [ i ] ++ ; p = x ; if ( r == '\0' ) { while ( * p != ' ' && * p != '\n' ) p ++ ; x = ++ p ; i ++ ; r = p ; } else while ( * r ++ != ' ' && * r != '\n' && * r != '\0' ) ; } x = s ; maxi = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojaci [ i ] > brojaci [ maxi ] ) maxi = i ; } while ( * s != '\0' ) { if ( * s == ' ' ) razmak = 1 ; else if ( razmak == 1 ) { razmak = 0 ; if ( * s == ' ' ) razmak = 0 ; broj_rijeci ++ ; if ( broj_rijeci == i ) pocetak = s ; if ( broj_rijeci == i + 1 ) { while ( * pocetak ++ = * s ++ ) ; return x ; } } s ++ ; } if ( broj_rijeci == i ) * pocetak = '\0' ; return x ; } int main ( ) { char s [ 100 ] = ""nermana nermana emir nermana emir emir emir"" ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }","#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; if ( znak == '\n' ) znak = getchar ( ) ; int i = 0 ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } char * izbaci_najcescu ( char * s ) { int i = 0 , brojac [ 1000 ] , raz = 1 , br_rijec = 0 , j ; char * poc ; char * a ; char * b ; char * c ; a = s , b = s , c = s ; while ( * a != '\0' ) { while ( * b != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) b ++ ; while ( ( * a != ' ' || * a != '\n' || * a != '-' ) && ( * b != ' ' || * b != '\n' || * b != '-' ) ) { if ( * a ++ == * b ++ ) continue ; else { break ; } } if ( ( * a == ' ' || * a == '\n' || * a == '\0' || * a == '-' ) && ( * b == ' ' || * b == '\n' || * b == '\0' || * b == '-' ) ) brojac [ i ] ++ ; a = c ; if ( * b != '\0' ) { while ( * a != ' ' && * a != '\n' && * a != '\0' && * a != '-' ) a ++ ; c = ++ a ; i ++ ; b = a ; } else while ( * b ++ != ' ' && * b != '\n' && * b != '\0' && * b != '-' ) ; } c = s ; int max = 0 ; for ( j = 0 ; j < i ; j ++ ) { if ( brojac [ max ] < brojac [ i ] ) max = i ; } while ( * s != '\0' ) { if ( * s == ' ' || * s == '-' ) { raz = 1 ; } else if ( raz == 1 ) { raz = 0 ; if ( * s == ' ' || * s == '-' ) raz = 0 ; br_rijec ++ ; if ( br_rijec == i ) poc = s ; if ( br_rijec == i + 1 ) { while ( * poc ++ = * s ++ ) ; return c ; } } s ++ ; } if ( br_rijec == i ) * poc == '\0' ; return c ; } int main ( ) { char s [ 1000 ] ; printf ( ""unesi string: "" ) ; unesi ( s , 1000 ) ; printf ( ""%s"" , izbaci_najcescu ( s ) ) ; return 0 ; }"
6556,54,54,1,78,A2016/Z4/Z4/student3872,A2016/Z4/Z4/student1616,"#include <stdio.h> void unesi ( char niz [ ] , int velicina ) { char znak = getchar ( ) ; int i = 0 ; if ( znak == '\n' ) znak = getchar ( ) ; while ( i < velicina - 1 && znak != '\n' ) { niz [ i ] = znak ; i ++ ; znak = getchar ( ) ; } niz [ i ] = '\0' ; } void broj ( char * pok , char * kpok , float * x , float * y ) { char * s = pok ; int negativni ; double a , b ; * x = 0 , * y = 0 ; while ( s != kpok ) { s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * x = * x * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; a = 0 ; while ( * s >= '0' && * s <= '9' ) { a = a * 10 + ( * s - '0' ) ; s ++ ; } while ( a >= 1 ) a = a / 10 ; * x += a ; } if ( negativni ) * x = * x * ( - 1 ) ; if ( * s == ',' ) s ++ ; negativni = 0 ; if ( * s == '-' ) { negativni = 1 ; s ++ ; } while ( * s >= '0' && * s <= '9' ) { * y = * y * 10 + ( * s - '0' ) ; s ++ ; } if ( * s == '.' ) { s ++ ; b = 0 ; while ( * s >= '0' && * s <= '9' ) { b = b * 10 + ( * s - '0' ) ; s ++ ; } while ( b >= 1 ) b = b / 10 ; * y += b ; } if ( negativni ) * y = * y * ( - 1 ) ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pok , * kpok ; char * izbaci ; float x , y ; while ( * s != '\0' ) { if ( * s == '(' ) { pok = s ; while ( * s != ')' ) s ++ ; kpok = s ; broj ( pok , kpok , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { s ++ ; while ( * s == ',' ) s ++ ; izbaci = s ; while ( * izbaci != '\0' ) { * pok ++ = * izbaci ++ ; } * pok = '\0' ; s = s - ( izbaci - pok ) ; } } else s ++ ; } if ( s != p ) s -- ; if ( * s == ',' ) * s = '\0' ; return p ; } int main ( ) { char text [ 100 ] ; printf ( ""unesite neki text: "" ) ; unesi ( text , 100 ) ; char * novi = text ; novi = obuhvat ( text , - 10 , - 10 , 5 , 5 ) ; printf ( ""%s\n"" , text ) ; printf ( ""%s\n"" , novi ) ; return 0 ; }","#include <stdio.h> int provjera_cifri ( char * s ) { char * p = s ; int brojac = 0 ; while ( * p != '\0' ) { if ( * p == '(' || * p == ',' ) { p ++ ; if ( * p >= '0' && * p <= '9' || * p == '-' ) { while ( * p >= '0' && * p <= '9' || * p == '-' || * p == '.' ) p ++ ; if ( * p == ',' || * p == ')' ) brojac ++ ; } } else if ( * p = ')' ) { p ++ ; if ( * p != ',' ) return 0 ; } } return brojac ; } int provjera_stringa ( char * s ) { char * p = s ; while ( * p != '\0' ) { if ( * p != ')' || * p != '(' || * p != '-' || * p != ',' || * p != '.' || ! ( * p >= '0' && * p <= '9' ) ) return 0 ; else if ( provjera_cifri ( s ) != 8 ) return 0 ; } return 1 ; } void dajbroj ( char * pt , char * kt , float * x , float * y ) { char * p = pt ; int neg ; float a , b ; * x = 0 ; * y = 0 ; while ( p != kt ) { p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * x = 0 ; while ( * p >= '0' && * p <= '9' ) { * x = * x * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; a = 0 ; while ( * p >= '0' && * p <= '9' ) { a = a * 10 + ( * p - '0' ) ; p ++ ; } while ( a >= 1 ) a /= 10 ; * x = * x + a ; } if ( neg == 1 ) * x *= - 1 ; if ( * p == ',' ) p ++ ; neg = 0 ; if ( * p == '-' ) { neg = 1 ; p ++ ; } * y = 0 ; while ( * p >= '0' && * p <= '9' ) { * y = * y * 10 + ( * p - '0' ) ; p ++ ; } if ( * p == '.' ) { p ++ ; b = 0 ; while ( * p >= '0' && * p <= '9' ) { b = b * 10 + ( * p - '0' ) ; p ++ ; } while ( b >= 1 ) b /= 10 ; * y = * y + b ; } if ( neg == 1 ) * y *= - 1 ; } } char * obuhvat ( char * s , float x1 , float y1 , float x2 , float y2 ) { char * p = s ; char * pt , * kt , * izb ; float x , y ; while ( * p != '\0' ) { if ( * p == '(' ) { pt = p ; while ( * p != ')' ) p ++ ; kt = p ; dajbroj ( pt , kt , & x , & y ) ; if ( x < x1 || x > x2 || y < y1 || y > y2 ) { p ++ ; while ( * p == ',' ) p ++ ; izb = p ; while ( * izb != '\0' ) { * pt ++ = * izb ++ ; } * pt = '\0' ; p = p - ( izb - pt ) ; } } else p ++ ; } if ( p != s ) p -- ; if ( * p == ',' ) * p = '\0' ; return s ; } int main ( ) { char s [ ] = """" ; if ( provjera_stringa ( s ) == 1 ) { float x1 , x2 , y1 , y2 ; char * rez = obuhvat ( s , - 3 , - 3 , 3 , 3 ) ; printf ( ""%s %s\n"" , rez , s ) ; } else printf ( ""0 0 0 0 0"" ) ; return 0 ; }"
6580,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
6582,51,51,1,12,A2016/Z2/Z1/student5380,A2016/Z2/Z1/student6054,"#include <stdio.h> #include <stdlib.h> int main ( ) { int n , m = 0 , x = 1 , c1 , c2 , r ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & n ) ; n = abs ( n ) ; if ( n < 10 ) { printf ( ""0"" ) ; return 0 ; } do { c1 = n % 10 ; n = n / 10 ; c2 = n % 10 ; r = abs ( c1 - c2 ) ; m = m + x * r ; x = x * 10 ; } while ( n > 9 ) ; printf ( ""%d"" , m ) ; return 0 ; }","#include <stdio.h> #include <stdlib.h> int main ( ) { int broj , rezultat , cifra1 , cifra2 , nbroj = 0 , p = 1 ; printf ( ""unesite broj: "" ) ; scanf ( ""%d"" , & broj ) ; if ( broj < 0 ) { broj = ( abs ( broj ) ) ; } if ( broj < 10 ) { printf ( ""0"" ) ; return 0 ; } else { do { cifra1 = broj % 10 ; broj = broj / 10 ; cifra2 = broj % 10 ; rezultat = abs ( cifra1 - cifra2 ) ; nbroj = nbroj + ( p * rezultat ) ; p = p * 10 ; } while ( broj > 9 ) ; printf ( ""%d"" , nbroj ) ; } return 0 ; }"
